// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/foundation/domain/file/service (interfaces: FileService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/file_service.go -package=mocks . FileService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	file "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file"
	gomock "go.uber.org/mock/gomock"
)

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
	isgomock struct{}
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// SignDownLoadFile mocks base method.
func (m *MockFileService) SignDownLoadFile(ctx context.Context, req *file.SignDownloadFileRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignDownLoadFile", ctx, req)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignDownLoadFile indicates an expected call of SignDownLoadFile.
func (mr *MockFileServiceMockRecorder) SignDownLoadFile(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignDownLoadFile", reflect.TypeOf((*MockFileService)(nil).SignDownLoadFile), ctx, req)
}

// SignUploadFile mocks base method.
func (m *MockFileService) SignUploadFile(ctx context.Context, req *file.SignUploadFileRequest) ([]string, []*file.SignHead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUploadFile", ctx, req)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]*file.SignHead)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignUploadFile indicates an expected call of SignUploadFile.
func (mr *MockFileServiceMockRecorder) SignUploadFile(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUploadFile", reflect.TypeOf((*MockFileService)(nil).SignUploadFile), ctx, req)
}

// UploadLoopFile mocks base method.
func (m *MockFileService) UploadLoopFile(ctx context.Context, fileHeader *multipart.FileHeader, spaceID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadLoopFile", ctx, fileHeader, spaceID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadLoopFile indicates an expected call of UploadLoopFile.
func (mr *MockFileServiceMockRecorder) UploadLoopFile(ctx, fileHeader, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadLoopFile", reflect.TypeOf((*MockFileService)(nil).UploadLoopFile), ctx, fileHeader, spaceID)
}
