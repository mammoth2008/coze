// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/foundation/domain/user/repo (interfaces: IUserRepo)
//
// Generated by this command:
//
//	mockgen -destination=mocks/user_repo.go -package=mocks . IUserRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/foundation/domain/user/entity"
	repo "github.com/coze-dev/coze-loop/backend/modules/foundation/domain/user/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserRepo is a mock of IUserRepo interface.
type MockIUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepoMockRecorder
	isgomock struct{}
}

// MockIUserRepoMockRecorder is the mock recorder for MockIUserRepo.
type MockIUserRepoMockRecorder struct {
	mock *MockIUserRepo
}

// NewMockIUserRepo creates a new mock instance.
func NewMockIUserRepo(ctrl *gomock.Controller) *MockIUserRepo {
	mock := &MockIUserRepo{ctrl: ctrl}
	mock.recorder = &MockIUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepo) EXPECT() *MockIUserRepoMockRecorder {
	return m.recorder
}

// CheckEmailExist mocks base method.
func (m *MockIUserRepo) CheckEmailExist(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailExist", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmailExist indicates an expected call of CheckEmailExist.
func (mr *MockIUserRepoMockRecorder) CheckEmailExist(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailExist", reflect.TypeOf((*MockIUserRepo)(nil).CheckEmailExist), ctx, email)
}

// CheckUniqueNameExist mocks base method.
func (m *MockIUserRepo) CheckUniqueNameExist(ctx context.Context, uniqueName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUniqueNameExist", ctx, uniqueName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUniqueNameExist indicates an expected call of CheckUniqueNameExist.
func (mr *MockIUserRepoMockRecorder) CheckUniqueNameExist(ctx, uniqueName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUniqueNameExist", reflect.TypeOf((*MockIUserRepo)(nil).CheckUniqueNameExist), ctx, uniqueName)
}

// CheckUserSpaceExist mocks base method.
func (m *MockIUserRepo) CheckUserSpaceExist(ctx context.Context, userID, spaceID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserSpaceExist", ctx, userID, spaceID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserSpaceExist indicates an expected call of CheckUserSpaceExist.
func (mr *MockIUserRepoMockRecorder) CheckUserSpaceExist(ctx, userID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserSpaceExist", reflect.TypeOf((*MockIUserRepo)(nil).CheckUserSpaceExist), ctx, userID, spaceID)
}

// ClearSessionKey mocks base method.
func (m *MockIUserRepo) ClearSessionKey(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearSessionKey", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearSessionKey indicates an expected call of ClearSessionKey.
func (mr *MockIUserRepoMockRecorder) ClearSessionKey(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSessionKey", reflect.TypeOf((*MockIUserRepo)(nil).ClearSessionKey), ctx, userID)
}

// CreateSpace mocks base method.
func (m *MockIUserRepo) CreateSpace(ctx context.Context, space *entity.Space) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpace", ctx, space)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSpace indicates an expected call of CreateSpace.
func (mr *MockIUserRepoMockRecorder) CreateSpace(ctx, space any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpace", reflect.TypeOf((*MockIUserRepo)(nil).CreateSpace), ctx, space)
}

// CreateUser mocks base method.
func (m *MockIUserRepo) CreateUser(ctx context.Context, user *entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserRepoMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserRepo)(nil).CreateUser), ctx, user)
}

// GetSpaceByID mocks base method.
func (m *MockIUserRepo) GetSpaceByID(ctx context.Context, spaceID int64) (*entity.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceByID", ctx, spaceID)
	ret0, _ := ret[0].(*entity.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpaceByID indicates an expected call of GetSpaceByID.
func (mr *MockIUserRepoMockRecorder) GetSpaceByID(ctx, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceByID", reflect.TypeOf((*MockIUserRepo)(nil).GetSpaceByID), ctx, spaceID)
}

// GetUserByEmail mocks base method.
func (m *MockIUserRepo) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIUserRepoMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIUserRepo)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockIUserRepo) GetUserByID(ctx context.Context, userID int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockIUserRepoMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockIUserRepo)(nil).GetUserByID), ctx, userID)
}

// ListUserSpace mocks base method.
func (m *MockIUserRepo) ListUserSpace(ctx context.Context, userID int64, pageSize, pageNum int32) ([]*entity.Space, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserSpace", ctx, userID, pageSize, pageNum)
	ret0, _ := ret[0].([]*entity.Space)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserSpace indicates an expected call of ListUserSpace.
func (mr *MockIUserRepoMockRecorder) ListUserSpace(ctx, userID, pageSize, pageNum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserSpace", reflect.TypeOf((*MockIUserRepo)(nil).ListUserSpace), ctx, userID, pageSize, pageNum)
}

// MGetSpaceByIDs mocks base method.
func (m *MockIUserRepo) MGetSpaceByIDs(ctx context.Context, spaceIDs []int64) ([]*entity.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetSpaceByIDs", ctx, spaceIDs)
	ret0, _ := ret[0].([]*entity.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetSpaceByIDs indicates an expected call of MGetSpaceByIDs.
func (mr *MockIUserRepoMockRecorder) MGetSpaceByIDs(ctx, spaceIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetSpaceByIDs", reflect.TypeOf((*MockIUserRepo)(nil).MGetSpaceByIDs), ctx, spaceIDs)
}

// MGetUserByIDs mocks base method.
func (m *MockIUserRepo) MGetUserByIDs(ctx context.Context, userIDs []int64) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetUserByIDs", ctx, userIDs)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetUserByIDs indicates an expected call of MGetUserByIDs.
func (mr *MockIUserRepoMockRecorder) MGetUserByIDs(ctx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetUserByIDs", reflect.TypeOf((*MockIUserRepo)(nil).MGetUserByIDs), ctx, userIDs)
}

// UpdateAvatar mocks base method.
func (m *MockIUserRepo) UpdateAvatar(ctx context.Context, userID int64, iconURI string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", ctx, userID, iconURI)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvatar indicates an expected call of UpdateAvatar.
func (mr *MockIUserRepoMockRecorder) UpdateAvatar(ctx, userID, iconURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockIUserRepo)(nil).UpdateAvatar), ctx, userID, iconURI)
}

// UpdatePassword mocks base method.
func (m *MockIUserRepo) UpdatePassword(ctx context.Context, userID int64, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIUserRepoMockRecorder) UpdatePassword(ctx, userID, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIUserRepo)(nil).UpdatePassword), ctx, userID, password)
}

// UpdateProfile mocks base method.
func (m *MockIUserRepo) UpdateProfile(ctx context.Context, userID int64, param *repo.UpdateProfileParam) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, userID, param)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockIUserRepoMockRecorder) UpdateProfile(ctx, userID, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIUserRepo)(nil).UpdateProfile), ctx, userID, param)
}

// UpdateSessionKey mocks base method.
func (m *MockIUserRepo) UpdateSessionKey(ctx context.Context, userID int64, sessionKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionKey", ctx, userID, sessionKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionKey indicates an expected call of UpdateSessionKey.
func (mr *MockIUserRepoMockRecorder) UpdateSessionKey(ctx, userID, sessionKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionKey", reflect.TypeOf((*MockIUserRepo)(nil).UpdateSessionKey), ctx, userID, sessionKey)
}
