// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/foundation/infra/repo/mysql (interfaces: ISpaceUserDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/space_user_dao.go -package=mocks . ISpaceUserDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/foundation/infra/repo/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockISpaceUserDAO is a mock of ISpaceUserDAO interface.
type MockISpaceUserDAO struct {
	ctrl     *gomock.Controller
	recorder *MockISpaceUserDAOMockRecorder
	isgomock struct{}
}

// MockISpaceUserDAOMockRecorder is the mock recorder for MockISpaceUserDAO.
type MockISpaceUserDAOMockRecorder struct {
	mock *MockISpaceUserDAO
}

// NewMockISpaceUserDAO creates a new mock instance.
func NewMockISpaceUserDAO(ctrl *gomock.Controller) *MockISpaceUserDAO {
	mock := &MockISpaceUserDAO{ctrl: ctrl}
	mock.recorder = &MockISpaceUserDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISpaceUserDAO) EXPECT() *MockISpaceUserDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISpaceUserDAO) Create(ctx context.Context, spaceUser *model.SpaceUser, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceUser}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockISpaceUserDAOMockRecorder) Create(ctx, spaceUser any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceUser}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISpaceUserDAO)(nil).Create), varargs...)
}

// List mocks base method.
func (m *MockISpaceUserDAO) List(ctx context.Context, userID int64, pageSize, pageNumber int32, opts ...db.Option) ([]*model.SpaceUser, int32, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, userID, pageSize, pageNumber}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*model.SpaceUser)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockISpaceUserDAOMockRecorder) List(ctx, userID, pageSize, pageNumber any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, userID, pageSize, pageNumber}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockISpaceUserDAO)(nil).List), varargs...)
}
