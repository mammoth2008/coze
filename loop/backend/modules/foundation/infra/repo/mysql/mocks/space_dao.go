// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/foundation/infra/repo/mysql (interfaces: ISpaceDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/space_dao.go -package=mocks . ISpaceDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/foundation/infra/repo/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockISpaceDAO is a mock of ISpaceDAO interface.
type MockISpaceDAO struct {
	ctrl     *gomock.Controller
	recorder *MockISpaceDAOMockRecorder
	isgomock struct{}
}

// MockISpaceDAOMockRecorder is the mock recorder for MockISpaceDAO.
type MockISpaceDAOMockRecorder struct {
	mock *MockISpaceDAO
}

// NewMockISpaceDAO creates a new mock instance.
func NewMockISpaceDAO(ctrl *gomock.Controller) *MockISpaceDAO {
	mock := &MockISpaceDAO{ctrl: ctrl}
	mock.recorder = &MockISpaceDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISpaceDAO) EXPECT() *MockISpaceDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISpaceDAO) Create(ctx context.Context, space *model.Space, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, space}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockISpaceDAOMockRecorder) Create(ctx, space any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, space}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISpaceDAO)(nil).Create), varargs...)
}

// GetByID mocks base method.
func (m *MockISpaceDAO) GetByID(ctx context.Context, spaceID int64, opts ...db.Option) (*model.Space, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*model.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockISpaceDAOMockRecorder) GetByID(ctx, spaceID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockISpaceDAO)(nil).GetByID), varargs...)
}

// MGetByIDs mocks base method.
func (m *MockISpaceDAO) MGetByIDs(ctx context.Context, spaceIDs []int64, opts ...db.Option) ([]*model.Space, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceIDs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetByIDs", varargs...)
	ret0, _ := ret[0].([]*model.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetByIDs indicates an expected call of MGetByIDs.
func (mr *MockISpaceDAOMockRecorder) MGetByIDs(ctx, spaceIDs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceIDs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetByIDs", reflect.TypeOf((*MockISpaceDAO)(nil).MGetByIDs), varargs...)
}
