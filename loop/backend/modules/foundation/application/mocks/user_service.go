// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user (interfaces: UserService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/user_service.go -package=mocks github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user UserService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	user "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockUserService) GetUserInfo(ctx context.Context, request *user.GetUserInfoRequest) (*user.GetUserInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, request)
	ret0, _ := ret[0].(*user.GetUserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserServiceMockRecorder) GetUserInfo(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserService)(nil).GetUserInfo), ctx, request)
}

// GetUserInfoByToken mocks base method.
func (m *MockUserService) GetUserInfoByToken(ctx context.Context, request *user.GetUserInfoByTokenRequest) (*user.GetUserInfoByTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByToken", ctx, request)
	ret0, _ := ret[0].(*user.GetUserInfoByTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByToken indicates an expected call of GetUserInfoByToken.
func (mr *MockUserServiceMockRecorder) GetUserInfoByToken(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByToken", reflect.TypeOf((*MockUserService)(nil).GetUserInfoByToken), ctx, request)
}

// LoginByPassword mocks base method.
func (m *MockUserService) LoginByPassword(ctx context.Context, request *user.LoginByPasswordRequest) (*user.LoginByPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginByPassword", ctx, request)
	ret0, _ := ret[0].(*user.LoginByPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginByPassword indicates an expected call of LoginByPassword.
func (mr *MockUserServiceMockRecorder) LoginByPassword(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByPassword", reflect.TypeOf((*MockUserService)(nil).LoginByPassword), ctx, request)
}

// Logout mocks base method.
func (m *MockUserService) Logout(ctx context.Context, request *user.LogoutRequest) (*user.LogoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, request)
	ret0, _ := ret[0].(*user.LogoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockUserServiceMockRecorder) Logout(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserService)(nil).Logout), ctx, request)
}

// MGetUserInfo mocks base method.
func (m *MockUserService) MGetUserInfo(ctx context.Context, request *user.MGetUserInfoRequest) (*user.MGetUserInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetUserInfo", ctx, request)
	ret0, _ := ret[0].(*user.MGetUserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetUserInfo indicates an expected call of MGetUserInfo.
func (mr *MockUserServiceMockRecorder) MGetUserInfo(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetUserInfo", reflect.TypeOf((*MockUserService)(nil).MGetUserInfo), ctx, request)
}

// ModifyUserProfile mocks base method.
func (m *MockUserService) ModifyUserProfile(ctx context.Context, request *user.ModifyUserProfileRequest) (*user.ModifyUserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyUserProfile", ctx, request)
	ret0, _ := ret[0].(*user.ModifyUserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyUserProfile indicates an expected call of ModifyUserProfile.
func (mr *MockUserServiceMockRecorder) ModifyUserProfile(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyUserProfile", reflect.TypeOf((*MockUserService)(nil).ModifyUserProfile), ctx, request)
}

// Register mocks base method.
func (m *MockUserService) Register(ctx context.Context, request *user.UserRegisterRequest) (*user.UserRegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, request)
	ret0, _ := ret[0].(*user.UserRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), ctx, request)
}

// ResetPassword mocks base method.
func (m *MockUserService) ResetPassword(ctx context.Context, request *user.ResetPasswordRequest) (*user.ResetPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx, request)
	ret0, _ := ret[0].(*user.ResetPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUserServiceMockRecorder) ResetPassword(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserService)(nil).ResetPassword), ctx, request)
}
