// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"github.com/coze-dev/coze-loop/backend/infra/db"
	"github.com/coze-dev/coze-loop/backend/infra/idgen"
	"github.com/coze-dev/coze-loop/backend/infra/limiter"
	"github.com/coze-dev/coze-loop/backend/infra/redis"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth/authservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/manage"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/runtime"
	"github.com/coze-dev/coze-loop/backend/modules/llm/domain/service"
	"github.com/coze-dev/coze-loop/backend/modules/llm/domain/service/llmfactory"
	"github.com/coze-dev/coze-loop/backend/modules/llm/infra/config"
	"github.com/coze-dev/coze-loop/backend/modules/llm/infra/repo"
	"github.com/coze-dev/coze-loop/backend/modules/llm/infra/repo/dao"
	"github.com/coze-dev/coze-loop/backend/modules/llm/infra/rpc"
	"github.com/coze-dev/coze-loop/backend/pkg/conf"
	"context"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitRuntimeApplication(ctx context.Context, idGen idgen.IIDGenerator, configFactory conf.IConfigLoaderFactory, db2 db.Provider, redis2 redis.Cmdable, factory limiter.IRateLimiterFactory) (runtime.LLMRuntimeService, error) {
	iConfigManage, err := config.NewManage(ctx, configFactory)
	if err != nil {
		return nil, err
	}
	iManage := service.NewManage(iConfigManage)
	iFactory := llmfactory.NewFactory()
	iModelRequestRecordDao := dao.NewModelRequestRecordDao(db2)
	iRuntimeRepo := repo.NewRuntimeRepo(db2, iModelRequestRecordDao)
	iConfigRuntime, err := config.NewRuntime(ctx, configFactory)
	if err != nil {
		return nil, err
	}
	iRuntime := service.NewRuntime(iFactory, idGen, iRuntimeRepo, iConfigRuntime)
	llmRuntimeService := NewRuntimeApplication(iManage, iRuntime, redis2, factory)
	return llmRuntimeService, nil
}

func InitManageApplication(ctx context.Context, configFactory conf.IConfigLoaderFactory, authClient authservice.Client) (manage.LLMManageService, error) {
	iConfigManage, err := config.NewManage(ctx, configFactory)
	if err != nil {
		return nil, err
	}
	iManage := service.NewManage(iConfigManage)
	iAuthProvider := rpc.NewAuthRPCProvider(authClient)
	llmManageService := NewManageApplication(iManage, iAuthProvider)
	return llmManageService, nil
}

// wire.go:

var (
	llmDomainSet = wire.NewSet(llmfactory.NewFactory, config.NewManage, config.NewRuntime, service.NewRuntime, service.NewManage, repo.NewRuntimeRepo, dao.NewModelRequestRecordDao, rpc.NewAuthRPCProvider)
	runtimeSet   = wire.NewSet(
		NewRuntimeApplication,
		llmDomainSet,
	)
	manageSet = wire.NewSet(
		NewManageApplication,
		llmDomainSet,
	)
)
