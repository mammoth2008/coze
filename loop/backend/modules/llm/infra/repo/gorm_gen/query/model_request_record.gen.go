// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/coze-dev/coze-loop/backend/modules/llm/infra/repo/gorm_gen/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/plugin/dbresolver"
)

func newModelRequestRecord(db *gorm.DB, opts ...gen.DOOption) modelRequestRecord {
	_modelRequestRecord := modelRequestRecord{}

	_modelRequestRecord.modelRequestRecordDo.UseDB(db, opts...)
	_modelRequestRecord.modelRequestRecordDo.UseModel(&model.ModelRequestRecord{})

	tableName := _modelRequestRecord.modelRequestRecordDo.TableName()
	_modelRequestRecord.ALL = field.NewAsterisk(tableName)
	_modelRequestRecord.ID = field.NewInt64(tableName, "id")
	_modelRequestRecord.SpaceID = field.NewInt64(tableName, "space_id")
	_modelRequestRecord.UserID = field.NewString(tableName, "user_id")
	_modelRequestRecord.UsageScene = field.NewString(tableName, "usage_scene")
	_modelRequestRecord.UsageSceneEntityID = field.NewString(tableName, "usage_scene_entity_id")
	_modelRequestRecord.Frame = field.NewString(tableName, "frame")
	_modelRequestRecord.Protocol = field.NewString(tableName, "protocol")
	_modelRequestRecord.ModelIdentification = field.NewString(tableName, "model_identification")
	_modelRequestRecord.ModelAk = field.NewString(tableName, "model_ak")
	_modelRequestRecord.ModelID = field.NewString(tableName, "model_id")
	_modelRequestRecord.ModelName = field.NewString(tableName, "model_name")
	_modelRequestRecord.InputToken = field.NewInt64(tableName, "input_token")
	_modelRequestRecord.OutputToken = field.NewInt64(tableName, "output_token")
	_modelRequestRecord.Logid = field.NewString(tableName, "logid")
	_modelRequestRecord.ErrorCode = field.NewString(tableName, "error_code")
	_modelRequestRecord.ErrorMsg = field.NewString(tableName, "error_msg")
	_modelRequestRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_modelRequestRecord.UpdatedAt = field.NewTime(tableName, "updated_at")

	_modelRequestRecord.fillFieldMap()

	return _modelRequestRecord
}

// modelRequestRecord æ¨¡åž‹æµé‡è®°å½•å¼€æºè¡¨
type modelRequestRecord struct {
	modelRequestRecordDo modelRequestRecordDo

	ALL                 field.Asterisk
	ID                  field.Int64  // è‡ªå¢žä¸»é”®ID
	SpaceID             field.Int64  // ç©ºé—´id
	UserID              field.String  // user id
	UsageScene          field.String // åœºæ™¯
	UsageSceneEntityID  field.String // åœºæ™¯å®žä½“id
	Frame               field.String // ä½¿ç”¨çš„æ¡†æž¶ï¼Œå¦‚eino
	Protocol            field.String // ä½¿ç”¨çš„åè®®ï¼Œå¦‚ark/deepseekç­‰
	ModelIdentification field.String // æ¨¡åž‹å”¯ä¸€æ ‡è¯†
	ModelAk             field.String // æ¨¡åž‹çš„AK
	ModelID             field.String // model id
	ModelName           field.String // æ¨¡åž‹å±•ç¤ºåç§°
	InputToken          field.Int64  // è¾“å…¥tokenæ•°é‡
	OutputToken         field.Int64  // è¾“å‡ºtokenæ•°é‡
	Logid               field.String // logid
	ErrorCode           field.String // error_code
	ErrorMsg            field.String // error_msg
	CreatedAt           field.Time   // åˆ›å»ºæ—¶é—´
	UpdatedAt           field.Time   // æ›´æ–°æ—¶é—´

	fieldMap map[string]field.Expr
}

func (m modelRequestRecord) Table(newTableName string) *modelRequestRecord {
	m.modelRequestRecordDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m modelRequestRecord) As(alias string) *modelRequestRecord {
	m.modelRequestRecordDo.DO = *(m.modelRequestRecordDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *modelRequestRecord) updateTableName(table string) *modelRequestRecord {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.SpaceID = field.NewInt64(table, "space_id")
	m.UserID = field.NewString(table, "user_id")
	m.UsageScene = field.NewString(table, "usage_scene")
	m.UsageSceneEntityID = field.NewString(table, "usage_scene_entity_id")
	m.Frame = field.NewString(table, "frame")
	m.Protocol = field.NewString(table, "protocol")
	m.ModelIdentification = field.NewString(table, "model_identification")
	m.ModelAk = field.NewString(table, "model_ak")
	m.ModelID = field.NewString(table, "model_id")
	m.ModelName = field.NewString(table, "model_name")
	m.InputToken = field.NewInt64(table, "input_token")
	m.OutputToken = field.NewInt64(table, "output_token")
	m.Logid = field.NewString(table, "logid")
	m.ErrorCode = field.NewString(table, "error_code")
	m.ErrorMsg = field.NewString(table, "error_msg")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *modelRequestRecord) WithContext(ctx context.Context) *modelRequestRecordDo {
	return m.modelRequestRecordDo.WithContext(ctx)
}

func (m modelRequestRecord) TableName() string { return m.modelRequestRecordDo.TableName() }

func (m modelRequestRecord) Alias() string { return m.modelRequestRecordDo.Alias() }

func (m modelRequestRecord) Columns(cols ...field.Expr) gen.Columns {
	return m.modelRequestRecordDo.Columns(cols...)
}

func (m *modelRequestRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *modelRequestRecord) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 18)
	m.fieldMap["id"] = m.ID
	m.fieldMap["space_id"] = m.SpaceID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["usage_scene"] = m.UsageScene
	m.fieldMap["usage_scene_entity_id"] = m.UsageSceneEntityID
	m.fieldMap["frame"] = m.Frame
	m.fieldMap["protocol"] = m.Protocol
	m.fieldMap["model_identification"] = m.ModelIdentification
	m.fieldMap["model_ak"] = m.ModelAk
	m.fieldMap["model_id"] = m.ModelID
	m.fieldMap["model_name"] = m.ModelName
	m.fieldMap["input_token"] = m.InputToken
	m.fieldMap["output_token"] = m.OutputToken
	m.fieldMap["logid"] = m.Logid
	m.fieldMap["error_code"] = m.ErrorCode
	m.fieldMap["error_msg"] = m.ErrorMsg
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m modelRequestRecord) clone(db *gorm.DB) modelRequestRecord {
	m.modelRequestRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m modelRequestRecord) replaceDB(db *gorm.DB) modelRequestRecord {
	m.modelRequestRecordDo.ReplaceDB(db)
	return m
}

type modelRequestRecordDo struct{ gen.DO }

func (m modelRequestRecordDo) Debug() *modelRequestRecordDo {
	return m.withDO(m.DO.Debug())
}

func (m modelRequestRecordDo) WithContext(ctx context.Context) *modelRequestRecordDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m modelRequestRecordDo) ReadDB() *modelRequestRecordDo {
	return m.Clauses(dbresolver.Read)
}

func (m modelRequestRecordDo) WriteDB() *modelRequestRecordDo {
	return m.Clauses(dbresolver.Write)
}

func (m modelRequestRecordDo) Session(config *gorm.Session) *modelRequestRecordDo {
	return m.withDO(m.DO.Session(config))
}

func (m modelRequestRecordDo) Clauses(conds ...clause.Expression) *modelRequestRecordDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m modelRequestRecordDo) Returning(value interface{}, columns ...string) *modelRequestRecordDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m modelRequestRecordDo) Not(conds ...gen.Condition) *modelRequestRecordDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m modelRequestRecordDo) Or(conds ...gen.Condition) *modelRequestRecordDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m modelRequestRecordDo) Select(conds ...field.Expr) *modelRequestRecordDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m modelRequestRecordDo) Where(conds ...gen.Condition) *modelRequestRecordDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m modelRequestRecordDo) Order(conds ...field.Expr) *modelRequestRecordDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m modelRequestRecordDo) Distinct(cols ...field.Expr) *modelRequestRecordDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m modelRequestRecordDo) Omit(cols ...field.Expr) *modelRequestRecordDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m modelRequestRecordDo) Join(table schema.Tabler, on ...field.Expr) *modelRequestRecordDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m modelRequestRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *modelRequestRecordDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m modelRequestRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *modelRequestRecordDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m modelRequestRecordDo) Group(cols ...field.Expr) *modelRequestRecordDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m modelRequestRecordDo) Having(conds ...gen.Condition) *modelRequestRecordDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m modelRequestRecordDo) Limit(limit int) *modelRequestRecordDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m modelRequestRecordDo) Offset(offset int) *modelRequestRecordDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m modelRequestRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *modelRequestRecordDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m modelRequestRecordDo) Unscoped() *modelRequestRecordDo {
	return m.withDO(m.DO.Unscoped())
}

func (m modelRequestRecordDo) Create(values ...*model.ModelRequestRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m modelRequestRecordDo) CreateInBatches(values []*model.ModelRequestRecord, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m modelRequestRecordDo) Save(values ...*model.ModelRequestRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m modelRequestRecordDo) First() (*model.ModelRequestRecord, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelRequestRecord), nil
	}
}

func (m modelRequestRecordDo) Take() (*model.ModelRequestRecord, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelRequestRecord), nil
	}
}

func (m modelRequestRecordDo) Last() (*model.ModelRequestRecord, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelRequestRecord), nil
	}
}

func (m modelRequestRecordDo) Find() ([]*model.ModelRequestRecord, error) {
	result, err := m.DO.Find()
	return result.([]*model.ModelRequestRecord), err
}

func (m modelRequestRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ModelRequestRecord, err error) {
	buf := make([]*model.ModelRequestRecord, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m modelRequestRecordDo) FindInBatches(result *[]*model.ModelRequestRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m modelRequestRecordDo) Attrs(attrs ...field.AssignExpr) *modelRequestRecordDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m modelRequestRecordDo) Assign(attrs ...field.AssignExpr) *modelRequestRecordDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m modelRequestRecordDo) Joins(fields ...field.RelationField) *modelRequestRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m modelRequestRecordDo) Preload(fields ...field.RelationField) *modelRequestRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m modelRequestRecordDo) FirstOrInit() (*model.ModelRequestRecord, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelRequestRecord), nil
	}
}

func (m modelRequestRecordDo) FirstOrCreate() (*model.ModelRequestRecord, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ModelRequestRecord), nil
	}
}

func (m modelRequestRecordDo) FindByPage(offset int, limit int) (result []*model.ModelRequestRecord, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m modelRequestRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m modelRequestRecordDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m modelRequestRecordDo) Delete(models ...*model.ModelRequestRecord) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *modelRequestRecordDo) withDO(do gen.Dao) *modelRequestRecordDo {
	m.DO = *do.(*gen.DO)
	return m
}
