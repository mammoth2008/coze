// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/llm/domain/component/conf (interfaces: IConfigManage)
//
// Generated by this command:
//
//	mockgen -destination=mocks/manage.go -package=mocks . IConfigManage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/llm/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIConfigManage is a mock of IConfigManage interface.
type MockIConfigManage struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigManageMockRecorder
	isgomock struct{}
}

// MockIConfigManageMockRecorder is the mock recorder for MockIConfigManage.
type MockIConfigManageMockRecorder struct {
	mock *MockIConfigManage
}

// NewMockIConfigManage creates a new mock instance.
func NewMockIConfigManage(ctrl *gomock.Controller) *MockIConfigManage {
	mock := &MockIConfigManage{ctrl: ctrl}
	mock.recorder = &MockIConfigManageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfigManage) EXPECT() *MockIConfigManageMockRecorder {
	return m.recorder
}

// GetModel mocks base method.
func (m *MockIConfigManage) GetModel(ctx context.Context, id int64) (*entity.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", ctx, id)
	ret0, _ := ret[0].(*entity.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockIConfigManageMockRecorder) GetModel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockIConfigManage)(nil).GetModel), ctx, id)
}

// ListModels mocks base method.
func (m *MockIConfigManage) ListModels(ctx context.Context, req entity.ListModelReq) ([]*entity.Model, int64, bool, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", ctx, req)
	ret0, _ := ret[0].([]*entity.Model)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(int64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ListModels indicates an expected call of ListModels.
func (mr *MockIConfigManageMockRecorder) ListModels(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockIConfigManage)(nil).ListModels), ctx, req)
}
