// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/llm/domain/service/llminterface (interfaces: ILLM)
//
// Generated by this command:
//
//	mockgen -destination=mocks/llm.go -package=mocks . ILLM
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/llm/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockILLM is a mock of ILLM interface.
type MockILLM struct {
	ctrl     *gomock.Controller
	recorder *MockILLMMockRecorder
	isgomock struct{}
}

// MockILLMMockRecorder is the mock recorder for MockILLM.
type MockILLMMockRecorder struct {
	mock *MockILLM
}

// NewMockILLM creates a new mock instance.
func NewMockILLM(ctrl *gomock.Controller) *MockILLM {
	mock := &MockILLM{ctrl: ctrl}
	mock.recorder = &MockILLMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILLM) EXPECT() *MockILLMMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockILLM) Generate(ctx context.Context, input []*entity.Message, opts ...entity.Option) (*entity.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Generate", varargs...)
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockILLMMockRecorder) Generate(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockILLM)(nil).Generate), varargs...)
}

// Stream mocks base method.
func (m *MockILLM) Stream(ctx context.Context, input []*entity.Message, opts ...entity.Option) (entity.IStreamReader, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stream", varargs...)
	ret0, _ := ret[0].(entity.IStreamReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockILLMMockRecorder) Stream(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockILLM)(nil).Stream), varargs...)
}
