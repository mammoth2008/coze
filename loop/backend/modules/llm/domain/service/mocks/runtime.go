// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/llm/domain/service (interfaces: IRuntime)
//
// Generated by this command:
//
//	mockgen -destination=mocks/runtime.go -package=mocks . IRuntime
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/llm/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIRuntime is a mock of IRuntime interface.
type MockIRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockIRuntimeMockRecorder
	isgomock struct{}
}

// MockIRuntimeMockRecorder is the mock recorder for MockIRuntime.
type MockIRuntimeMockRecorder struct {
	mock *MockIRuntime
}

// NewMockIRuntime creates a new mock instance.
func NewMockIRuntime(ctrl *gomock.Controller) *MockIRuntime {
	mock := &MockIRuntime{ctrl: ctrl}
	mock.recorder = &MockIRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRuntime) EXPECT() *MockIRuntimeMockRecorder {
	return m.recorder
}

// CreateModelRequestRecord mocks base method.
func (m *MockIRuntime) CreateModelRequestRecord(ctx context.Context, record *entity.ModelRequestRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelRequestRecord", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModelRequestRecord indicates an expected call of CreateModelRequestRecord.
func (mr *MockIRuntimeMockRecorder) CreateModelRequestRecord(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelRequestRecord", reflect.TypeOf((*MockIRuntime)(nil).CreateModelRequestRecord), ctx, record)
}

// Generate mocks base method.
func (m *MockIRuntime) Generate(ctx context.Context, model *entity.Model, input []*entity.Message, opts ...entity.Option) (*entity.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, model, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Generate", varargs...)
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockIRuntimeMockRecorder) Generate(ctx, model, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, model, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIRuntime)(nil).Generate), varargs...)
}

// HandleMsgsPreCallModel mocks base method.
func (m *MockIRuntime) HandleMsgsPreCallModel(ctx context.Context, model *entity.Model, msgs []*entity.Message) ([]*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMsgsPreCallModel", ctx, model, msgs)
	ret0, _ := ret[0].([]*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleMsgsPreCallModel indicates an expected call of HandleMsgsPreCallModel.
func (mr *MockIRuntimeMockRecorder) HandleMsgsPreCallModel(ctx, model, msgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMsgsPreCallModel", reflect.TypeOf((*MockIRuntime)(nil).HandleMsgsPreCallModel), ctx, model, msgs)
}

// Stream mocks base method.
func (m *MockIRuntime) Stream(ctx context.Context, model *entity.Model, input []*entity.Message, opts ...entity.Option) (entity.IStreamReader, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, model, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stream", varargs...)
	ret0, _ := ret[0].(entity.IStreamReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockIRuntimeMockRecorder) Stream(ctx, model, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, model, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockIRuntime)(nil).Stream), varargs...)
}

// ValidModelAndRequest mocks base method.
func (m *MockIRuntime) ValidModelAndRequest(ctx context.Context, model *entity.Model, input []*entity.Message, opts ...entity.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, model, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidModelAndRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidModelAndRequest indicates an expected call of ValidModelAndRequest.
func (mr *MockIRuntimeMockRecorder) ValidModelAndRequest(ctx, model, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, model, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidModelAndRequest", reflect.TypeOf((*MockIRuntime)(nil).ValidModelAndRequest), varargs...)
}
