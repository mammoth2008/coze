// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/llm/domain/service/llmimpl/eino (interfaces: IEinoChatModel)
//
// Generated by this command:
//
//	mockgen -destination=mocks/llm.go -package=mocks . IEinoChatModel
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/cloudwego/eino/components/model"
	schema "github.com/cloudwego/eino/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockIEinoChatModel is a mock of IEinoChatModel interface.
type MockIEinoChatModel struct {
	ctrl     *gomock.Controller
	recorder *MockIEinoChatModelMockRecorder
	isgomock struct{}
}

// MockIEinoChatModelMockRecorder is the mock recorder for MockIEinoChatModel.
type MockIEinoChatModelMockRecorder struct {
	mock *MockIEinoChatModel
}

// NewMockIEinoChatModel creates a new mock instance.
func NewMockIEinoChatModel(ctrl *gomock.Controller) *MockIEinoChatModel {
	mock := &MockIEinoChatModel{ctrl: ctrl}
	mock.recorder = &MockIEinoChatModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEinoChatModel) EXPECT() *MockIEinoChatModelMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockIEinoChatModel) Generate(ctx context.Context, input []*schema.Message, opts ...model.Option) (*schema.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Generate", varargs...)
	ret0, _ := ret[0].(*schema.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockIEinoChatModelMockRecorder) Generate(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIEinoChatModel)(nil).Generate), varargs...)
}

// Stream mocks base method.
func (m *MockIEinoChatModel) Stream(ctx context.Context, input []*schema.Message, opts ...model.Option) (*schema.StreamReader[*schema.Message], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stream", varargs...)
	ret0, _ := ret[0].(*schema.StreamReader[*schema.Message])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockIEinoChatModelMockRecorder) Stream(ctx, input any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockIEinoChatModel)(nil).Stream), varargs...)
}

// WithTools mocks base method.
func (m *MockIEinoChatModel) WithTools(tools []*schema.ToolInfo) (model.ToolCallingChatModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTools", tools)
	ret0, _ := ret[0].(model.ToolCallingChatModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTools indicates an expected call of WithTools.
func (mr *MockIEinoChatModelMockRecorder) WithTools(tools any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTools", reflect.TypeOf((*MockIEinoChatModel)(nil).WithTools), tools)
}
