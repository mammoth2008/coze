// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/redis (interfaces: IPromptBasicDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/prompt_basic_dao.go -package=mocks . IPromptBasicDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIPromptBasicDAO is a mock of IPromptBasicDAO interface.
type MockIPromptBasicDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptBasicDAOMockRecorder
	isgomock struct{}
}

// MockIPromptBasicDAOMockRecorder is the mock recorder for MockIPromptBasicDAO.
type MockIPromptBasicDAOMockRecorder struct {
	mock *MockIPromptBasicDAO
}

// NewMockIPromptBasicDAO creates a new mock instance.
func NewMockIPromptBasicDAO(ctrl *gomock.Controller) *MockIPromptBasicDAO {
	mock := &MockIPromptBasicDAO{ctrl: ctrl}
	mock.recorder = &MockIPromptBasicDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPromptBasicDAO) EXPECT() *MockIPromptBasicDAOMockRecorder {
	return m.recorder
}

// DelByPromptKey mocks base method.
func (m *MockIPromptBasicDAO) DelByPromptKey(ctx context.Context, spaceID int64, promptKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelByPromptKey", ctx, spaceID, promptKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelByPromptKey indicates an expected call of DelByPromptKey.
func (mr *MockIPromptBasicDAOMockRecorder) DelByPromptKey(ctx, spaceID, promptKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelByPromptKey", reflect.TypeOf((*MockIPromptBasicDAO)(nil).DelByPromptKey), ctx, spaceID, promptKey)
}

// MGetByPromptKey mocks base method.
func (m *MockIPromptBasicDAO) MGetByPromptKey(ctx context.Context, spaceID int64, promptKeys []string) (map[string]*entity.Prompt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetByPromptKey", ctx, spaceID, promptKeys)
	ret0, _ := ret[0].(map[string]*entity.Prompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetByPromptKey indicates an expected call of MGetByPromptKey.
func (mr *MockIPromptBasicDAOMockRecorder) MGetByPromptKey(ctx, spaceID, promptKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetByPromptKey", reflect.TypeOf((*MockIPromptBasicDAO)(nil).MGetByPromptKey), ctx, spaceID, promptKeys)
}

// MSetByPromptKey mocks base method.
func (m *MockIPromptBasicDAO) MSetByPromptKey(ctx context.Context, promptBasics []*entity.Prompt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSetByPromptKey", ctx, promptBasics)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSetByPromptKey indicates an expected call of MSetByPromptKey.
func (mr *MockIPromptBasicDAOMockRecorder) MSetByPromptKey(ctx, promptBasics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSetByPromptKey", reflect.TypeOf((*MockIPromptBasicDAO)(nil).MSetByPromptKey), ctx, promptBasics)
}
