// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/redis (interfaces: IPromptDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/prompt_dao.go -package=mocks . IPromptDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	redis "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/redis"
	gomock "go.uber.org/mock/gomock"
)

// MockIPromptDAO is a mock of IPromptDAO interface.
type MockIPromptDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptDAOMockRecorder
	isgomock struct{}
}

// MockIPromptDAOMockRecorder is the mock recorder for MockIPromptDAO.
type MockIPromptDAOMockRecorder struct {
	mock *MockIPromptDAO
}

// NewMockIPromptDAO creates a new mock instance.
func NewMockIPromptDAO(ctrl *gomock.Controller) *MockIPromptDAO {
	mock := &MockIPromptDAO{ctrl: ctrl}
	mock.recorder = &MockIPromptDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPromptDAO) EXPECT() *MockIPromptDAOMockRecorder {
	return m.recorder
}

// MGet mocks base method.
func (m *MockIPromptDAO) MGet(ctx context.Context, queries []redis.PromptQuery) (map[redis.PromptQuery]*entity.Prompt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", ctx, queries)
	ret0, _ := ret[0].(map[redis.PromptQuery]*entity.Prompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockIPromptDAOMockRecorder) MGet(ctx, queries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockIPromptDAO)(nil).MGet), ctx, queries)
}

// MSet mocks base method.
func (m *MockIPromptDAO) MSet(ctx context.Context, prompts []*entity.Prompt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSet", ctx, prompts)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSet indicates an expected call of MSet.
func (mr *MockIPromptDAOMockRecorder) MSet(ctx, prompts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockIPromptDAO)(nil).MSet), ctx, prompts)
}
