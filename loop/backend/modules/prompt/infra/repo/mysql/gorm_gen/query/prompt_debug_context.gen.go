// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
)

func newPromptDebugContext(db *gorm.DB, opts ...gen.DOOption) promptDebugContext {
	_promptDebugContext := promptDebugContext{}

	_promptDebugContext.promptDebugContextDo.UseDB(db, opts...)
	_promptDebugContext.promptDebugContextDo.UseModel(&model.PromptDebugContext{})

	tableName := _promptDebugContext.promptDebugContextDo.TableName()
	_promptDebugContext.ALL = field.NewAsterisk(tableName)
	_promptDebugContext.ID = field.NewInt64(tableName, "id")
	_promptDebugContext.PromptID = field.NewInt64(tableName, "prompt_id")
	_promptDebugContext.UserID = field.NewString(tableName, "user_id")
	_promptDebugContext.MockContexts = field.NewString(tableName, "mock_contexts")
	_promptDebugContext.MockVariables = field.NewString(tableName, "mock_variables")
	_promptDebugContext.MockTools = field.NewString(tableName, "mock_tools")
	_promptDebugContext.DebugConfig = field.NewString(tableName, "debug_config")
	_promptDebugContext.CompareConfig = field.NewString(tableName, "compare_config")
	_promptDebugContext.CreatedAt = field.NewTime(tableName, "created_at")
	_promptDebugContext.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promptDebugContext.DeletedAt = field.NewField(tableName, "deleted_at")

	_promptDebugContext.fillFieldMap()

	return _promptDebugContext
}

// promptDebugContext 用户调试prompt上下文信息表
type promptDebugContext struct {
	promptDebugContextDo promptDebugContextDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键ID
	PromptID      field.Int64  // prompt id
	UserID        field.String // user id
	MockContexts  field.String // 上下文信息，json格式
	MockVariables field.String // mock变量值，json格式
	MockTools     field.String // mock tool结果，json格式
	DebugConfig   field.String // 调试配置
	CompareConfig field.String // 训练场配置
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (p promptDebugContext) Table(newTableName string) *promptDebugContext {
	p.promptDebugContextDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promptDebugContext) As(alias string) *promptDebugContext {
	p.promptDebugContextDo.DO = *(p.promptDebugContextDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promptDebugContext) updateTableName(table string) *promptDebugContext {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PromptID = field.NewInt64(table, "prompt_id")
	p.UserID = field.NewString(table, "user_id")
	p.MockContexts = field.NewString(table, "mock_contexts")
	p.MockVariables = field.NewString(table, "mock_variables")
	p.MockTools = field.NewString(table, "mock_tools")
	p.DebugConfig = field.NewString(table, "debug_config")
	p.CompareConfig = field.NewString(table, "compare_config")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *promptDebugContext) WithContext(ctx context.Context) *promptDebugContextDo {
	return p.promptDebugContextDo.WithContext(ctx)
}

func (p promptDebugContext) TableName() string { return p.promptDebugContextDo.TableName() }

func (p promptDebugContext) Alias() string { return p.promptDebugContextDo.Alias() }

func (p promptDebugContext) Columns(cols ...field.Expr) gen.Columns {
	return p.promptDebugContextDo.Columns(cols...)
}

func (p *promptDebugContext) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promptDebugContext) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["prompt_id"] = p.PromptID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["mock_contexts"] = p.MockContexts
	p.fieldMap["mock_variables"] = p.MockVariables
	p.fieldMap["mock_tools"] = p.MockTools
	p.fieldMap["debug_config"] = p.DebugConfig
	p.fieldMap["compare_config"] = p.CompareConfig
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p promptDebugContext) clone(db *gorm.DB) promptDebugContext {
	p.promptDebugContextDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promptDebugContext) replaceDB(db *gorm.DB) promptDebugContext {
	p.promptDebugContextDo.ReplaceDB(db)
	return p
}

type promptDebugContextDo struct{ gen.DO }

func (p promptDebugContextDo) Debug() *promptDebugContextDo {
	return p.withDO(p.DO.Debug())
}

func (p promptDebugContextDo) WithContext(ctx context.Context) *promptDebugContextDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promptDebugContextDo) ReadDB() *promptDebugContextDo {
	return p.Clauses(dbresolver.Read)
}

func (p promptDebugContextDo) WriteDB() *promptDebugContextDo {
	return p.Clauses(dbresolver.Write)
}

func (p promptDebugContextDo) Session(config *gorm.Session) *promptDebugContextDo {
	return p.withDO(p.DO.Session(config))
}

func (p promptDebugContextDo) Clauses(conds ...clause.Expression) *promptDebugContextDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promptDebugContextDo) Returning(value interface{}, columns ...string) *promptDebugContextDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promptDebugContextDo) Not(conds ...gen.Condition) *promptDebugContextDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promptDebugContextDo) Or(conds ...gen.Condition) *promptDebugContextDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promptDebugContextDo) Select(conds ...field.Expr) *promptDebugContextDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promptDebugContextDo) Where(conds ...gen.Condition) *promptDebugContextDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promptDebugContextDo) Order(conds ...field.Expr) *promptDebugContextDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promptDebugContextDo) Distinct(cols ...field.Expr) *promptDebugContextDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promptDebugContextDo) Omit(cols ...field.Expr) *promptDebugContextDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promptDebugContextDo) Join(table schema.Tabler, on ...field.Expr) *promptDebugContextDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promptDebugContextDo) LeftJoin(table schema.Tabler, on ...field.Expr) *promptDebugContextDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promptDebugContextDo) RightJoin(table schema.Tabler, on ...field.Expr) *promptDebugContextDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promptDebugContextDo) Group(cols ...field.Expr) *promptDebugContextDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promptDebugContextDo) Having(conds ...gen.Condition) *promptDebugContextDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promptDebugContextDo) Limit(limit int) *promptDebugContextDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promptDebugContextDo) Offset(offset int) *promptDebugContextDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promptDebugContextDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *promptDebugContextDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promptDebugContextDo) Unscoped() *promptDebugContextDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promptDebugContextDo) Create(values ...*model.PromptDebugContext) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promptDebugContextDo) CreateInBatches(values []*model.PromptDebugContext, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promptDebugContextDo) Save(values ...*model.PromptDebugContext) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promptDebugContextDo) First() (*model.PromptDebugContext, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptDebugContext), nil
	}
}

func (p promptDebugContextDo) Take() (*model.PromptDebugContext, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptDebugContext), nil
	}
}

func (p promptDebugContextDo) Last() (*model.PromptDebugContext, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptDebugContext), nil
	}
}

func (p promptDebugContextDo) Find() ([]*model.PromptDebugContext, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromptDebugContext), err
}

func (p promptDebugContextDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptDebugContext, err error) {
	buf := make([]*model.PromptDebugContext, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promptDebugContextDo) FindInBatches(result *[]*model.PromptDebugContext, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promptDebugContextDo) Attrs(attrs ...field.AssignExpr) *promptDebugContextDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promptDebugContextDo) Assign(attrs ...field.AssignExpr) *promptDebugContextDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promptDebugContextDo) Joins(fields ...field.RelationField) *promptDebugContextDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promptDebugContextDo) Preload(fields ...field.RelationField) *promptDebugContextDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promptDebugContextDo) FirstOrInit() (*model.PromptDebugContext, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptDebugContext), nil
	}
}

func (p promptDebugContextDo) FirstOrCreate() (*model.PromptDebugContext, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptDebugContext), nil
	}
}

func (p promptDebugContextDo) FindByPage(offset int, limit int) (result []*model.PromptDebugContext, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promptDebugContextDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promptDebugContextDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promptDebugContextDo) Delete(models ...*model.PromptDebugContext) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promptDebugContextDo) withDO(do gen.Dao) *promptDebugContextDo {
	p.DO = *do.(*gen.DO)
	return p
}
