// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
)

func newPromptDebugLog(db *gorm.DB, opts ...gen.DOOption) promptDebugLog {
	_promptDebugLog := promptDebugLog{}

	_promptDebugLog.promptDebugLogDo.UseDB(db, opts...)
	_promptDebugLog.promptDebugLogDo.UseModel(&model.PromptDebugLog{})

	tableName := _promptDebugLog.promptDebugLogDo.TableName()
	_promptDebugLog.ALL = field.NewAsterisk(tableName)
	_promptDebugLog.ID = field.NewInt64(tableName, "id")
	_promptDebugLog.PromptID = field.NewInt64(tableName, "prompt_id")
	_promptDebugLog.SpaceID = field.NewInt64(tableName, "space_id")
	_promptDebugLog.PromptKey = field.NewString(tableName, "prompt_key")
	_promptDebugLog.Version = field.NewString(tableName, "version")
	_promptDebugLog.InputTokens = field.NewInt64(tableName, "input_tokens")
	_promptDebugLog.OutputTokens = field.NewInt64(tableName, "output_tokens")
	_promptDebugLog.StartedAt = field.NewInt64(tableName, "started_at")
	_promptDebugLog.EndedAt = field.NewInt64(tableName, "ended_at")
	_promptDebugLog.CostMs = field.NewInt64(tableName, "cost_ms")
	_promptDebugLog.StatusCode = field.NewInt32(tableName, "status_code")
	_promptDebugLog.DebuggedBy = field.NewString(tableName, "debugged_by")
	_promptDebugLog.DebugID = field.NewInt64(tableName, "debug_id")
	_promptDebugLog.DebugStep = field.NewInt32(tableName, "debug_step")
	_promptDebugLog.CreatedAt = field.NewTime(tableName, "created_at")
	_promptDebugLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promptDebugLog.DeletedAt = field.NewField(tableName, "deleted_at")

	_promptDebugLog.fillFieldMap()

	return _promptDebugLog
}

// promptDebugLog debug表
type promptDebugLog struct {
	promptDebugLogDo promptDebugLogDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键ID
	PromptID     field.Int64  // Prompt ID
	SpaceID      field.Int64  // 空间ID
	PromptKey    field.String // prompt key
	Version      field.String // version
	InputTokens  field.Int64  // input_tokens
	OutputTokens field.Int64  // output_tokens
	StartedAt    field.Int64  // 请求开始毫秒时间戳
	EndedAt      field.Int64  // 响应结束毫秒时间戳
	CostMs       field.Int64  // 响应耗时毫秒
	StatusCode   field.Int32  // 状态码
	DebuggedBy   field.String // 执行人UserID
	DebugID      field.Int64  // debug_id
	DebugStep    field.Int32  // debug_step
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	DeletedAt    field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (p promptDebugLog) Table(newTableName string) *promptDebugLog {
	p.promptDebugLogDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promptDebugLog) As(alias string) *promptDebugLog {
	p.promptDebugLogDo.DO = *(p.promptDebugLogDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promptDebugLog) updateTableName(table string) *promptDebugLog {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PromptID = field.NewInt64(table, "prompt_id")
	p.SpaceID = field.NewInt64(table, "space_id")
	p.PromptKey = field.NewString(table, "prompt_key")
	p.Version = field.NewString(table, "version")
	p.InputTokens = field.NewInt64(table, "input_tokens")
	p.OutputTokens = field.NewInt64(table, "output_tokens")
	p.StartedAt = field.NewInt64(table, "started_at")
	p.EndedAt = field.NewInt64(table, "ended_at")
	p.CostMs = field.NewInt64(table, "cost_ms")
	p.StatusCode = field.NewInt32(table, "status_code")
	p.DebuggedBy = field.NewString(table, "debugged_by")
	p.DebugID = field.NewInt64(table, "debug_id")
	p.DebugStep = field.NewInt32(table, "debug_step")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *promptDebugLog) WithContext(ctx context.Context) *promptDebugLogDo {
	return p.promptDebugLogDo.WithContext(ctx)
}

func (p promptDebugLog) TableName() string { return p.promptDebugLogDo.TableName() }

func (p promptDebugLog) Alias() string { return p.promptDebugLogDo.Alias() }

func (p promptDebugLog) Columns(cols ...field.Expr) gen.Columns {
	return p.promptDebugLogDo.Columns(cols...)
}

func (p *promptDebugLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promptDebugLog) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 17)
	p.fieldMap["id"] = p.ID
	p.fieldMap["prompt_id"] = p.PromptID
	p.fieldMap["space_id"] = p.SpaceID
	p.fieldMap["prompt_key"] = p.PromptKey
	p.fieldMap["version"] = p.Version
	p.fieldMap["input_tokens"] = p.InputTokens
	p.fieldMap["output_tokens"] = p.OutputTokens
	p.fieldMap["started_at"] = p.StartedAt
	p.fieldMap["ended_at"] = p.EndedAt
	p.fieldMap["cost_ms"] = p.CostMs
	p.fieldMap["status_code"] = p.StatusCode
	p.fieldMap["debugged_by"] = p.DebuggedBy
	p.fieldMap["debug_id"] = p.DebugID
	p.fieldMap["debug_step"] = p.DebugStep
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p promptDebugLog) clone(db *gorm.DB) promptDebugLog {
	p.promptDebugLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promptDebugLog) replaceDB(db *gorm.DB) promptDebugLog {
	p.promptDebugLogDo.ReplaceDB(db)
	return p
}

type promptDebugLogDo struct{ gen.DO }

func (p promptDebugLogDo) Debug() *promptDebugLogDo {
	return p.withDO(p.DO.Debug())
}

func (p promptDebugLogDo) WithContext(ctx context.Context) *promptDebugLogDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promptDebugLogDo) ReadDB() *promptDebugLogDo {
	return p.Clauses(dbresolver.Read)
}

func (p promptDebugLogDo) WriteDB() *promptDebugLogDo {
	return p.Clauses(dbresolver.Write)
}

func (p promptDebugLogDo) Session(config *gorm.Session) *promptDebugLogDo {
	return p.withDO(p.DO.Session(config))
}

func (p promptDebugLogDo) Clauses(conds ...clause.Expression) *promptDebugLogDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promptDebugLogDo) Returning(value interface{}, columns ...string) *promptDebugLogDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promptDebugLogDo) Not(conds ...gen.Condition) *promptDebugLogDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promptDebugLogDo) Or(conds ...gen.Condition) *promptDebugLogDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promptDebugLogDo) Select(conds ...field.Expr) *promptDebugLogDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promptDebugLogDo) Where(conds ...gen.Condition) *promptDebugLogDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promptDebugLogDo) Order(conds ...field.Expr) *promptDebugLogDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promptDebugLogDo) Distinct(cols ...field.Expr) *promptDebugLogDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promptDebugLogDo) Omit(cols ...field.Expr) *promptDebugLogDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promptDebugLogDo) Join(table schema.Tabler, on ...field.Expr) *promptDebugLogDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promptDebugLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *promptDebugLogDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promptDebugLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *promptDebugLogDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promptDebugLogDo) Group(cols ...field.Expr) *promptDebugLogDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promptDebugLogDo) Having(conds ...gen.Condition) *promptDebugLogDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promptDebugLogDo) Limit(limit int) *promptDebugLogDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promptDebugLogDo) Offset(offset int) *promptDebugLogDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promptDebugLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *promptDebugLogDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promptDebugLogDo) Unscoped() *promptDebugLogDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promptDebugLogDo) Create(values ...*model.PromptDebugLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promptDebugLogDo) CreateInBatches(values []*model.PromptDebugLog, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promptDebugLogDo) Save(values ...*model.PromptDebugLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promptDebugLogDo) First() (*model.PromptDebugLog, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptDebugLog), nil
	}
}

func (p promptDebugLogDo) Take() (*model.PromptDebugLog, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptDebugLog), nil
	}
}

func (p promptDebugLogDo) Last() (*model.PromptDebugLog, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptDebugLog), nil
	}
}

func (p promptDebugLogDo) Find() ([]*model.PromptDebugLog, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromptDebugLog), err
}

func (p promptDebugLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptDebugLog, err error) {
	buf := make([]*model.PromptDebugLog, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promptDebugLogDo) FindInBatches(result *[]*model.PromptDebugLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promptDebugLogDo) Attrs(attrs ...field.AssignExpr) *promptDebugLogDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promptDebugLogDo) Assign(attrs ...field.AssignExpr) *promptDebugLogDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promptDebugLogDo) Joins(fields ...field.RelationField) *promptDebugLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promptDebugLogDo) Preload(fields ...field.RelationField) *promptDebugLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promptDebugLogDo) FirstOrInit() (*model.PromptDebugLog, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptDebugLog), nil
	}
}

func (p promptDebugLogDo) FirstOrCreate() (*model.PromptDebugLog, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptDebugLog), nil
	}
}

func (p promptDebugLogDo) FindByPage(offset int, limit int) (result []*model.PromptDebugLog, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promptDebugLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promptDebugLogDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promptDebugLogDo) Delete(models ...*model.PromptDebugLog) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promptDebugLogDo) withDO(do gen.Dao) *promptDebugLogDo {
	p.DO = *do.(*gen.DO)
	return p
}
