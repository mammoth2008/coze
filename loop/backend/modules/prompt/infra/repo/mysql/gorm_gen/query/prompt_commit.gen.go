// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
)

func newPromptCommit(db *gorm.DB, opts ...gen.DOOption) promptCommit {
	_promptCommit := promptCommit{}

	_promptCommit.promptCommitDo.UseDB(db, opts...)
	_promptCommit.promptCommitDo.UseModel(&model.PromptCommit{})

	tableName := _promptCommit.promptCommitDo.TableName()
	_promptCommit.ALL = field.NewAsterisk(tableName)
	_promptCommit.ID = field.NewInt64(tableName, "id")
	_promptCommit.SpaceID = field.NewInt64(tableName, "space_id")
	_promptCommit.PromptID = field.NewInt64(tableName, "prompt_id")
	_promptCommit.PromptKey = field.NewString(tableName, "prompt_key")
	_promptCommit.TemplateType = field.NewString(tableName, "template_type")
	_promptCommit.Messages = field.NewString(tableName, "messages")
	_promptCommit.ModelConfig = field.NewString(tableName, "model_config")
	_promptCommit.VariableDefs = field.NewString(tableName, "variable_defs")
	_promptCommit.Tools = field.NewString(tableName, "tools")
	_promptCommit.ToolCallConfig = field.NewString(tableName, "tool_call_config")
	_promptCommit.Version = field.NewString(tableName, "version")
	_promptCommit.BaseVersion = field.NewString(tableName, "base_version")
	_promptCommit.CommittedBy = field.NewString(tableName, "committed_by")
	_promptCommit.Description = field.NewString(tableName, "description")
	_promptCommit.CreatedAt = field.NewTime(tableName, "created_at")
	_promptCommit.UpdatedAt = field.NewTime(tableName, "updated_at")

	_promptCommit.fillFieldMap()

	return _promptCommit
}

// promptCommit Commit表
type promptCommit struct {
	promptCommitDo promptCommitDo

	ALL            field.Asterisk
	ID             field.Int64  // 主键ID
	SpaceID        field.Int64  // 空间ID
	PromptID       field.Int64  // Prompt ID
	PromptKey      field.String // Prompt key
	TemplateType   field.String // 模版类型
	Messages       field.String // 托管消息列表
	ModelConfig    field.String // 模型配置
	VariableDefs   field.String // 变量定义
	Tools          field.String // tools
	ToolCallConfig field.String // tool调用配置
	Version        field.String // 版本
	BaseVersion    field.String // 来源版本
	CommittedBy    field.String // 提交人
	Description    field.String // 提交版本描述
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (p promptCommit) Table(newTableName string) *promptCommit {
	p.promptCommitDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promptCommit) As(alias string) *promptCommit {
	p.promptCommitDo.DO = *(p.promptCommitDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promptCommit) updateTableName(table string) *promptCommit {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SpaceID = field.NewInt64(table, "space_id")
	p.PromptID = field.NewInt64(table, "prompt_id")
	p.PromptKey = field.NewString(table, "prompt_key")
	p.TemplateType = field.NewString(table, "template_type")
	p.Messages = field.NewString(table, "messages")
	p.ModelConfig = field.NewString(table, "model_config")
	p.VariableDefs = field.NewString(table, "variable_defs")
	p.Tools = field.NewString(table, "tools")
	p.ToolCallConfig = field.NewString(table, "tool_call_config")
	p.Version = field.NewString(table, "version")
	p.BaseVersion = field.NewString(table, "base_version")
	p.CommittedBy = field.NewString(table, "committed_by")
	p.Description = field.NewString(table, "description")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *promptCommit) WithContext(ctx context.Context) *promptCommitDo {
	return p.promptCommitDo.WithContext(ctx)
}

func (p promptCommit) TableName() string { return p.promptCommitDo.TableName() }

func (p promptCommit) Alias() string { return p.promptCommitDo.Alias() }

func (p promptCommit) Columns(cols ...field.Expr) gen.Columns {
	return p.promptCommitDo.Columns(cols...)
}

func (p *promptCommit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promptCommit) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 16)
	p.fieldMap["id"] = p.ID
	p.fieldMap["space_id"] = p.SpaceID
	p.fieldMap["prompt_id"] = p.PromptID
	p.fieldMap["prompt_key"] = p.PromptKey
	p.fieldMap["template_type"] = p.TemplateType
	p.fieldMap["messages"] = p.Messages
	p.fieldMap["model_config"] = p.ModelConfig
	p.fieldMap["variable_defs"] = p.VariableDefs
	p.fieldMap["tools"] = p.Tools
	p.fieldMap["tool_call_config"] = p.ToolCallConfig
	p.fieldMap["version"] = p.Version
	p.fieldMap["base_version"] = p.BaseVersion
	p.fieldMap["committed_by"] = p.CommittedBy
	p.fieldMap["description"] = p.Description
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p promptCommit) clone(db *gorm.DB) promptCommit {
	p.promptCommitDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promptCommit) replaceDB(db *gorm.DB) promptCommit {
	p.promptCommitDo.ReplaceDB(db)
	return p
}

type promptCommitDo struct{ gen.DO }

func (p promptCommitDo) Debug() *promptCommitDo {
	return p.withDO(p.DO.Debug())
}

func (p promptCommitDo) WithContext(ctx context.Context) *promptCommitDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promptCommitDo) ReadDB() *promptCommitDo {
	return p.Clauses(dbresolver.Read)
}

func (p promptCommitDo) WriteDB() *promptCommitDo {
	return p.Clauses(dbresolver.Write)
}

func (p promptCommitDo) Session(config *gorm.Session) *promptCommitDo {
	return p.withDO(p.DO.Session(config))
}

func (p promptCommitDo) Clauses(conds ...clause.Expression) *promptCommitDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promptCommitDo) Returning(value interface{}, columns ...string) *promptCommitDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promptCommitDo) Not(conds ...gen.Condition) *promptCommitDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promptCommitDo) Or(conds ...gen.Condition) *promptCommitDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promptCommitDo) Select(conds ...field.Expr) *promptCommitDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promptCommitDo) Where(conds ...gen.Condition) *promptCommitDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promptCommitDo) Order(conds ...field.Expr) *promptCommitDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promptCommitDo) Distinct(cols ...field.Expr) *promptCommitDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promptCommitDo) Omit(cols ...field.Expr) *promptCommitDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promptCommitDo) Join(table schema.Tabler, on ...field.Expr) *promptCommitDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promptCommitDo) LeftJoin(table schema.Tabler, on ...field.Expr) *promptCommitDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promptCommitDo) RightJoin(table schema.Tabler, on ...field.Expr) *promptCommitDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promptCommitDo) Group(cols ...field.Expr) *promptCommitDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promptCommitDo) Having(conds ...gen.Condition) *promptCommitDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promptCommitDo) Limit(limit int) *promptCommitDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promptCommitDo) Offset(offset int) *promptCommitDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promptCommitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *promptCommitDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promptCommitDo) Unscoped() *promptCommitDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promptCommitDo) Create(values ...*model.PromptCommit) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promptCommitDo) CreateInBatches(values []*model.PromptCommit, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promptCommitDo) Save(values ...*model.PromptCommit) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promptCommitDo) First() (*model.PromptCommit, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptCommit), nil
	}
}

func (p promptCommitDo) Take() (*model.PromptCommit, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptCommit), nil
	}
}

func (p promptCommitDo) Last() (*model.PromptCommit, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptCommit), nil
	}
}

func (p promptCommitDo) Find() ([]*model.PromptCommit, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromptCommit), err
}

func (p promptCommitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptCommit, err error) {
	buf := make([]*model.PromptCommit, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promptCommitDo) FindInBatches(result *[]*model.PromptCommit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promptCommitDo) Attrs(attrs ...field.AssignExpr) *promptCommitDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promptCommitDo) Assign(attrs ...field.AssignExpr) *promptCommitDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promptCommitDo) Joins(fields ...field.RelationField) *promptCommitDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promptCommitDo) Preload(fields ...field.RelationField) *promptCommitDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promptCommitDo) FirstOrInit() (*model.PromptCommit, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptCommit), nil
	}
}

func (p promptCommitDo) FirstOrCreate() (*model.PromptCommit, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptCommit), nil
	}
}

func (p promptCommitDo) FindByPage(offset int, limit int) (result []*model.PromptCommit, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promptCommitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promptCommitDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promptCommitDo) Delete(models ...*model.PromptCommit) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promptCommitDo) withDO(do gen.Dao) *promptCommitDo {
	p.DO = *do.(*gen.DO)
	return p
}
