// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                 db,
		PromptBasic:        newPromptBasic(db, opts...),
		PromptCommit:       newPromptCommit(db, opts...),
		PromptDebugContext: newPromptDebugContext(db, opts...),
		PromptDebugLog:     newPromptDebugLog(db, opts...),
		PromptUserDraft:    newPromptUserDraft(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	PromptBasic        promptBasic
	PromptCommit       promptCommit
	PromptDebugContext promptDebugContext
	PromptDebugLog     promptDebugLog
	PromptUserDraft    promptUserDraft
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		PromptBasic:        q.PromptBasic.clone(db),
		PromptCommit:       q.PromptCommit.clone(db),
		PromptDebugContext: q.PromptDebugContext.clone(db),
		PromptDebugLog:     q.PromptDebugLog.clone(db),
		PromptUserDraft:    q.PromptUserDraft.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		PromptBasic:        q.PromptBasic.replaceDB(db),
		PromptCommit:       q.PromptCommit.replaceDB(db),
		PromptDebugContext: q.PromptDebugContext.replaceDB(db),
		PromptDebugLog:     q.PromptDebugLog.replaceDB(db),
		PromptUserDraft:    q.PromptUserDraft.replaceDB(db),
	}
}

type queryCtx struct {
	PromptBasic        *promptBasicDo
	PromptCommit       *promptCommitDo
	PromptDebugContext *promptDebugContextDo
	PromptDebugLog     *promptDebugLogDo
	PromptUserDraft    *promptUserDraftDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		PromptBasic:        q.PromptBasic.WithContext(ctx),
		PromptCommit:       q.PromptCommit.WithContext(ctx),
		PromptDebugContext: q.PromptDebugContext.WithContext(ctx),
		PromptDebugLog:     q.PromptDebugLog.WithContext(ctx),
		PromptUserDraft:    q.PromptUserDraft.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
