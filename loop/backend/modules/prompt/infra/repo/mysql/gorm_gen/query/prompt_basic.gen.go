// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
)

func newPromptBasic(db *gorm.DB, opts ...gen.DOOption) promptBasic {
	_promptBasic := promptBasic{}

	_promptBasic.promptBasicDo.UseDB(db, opts...)
	_promptBasic.promptBasicDo.UseModel(&model.PromptBasic{})

	tableName := _promptBasic.promptBasicDo.TableName()
	_promptBasic.ALL = field.NewAsterisk(tableName)
	_promptBasic.ID = field.NewInt64(tableName, "id")
	_promptBasic.SpaceID = field.NewInt64(tableName, "space_id")
	_promptBasic.PromptKey = field.NewString(tableName, "prompt_key")
	_promptBasic.Name = field.NewString(tableName, "name")
	_promptBasic.Description = field.NewString(tableName, "description")
	_promptBasic.CreatedBy = field.NewString(tableName, "created_by")
	_promptBasic.UpdatedBy = field.NewString(tableName, "updated_by")
	_promptBasic.LatestVersion = field.NewString(tableName, "latest_version")
	_promptBasic.LatestCommitTime = field.NewTime(tableName, "latest_commit_time")
	_promptBasic.CreatedAt = field.NewTime(tableName, "created_at")
	_promptBasic.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promptBasic.DeletedAt = field.NewField(tableName, "deleted_at")

	_promptBasic.fillFieldMap()

	return _promptBasic
}

// promptBasic Prompt基础表
type promptBasic struct {
	promptBasicDo promptBasicDo

	ALL              field.Asterisk
	ID               field.Int64  // 主键ID
	SpaceID          field.Int64  // 空间ID
	PromptKey        field.String // Prompt key
	Name             field.String // Prompt名称
	Description      field.String // 描述
	CreatedBy        field.String // 创建人
	UpdatedBy        field.String // 更新人
	LatestVersion    field.String // 最新版本
	LatestCommitTime field.Time   // 最新提交时间
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 更新时间
	DeletedAt        field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (p promptBasic) Table(newTableName string) *promptBasic {
	p.promptBasicDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promptBasic) As(alias string) *promptBasic {
	p.promptBasicDo.DO = *(p.promptBasicDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promptBasic) updateTableName(table string) *promptBasic {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SpaceID = field.NewInt64(table, "space_id")
	p.PromptKey = field.NewString(table, "prompt_key")
	p.Name = field.NewString(table, "name")
	p.Description = field.NewString(table, "description")
	p.CreatedBy = field.NewString(table, "created_by")
	p.UpdatedBy = field.NewString(table, "updated_by")
	p.LatestVersion = field.NewString(table, "latest_version")
	p.LatestCommitTime = field.NewTime(table, "latest_commit_time")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *promptBasic) WithContext(ctx context.Context) *promptBasicDo {
	return p.promptBasicDo.WithContext(ctx)
}

func (p promptBasic) TableName() string { return p.promptBasicDo.TableName() }

func (p promptBasic) Alias() string { return p.promptBasicDo.Alias() }

func (p promptBasic) Columns(cols ...field.Expr) gen.Columns { return p.promptBasicDo.Columns(cols...) }

func (p *promptBasic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promptBasic) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["space_id"] = p.SpaceID
	p.fieldMap["prompt_key"] = p.PromptKey
	p.fieldMap["name"] = p.Name
	p.fieldMap["description"] = p.Description
	p.fieldMap["created_by"] = p.CreatedBy
	p.fieldMap["updated_by"] = p.UpdatedBy
	p.fieldMap["latest_version"] = p.LatestVersion
	p.fieldMap["latest_commit_time"] = p.LatestCommitTime
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p promptBasic) clone(db *gorm.DB) promptBasic {
	p.promptBasicDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promptBasic) replaceDB(db *gorm.DB) promptBasic {
	p.promptBasicDo.ReplaceDB(db)
	return p
}

type promptBasicDo struct{ gen.DO }

func (p promptBasicDo) Debug() *promptBasicDo {
	return p.withDO(p.DO.Debug())
}

func (p promptBasicDo) WithContext(ctx context.Context) *promptBasicDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promptBasicDo) ReadDB() *promptBasicDo {
	return p.Clauses(dbresolver.Read)
}

func (p promptBasicDo) WriteDB() *promptBasicDo {
	return p.Clauses(dbresolver.Write)
}

func (p promptBasicDo) Session(config *gorm.Session) *promptBasicDo {
	return p.withDO(p.DO.Session(config))
}

func (p promptBasicDo) Clauses(conds ...clause.Expression) *promptBasicDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promptBasicDo) Returning(value interface{}, columns ...string) *promptBasicDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promptBasicDo) Not(conds ...gen.Condition) *promptBasicDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promptBasicDo) Or(conds ...gen.Condition) *promptBasicDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promptBasicDo) Select(conds ...field.Expr) *promptBasicDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promptBasicDo) Where(conds ...gen.Condition) *promptBasicDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promptBasicDo) Order(conds ...field.Expr) *promptBasicDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promptBasicDo) Distinct(cols ...field.Expr) *promptBasicDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promptBasicDo) Omit(cols ...field.Expr) *promptBasicDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promptBasicDo) Join(table schema.Tabler, on ...field.Expr) *promptBasicDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promptBasicDo) LeftJoin(table schema.Tabler, on ...field.Expr) *promptBasicDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promptBasicDo) RightJoin(table schema.Tabler, on ...field.Expr) *promptBasicDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promptBasicDo) Group(cols ...field.Expr) *promptBasicDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promptBasicDo) Having(conds ...gen.Condition) *promptBasicDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promptBasicDo) Limit(limit int) *promptBasicDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promptBasicDo) Offset(offset int) *promptBasicDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promptBasicDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *promptBasicDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promptBasicDo) Unscoped() *promptBasicDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promptBasicDo) Create(values ...*model.PromptBasic) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promptBasicDo) CreateInBatches(values []*model.PromptBasic, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promptBasicDo) Save(values ...*model.PromptBasic) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promptBasicDo) First() (*model.PromptBasic, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptBasic), nil
	}
}

func (p promptBasicDo) Take() (*model.PromptBasic, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptBasic), nil
	}
}

func (p promptBasicDo) Last() (*model.PromptBasic, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptBasic), nil
	}
}

func (p promptBasicDo) Find() ([]*model.PromptBasic, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromptBasic), err
}

func (p promptBasicDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptBasic, err error) {
	buf := make([]*model.PromptBasic, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promptBasicDo) FindInBatches(result *[]*model.PromptBasic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promptBasicDo) Attrs(attrs ...field.AssignExpr) *promptBasicDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promptBasicDo) Assign(attrs ...field.AssignExpr) *promptBasicDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promptBasicDo) Joins(fields ...field.RelationField) *promptBasicDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promptBasicDo) Preload(fields ...field.RelationField) *promptBasicDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promptBasicDo) FirstOrInit() (*model.PromptBasic, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptBasic), nil
	}
}

func (p promptBasicDo) FirstOrCreate() (*model.PromptBasic, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptBasic), nil
	}
}

func (p promptBasicDo) FindByPage(offset int, limit int) (result []*model.PromptBasic, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promptBasicDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promptBasicDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promptBasicDo) Delete(models ...*model.PromptBasic) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promptBasicDo) withDO(do gen.Dao) *promptBasicDo {
	p.DO = *do.(*gen.DO)
	return p
}
