// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql (interfaces: IPromptBasicDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/prompt_basic_dao.go -package=mocks . IPromptBasicDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	mysql "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql"
	model "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIPromptBasicDAO is a mock of IPromptBasicDAO interface.
type MockIPromptBasicDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptBasicDAOMockRecorder
	isgomock struct{}
}

// MockIPromptBasicDAOMockRecorder is the mock recorder for MockIPromptBasicDAO.
type MockIPromptBasicDAOMockRecorder struct {
	mock *MockIPromptBasicDAO
}

// NewMockIPromptBasicDAO creates a new mock instance.
func NewMockIPromptBasicDAO(ctrl *gomock.Controller) *MockIPromptBasicDAO {
	mock := &MockIPromptBasicDAO{ctrl: ctrl}
	mock.recorder = &MockIPromptBasicDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPromptBasicDAO) EXPECT() *MockIPromptBasicDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPromptBasicDAO) Create(ctx context.Context, basicPO *model.PromptBasic, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, basicPO}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPromptBasicDAOMockRecorder) Create(ctx, basicPO any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, basicPO}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPromptBasicDAO)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockIPromptBasicDAO) Delete(ctx context.Context, promptID int64, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, promptID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIPromptBasicDAOMockRecorder) Delete(ctx, promptID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, promptID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPromptBasicDAO)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockIPromptBasicDAO) Get(ctx context.Context, promptID int64, lock bool, opts ...db.Option) (*model.PromptBasic, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, promptID, lock}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.PromptBasic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIPromptBasicDAOMockRecorder) Get(ctx, promptID, lock any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, promptID, lock}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPromptBasicDAO)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockIPromptBasicDAO) List(ctx context.Context, param mysql.ListPromptBasicParam, opts ...db.Option) ([]*model.PromptBasic, int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*model.PromptBasic)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIPromptBasicDAOMockRecorder) List(ctx, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPromptBasicDAO)(nil).List), varargs...)
}

// MGet mocks base method.
func (m *MockIPromptBasicDAO) MGet(ctx context.Context, promptIDs []int64, opts ...db.Option) (map[int64]*model.PromptBasic, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, promptIDs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGet", varargs...)
	ret0, _ := ret[0].(map[int64]*model.PromptBasic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockIPromptBasicDAOMockRecorder) MGet(ctx, promptIDs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, promptIDs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockIPromptBasicDAO)(nil).MGet), varargs...)
}

// MGetByPromptKey mocks base method.
func (m *MockIPromptBasicDAO) MGetByPromptKey(ctx context.Context, spaceID int64, promptKeys []string, opts ...db.Option) ([]*model.PromptBasic, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, promptKeys}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetByPromptKey", varargs...)
	ret0, _ := ret[0].([]*model.PromptBasic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetByPromptKey indicates an expected call of MGetByPromptKey.
func (mr *MockIPromptBasicDAOMockRecorder) MGetByPromptKey(ctx, spaceID, promptKeys any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, promptKeys}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetByPromptKey", reflect.TypeOf((*MockIPromptBasicDAO)(nil).MGetByPromptKey), varargs...)
}

// Update mocks base method.
func (m *MockIPromptBasicDAO) Update(ctx context.Context, promptID int64, updateFields map[string]any, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, promptID, updateFields}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIPromptBasicDAOMockRecorder) Update(ctx, promptID, updateFields any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, promptID, updateFields}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPromptBasicDAO)(nil).Update), varargs...)
}
