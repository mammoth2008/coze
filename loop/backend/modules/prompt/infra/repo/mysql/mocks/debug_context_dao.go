// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql (interfaces: IDebugContextDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/debug_context_dao.go -package=mocks . IDebugContextDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIDebugContextDAO is a mock of IDebugContextDAO interface.
type MockIDebugContextDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIDebugContextDAOMockRecorder
	isgomock struct{}
}

// MockIDebugContextDAOMockRecorder is the mock recorder for MockIDebugContextDAO.
type MockIDebugContextDAOMockRecorder struct {
	mock *MockIDebugContextDAO
}

// NewMockIDebugContextDAO creates a new mock instance.
func NewMockIDebugContextDAO(ctrl *gomock.Controller) *MockIDebugContextDAO {
	mock := &MockIDebugContextDAO{ctrl: ctrl}
	mock.recorder = &MockIDebugContextDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDebugContextDAO) EXPECT() *MockIDebugContextDAOMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIDebugContextDAO) Get(ctx context.Context, promptID int64, userID string, opts ...db.Option) (*model.PromptDebugContext, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, promptID, userID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.PromptDebugContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIDebugContextDAOMockRecorder) Get(ctx, promptID, userID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, promptID, userID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIDebugContextDAO)(nil).Get), varargs...)
}

// Save mocks base method.
func (m *MockIDebugContextDAO) Save(ctx context.Context, debugContext *model.PromptDebugContext, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, debugContext}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIDebugContextDAOMockRecorder) Save(ctx, debugContext any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, debugContext}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIDebugContextDAO)(nil).Save), varargs...)
}
