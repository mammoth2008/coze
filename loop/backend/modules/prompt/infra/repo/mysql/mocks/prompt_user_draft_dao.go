// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql (interfaces: IPromptUserDraftDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/prompt_user_draft_dao.go -package=mocks . IPromptUserDraftDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	mysql "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql"
	model "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIPromptUserDraftDAO is a mock of IPromptUserDraftDAO interface.
type MockIPromptUserDraftDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptUserDraftDAOMockRecorder
	isgomock struct{}
}

// MockIPromptUserDraftDAOMockRecorder is the mock recorder for MockIPromptUserDraftDAO.
type MockIPromptUserDraftDAOMockRecorder struct {
	mock *MockIPromptUserDraftDAO
}

// NewMockIPromptUserDraftDAO creates a new mock instance.
func NewMockIPromptUserDraftDAO(ctrl *gomock.Controller) *MockIPromptUserDraftDAO {
	mock := &MockIPromptUserDraftDAO{ctrl: ctrl}
	mock.recorder = &MockIPromptUserDraftDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPromptUserDraftDAO) EXPECT() *MockIPromptUserDraftDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPromptUserDraftDAO) Create(ctx context.Context, promptDraftPO *model.PromptUserDraft, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, promptDraftPO}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPromptUserDraftDAOMockRecorder) Create(ctx, promptDraftPO any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, promptDraftPO}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPromptUserDraftDAO)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockIPromptUserDraftDAO) Delete(ctx context.Context, draftID int64, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, draftID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIPromptUserDraftDAOMockRecorder) Delete(ctx, draftID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, draftID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPromptUserDraftDAO)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockIPromptUserDraftDAO) Get(ctx context.Context, promptID int64, userID string, opts ...db.Option) (*model.PromptUserDraft, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, promptID, userID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.PromptUserDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIPromptUserDraftDAOMockRecorder) Get(ctx, promptID, userID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, promptID, userID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPromptUserDraftDAO)(nil).Get), varargs...)
}

// GetByID mocks base method.
func (m *MockIPromptUserDraftDAO) GetByID(ctx context.Context, draftID int64, opts ...db.Option) (*model.PromptUserDraft, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, draftID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*model.PromptUserDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIPromptUserDraftDAOMockRecorder) GetByID(ctx, draftID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, draftID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIPromptUserDraftDAO)(nil).GetByID), varargs...)
}

// MGet mocks base method.
func (m *MockIPromptUserDraftDAO) MGet(ctx context.Context, pairs []mysql.PromptIDUserIDPair, opts ...db.Option) (map[mysql.PromptIDUserIDPair]*model.PromptUserDraft, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pairs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGet", varargs...)
	ret0, _ := ret[0].(map[mysql.PromptIDUserIDPair]*model.PromptUserDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockIPromptUserDraftDAOMockRecorder) MGet(ctx, pairs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pairs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockIPromptUserDraftDAO)(nil).MGet), varargs...)
}

// Update mocks base method.
func (m *MockIPromptUserDraftDAO) Update(ctx context.Context, promptDraftPO *model.PromptUserDraft, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, promptDraftPO}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIPromptUserDraftDAOMockRecorder) Update(ctx, promptDraftPO any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, promptDraftPO}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPromptUserDraftDAO)(nil).Update), varargs...)
}
