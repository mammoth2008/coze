// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql (interfaces: IDebugLogDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/debug_log_dao.go -package=mocks . IDebugLogDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	mysql "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql"
	model "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIDebugLogDAO is a mock of IDebugLogDAO interface.
type MockIDebugLogDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIDebugLogDAOMockRecorder
	isgomock struct{}
}

// MockIDebugLogDAOMockRecorder is the mock recorder for MockIDebugLogDAO.
type MockIDebugLogDAOMockRecorder struct {
	mock *MockIDebugLogDAO
}

// NewMockIDebugLogDAO creates a new mock instance.
func NewMockIDebugLogDAO(ctrl *gomock.Controller) *MockIDebugLogDAO {
	mock := &MockIDebugLogDAO{ctrl: ctrl}
	mock.recorder = &MockIDebugLogDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDebugLogDAO) EXPECT() *MockIDebugLogDAOMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockIDebugLogDAO) List(ctx context.Context, param mysql.ListParam, opts ...db.Option) ([]*model.PromptDebugLog, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*model.PromptDebugLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIDebugLogDAOMockRecorder) List(ctx, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIDebugLogDAO)(nil).List), varargs...)
}

// Save mocks base method.
func (m *MockIDebugLogDAO) Save(ctx context.Context, debugLog *model.PromptDebugLog, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, debugLog}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIDebugLogDAOMockRecorder) Save(ctx, debugLog any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, debugLog}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIDebugLogDAO)(nil).Save), varargs...)
}
