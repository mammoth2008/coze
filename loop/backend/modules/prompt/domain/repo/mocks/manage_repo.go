// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/repo (interfaces: IManageRepo)
//
// Generated by this command:
//
//	mockgen -destination=mocks/manage_repo.go -package=mocks . IManageRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	repo "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockIManageRepo is a mock of IManageRepo interface.
type MockIManageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIManageRepoMockRecorder
	isgomock struct{}
}

// MockIManageRepoMockRecorder is the mock recorder for MockIManageRepo.
type MockIManageRepoMockRecorder struct {
	mock *MockIManageRepo
}

// NewMockIManageRepo creates a new mock instance.
func NewMockIManageRepo(ctrl *gomock.Controller) *MockIManageRepo {
	mock := &MockIManageRepo{ctrl: ctrl}
	mock.recorder = &MockIManageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIManageRepo) EXPECT() *MockIManageRepoMockRecorder {
	return m.recorder
}

// CommitDraft mocks base method.
func (m *MockIManageRepo) CommitDraft(ctx context.Context, param repo.CommitDraftParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitDraft", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitDraft indicates an expected call of CommitDraft.
func (mr *MockIManageRepoMockRecorder) CommitDraft(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitDraft", reflect.TypeOf((*MockIManageRepo)(nil).CommitDraft), ctx, param)
}

// CreatePrompt mocks base method.
func (m *MockIManageRepo) CreatePrompt(ctx context.Context, promptDO *entity.Prompt) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrompt", ctx, promptDO)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrompt indicates an expected call of CreatePrompt.
func (mr *MockIManageRepoMockRecorder) CreatePrompt(ctx, promptDO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrompt", reflect.TypeOf((*MockIManageRepo)(nil).CreatePrompt), ctx, promptDO)
}

// DeletePrompt mocks base method.
func (m *MockIManageRepo) DeletePrompt(ctx context.Context, promptID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrompt", ctx, promptID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrompt indicates an expected call of DeletePrompt.
func (mr *MockIManageRepoMockRecorder) DeletePrompt(ctx, promptID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrompt", reflect.TypeOf((*MockIManageRepo)(nil).DeletePrompt), ctx, promptID)
}

// GetPrompt mocks base method.
func (m *MockIManageRepo) GetPrompt(ctx context.Context, param repo.GetPromptParam) (*entity.Prompt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrompt", ctx, param)
	ret0, _ := ret[0].(*entity.Prompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrompt indicates an expected call of GetPrompt.
func (mr *MockIManageRepoMockRecorder) GetPrompt(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrompt", reflect.TypeOf((*MockIManageRepo)(nil).GetPrompt), ctx, param)
}

// ListCommitInfo mocks base method.
func (m *MockIManageRepo) ListCommitInfo(ctx context.Context, param repo.ListCommitInfoParam) (*repo.ListCommitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommitInfo", ctx, param)
	ret0, _ := ret[0].(*repo.ListCommitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommitInfo indicates an expected call of ListCommitInfo.
func (mr *MockIManageRepoMockRecorder) ListCommitInfo(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommitInfo", reflect.TypeOf((*MockIManageRepo)(nil).ListCommitInfo), ctx, param)
}

// ListPrompt mocks base method.
func (m *MockIManageRepo) ListPrompt(ctx context.Context, param repo.ListPromptParam) (*repo.ListPromptResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrompt", ctx, param)
	ret0, _ := ret[0].(*repo.ListPromptResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrompt indicates an expected call of ListPrompt.
func (mr *MockIManageRepoMockRecorder) ListPrompt(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrompt", reflect.TypeOf((*MockIManageRepo)(nil).ListPrompt), ctx, param)
}

// MGetPrompt mocks base method.
func (m *MockIManageRepo) MGetPrompt(ctx context.Context, queries []repo.GetPromptParam, opts ...repo.GetPromptOptionFunc) (map[repo.GetPromptParam]*entity.Prompt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, queries}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetPrompt", varargs...)
	ret0, _ := ret[0].(map[repo.GetPromptParam]*entity.Prompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetPrompt indicates an expected call of MGetPrompt.
func (mr *MockIManageRepoMockRecorder) MGetPrompt(ctx, queries any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, queries}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetPrompt", reflect.TypeOf((*MockIManageRepo)(nil).MGetPrompt), varargs...)
}

// MGetPromptBasicByPromptKey mocks base method.
func (m *MockIManageRepo) MGetPromptBasicByPromptKey(ctx context.Context, spaceID int64, promptKeys []string, opts ...repo.GetPromptBasicOptionFunc) ([]*entity.Prompt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, promptKeys}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetPromptBasicByPromptKey", varargs...)
	ret0, _ := ret[0].([]*entity.Prompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetPromptBasicByPromptKey indicates an expected call of MGetPromptBasicByPromptKey.
func (mr *MockIManageRepoMockRecorder) MGetPromptBasicByPromptKey(ctx, spaceID, promptKeys any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, promptKeys}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetPromptBasicByPromptKey", reflect.TypeOf((*MockIManageRepo)(nil).MGetPromptBasicByPromptKey), varargs...)
}

// SaveDraft mocks base method.
func (m *MockIManageRepo) SaveDraft(ctx context.Context, promptDO *entity.Prompt) (*entity.DraftInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDraft", ctx, promptDO)
	ret0, _ := ret[0].(*entity.DraftInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveDraft indicates an expected call of SaveDraft.
func (mr *MockIManageRepoMockRecorder) SaveDraft(ctx, promptDO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDraft", reflect.TypeOf((*MockIManageRepo)(nil).SaveDraft), ctx, promptDO)
}

// UpdatePrompt mocks base method.
func (m *MockIManageRepo) UpdatePrompt(ctx context.Context, param repo.UpdatePromptParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrompt", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePrompt indicates an expected call of UpdatePrompt.
func (mr *MockIManageRepoMockRecorder) UpdatePrompt(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrompt", reflect.TypeOf((*MockIManageRepo)(nil).UpdatePrompt), ctx, param)
}
