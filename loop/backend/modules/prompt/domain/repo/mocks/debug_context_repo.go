// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/repo (interfaces: IDebugContextRepo)
//
// Generated by this command:
//
//	mockgen -destination=mocks/debug_context_repo.go -package=mocks . IDebugContextRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIDebugContextRepo is a mock of IDebugContextRepo interface.
type MockIDebugContextRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIDebugContextRepoMockRecorder
	isgomock struct{}
}

// MockIDebugContextRepoMockRecorder is the mock recorder for MockIDebugContextRepo.
type MockIDebugContextRepoMockRecorder struct {
	mock *MockIDebugContextRepo
}

// NewMockIDebugContextRepo creates a new mock instance.
func NewMockIDebugContextRepo(ctrl *gomock.Controller) *MockIDebugContextRepo {
	mock := &MockIDebugContextRepo{ctrl: ctrl}
	mock.recorder = &MockIDebugContextRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDebugContextRepo) EXPECT() *MockIDebugContextRepoMockRecorder {
	return m.recorder
}

// GetDebugContext mocks base method.
func (m *MockIDebugContextRepo) GetDebugContext(ctx context.Context, promptID int64, userID string) (*entity.DebugContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebugContext", ctx, promptID, userID)
	ret0, _ := ret[0].(*entity.DebugContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebugContext indicates an expected call of GetDebugContext.
func (mr *MockIDebugContextRepoMockRecorder) GetDebugContext(ctx, promptID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebugContext", reflect.TypeOf((*MockIDebugContextRepo)(nil).GetDebugContext), ctx, promptID, userID)
}

// SaveDebugContext mocks base method.
func (m *MockIDebugContextRepo) SaveDebugContext(ctx context.Context, debugContext *entity.DebugContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDebugContext", ctx, debugContext)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDebugContext indicates an expected call of SaveDebugContext.
func (mr *MockIDebugContextRepoMockRecorder) SaveDebugContext(ctx, debugContext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDebugContext", reflect.TypeOf((*MockIDebugContextRepo)(nil).SaveDebugContext), ctx, debugContext)
}
