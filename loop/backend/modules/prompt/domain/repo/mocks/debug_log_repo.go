// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/repo (interfaces: IDebugLogRepo)
//
// Generated by this command:
//
//	mockgen -destination=mocks/debug_log_repo.go -package=mocks . IDebugLogRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	repo "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockIDebugLogRepo is a mock of IDebugLogRepo interface.
type MockIDebugLogRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIDebugLogRepoMockRecorder
	isgomock struct{}
}

// MockIDebugLogRepoMockRecorder is the mock recorder for MockIDebugLogRepo.
type MockIDebugLogRepoMockRecorder struct {
	mock *MockIDebugLogRepo
}

// NewMockIDebugLogRepo creates a new mock instance.
func NewMockIDebugLogRepo(ctrl *gomock.Controller) *MockIDebugLogRepo {
	mock := &MockIDebugLogRepo{ctrl: ctrl}
	mock.recorder = &MockIDebugLogRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDebugLogRepo) EXPECT() *MockIDebugLogRepoMockRecorder {
	return m.recorder
}

// ListDebugHistory mocks base method.
func (m *MockIDebugLogRepo) ListDebugHistory(ctx context.Context, param repo.ListDebugHistoryParam) (*repo.ListDebugHistoryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDebugHistory", ctx, param)
	ret0, _ := ret[0].(*repo.ListDebugHistoryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDebugHistory indicates an expected call of ListDebugHistory.
func (mr *MockIDebugLogRepoMockRecorder) ListDebugHistory(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDebugHistory", reflect.TypeOf((*MockIDebugLogRepo)(nil).ListDebugHistory), ctx, param)
}

// SaveDebugLog mocks base method.
func (m *MockIDebugLogRepo) SaveDebugLog(ctx context.Context, debugLog *entity.DebugLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDebugLog", ctx, debugLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDebugLog indicates an expected call of SaveDebugLog.
func (mr *MockIDebugLogRepoMockRecorder) SaveDebugLog(ctx, debugLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDebugLog", reflect.TypeOf((*MockIDebugLogRepo)(nil).SaveDebugLog), ctx, debugLog)
}
