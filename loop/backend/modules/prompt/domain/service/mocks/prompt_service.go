// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/service (interfaces: IPromptService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/prompt_service.go -package=mocks . IPromptService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	service "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/service"
	gomock "go.uber.org/mock/gomock"
)

// MockIPromptService is a mock of IPromptService interface.
type MockIPromptService struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptServiceMockRecorder
	isgomock struct{}
}

// MockIPromptServiceMockRecorder is the mock recorder for MockIPromptService.
type MockIPromptServiceMockRecorder struct {
	mock *MockIPromptService
}

// NewMockIPromptService creates a new mock instance.
func NewMockIPromptService(ctrl *gomock.Controller) *MockIPromptService {
	mock := &MockIPromptService{ctrl: ctrl}
	mock.recorder = &MockIPromptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPromptService) EXPECT() *MockIPromptServiceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIPromptService) Execute(ctx context.Context, param service.ExecuteParam) (*entity.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, param)
	ret0, _ := ret[0].(*entity.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIPromptServiceMockRecorder) Execute(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIPromptService)(nil).Execute), ctx, param)
}

// ExecuteStreaming mocks base method.
func (m *MockIPromptService) ExecuteStreaming(ctx context.Context, param service.ExecuteStreamingParam) (*entity.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStreaming", ctx, param)
	ret0, _ := ret[0].(*entity.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteStreaming indicates an expected call of ExecuteStreaming.
func (mr *MockIPromptServiceMockRecorder) ExecuteStreaming(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStreaming", reflect.TypeOf((*MockIPromptService)(nil).ExecuteStreaming), ctx, param)
}

// FormatPrompt mocks base method.
func (m *MockIPromptService) FormatPrompt(ctx context.Context, prompt *entity.Prompt, messages []*entity.Message, variableVals []*entity.VariableVal) ([]*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatPrompt", ctx, prompt, messages, variableVals)
	ret0, _ := ret[0].([]*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatPrompt indicates an expected call of FormatPrompt.
func (mr *MockIPromptServiceMockRecorder) FormatPrompt(ctx, prompt, messages, variableVals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatPrompt", reflect.TypeOf((*MockIPromptService)(nil).FormatPrompt), ctx, prompt, messages, variableVals)
}

// MCompleteMultiModalFileURL mocks base method.
func (m *MockIPromptService) MCompleteMultiModalFileURL(ctx context.Context, messages []*entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MCompleteMultiModalFileURL", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// MCompleteMultiModalFileURL indicates an expected call of MCompleteMultiModalFileURL.
func (mr *MockIPromptServiceMockRecorder) MCompleteMultiModalFileURL(ctx, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MCompleteMultiModalFileURL", reflect.TypeOf((*MockIPromptService)(nil).MCompleteMultiModalFileURL), ctx, messages)
}

// MGetPromptIDs mocks base method.
func (m *MockIPromptService) MGetPromptIDs(ctx context.Context, spaceID int64, promptKeys []string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetPromptIDs", ctx, spaceID, promptKeys)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetPromptIDs indicates an expected call of MGetPromptIDs.
func (mr *MockIPromptServiceMockRecorder) MGetPromptIDs(ctx, spaceID, promptKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetPromptIDs", reflect.TypeOf((*MockIPromptService)(nil).MGetPromptIDs), ctx, spaceID, promptKeys)
}

// MParseCommitVersion mocks base method.
func (m *MockIPromptService) MParseCommitVersionByPromptKey(ctx context.Context, spaceID int64, pairs []service.PromptKeyVersionPair) (map[service.PromptKeyVersionPair]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MParseCommitVersionByPromptKey", ctx, spaceID, pairs)
	ret0, _ := ret[0].(map[service.PromptKeyVersionPair]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MParseCommitVersion indicates an expected call of MParseCommitVersion.
func (mr *MockIPromptServiceMockRecorder) MParseCommitVersion(ctx, spaceID, pairs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MParseCommitVersionByPromptKey", reflect.TypeOf((*MockIPromptService)(nil).MParseCommitVersionByPromptKey), ctx, spaceID, pairs)
}
