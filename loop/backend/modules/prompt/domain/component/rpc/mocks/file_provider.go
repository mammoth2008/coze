// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/component/rpc (interfaces: IFileProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/file_provider.go -package=mocks . IFileProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFileProvider is a mock of IFileProvider interface.
type MockIFileProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIFileProviderMockRecorder
	isgomock struct{}
}

// MockIFileProviderMockRecorder is the mock recorder for MockIFileProvider.
type MockIFileProviderMockRecorder struct {
	mock *MockIFileProvider
}

// NewMockIFileProvider creates a new mock instance.
func NewMockIFileProvider(ctrl *gomock.Controller) *MockIFileProvider {
	mock := &MockIFileProvider{ctrl: ctrl}
	mock.recorder = &MockIFileProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileProvider) EXPECT() *MockIFileProviderMockRecorder {
	return m.recorder
}

// MGetFileURL mocks base method.
func (m *MockIFileProvider) MGetFileURL(ctx context.Context, keys []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetFileURL", ctx, keys)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetFileURL indicates an expected call of MGetFileURL.
func (mr *MockIFileProviderMockRecorder) MGetFileURL(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetFileURL", reflect.TypeOf((*MockIFileProvider)(nil).MGetFileURL), ctx, keys)
}
