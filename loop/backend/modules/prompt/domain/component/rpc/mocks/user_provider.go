// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/component/rpc (interfaces: IUserProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/user_provider.go -package=mocks . IUserProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	rpc "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/component/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserProvider is a mock of IUserProvider interface.
type MockIUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIUserProviderMockRecorder
	isgomock struct{}
}

// MockIUserProviderMockRecorder is the mock recorder for MockIUserProvider.
type MockIUserProviderMockRecorder struct {
	mock *MockIUserProvider
}

// NewMockIUserProvider creates a new mock instance.
func NewMockIUserProvider(ctrl *gomock.Controller) *MockIUserProvider {
	mock := &MockIUserProvider{ctrl: ctrl}
	mock.recorder = &MockIUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserProvider) EXPECT() *MockIUserProviderMockRecorder {
	return m.recorder
}

// MGetUserInfo mocks base method.
func (m *MockIUserProvider) MGetUserInfo(ctx context.Context, userIDs []string) ([]*rpc.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetUserInfo", ctx, userIDs)
	ret0, _ := ret[0].([]*rpc.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetUserInfo indicates an expected call of MGetUserInfo.
func (mr *MockIUserProviderMockRecorder) MGetUserInfo(ctx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetUserInfo", reflect.TypeOf((*MockIUserProvider)(nil).MGetUserInfo), ctx, userIDs)
}
