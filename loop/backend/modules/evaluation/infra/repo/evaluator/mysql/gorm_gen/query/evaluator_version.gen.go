// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/evaluator/mysql/gorm_gen/model"
)

func newEvaluatorVersion(db *gorm.DB, opts ...gen.DOOption) evaluatorVersion {
	_evaluatorVersion := evaluatorVersion{}

	_evaluatorVersion.evaluatorVersionDo.UseDB(db, opts...)
	_evaluatorVersion.evaluatorVersionDo.UseModel(&model.EvaluatorVersion{})

	tableName := _evaluatorVersion.evaluatorVersionDo.TableName()
	_evaluatorVersion.ALL = field.NewAsterisk(tableName)
	_evaluatorVersion.ID = field.NewInt64(tableName, "id")
	_evaluatorVersion.SpaceID = field.NewInt64(tableName, "space_id")
	_evaluatorVersion.EvaluatorType = field.NewInt32(tableName, "evaluator_type")
	_evaluatorVersion.EvaluatorID = field.NewInt64(tableName, "evaluator_id")
	_evaluatorVersion.Version = field.NewString(tableName, "version")
	_evaluatorVersion.Description = field.NewString(tableName, "description")
	_evaluatorVersion.Metainfo = field.NewBytes(tableName, "metainfo")
	_evaluatorVersion.ReceiveChatHistory = field.NewBool(tableName, "receive_chat_history")
	_evaluatorVersion.InputSchema = field.NewBytes(tableName, "input_schema")
	_evaluatorVersion.CreatedBy = field.NewString(tableName, "created_by")
	_evaluatorVersion.UpdatedBy = field.NewString(tableName, "updated_by")
	_evaluatorVersion.CreatedAt = field.NewTime(tableName, "created_at")
	_evaluatorVersion.UpdatedAt = field.NewTime(tableName, "updated_at")
	_evaluatorVersion.DeletedAt = field.NewField(tableName, "deleted_at")

	_evaluatorVersion.fillFieldMap()

	return _evaluatorVersion
}

// evaluatorVersion NDB_SHARE_TABLE;评估器版本信息
type evaluatorVersion struct {
	evaluatorVersionDo evaluatorVersionDo

	ALL                field.Asterisk
	ID                 field.Int64  // idgen id
	SpaceID            field.Int64  // 空间id
	EvaluatorType      field.Int32  // 评估器类型
	EvaluatorID        field.Int64  // 评估器id
	Version            field.String // 版本号
	Description        field.String // 版本描述
	Metainfo           field.Bytes  // 具体内容, 每种静态规则类型对应一个解析方式, json
	ReceiveChatHistory field.Bool   // 是否需求传递上下文
	InputSchema        field.Bytes  // 评估器结构信息, json
	CreatedBy          field.String // 创建人
	UpdatedBy          field.String // 更新人
	CreatedAt          field.Time   // 创建时间
	UpdatedAt          field.Time   // 更新时间
	DeletedAt          field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (e evaluatorVersion) Table(newTableName string) *evaluatorVersion {
	e.evaluatorVersionDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e evaluatorVersion) As(alias string) *evaluatorVersion {
	e.evaluatorVersionDo.DO = *(e.evaluatorVersionDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *evaluatorVersion) updateTableName(table string) *evaluatorVersion {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.EvaluatorType = field.NewInt32(table, "evaluator_type")
	e.EvaluatorID = field.NewInt64(table, "evaluator_id")
	e.Version = field.NewString(table, "version")
	e.Description = field.NewString(table, "description")
	e.Metainfo = field.NewBytes(table, "metainfo")
	e.ReceiveChatHistory = field.NewBool(table, "receive_chat_history")
	e.InputSchema = field.NewBytes(table, "input_schema")
	e.CreatedBy = field.NewString(table, "created_by")
	e.UpdatedBy = field.NewString(table, "updated_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *evaluatorVersion) WithContext(ctx context.Context) *evaluatorVersionDo {
	return e.evaluatorVersionDo.WithContext(ctx)
}

func (e evaluatorVersion) TableName() string { return e.evaluatorVersionDo.TableName() }

func (e evaluatorVersion) Alias() string { return e.evaluatorVersionDo.Alias() }

func (e evaluatorVersion) Columns(cols ...field.Expr) gen.Columns {
	return e.evaluatorVersionDo.Columns(cols...)
}

func (e *evaluatorVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *evaluatorVersion) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 14)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["evaluator_type"] = e.EvaluatorType
	e.fieldMap["evaluator_id"] = e.EvaluatorID
	e.fieldMap["version"] = e.Version
	e.fieldMap["description"] = e.Description
	e.fieldMap["metainfo"] = e.Metainfo
	e.fieldMap["receive_chat_history"] = e.ReceiveChatHistory
	e.fieldMap["input_schema"] = e.InputSchema
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e evaluatorVersion) clone(db *gorm.DB) evaluatorVersion {
	e.evaluatorVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e evaluatorVersion) replaceDB(db *gorm.DB) evaluatorVersion {
	e.evaluatorVersionDo.ReplaceDB(db)
	return e
}

type evaluatorVersionDo struct{ gen.DO }

func (e evaluatorVersionDo) Debug() *evaluatorVersionDo {
	return e.withDO(e.DO.Debug())
}

func (e evaluatorVersionDo) WithContext(ctx context.Context) *evaluatorVersionDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e evaluatorVersionDo) ReadDB() *evaluatorVersionDo {
	return e.Clauses(dbresolver.Read)
}

func (e evaluatorVersionDo) WriteDB() *evaluatorVersionDo {
	return e.Clauses(dbresolver.Write)
}

func (e evaluatorVersionDo) Session(config *gorm.Session) *evaluatorVersionDo {
	return e.withDO(e.DO.Session(config))
}

func (e evaluatorVersionDo) Clauses(conds ...clause.Expression) *evaluatorVersionDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e evaluatorVersionDo) Returning(value interface{}, columns ...string) *evaluatorVersionDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e evaluatorVersionDo) Not(conds ...gen.Condition) *evaluatorVersionDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e evaluatorVersionDo) Or(conds ...gen.Condition) *evaluatorVersionDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e evaluatorVersionDo) Select(conds ...field.Expr) *evaluatorVersionDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e evaluatorVersionDo) Where(conds ...gen.Condition) *evaluatorVersionDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e evaluatorVersionDo) Order(conds ...field.Expr) *evaluatorVersionDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e evaluatorVersionDo) Distinct(cols ...field.Expr) *evaluatorVersionDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e evaluatorVersionDo) Omit(cols ...field.Expr) *evaluatorVersionDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e evaluatorVersionDo) Join(table schema.Tabler, on ...field.Expr) *evaluatorVersionDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e evaluatorVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *evaluatorVersionDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e evaluatorVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) *evaluatorVersionDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e evaluatorVersionDo) Group(cols ...field.Expr) *evaluatorVersionDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e evaluatorVersionDo) Having(conds ...gen.Condition) *evaluatorVersionDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e evaluatorVersionDo) Limit(limit int) *evaluatorVersionDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e evaluatorVersionDo) Offset(offset int) *evaluatorVersionDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e evaluatorVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *evaluatorVersionDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e evaluatorVersionDo) Unscoped() *evaluatorVersionDo {
	return e.withDO(e.DO.Unscoped())
}

func (e evaluatorVersionDo) Create(values ...*model.EvaluatorVersion) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e evaluatorVersionDo) CreateInBatches(values []*model.EvaluatorVersion, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e evaluatorVersionDo) Save(values ...*model.EvaluatorVersion) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e evaluatorVersionDo) First() (*model.EvaluatorVersion, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorVersion), nil
	}
}

func (e evaluatorVersionDo) Take() (*model.EvaluatorVersion, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorVersion), nil
	}
}

func (e evaluatorVersionDo) Last() (*model.EvaluatorVersion, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorVersion), nil
	}
}

func (e evaluatorVersionDo) Find() ([]*model.EvaluatorVersion, error) {
	result, err := e.DO.Find()
	return result.([]*model.EvaluatorVersion), err
}

func (e evaluatorVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EvaluatorVersion, err error) {
	buf := make([]*model.EvaluatorVersion, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e evaluatorVersionDo) FindInBatches(result *[]*model.EvaluatorVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e evaluatorVersionDo) Attrs(attrs ...field.AssignExpr) *evaluatorVersionDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e evaluatorVersionDo) Assign(attrs ...field.AssignExpr) *evaluatorVersionDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e evaluatorVersionDo) Joins(fields ...field.RelationField) *evaluatorVersionDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e evaluatorVersionDo) Preload(fields ...field.RelationField) *evaluatorVersionDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e evaluatorVersionDo) FirstOrInit() (*model.EvaluatorVersion, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorVersion), nil
	}
}

func (e evaluatorVersionDo) FirstOrCreate() (*model.EvaluatorVersion, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorVersion), nil
	}
}

func (e evaluatorVersionDo) FindByPage(offset int, limit int) (result []*model.EvaluatorVersion, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e evaluatorVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e evaluatorVersionDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e evaluatorVersionDo) Delete(models ...*model.EvaluatorVersion) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *evaluatorVersionDo) withDO(do gen.Dao) *evaluatorVersionDo {
	e.DO = *do.(*gen.DO)
	return e
}
