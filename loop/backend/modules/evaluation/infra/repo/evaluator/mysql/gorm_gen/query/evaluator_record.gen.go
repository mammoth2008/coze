// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/evaluator/mysql/gorm_gen/model"
)

func newEvaluatorRecord(db *gorm.DB, opts ...gen.DOOption) evaluatorRecord {
	_evaluatorRecord := evaluatorRecord{}

	_evaluatorRecord.evaluatorRecordDo.UseDB(db, opts...)
	_evaluatorRecord.evaluatorRecordDo.UseModel(&model.EvaluatorRecord{})

	tableName := _evaluatorRecord.evaluatorRecordDo.TableName()
	_evaluatorRecord.ALL = field.NewAsterisk(tableName)
	_evaluatorRecord.ID = field.NewInt64(tableName, "id")
	_evaluatorRecord.SpaceID = field.NewInt64(tableName, "space_id")
	_evaluatorRecord.EvaluatorVersionID = field.NewInt64(tableName, "evaluator_version_id")
	_evaluatorRecord.ExperimentID = field.NewInt64(tableName, "experiment_id")
	_evaluatorRecord.ExperimentRunID = field.NewInt64(tableName, "experiment_run_id")
	_evaluatorRecord.ItemID = field.NewInt64(tableName, "item_id")
	_evaluatorRecord.TurnID = field.NewInt64(tableName, "turn_id")
	_evaluatorRecord.LogID = field.NewString(tableName, "log_id")
	_evaluatorRecord.TraceID = field.NewString(tableName, "trace_id")
	_evaluatorRecord.Score = field.NewFloat64(tableName, "score")
	_evaluatorRecord.Status = field.NewInt32(tableName, "status")
	_evaluatorRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_evaluatorRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_evaluatorRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_evaluatorRecord.InputData = field.NewBytes(tableName, "input_data")
	_evaluatorRecord.OutputData = field.NewBytes(tableName, "output_data")
	_evaluatorRecord.CreatedBy = field.NewString(tableName, "created_by")
	_evaluatorRecord.UpdatedBy = field.NewString(tableName, "updated_by")
	_evaluatorRecord.Ext = field.NewBytes(tableName, "ext")

	_evaluatorRecord.fillFieldMap()

	return _evaluatorRecord
}

// evaluatorRecord NDB_SHARE_TABLE;评估器执行结果
type evaluatorRecord struct {
	evaluatorRecordDo evaluatorRecordDo

	ALL                field.Asterisk
	ID                 field.Int64   // idgen id
	SpaceID            field.Int64   // 空间id
	EvaluatorVersionID field.Int64   // 评估器版本id
	ExperimentID       field.Int64   // 实验id
	ExperimentRunID    field.Int64   // 实验执行id
	ItemID             field.Int64   // 评估集行id
	TurnID             field.Int64   // 评估集行轮次id
	LogID              field.String  // log id
	TraceID            field.String  // trace id
	Score              field.Float64 // 得分
	Status             field.Int32   // 执行状态
	CreatedAt          field.Time    // 创建时间
	UpdatedAt          field.Time    // 更新时间
	DeletedAt          field.Field   // 删除时间
	InputData          field.Bytes   // 输入, json
	OutputData         field.Bytes   // 执行结果, json
	CreatedBy          field.String  // 创建人
	UpdatedBy          field.String  // 更新人
	Ext                field.Bytes   // 补充信息, json

	fieldMap map[string]field.Expr
}

func (e evaluatorRecord) Table(newTableName string) *evaluatorRecord {
	e.evaluatorRecordDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e evaluatorRecord) As(alias string) *evaluatorRecord {
	e.evaluatorRecordDo.DO = *(e.evaluatorRecordDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *evaluatorRecord) updateTableName(table string) *evaluatorRecord {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.EvaluatorVersionID = field.NewInt64(table, "evaluator_version_id")
	e.ExperimentID = field.NewInt64(table, "experiment_id")
	e.ExperimentRunID = field.NewInt64(table, "experiment_run_id")
	e.ItemID = field.NewInt64(table, "item_id")
	e.TurnID = field.NewInt64(table, "turn_id")
	e.LogID = field.NewString(table, "log_id")
	e.TraceID = field.NewString(table, "trace_id")
	e.Score = field.NewFloat64(table, "score")
	e.Status = field.NewInt32(table, "status")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.InputData = field.NewBytes(table, "input_data")
	e.OutputData = field.NewBytes(table, "output_data")
	e.CreatedBy = field.NewString(table, "created_by")
	e.UpdatedBy = field.NewString(table, "updated_by")
	e.Ext = field.NewBytes(table, "ext")

	e.fillFieldMap()

	return e
}

func (e *evaluatorRecord) WithContext(ctx context.Context) *evaluatorRecordDo {
	return e.evaluatorRecordDo.WithContext(ctx)
}

func (e evaluatorRecord) TableName() string { return e.evaluatorRecordDo.TableName() }

func (e evaluatorRecord) Alias() string { return e.evaluatorRecordDo.Alias() }

func (e evaluatorRecord) Columns(cols ...field.Expr) gen.Columns {
	return e.evaluatorRecordDo.Columns(cols...)
}

func (e *evaluatorRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *evaluatorRecord) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 19)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["evaluator_version_id"] = e.EvaluatorVersionID
	e.fieldMap["experiment_id"] = e.ExperimentID
	e.fieldMap["experiment_run_id"] = e.ExperimentRunID
	e.fieldMap["item_id"] = e.ItemID
	e.fieldMap["turn_id"] = e.TurnID
	e.fieldMap["log_id"] = e.LogID
	e.fieldMap["trace_id"] = e.TraceID
	e.fieldMap["score"] = e.Score
	e.fieldMap["status"] = e.Status
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["input_data"] = e.InputData
	e.fieldMap["output_data"] = e.OutputData
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["ext"] = e.Ext
}

func (e evaluatorRecord) clone(db *gorm.DB) evaluatorRecord {
	e.evaluatorRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e evaluatorRecord) replaceDB(db *gorm.DB) evaluatorRecord {
	e.evaluatorRecordDo.ReplaceDB(db)
	return e
}

type evaluatorRecordDo struct{ gen.DO }

func (e evaluatorRecordDo) Debug() *evaluatorRecordDo {
	return e.withDO(e.DO.Debug())
}

func (e evaluatorRecordDo) WithContext(ctx context.Context) *evaluatorRecordDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e evaluatorRecordDo) ReadDB() *evaluatorRecordDo {
	return e.Clauses(dbresolver.Read)
}

func (e evaluatorRecordDo) WriteDB() *evaluatorRecordDo {
	return e.Clauses(dbresolver.Write)
}

func (e evaluatorRecordDo) Session(config *gorm.Session) *evaluatorRecordDo {
	return e.withDO(e.DO.Session(config))
}

func (e evaluatorRecordDo) Clauses(conds ...clause.Expression) *evaluatorRecordDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e evaluatorRecordDo) Returning(value interface{}, columns ...string) *evaluatorRecordDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e evaluatorRecordDo) Not(conds ...gen.Condition) *evaluatorRecordDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e evaluatorRecordDo) Or(conds ...gen.Condition) *evaluatorRecordDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e evaluatorRecordDo) Select(conds ...field.Expr) *evaluatorRecordDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e evaluatorRecordDo) Where(conds ...gen.Condition) *evaluatorRecordDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e evaluatorRecordDo) Order(conds ...field.Expr) *evaluatorRecordDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e evaluatorRecordDo) Distinct(cols ...field.Expr) *evaluatorRecordDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e evaluatorRecordDo) Omit(cols ...field.Expr) *evaluatorRecordDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e evaluatorRecordDo) Join(table schema.Tabler, on ...field.Expr) *evaluatorRecordDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e evaluatorRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *evaluatorRecordDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e evaluatorRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *evaluatorRecordDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e evaluatorRecordDo) Group(cols ...field.Expr) *evaluatorRecordDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e evaluatorRecordDo) Having(conds ...gen.Condition) *evaluatorRecordDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e evaluatorRecordDo) Limit(limit int) *evaluatorRecordDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e evaluatorRecordDo) Offset(offset int) *evaluatorRecordDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e evaluatorRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *evaluatorRecordDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e evaluatorRecordDo) Unscoped() *evaluatorRecordDo {
	return e.withDO(e.DO.Unscoped())
}

func (e evaluatorRecordDo) Create(values ...*model.EvaluatorRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e evaluatorRecordDo) CreateInBatches(values []*model.EvaluatorRecord, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e evaluatorRecordDo) Save(values ...*model.EvaluatorRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e evaluatorRecordDo) First() (*model.EvaluatorRecord, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorRecord), nil
	}
}

func (e evaluatorRecordDo) Take() (*model.EvaluatorRecord, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorRecord), nil
	}
}

func (e evaluatorRecordDo) Last() (*model.EvaluatorRecord, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorRecord), nil
	}
}

func (e evaluatorRecordDo) Find() ([]*model.EvaluatorRecord, error) {
	result, err := e.DO.Find()
	return result.([]*model.EvaluatorRecord), err
}

func (e evaluatorRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EvaluatorRecord, err error) {
	buf := make([]*model.EvaluatorRecord, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e evaluatorRecordDo) FindInBatches(result *[]*model.EvaluatorRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e evaluatorRecordDo) Attrs(attrs ...field.AssignExpr) *evaluatorRecordDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e evaluatorRecordDo) Assign(attrs ...field.AssignExpr) *evaluatorRecordDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e evaluatorRecordDo) Joins(fields ...field.RelationField) *evaluatorRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e evaluatorRecordDo) Preload(fields ...field.RelationField) *evaluatorRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e evaluatorRecordDo) FirstOrInit() (*model.EvaluatorRecord, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorRecord), nil
	}
}

func (e evaluatorRecordDo) FirstOrCreate() (*model.EvaluatorRecord, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorRecord), nil
	}
}

func (e evaluatorRecordDo) FindByPage(offset int, limit int) (result []*model.EvaluatorRecord, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e evaluatorRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e evaluatorRecordDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e evaluatorRecordDo) Delete(models ...*model.EvaluatorRecord) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *evaluatorRecordDo) withDO(do gen.Dao) *evaluatorRecordDo {
	e.DO = *do.(*gen.DO)
	return e
}
