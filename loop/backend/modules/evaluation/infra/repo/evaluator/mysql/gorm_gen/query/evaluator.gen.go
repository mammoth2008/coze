// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/evaluator/mysql/gorm_gen/model"
)

func newEvaluator(db *gorm.DB, opts ...gen.DOOption) evaluator {
	_evaluator := evaluator{}

	_evaluator.evaluatorDo.UseDB(db, opts...)
	_evaluator.evaluatorDo.UseModel(&model.Evaluator{})

	tableName := _evaluator.evaluatorDo.TableName()
	_evaluator.ALL = field.NewAsterisk(tableName)
	_evaluator.ID = field.NewInt64(tableName, "id")
	_evaluator.SpaceID = field.NewInt64(tableName, "space_id")
	_evaluator.EvaluatorType = field.NewInt32(tableName, "evaluator_type")
	_evaluator.Name = field.NewString(tableName, "name")
	_evaluator.Description = field.NewString(tableName, "description")
	_evaluator.DraftSubmitted = field.NewBool(tableName, "draft_submitted")
	_evaluator.CreatedBy = field.NewString(tableName, "created_by")
	_evaluator.UpdatedBy = field.NewString(tableName, "updated_by")
	_evaluator.CreatedAt = field.NewTime(tableName, "created_at")
	_evaluator.UpdatedAt = field.NewTime(tableName, "updated_at")
	_evaluator.DeletedAt = field.NewField(tableName, "deleted_at")
	_evaluator.LatestVersion = field.NewString(tableName, "latest_version")

	_evaluator.fillFieldMap()

	return _evaluator
}

// evaluator NDB_SHARE_TABLE;评估器信息
type evaluator struct {
	evaluatorDo evaluatorDo

	ALL            field.Asterisk
	ID             field.Int64  // idgen id
	SpaceID        field.Int64  // 空间id
	EvaluatorType  field.Int32  // 评估器类型
	Name           field.String // 名称
	Description    field.String // 描述
	DraftSubmitted field.Bool   // 草稿是否已提交
	CreatedBy      field.String // 创建人
	UpdatedBy      field.String // 更新人
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间
	DeletedAt      field.Field  // 删除时间
	LatestVersion  field.String // 最新版本号

	fieldMap map[string]field.Expr
}

func (e evaluator) Table(newTableName string) *evaluator {
	e.evaluatorDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e evaluator) As(alias string) *evaluator {
	e.evaluatorDo.DO = *(e.evaluatorDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *evaluator) updateTableName(table string) *evaluator {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.EvaluatorType = field.NewInt32(table, "evaluator_type")
	e.Name = field.NewString(table, "name")
	e.Description = field.NewString(table, "description")
	e.DraftSubmitted = field.NewBool(table, "draft_submitted")
	e.CreatedBy = field.NewString(table, "created_by")
	e.UpdatedBy = field.NewString(table, "updated_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.LatestVersion = field.NewString(table, "latest_version")

	e.fillFieldMap()

	return e
}

func (e *evaluator) WithContext(ctx context.Context) *evaluatorDo {
	return e.evaluatorDo.WithContext(ctx)
}

func (e evaluator) TableName() string { return e.evaluatorDo.TableName() }

func (e evaluator) Alias() string { return e.evaluatorDo.Alias() }

func (e evaluator) Columns(cols ...field.Expr) gen.Columns { return e.evaluatorDo.Columns(cols...) }

func (e *evaluator) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *evaluator) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["evaluator_type"] = e.EvaluatorType
	e.fieldMap["name"] = e.Name
	e.fieldMap["description"] = e.Description
	e.fieldMap["draft_submitted"] = e.DraftSubmitted
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["latest_version"] = e.LatestVersion
}

func (e evaluator) clone(db *gorm.DB) evaluator {
	e.evaluatorDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e evaluator) replaceDB(db *gorm.DB) evaluator {
	e.evaluatorDo.ReplaceDB(db)
	return e
}

type evaluatorDo struct{ gen.DO }

func (e evaluatorDo) Debug() *evaluatorDo {
	return e.withDO(e.DO.Debug())
}

func (e evaluatorDo) WithContext(ctx context.Context) *evaluatorDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e evaluatorDo) ReadDB() *evaluatorDo {
	return e.Clauses(dbresolver.Read)
}

func (e evaluatorDo) WriteDB() *evaluatorDo {
	return e.Clauses(dbresolver.Write)
}

func (e evaluatorDo) Session(config *gorm.Session) *evaluatorDo {
	return e.withDO(e.DO.Session(config))
}

func (e evaluatorDo) Clauses(conds ...clause.Expression) *evaluatorDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e evaluatorDo) Returning(value interface{}, columns ...string) *evaluatorDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e evaluatorDo) Not(conds ...gen.Condition) *evaluatorDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e evaluatorDo) Or(conds ...gen.Condition) *evaluatorDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e evaluatorDo) Select(conds ...field.Expr) *evaluatorDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e evaluatorDo) Where(conds ...gen.Condition) *evaluatorDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e evaluatorDo) Order(conds ...field.Expr) *evaluatorDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e evaluatorDo) Distinct(cols ...field.Expr) *evaluatorDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e evaluatorDo) Omit(cols ...field.Expr) *evaluatorDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e evaluatorDo) Join(table schema.Tabler, on ...field.Expr) *evaluatorDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e evaluatorDo) LeftJoin(table schema.Tabler, on ...field.Expr) *evaluatorDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e evaluatorDo) RightJoin(table schema.Tabler, on ...field.Expr) *evaluatorDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e evaluatorDo) Group(cols ...field.Expr) *evaluatorDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e evaluatorDo) Having(conds ...gen.Condition) *evaluatorDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e evaluatorDo) Limit(limit int) *evaluatorDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e evaluatorDo) Offset(offset int) *evaluatorDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e evaluatorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *evaluatorDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e evaluatorDo) Unscoped() *evaluatorDo {
	return e.withDO(e.DO.Unscoped())
}

func (e evaluatorDo) Create(values ...*model.Evaluator) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e evaluatorDo) CreateInBatches(values []*model.Evaluator, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e evaluatorDo) Save(values ...*model.Evaluator) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e evaluatorDo) First() (*model.Evaluator, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Evaluator), nil
	}
}

func (e evaluatorDo) Take() (*model.Evaluator, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Evaluator), nil
	}
}

func (e evaluatorDo) Last() (*model.Evaluator, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Evaluator), nil
	}
}

func (e evaluatorDo) Find() ([]*model.Evaluator, error) {
	result, err := e.DO.Find()
	return result.([]*model.Evaluator), err
}

func (e evaluatorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Evaluator, err error) {
	buf := make([]*model.Evaluator, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e evaluatorDo) FindInBatches(result *[]*model.Evaluator, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e evaluatorDo) Attrs(attrs ...field.AssignExpr) *evaluatorDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e evaluatorDo) Assign(attrs ...field.AssignExpr) *evaluatorDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e evaluatorDo) Joins(fields ...field.RelationField) *evaluatorDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e evaluatorDo) Preload(fields ...field.RelationField) *evaluatorDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e evaluatorDo) FirstOrInit() (*model.Evaluator, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Evaluator), nil
	}
}

func (e evaluatorDo) FirstOrCreate() (*model.Evaluator, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Evaluator), nil
	}
}

func (e evaluatorDo) FindByPage(offset int, limit int) (result []*model.Evaluator, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e evaluatorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e evaluatorDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e evaluatorDo) Delete(models ...*model.Evaluator) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *evaluatorDo) withDO(do gen.Dao) *evaluatorDo {
	e.DO = *do.(*gen.DO)
	return e
}
