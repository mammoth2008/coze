// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newExperiment(db *gorm.DB, opts ...gen.DOOption) experiment {
	_experiment := experiment{}

	_experiment.experimentDo.UseDB(db, opts...)
	_experiment.experimentDo.UseModel(&model.Experiment{})

	tableName := _experiment.experimentDo.TableName()
	_experiment.ALL = field.NewAsterisk(tableName)
	_experiment.ID = field.NewInt64(tableName, "id")
	_experiment.SpaceID = field.NewInt64(tableName, "space_id")
	_experiment.CreatedBy = field.NewString(tableName, "created_by")
	_experiment.Name = field.NewString(tableName, "name")
	_experiment.Description = field.NewString(tableName, "description")
	_experiment.EvalSetVersionID = field.NewInt64(tableName, "eval_set_version_id")
	_experiment.TargetType = field.NewInt64(tableName, "target_type")
	_experiment.TargetVersionID = field.NewInt64(tableName, "target_version_id")
	_experiment.EvalConf = field.NewBytes(tableName, "eval_conf")
	_experiment.Status = field.NewInt32(tableName, "status")
	_experiment.StatusMessage = field.NewBytes(tableName, "status_message")
	_experiment.StartAt = field.NewTime(tableName, "start_at")
	_experiment.EndAt = field.NewTime(tableName, "end_at")
	_experiment.CreatedAt = field.NewTime(tableName, "created_at")
	_experiment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_experiment.DeletedAt = field.NewField(tableName, "deleted_at")
	_experiment.LatestRunID = field.NewInt64(tableName, "latest_run_id")
	_experiment.TargetID = field.NewInt64(tableName, "target_id")
	_experiment.EvalSetID = field.NewInt64(tableName, "eval_set_id")
	_experiment.CreditCost = field.NewInt32(tableName, "credit_cost")
	_experiment.SourceType = field.NewInt32(tableName, "source_type")
	_experiment.SourceID = field.NewString(tableName, "source_id")
	_experiment.ExptType = field.NewInt32(tableName, "expt_type")
	_experiment.MaxAliveTime = field.NewInt64(tableName, "max_alive_time")

	_experiment.fillFieldMap()

	return _experiment
}

// experiment experiment
type experiment struct {
	experimentDo experimentDo

	ALL              field.Asterisk
	ID               field.Int64  // id
	SpaceID          field.Int64  // 空间 id
	CreatedBy        field.String // 创建者 id
	Name             field.String // 实验名称
	Description      field.String // 实验描述
	EvalSetVersionID field.Int64  // 评测集版本 id
	TargetType       field.Int64  // 评估对象类型
	TargetVersionID  field.Int64  // 评估对象版本 id
	EvalConf         field.Bytes  // 实验评估流程配置
	Status           field.Int32  // 状态
	StatusMessage    field.Bytes  // 状态提示信息
	StartAt          field.Time   // 开始执行时间
	EndAt            field.Time   // 结束执行时间
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 更新时间
	DeletedAt        field.Field  // 删除时间
	LatestRunID      field.Int64  // 最后运行id
	TargetID         field.Int64  // 评估对象 id
	EvalSetID        field.Int64  // 评测集 id
	CreditCost       field.Int32  // 权益消耗模式
	SourceType       field.Int32  // 实验来源类型，评测:1,自动化任务:2...
	SourceID         field.String // 实验来源id
	ExptType         field.Int32  // 实验类型，offline:1,online:2...
	MaxAliveTime     field.Int64  // 最大存活时间

	fieldMap map[string]field.Expr
}

func (e experiment) Table(newTableName string) *experiment {
	e.experimentDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e experiment) As(alias string) *experiment {
	e.experimentDo.DO = *(e.experimentDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *experiment) updateTableName(table string) *experiment {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.CreatedBy = field.NewString(table, "created_by")
	e.Name = field.NewString(table, "name")
	e.Description = field.NewString(table, "description")
	e.EvalSetVersionID = field.NewInt64(table, "eval_set_version_id")
	e.TargetType = field.NewInt64(table, "target_type")
	e.TargetVersionID = field.NewInt64(table, "target_version_id")
	e.EvalConf = field.NewBytes(table, "eval_conf")
	e.Status = field.NewInt32(table, "status")
	e.StatusMessage = field.NewBytes(table, "status_message")
	e.StartAt = field.NewTime(table, "start_at")
	e.EndAt = field.NewTime(table, "end_at")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.LatestRunID = field.NewInt64(table, "latest_run_id")
	e.TargetID = field.NewInt64(table, "target_id")
	e.EvalSetID = field.NewInt64(table, "eval_set_id")
	e.CreditCost = field.NewInt32(table, "credit_cost")
	e.SourceType = field.NewInt32(table, "source_type")
	e.SourceID = field.NewString(table, "source_id")
	e.ExptType = field.NewInt32(table, "expt_type")
	e.MaxAliveTime = field.NewInt64(table, "max_alive_time")

	e.fillFieldMap()

	return e
}

func (e *experiment) WithContext(ctx context.Context) *experimentDo {
	return e.experimentDo.WithContext(ctx)
}

func (e experiment) TableName() string { return e.experimentDo.TableName() }

func (e experiment) Alias() string { return e.experimentDo.Alias() }

func (e experiment) Columns(cols ...field.Expr) gen.Columns { return e.experimentDo.Columns(cols...) }

func (e *experiment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *experiment) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 24)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["name"] = e.Name
	e.fieldMap["description"] = e.Description
	e.fieldMap["eval_set_version_id"] = e.EvalSetVersionID
	e.fieldMap["target_type"] = e.TargetType
	e.fieldMap["target_version_id"] = e.TargetVersionID
	e.fieldMap["eval_conf"] = e.EvalConf
	e.fieldMap["status"] = e.Status
	e.fieldMap["status_message"] = e.StatusMessage
	e.fieldMap["start_at"] = e.StartAt
	e.fieldMap["end_at"] = e.EndAt
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["latest_run_id"] = e.LatestRunID
	e.fieldMap["target_id"] = e.TargetID
	e.fieldMap["eval_set_id"] = e.EvalSetID
	e.fieldMap["credit_cost"] = e.CreditCost
	e.fieldMap["source_type"] = e.SourceType
	e.fieldMap["source_id"] = e.SourceID
	e.fieldMap["expt_type"] = e.ExptType
	e.fieldMap["max_alive_time"] = e.MaxAliveTime
}

func (e experiment) clone(db *gorm.DB) experiment {
	e.experimentDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e experiment) replaceDB(db *gorm.DB) experiment {
	e.experimentDo.ReplaceDB(db)
	return e
}

type experimentDo struct{ gen.DO }

func (e experimentDo) Debug() *experimentDo {
	return e.withDO(e.DO.Debug())
}

func (e experimentDo) WithContext(ctx context.Context) *experimentDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e experimentDo) ReadDB() *experimentDo {
	return e.Clauses(dbresolver.Read)
}

func (e experimentDo) WriteDB() *experimentDo {
	return e.Clauses(dbresolver.Write)
}

func (e experimentDo) Session(config *gorm.Session) *experimentDo {
	return e.withDO(e.DO.Session(config))
}

func (e experimentDo) Clauses(conds ...clause.Expression) *experimentDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e experimentDo) Returning(value interface{}, columns ...string) *experimentDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e experimentDo) Not(conds ...gen.Condition) *experimentDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e experimentDo) Or(conds ...gen.Condition) *experimentDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e experimentDo) Select(conds ...field.Expr) *experimentDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e experimentDo) Where(conds ...gen.Condition) *experimentDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e experimentDo) Order(conds ...field.Expr) *experimentDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e experimentDo) Distinct(cols ...field.Expr) *experimentDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e experimentDo) Omit(cols ...field.Expr) *experimentDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e experimentDo) Join(table schema.Tabler, on ...field.Expr) *experimentDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e experimentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *experimentDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e experimentDo) RightJoin(table schema.Tabler, on ...field.Expr) *experimentDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e experimentDo) Group(cols ...field.Expr) *experimentDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e experimentDo) Having(conds ...gen.Condition) *experimentDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e experimentDo) Limit(limit int) *experimentDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e experimentDo) Offset(offset int) *experimentDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e experimentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *experimentDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e experimentDo) Unscoped() *experimentDo {
	return e.withDO(e.DO.Unscoped())
}

func (e experimentDo) Create(values ...*model.Experiment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e experimentDo) CreateInBatches(values []*model.Experiment, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e experimentDo) Save(values ...*model.Experiment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e experimentDo) First() (*model.Experiment, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Experiment), nil
	}
}

func (e experimentDo) Take() (*model.Experiment, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Experiment), nil
	}
}

func (e experimentDo) Last() (*model.Experiment, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Experiment), nil
	}
}

func (e experimentDo) Find() ([]*model.Experiment, error) {
	result, err := e.DO.Find()
	return result.([]*model.Experiment), err
}

func (e experimentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Experiment, err error) {
	buf := make([]*model.Experiment, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e experimentDo) FindInBatches(result *[]*model.Experiment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e experimentDo) Attrs(attrs ...field.AssignExpr) *experimentDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e experimentDo) Assign(attrs ...field.AssignExpr) *experimentDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e experimentDo) Joins(fields ...field.RelationField) *experimentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e experimentDo) Preload(fields ...field.RelationField) *experimentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e experimentDo) FirstOrInit() (*model.Experiment, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Experiment), nil
	}
}

func (e experimentDo) FirstOrCreate() (*model.Experiment, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Experiment), nil
	}
}

func (e experimentDo) FindByPage(offset int, limit int) (result []*model.Experiment, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e experimentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e experimentDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e experimentDo) Delete(models ...*model.Experiment) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *experimentDo) withDO(do gen.Dao) *experimentDo {
	e.DO = *do.(*gen.DO)
	return e
}
