// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptRunLogDAO)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptRunLogDAO is a mock of IExptRunLogDAO interface.
type MockIExptRunLogDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptRunLogDAOMockRecorder
}

// MockIExptRunLogDAOMockRecorder is the mock recorder for MockIExptRunLogDAO.
type MockIExptRunLogDAOMockRecorder struct {
	mock *MockIExptRunLogDAO
}

// NewMockIExptRunLogDAO creates a new mock instance.
func NewMockIExptRunLogDAO(ctrl *gomock.Controller) *MockIExptRunLogDAO {
	mock := &MockIExptRunLogDAO{ctrl: ctrl}
	mock.recorder = &MockIExptRunLogDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptRunLogDAO) EXPECT() *MockIExptRunLogDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIExptRunLogDAO) Create(arg0 context.Context, arg1 *model.ExptRunLog, arg2 ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptRunLogDAOMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptRunLogDAO)(nil).Create), varargs...)
}

// Get mocks base method.
func (m *MockIExptRunLogDAO) Get(arg0 context.Context, arg1, arg2 int64, arg3 ...db.Option) (*model.ExptRunLog, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.ExptRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIExptRunLogDAOMockRecorder) Get(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIExptRunLogDAO)(nil).Get), varargs...)
}

// Save mocks base method.
func (m *MockIExptRunLogDAO) Save(arg0 context.Context, arg1 *model.ExptRunLog, arg2 ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIExptRunLogDAOMockRecorder) Save(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIExptRunLogDAO)(nil).Save), varargs...)
}

// Update mocks base method.
func (m *MockIExptRunLogDAO) Update(arg0 context.Context, arg1, arg2 int64, arg3 map[string]interface{}, arg4 ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIExptRunLogDAOMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIExptRunLogDAO)(nil).Update), varargs...)
}
