// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptTurnEvaluatorResultRefDAO)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptTurnEvaluatorResultRefDAO is a mock of IExptTurnEvaluatorResultRefDAO interface.
type MockIExptTurnEvaluatorResultRefDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnEvaluatorResultRefDAOMockRecorder
}

// MockIExptTurnEvaluatorResultRefDAOMockRecorder is the mock recorder for MockIExptTurnEvaluatorResultRefDAO.
type MockIExptTurnEvaluatorResultRefDAOMockRecorder struct {
	mock *MockIExptTurnEvaluatorResultRefDAO
}

// NewMockIExptTurnEvaluatorResultRefDAO creates a new mock instance.
func NewMockIExptTurnEvaluatorResultRefDAO(ctrl *gomock.Controller) *MockIExptTurnEvaluatorResultRefDAO {
	mock := &MockIExptTurnEvaluatorResultRefDAO{ctrl: ctrl}
	mock.recorder = &MockIExptTurnEvaluatorResultRefDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnEvaluatorResultRefDAO) EXPECT() *MockIExptTurnEvaluatorResultRefDAOMockRecorder {
	return m.recorder
}

// BatchGet mocks base method.
func (m *MockIExptTurnEvaluatorResultRefDAO) BatchGet(arg0 context.Context, arg1 int64, arg2 []int64, arg3 ...db.Option) ([]*model.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockIExptTurnEvaluatorResultRefDAOMockRecorder) BatchGet(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockIExptTurnEvaluatorResultRefDAO)(nil).BatchGet), varargs...)
}

// GetByExptEvaluatorVersionID mocks base method.
func (m *MockIExptTurnEvaluatorResultRefDAO) GetByExptEvaluatorVersionID(arg0 context.Context, arg1, arg2, arg3 int64, arg4 ...db.Option) ([]*model.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByExptEvaluatorVersionID", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptEvaluatorVersionID indicates an expected call of GetByExptEvaluatorVersionID.
func (mr *MockIExptTurnEvaluatorResultRefDAOMockRecorder) GetByExptEvaluatorVersionID(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptEvaluatorVersionID", reflect.TypeOf((*MockIExptTurnEvaluatorResultRefDAO)(nil).GetByExptEvaluatorVersionID), varargs...)
}

// GetByExptID mocks base method.
func (m *MockIExptTurnEvaluatorResultRefDAO) GetByExptID(arg0 context.Context, arg1, arg2 int64, arg3 ...db.Option) ([]*model.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByExptID", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptID indicates an expected call of GetByExptID.
func (mr *MockIExptTurnEvaluatorResultRefDAOMockRecorder) GetByExptID(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptID", reflect.TypeOf((*MockIExptTurnEvaluatorResultRefDAO)(nil).GetByExptID), varargs...)
}
