// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newExptTurnResult(db *gorm.DB, opts ...gen.DOOption) exptTurnResult {
	_exptTurnResult := exptTurnResult{}

	_exptTurnResult.exptTurnResultDo.UseDB(db, opts...)
	_exptTurnResult.exptTurnResultDo.UseModel(&model.ExptTurnResult{})

	tableName := _exptTurnResult.exptTurnResultDo.TableName()
	_exptTurnResult.ALL = field.NewAsterisk(tableName)
	_exptTurnResult.ID = field.NewInt64(tableName, "id")
	_exptTurnResult.SpaceID = field.NewInt64(tableName, "space_id")
	_exptTurnResult.ExptID = field.NewInt64(tableName, "expt_id")
	_exptTurnResult.ExptRunID = field.NewInt64(tableName, "expt_run_id")
	_exptTurnResult.ItemID = field.NewInt64(tableName, "item_id")
	_exptTurnResult.TurnID = field.NewInt64(tableName, "turn_id")
	_exptTurnResult.TurnIdx = field.NewInt32(tableName, "turn_idx")
	_exptTurnResult.Status = field.NewInt32(tableName, "status")
	_exptTurnResult.TraceID = field.NewInt64(tableName, "trace_id")
	_exptTurnResult.LogID = field.NewString(tableName, "log_id")
	_exptTurnResult.TargetResultID = field.NewInt64(tableName, "target_result_id")
	_exptTurnResult.ErrMsg = field.NewBytes(tableName, "err_msg")
	_exptTurnResult.CreatedAt = field.NewTime(tableName, "created_at")
	_exptTurnResult.UpdatedAt = field.NewTime(tableName, "updated_at")
	_exptTurnResult.DeletedAt = field.NewField(tableName, "deleted_at")

	_exptTurnResult.fillFieldMap()

	return _exptTurnResult
}

// exptTurnResult expt_turn_result
type exptTurnResult struct {
	exptTurnResultDo exptTurnResultDo

	ALL            field.Asterisk
	ID             field.Int64  // id
	SpaceID        field.Int64  // 空间 id
	ExptID         field.Int64  // 实验 id
	ExptRunID      field.Int64  // 实验运行 id
	ItemID         field.Int64  // item_id
	TurnID         field.Int64  // turn_id
	TurnIdx        field.Int32  // turn 序号
	Status         field.Int32  // 状态
	TraceID        field.Int64  // trace_id
	LogID          field.String // 日志 id
	TargetResultID field.Int64  // target_result_id
	ErrMsg         field.Bytes  // 错误信息
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间
	DeletedAt      field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (e exptTurnResult) Table(newTableName string) *exptTurnResult {
	e.exptTurnResultDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exptTurnResult) As(alias string) *exptTurnResult {
	e.exptTurnResultDo.DO = *(e.exptTurnResultDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exptTurnResult) updateTableName(table string) *exptTurnResult {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.ExptID = field.NewInt64(table, "expt_id")
	e.ExptRunID = field.NewInt64(table, "expt_run_id")
	e.ItemID = field.NewInt64(table, "item_id")
	e.TurnID = field.NewInt64(table, "turn_id")
	e.TurnIdx = field.NewInt32(table, "turn_idx")
	e.Status = field.NewInt32(table, "status")
	e.TraceID = field.NewInt64(table, "trace_id")
	e.LogID = field.NewString(table, "log_id")
	e.TargetResultID = field.NewInt64(table, "target_result_id")
	e.ErrMsg = field.NewBytes(table, "err_msg")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *exptTurnResult) WithContext(ctx context.Context) *exptTurnResultDo {
	return e.exptTurnResultDo.WithContext(ctx)
}

func (e exptTurnResult) TableName() string { return e.exptTurnResultDo.TableName() }

func (e exptTurnResult) Alias() string { return e.exptTurnResultDo.Alias() }

func (e exptTurnResult) Columns(cols ...field.Expr) gen.Columns {
	return e.exptTurnResultDo.Columns(cols...)
}

func (e *exptTurnResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exptTurnResult) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 15)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["expt_id"] = e.ExptID
	e.fieldMap["expt_run_id"] = e.ExptRunID
	e.fieldMap["item_id"] = e.ItemID
	e.fieldMap["turn_id"] = e.TurnID
	e.fieldMap["turn_idx"] = e.TurnIdx
	e.fieldMap["status"] = e.Status
	e.fieldMap["trace_id"] = e.TraceID
	e.fieldMap["log_id"] = e.LogID
	e.fieldMap["target_result_id"] = e.TargetResultID
	e.fieldMap["err_msg"] = e.ErrMsg
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e exptTurnResult) clone(db *gorm.DB) exptTurnResult {
	e.exptTurnResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exptTurnResult) replaceDB(db *gorm.DB) exptTurnResult {
	e.exptTurnResultDo.ReplaceDB(db)
	return e
}

type exptTurnResultDo struct{ gen.DO }

func (e exptTurnResultDo) Debug() *exptTurnResultDo {
	return e.withDO(e.DO.Debug())
}

func (e exptTurnResultDo) WithContext(ctx context.Context) *exptTurnResultDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exptTurnResultDo) ReadDB() *exptTurnResultDo {
	return e.Clauses(dbresolver.Read)
}

func (e exptTurnResultDo) WriteDB() *exptTurnResultDo {
	return e.Clauses(dbresolver.Write)
}

func (e exptTurnResultDo) Session(config *gorm.Session) *exptTurnResultDo {
	return e.withDO(e.DO.Session(config))
}

func (e exptTurnResultDo) Clauses(conds ...clause.Expression) *exptTurnResultDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exptTurnResultDo) Returning(value interface{}, columns ...string) *exptTurnResultDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exptTurnResultDo) Not(conds ...gen.Condition) *exptTurnResultDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exptTurnResultDo) Or(conds ...gen.Condition) *exptTurnResultDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exptTurnResultDo) Select(conds ...field.Expr) *exptTurnResultDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exptTurnResultDo) Where(conds ...gen.Condition) *exptTurnResultDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exptTurnResultDo) Order(conds ...field.Expr) *exptTurnResultDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exptTurnResultDo) Distinct(cols ...field.Expr) *exptTurnResultDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exptTurnResultDo) Omit(cols ...field.Expr) *exptTurnResultDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exptTurnResultDo) Join(table schema.Tabler, on ...field.Expr) *exptTurnResultDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exptTurnResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) *exptTurnResultDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exptTurnResultDo) RightJoin(table schema.Tabler, on ...field.Expr) *exptTurnResultDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exptTurnResultDo) Group(cols ...field.Expr) *exptTurnResultDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exptTurnResultDo) Having(conds ...gen.Condition) *exptTurnResultDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exptTurnResultDo) Limit(limit int) *exptTurnResultDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exptTurnResultDo) Offset(offset int) *exptTurnResultDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exptTurnResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *exptTurnResultDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exptTurnResultDo) Unscoped() *exptTurnResultDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exptTurnResultDo) Create(values ...*model.ExptTurnResult) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exptTurnResultDo) CreateInBatches(values []*model.ExptTurnResult, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exptTurnResultDo) Save(values ...*model.ExptTurnResult) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exptTurnResultDo) First() (*model.ExptTurnResult, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResult), nil
	}
}

func (e exptTurnResultDo) Take() (*model.ExptTurnResult, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResult), nil
	}
}

func (e exptTurnResultDo) Last() (*model.ExptTurnResult, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResult), nil
	}
}

func (e exptTurnResultDo) Find() ([]*model.ExptTurnResult, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExptTurnResult), err
}

func (e exptTurnResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptTurnResult, err error) {
	buf := make([]*model.ExptTurnResult, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exptTurnResultDo) FindInBatches(result *[]*model.ExptTurnResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exptTurnResultDo) Attrs(attrs ...field.AssignExpr) *exptTurnResultDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exptTurnResultDo) Assign(attrs ...field.AssignExpr) *exptTurnResultDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exptTurnResultDo) Joins(fields ...field.RelationField) *exptTurnResultDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exptTurnResultDo) Preload(fields ...field.RelationField) *exptTurnResultDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exptTurnResultDo) FirstOrInit() (*model.ExptTurnResult, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResult), nil
	}
}

func (e exptTurnResultDo) FirstOrCreate() (*model.ExptTurnResult, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResult), nil
	}
}

func (e exptTurnResultDo) FindByPage(offset int, limit int) (result []*model.ExptTurnResult, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exptTurnResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exptTurnResultDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exptTurnResultDo) Delete(models ...*model.ExptTurnResult) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exptTurnResultDo) withDO(do gen.Dao) *exptTurnResultDo {
	e.DO = *do.(*gen.DO)
	return e
}
