// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptEvaluatorRefDAO)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptEvaluatorRefDAO is a mock of IExptEvaluatorRefDAO interface.
type MockIExptEvaluatorRefDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptEvaluatorRefDAOMockRecorder
}

// MockIExptEvaluatorRefDAOMockRecorder is the mock recorder for MockIExptEvaluatorRefDAO.
type MockIExptEvaluatorRefDAOMockRecorder struct {
	mock *MockIExptEvaluatorRefDAO
}

// NewMockIExptEvaluatorRefDAO creates a new mock instance.
func NewMockIExptEvaluatorRefDAO(ctrl *gomock.Controller) *MockIExptEvaluatorRefDAO {
	mock := &MockIExptEvaluatorRefDAO{ctrl: ctrl}
	mock.recorder = &MockIExptEvaluatorRefDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptEvaluatorRefDAO) EXPECT() *MockIExptEvaluatorRefDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIExptEvaluatorRefDAO) Create(arg0 context.Context, arg1 []*model.ExptEvaluatorRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptEvaluatorRefDAOMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptEvaluatorRefDAO)(nil).Create), arg0, arg1)
}

// MGetByExptID mocks base method.
func (m *MockIExptEvaluatorRefDAO) MGetByExptID(arg0 context.Context, arg1 []int64, arg2 int64) ([]*model.ExptEvaluatorRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetByExptID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.ExptEvaluatorRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetByExptID indicates an expected call of MGetByExptID.
func (mr *MockIExptEvaluatorRefDAOMockRecorder) MGetByExptID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetByExptID", reflect.TypeOf((*MockIExptEvaluatorRefDAO)(nil).MGetByExptID), arg0, arg1, arg2)
}
