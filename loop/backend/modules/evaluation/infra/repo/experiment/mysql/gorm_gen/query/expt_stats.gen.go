// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newExptStats(db *gorm.DB, opts ...gen.DOOption) exptStats {
	_exptStats := exptStats{}

	_exptStats.exptStatsDo.UseDB(db, opts...)
	_exptStats.exptStatsDo.UseModel(&model.ExptStats{})

	tableName := _exptStats.exptStatsDo.TableName()
	_exptStats.ALL = field.NewAsterisk(tableName)
	_exptStats.ID = field.NewInt64(tableName, "id")
	_exptStats.SpaceID = field.NewInt64(tableName, "space_id")
	_exptStats.ExptID = field.NewInt64(tableName, "expt_id")
	_exptStats.PendingCnt = field.NewInt32(tableName, "pending_cnt")
	_exptStats.SuccessCnt = field.NewInt32(tableName, "success_cnt")
	_exptStats.FailCnt = field.NewInt32(tableName, "fail_cnt")
	_exptStats.CreditCost = field.NewFloat64(tableName, "credit_cost")
	_exptStats.InputTokenCost = field.NewInt64(tableName, "input_token_cost")
	_exptStats.OutputTokenCost = field.NewInt64(tableName, "output_token_cost")
	_exptStats.CreatedAt = field.NewTime(tableName, "created_at")
	_exptStats.UpdatedAt = field.NewTime(tableName, "updated_at")
	_exptStats.DeletedAt = field.NewField(tableName, "deleted_at")
	_exptStats.ProcessingCnt = field.NewInt32(tableName, "processing_cnt")
	_exptStats.TerminatedCnt = field.NewInt32(tableName, "terminated_cnt")

	_exptStats.fillFieldMap()

	return _exptStats
}

// exptStats expt_stats
type exptStats struct {
	exptStatsDo exptStatsDo

	ALL             field.Asterisk
	ID              field.Int64   // id
	SpaceID         field.Int64   // 空间 id
	ExptID          field.Int64   // 实验 id
	PendingCnt      field.Int32   // pending_cnt
	SuccessCnt      field.Int32   // success_cnt
	FailCnt         field.Int32   // fail_cnt
	CreditCost      field.Float64 // credit 消耗
	InputTokenCost  field.Int64   // input token 消耗
	OutputTokenCost field.Int64   // output token 消耗
	CreatedAt       field.Time    // 创建时间
	UpdatedAt       field.Time    // 更新时间
	DeletedAt       field.Field   // 删除时间
	ProcessingCnt   field.Int32   // processing_cnt
	TerminatedCnt   field.Int32   // terminated_cnt

	fieldMap map[string]field.Expr
}

func (e exptStats) Table(newTableName string) *exptStats {
	e.exptStatsDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exptStats) As(alias string) *exptStats {
	e.exptStatsDo.DO = *(e.exptStatsDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exptStats) updateTableName(table string) *exptStats {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.ExptID = field.NewInt64(table, "expt_id")
	e.PendingCnt = field.NewInt32(table, "pending_cnt")
	e.SuccessCnt = field.NewInt32(table, "success_cnt")
	e.FailCnt = field.NewInt32(table, "fail_cnt")
	e.CreditCost = field.NewFloat64(table, "credit_cost")
	e.InputTokenCost = field.NewInt64(table, "input_token_cost")
	e.OutputTokenCost = field.NewInt64(table, "output_token_cost")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.ProcessingCnt = field.NewInt32(table, "processing_cnt")
	e.TerminatedCnt = field.NewInt32(table, "terminated_cnt")

	e.fillFieldMap()

	return e
}

func (e *exptStats) WithContext(ctx context.Context) *exptStatsDo {
	return e.exptStatsDo.WithContext(ctx)
}

func (e exptStats) TableName() string { return e.exptStatsDo.TableName() }

func (e exptStats) Alias() string { return e.exptStatsDo.Alias() }

func (e exptStats) Columns(cols ...field.Expr) gen.Columns { return e.exptStatsDo.Columns(cols...) }

func (e *exptStats) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exptStats) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 14)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["expt_id"] = e.ExptID
	e.fieldMap["pending_cnt"] = e.PendingCnt
	e.fieldMap["success_cnt"] = e.SuccessCnt
	e.fieldMap["fail_cnt"] = e.FailCnt
	e.fieldMap["credit_cost"] = e.CreditCost
	e.fieldMap["input_token_cost"] = e.InputTokenCost
	e.fieldMap["output_token_cost"] = e.OutputTokenCost
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["processing_cnt"] = e.ProcessingCnt
	e.fieldMap["terminated_cnt"] = e.TerminatedCnt
}

func (e exptStats) clone(db *gorm.DB) exptStats {
	e.exptStatsDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exptStats) replaceDB(db *gorm.DB) exptStats {
	e.exptStatsDo.ReplaceDB(db)
	return e
}

type exptStatsDo struct{ gen.DO }

func (e exptStatsDo) Debug() *exptStatsDo {
	return e.withDO(e.DO.Debug())
}

func (e exptStatsDo) WithContext(ctx context.Context) *exptStatsDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exptStatsDo) ReadDB() *exptStatsDo {
	return e.Clauses(dbresolver.Read)
}

func (e exptStatsDo) WriteDB() *exptStatsDo {
	return e.Clauses(dbresolver.Write)
}

func (e exptStatsDo) Session(config *gorm.Session) *exptStatsDo {
	return e.withDO(e.DO.Session(config))
}

func (e exptStatsDo) Clauses(conds ...clause.Expression) *exptStatsDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exptStatsDo) Returning(value interface{}, columns ...string) *exptStatsDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exptStatsDo) Not(conds ...gen.Condition) *exptStatsDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exptStatsDo) Or(conds ...gen.Condition) *exptStatsDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exptStatsDo) Select(conds ...field.Expr) *exptStatsDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exptStatsDo) Where(conds ...gen.Condition) *exptStatsDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exptStatsDo) Order(conds ...field.Expr) *exptStatsDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exptStatsDo) Distinct(cols ...field.Expr) *exptStatsDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exptStatsDo) Omit(cols ...field.Expr) *exptStatsDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exptStatsDo) Join(table schema.Tabler, on ...field.Expr) *exptStatsDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exptStatsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *exptStatsDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exptStatsDo) RightJoin(table schema.Tabler, on ...field.Expr) *exptStatsDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exptStatsDo) Group(cols ...field.Expr) *exptStatsDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exptStatsDo) Having(conds ...gen.Condition) *exptStatsDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exptStatsDo) Limit(limit int) *exptStatsDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exptStatsDo) Offset(offset int) *exptStatsDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exptStatsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *exptStatsDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exptStatsDo) Unscoped() *exptStatsDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exptStatsDo) Create(values ...*model.ExptStats) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exptStatsDo) CreateInBatches(values []*model.ExptStats, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exptStatsDo) Save(values ...*model.ExptStats) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exptStatsDo) First() (*model.ExptStats, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptStats), nil
	}
}

func (e exptStatsDo) Take() (*model.ExptStats, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptStats), nil
	}
}

func (e exptStatsDo) Last() (*model.ExptStats, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptStats), nil
	}
}

func (e exptStatsDo) Find() ([]*model.ExptStats, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExptStats), err
}

func (e exptStatsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptStats, err error) {
	buf := make([]*model.ExptStats, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exptStatsDo) FindInBatches(result *[]*model.ExptStats, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exptStatsDo) Attrs(attrs ...field.AssignExpr) *exptStatsDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exptStatsDo) Assign(attrs ...field.AssignExpr) *exptStatsDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exptStatsDo) Joins(fields ...field.RelationField) *exptStatsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exptStatsDo) Preload(fields ...field.RelationField) *exptStatsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exptStatsDo) FirstOrInit() (*model.ExptStats, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptStats), nil
	}
}

func (e exptStatsDo) FirstOrCreate() (*model.ExptStats, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptStats), nil
	}
}

func (e exptStatsDo) FindByPage(offset int, limit int) (result []*model.ExptStats, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exptStatsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exptStatsDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exptStatsDo) Delete(models ...*model.ExptStats) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exptStatsDo) withDO(do gen.Dao) *exptStatsDo {
	e.DO = *do.(*gen.DO)
	return e
}
