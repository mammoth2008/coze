// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newExptAggrResult(db *gorm.DB, opts ...gen.DOOption) exptAggrResult {
	_exptAggrResult := exptAggrResult{}

	_exptAggrResult.exptAggrResultDo.UseDB(db, opts...)
	_exptAggrResult.exptAggrResultDo.UseModel(&model.ExptAggrResult{})

	tableName := _exptAggrResult.exptAggrResultDo.TableName()
	_exptAggrResult.ALL = field.NewAsterisk(tableName)
	_exptAggrResult.ID = field.NewInt64(tableName, "id")
	_exptAggrResult.SpaceID = field.NewInt64(tableName, "space_id")
	_exptAggrResult.ExperimentID = field.NewInt64(tableName, "experiment_id")
	_exptAggrResult.FieldType = field.NewInt32(tableName, "field_type")
	_exptAggrResult.FieldKey = field.NewString(tableName, "field_key")
	_exptAggrResult.Score = field.NewFloat64(tableName, "score")
	_exptAggrResult.AggrResult = field.NewBytes(tableName, "aggr_result")
	_exptAggrResult.Version = field.NewInt64(tableName, "version")
	_exptAggrResult.Status = field.NewInt32(tableName, "status")
	_exptAggrResult.CreatedAt = field.NewTime(tableName, "created_at")
	_exptAggrResult.UpdatedAt = field.NewTime(tableName, "updated_at")
	_exptAggrResult.DeletedAt = field.NewField(tableName, "deleted_at")

	_exptAggrResult.fillFieldMap()

	return _exptAggrResult
}

// exptAggrResult 实验聚合结果表
type exptAggrResult struct {
	exptAggrResultDo exptAggrResultDo

	ALL          field.Asterisk
	ID           field.Int64   // idgen id
	SpaceID      field.Int64   // 空间id
	ExperimentID field.Int64   // 实验id
	FieldType    field.Int32   // 聚合字段类型 1：评估器得分
	FieldKey     field.String  // 聚合字段唯一标识
	Score        field.Float64 // 聚合后的平均得分
	AggrResult   field.Bytes   // 详细聚合结果
	Version      field.Int64   // 版本号(用于乐观锁)
	Status       field.Int32   // 计算状态 1:idle 2: caculating
	CreatedAt    field.Time    // 创建时间
	UpdatedAt    field.Time    // 更新时间
	DeletedAt    field.Field   // 删除时间

	fieldMap map[string]field.Expr
}

func (e exptAggrResult) Table(newTableName string) *exptAggrResult {
	e.exptAggrResultDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exptAggrResult) As(alias string) *exptAggrResult {
	e.exptAggrResultDo.DO = *(e.exptAggrResultDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exptAggrResult) updateTableName(table string) *exptAggrResult {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.ExperimentID = field.NewInt64(table, "experiment_id")
	e.FieldType = field.NewInt32(table, "field_type")
	e.FieldKey = field.NewString(table, "field_key")
	e.Score = field.NewFloat64(table, "score")
	e.AggrResult = field.NewBytes(table, "aggr_result")
	e.Version = field.NewInt64(table, "version")
	e.Status = field.NewInt32(table, "status")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *exptAggrResult) WithContext(ctx context.Context) *exptAggrResultDo {
	return e.exptAggrResultDo.WithContext(ctx)
}

func (e exptAggrResult) TableName() string { return e.exptAggrResultDo.TableName() }

func (e exptAggrResult) Alias() string { return e.exptAggrResultDo.Alias() }

func (e exptAggrResult) Columns(cols ...field.Expr) gen.Columns {
	return e.exptAggrResultDo.Columns(cols...)
}

func (e *exptAggrResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exptAggrResult) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["experiment_id"] = e.ExperimentID
	e.fieldMap["field_type"] = e.FieldType
	e.fieldMap["field_key"] = e.FieldKey
	e.fieldMap["score"] = e.Score
	e.fieldMap["aggr_result"] = e.AggrResult
	e.fieldMap["version"] = e.Version
	e.fieldMap["status"] = e.Status
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e exptAggrResult) clone(db *gorm.DB) exptAggrResult {
	e.exptAggrResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exptAggrResult) replaceDB(db *gorm.DB) exptAggrResult {
	e.exptAggrResultDo.ReplaceDB(db)
	return e
}

type exptAggrResultDo struct{ gen.DO }

func (e exptAggrResultDo) Debug() *exptAggrResultDo {
	return e.withDO(e.DO.Debug())
}

func (e exptAggrResultDo) WithContext(ctx context.Context) *exptAggrResultDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exptAggrResultDo) ReadDB() *exptAggrResultDo {
	return e.Clauses(dbresolver.Read)
}

func (e exptAggrResultDo) WriteDB() *exptAggrResultDo {
	return e.Clauses(dbresolver.Write)
}

func (e exptAggrResultDo) Session(config *gorm.Session) *exptAggrResultDo {
	return e.withDO(e.DO.Session(config))
}

func (e exptAggrResultDo) Clauses(conds ...clause.Expression) *exptAggrResultDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exptAggrResultDo) Returning(value interface{}, columns ...string) *exptAggrResultDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exptAggrResultDo) Not(conds ...gen.Condition) *exptAggrResultDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exptAggrResultDo) Or(conds ...gen.Condition) *exptAggrResultDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exptAggrResultDo) Select(conds ...field.Expr) *exptAggrResultDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exptAggrResultDo) Where(conds ...gen.Condition) *exptAggrResultDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exptAggrResultDo) Order(conds ...field.Expr) *exptAggrResultDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exptAggrResultDo) Distinct(cols ...field.Expr) *exptAggrResultDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exptAggrResultDo) Omit(cols ...field.Expr) *exptAggrResultDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exptAggrResultDo) Join(table schema.Tabler, on ...field.Expr) *exptAggrResultDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exptAggrResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) *exptAggrResultDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exptAggrResultDo) RightJoin(table schema.Tabler, on ...field.Expr) *exptAggrResultDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exptAggrResultDo) Group(cols ...field.Expr) *exptAggrResultDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exptAggrResultDo) Having(conds ...gen.Condition) *exptAggrResultDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exptAggrResultDo) Limit(limit int) *exptAggrResultDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exptAggrResultDo) Offset(offset int) *exptAggrResultDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exptAggrResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *exptAggrResultDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exptAggrResultDo) Unscoped() *exptAggrResultDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exptAggrResultDo) Create(values ...*model.ExptAggrResult) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exptAggrResultDo) CreateInBatches(values []*model.ExptAggrResult, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exptAggrResultDo) Save(values ...*model.ExptAggrResult) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exptAggrResultDo) First() (*model.ExptAggrResult, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptAggrResult), nil
	}
}

func (e exptAggrResultDo) Take() (*model.ExptAggrResult, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptAggrResult), nil
	}
}

func (e exptAggrResultDo) Last() (*model.ExptAggrResult, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptAggrResult), nil
	}
}

func (e exptAggrResultDo) Find() ([]*model.ExptAggrResult, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExptAggrResult), err
}

func (e exptAggrResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptAggrResult, err error) {
	buf := make([]*model.ExptAggrResult, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exptAggrResultDo) FindInBatches(result *[]*model.ExptAggrResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exptAggrResultDo) Attrs(attrs ...field.AssignExpr) *exptAggrResultDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exptAggrResultDo) Assign(attrs ...field.AssignExpr) *exptAggrResultDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exptAggrResultDo) Joins(fields ...field.RelationField) *exptAggrResultDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exptAggrResultDo) Preload(fields ...field.RelationField) *exptAggrResultDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exptAggrResultDo) FirstOrInit() (*model.ExptAggrResult, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptAggrResult), nil
	}
}

func (e exptAggrResultDo) FirstOrCreate() (*model.ExptAggrResult, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptAggrResult), nil
	}
}

func (e exptAggrResultDo) FindByPage(offset int, limit int) (result []*model.ExptAggrResult, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exptAggrResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exptAggrResultDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exptAggrResultDo) Delete(models ...*model.ExptAggrResult) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exptAggrResultDo) withDO(do gen.Dao) *exptAggrResultDo {
	e.DO = *do.(*gen.DO)
	return e
}
