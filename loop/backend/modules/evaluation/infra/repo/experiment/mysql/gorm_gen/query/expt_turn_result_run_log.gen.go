// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newExptTurnResultRunLog(db *gorm.DB, opts ...gen.DOOption) exptTurnResultRunLog {
	_exptTurnResultRunLog := exptTurnResultRunLog{}

	_exptTurnResultRunLog.exptTurnResultRunLogDo.UseDB(db, opts...)
	_exptTurnResultRunLog.exptTurnResultRunLogDo.UseModel(&model.ExptTurnResultRunLog{})

	tableName := _exptTurnResultRunLog.exptTurnResultRunLogDo.TableName()
	_exptTurnResultRunLog.ALL = field.NewAsterisk(tableName)
	_exptTurnResultRunLog.ID = field.NewInt64(tableName, "id")
	_exptTurnResultRunLog.SpaceID = field.NewInt64(tableName, "space_id")
	_exptTurnResultRunLog.ExptID = field.NewInt64(tableName, "expt_id")
	_exptTurnResultRunLog.ExptRunID = field.NewInt64(tableName, "expt_run_id")
	_exptTurnResultRunLog.ItemID = field.NewInt64(tableName, "item_id")
	_exptTurnResultRunLog.TurnID = field.NewInt64(tableName, "turn_id")
	_exptTurnResultRunLog.Status = field.NewInt32(tableName, "status")
	_exptTurnResultRunLog.TraceID = field.NewInt64(tableName, "trace_id")
	_exptTurnResultRunLog.LogID = field.NewString(tableName, "log_id")
	_exptTurnResultRunLog.TargetResultID = field.NewInt64(tableName, "target_result_id")
	_exptTurnResultRunLog.EvaluatorResultIds = field.NewBytes(tableName, "evaluator_result_ids")
	_exptTurnResultRunLog.ErrMsg = field.NewBytes(tableName, "err_msg")
	_exptTurnResultRunLog.CreatedAt = field.NewTime(tableName, "created_at")
	_exptTurnResultRunLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_exptTurnResultRunLog.DeletedAt = field.NewField(tableName, "deleted_at")

	_exptTurnResultRunLog.fillFieldMap()

	return _exptTurnResultRunLog
}

// exptTurnResultRunLog expt_item_result_run_log
type exptTurnResultRunLog struct {
	exptTurnResultRunLogDo exptTurnResultRunLogDo

	ALL                field.Asterisk
	ID                 field.Int64  // id
	SpaceID            field.Int64  // 空间 id
	ExptID             field.Int64  // 实验 id
	ExptRunID          field.Int64  // 实验运行 id
	ItemID             field.Int64  // item_id
	TurnID             field.Int64  // turn_id
	Status             field.Int32  // 状态
	TraceID            field.Int64  // trace_id
	LogID              field.String // 日志 id
	TargetResultID     field.Int64  // target_result_id
	EvaluatorResultIds field.Bytes  // evaluator_result_ids，json list 格式
	ErrMsg             field.Bytes  // 错误信息
	CreatedAt          field.Time   // 创建时间
	UpdatedAt          field.Time   // 更新时间
	DeletedAt          field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (e exptTurnResultRunLog) Table(newTableName string) *exptTurnResultRunLog {
	e.exptTurnResultRunLogDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exptTurnResultRunLog) As(alias string) *exptTurnResultRunLog {
	e.exptTurnResultRunLogDo.DO = *(e.exptTurnResultRunLogDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exptTurnResultRunLog) updateTableName(table string) *exptTurnResultRunLog {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.ExptID = field.NewInt64(table, "expt_id")
	e.ExptRunID = field.NewInt64(table, "expt_run_id")
	e.ItemID = field.NewInt64(table, "item_id")
	e.TurnID = field.NewInt64(table, "turn_id")
	e.Status = field.NewInt32(table, "status")
	e.TraceID = field.NewInt64(table, "trace_id")
	e.LogID = field.NewString(table, "log_id")
	e.TargetResultID = field.NewInt64(table, "target_result_id")
	e.EvaluatorResultIds = field.NewBytes(table, "evaluator_result_ids")
	e.ErrMsg = field.NewBytes(table, "err_msg")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *exptTurnResultRunLog) WithContext(ctx context.Context) *exptTurnResultRunLogDo {
	return e.exptTurnResultRunLogDo.WithContext(ctx)
}

func (e exptTurnResultRunLog) TableName() string { return e.exptTurnResultRunLogDo.TableName() }

func (e exptTurnResultRunLog) Alias() string { return e.exptTurnResultRunLogDo.Alias() }

func (e exptTurnResultRunLog) Columns(cols ...field.Expr) gen.Columns {
	return e.exptTurnResultRunLogDo.Columns(cols...)
}

func (e *exptTurnResultRunLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exptTurnResultRunLog) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 15)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["expt_id"] = e.ExptID
	e.fieldMap["expt_run_id"] = e.ExptRunID
	e.fieldMap["item_id"] = e.ItemID
	e.fieldMap["turn_id"] = e.TurnID
	e.fieldMap["status"] = e.Status
	e.fieldMap["trace_id"] = e.TraceID
	e.fieldMap["log_id"] = e.LogID
	e.fieldMap["target_result_id"] = e.TargetResultID
	e.fieldMap["evaluator_result_ids"] = e.EvaluatorResultIds
	e.fieldMap["err_msg"] = e.ErrMsg
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e exptTurnResultRunLog) clone(db *gorm.DB) exptTurnResultRunLog {
	e.exptTurnResultRunLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exptTurnResultRunLog) replaceDB(db *gorm.DB) exptTurnResultRunLog {
	e.exptTurnResultRunLogDo.ReplaceDB(db)
	return e
}

type exptTurnResultRunLogDo struct{ gen.DO }

func (e exptTurnResultRunLogDo) Debug() *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Debug())
}

func (e exptTurnResultRunLogDo) WithContext(ctx context.Context) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exptTurnResultRunLogDo) ReadDB() *exptTurnResultRunLogDo {
	return e.Clauses(dbresolver.Read)
}

func (e exptTurnResultRunLogDo) WriteDB() *exptTurnResultRunLogDo {
	return e.Clauses(dbresolver.Write)
}

func (e exptTurnResultRunLogDo) Session(config *gorm.Session) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Session(config))
}

func (e exptTurnResultRunLogDo) Clauses(conds ...clause.Expression) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exptTurnResultRunLogDo) Returning(value interface{}, columns ...string) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exptTurnResultRunLogDo) Not(conds ...gen.Condition) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exptTurnResultRunLogDo) Or(conds ...gen.Condition) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exptTurnResultRunLogDo) Select(conds ...field.Expr) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exptTurnResultRunLogDo) Where(conds ...gen.Condition) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exptTurnResultRunLogDo) Order(conds ...field.Expr) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exptTurnResultRunLogDo) Distinct(cols ...field.Expr) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exptTurnResultRunLogDo) Omit(cols ...field.Expr) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exptTurnResultRunLogDo) Join(table schema.Tabler, on ...field.Expr) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exptTurnResultRunLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exptTurnResultRunLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exptTurnResultRunLogDo) Group(cols ...field.Expr) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exptTurnResultRunLogDo) Having(conds ...gen.Condition) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exptTurnResultRunLogDo) Limit(limit int) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exptTurnResultRunLogDo) Offset(offset int) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exptTurnResultRunLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exptTurnResultRunLogDo) Unscoped() *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exptTurnResultRunLogDo) Create(values ...*model.ExptTurnResultRunLog) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exptTurnResultRunLogDo) CreateInBatches(values []*model.ExptTurnResultRunLog, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exptTurnResultRunLogDo) Save(values ...*model.ExptTurnResultRunLog) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exptTurnResultRunLogDo) First() (*model.ExptTurnResultRunLog, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultRunLog), nil
	}
}

func (e exptTurnResultRunLogDo) Take() (*model.ExptTurnResultRunLog, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultRunLog), nil
	}
}

func (e exptTurnResultRunLogDo) Last() (*model.ExptTurnResultRunLog, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultRunLog), nil
	}
}

func (e exptTurnResultRunLogDo) Find() ([]*model.ExptTurnResultRunLog, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExptTurnResultRunLog), err
}

func (e exptTurnResultRunLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptTurnResultRunLog, err error) {
	buf := make([]*model.ExptTurnResultRunLog, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exptTurnResultRunLogDo) FindInBatches(result *[]*model.ExptTurnResultRunLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exptTurnResultRunLogDo) Attrs(attrs ...field.AssignExpr) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exptTurnResultRunLogDo) Assign(attrs ...field.AssignExpr) *exptTurnResultRunLogDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exptTurnResultRunLogDo) Joins(fields ...field.RelationField) *exptTurnResultRunLogDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exptTurnResultRunLogDo) Preload(fields ...field.RelationField) *exptTurnResultRunLogDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exptTurnResultRunLogDo) FirstOrInit() (*model.ExptTurnResultRunLog, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultRunLog), nil
	}
}

func (e exptTurnResultRunLogDo) FirstOrCreate() (*model.ExptTurnResultRunLog, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultRunLog), nil
	}
}

func (e exptTurnResultRunLogDo) FindByPage(offset int, limit int) (result []*model.ExptTurnResultRunLog, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exptTurnResultRunLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exptTurnResultRunLogDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exptTurnResultRunLogDo) Delete(models ...*model.ExptTurnResultRunLog) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exptTurnResultRunLogDo) withDO(do gen.Dao) *exptTurnResultRunLogDo {
	e.DO = *do.(*gen.DO)
	return e
}
