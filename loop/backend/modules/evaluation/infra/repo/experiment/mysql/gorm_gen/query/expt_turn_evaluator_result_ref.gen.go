// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newExptTurnEvaluatorResultRef(db *gorm.DB, opts ...gen.DOOption) exptTurnEvaluatorResultRef {
	_exptTurnEvaluatorResultRef := exptTurnEvaluatorResultRef{}

	_exptTurnEvaluatorResultRef.exptTurnEvaluatorResultRefDo.UseDB(db, opts...)
	_exptTurnEvaluatorResultRef.exptTurnEvaluatorResultRefDo.UseModel(&model.ExptTurnEvaluatorResultRef{})

	tableName := _exptTurnEvaluatorResultRef.exptTurnEvaluatorResultRefDo.TableName()
	_exptTurnEvaluatorResultRef.ALL = field.NewAsterisk(tableName)
	_exptTurnEvaluatorResultRef.ID = field.NewInt64(tableName, "id")
	_exptTurnEvaluatorResultRef.SpaceID = field.NewInt64(tableName, "space_id")
	_exptTurnEvaluatorResultRef.ExptTurnResultID = field.NewInt64(tableName, "expt_turn_result_id")
	_exptTurnEvaluatorResultRef.EvaluatorVersionID = field.NewInt64(tableName, "evaluator_version_id")
	_exptTurnEvaluatorResultRef.EvaluatorResultID = field.NewInt64(tableName, "evaluator_result_id")
	_exptTurnEvaluatorResultRef.CreatedAt = field.NewTime(tableName, "created_at")
	_exptTurnEvaluatorResultRef.UpdatedAt = field.NewTime(tableName, "updated_at")
	_exptTurnEvaluatorResultRef.DeletedAt = field.NewField(tableName, "deleted_at")
	_exptTurnEvaluatorResultRef.ExptID = field.NewInt64(tableName, "expt_id")

	_exptTurnEvaluatorResultRef.fillFieldMap()

	return _exptTurnEvaluatorResultRef
}

// exptTurnEvaluatorResultRef expt_turn_evaluator_result_ref
type exptTurnEvaluatorResultRef struct {
	exptTurnEvaluatorResultRefDo exptTurnEvaluatorResultRefDo

	ALL                field.Asterisk
	ID                 field.Int64 // id
	SpaceID            field.Int64 // 空间 id
	ExptTurnResultID   field.Int64 // 实验 turn result id
	EvaluatorVersionID field.Int64 // 评估器版本 id
	EvaluatorResultID  field.Int64 // 评估器结果 id
	CreatedAt          field.Time  // 创建时间
	UpdatedAt          field.Time  // 更新时间
	DeletedAt          field.Field // 删除时间
	ExptID             field.Int64 // 实验 id

	fieldMap map[string]field.Expr
}

func (e exptTurnEvaluatorResultRef) Table(newTableName string) *exptTurnEvaluatorResultRef {
	e.exptTurnEvaluatorResultRefDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exptTurnEvaluatorResultRef) As(alias string) *exptTurnEvaluatorResultRef {
	e.exptTurnEvaluatorResultRefDo.DO = *(e.exptTurnEvaluatorResultRefDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exptTurnEvaluatorResultRef) updateTableName(table string) *exptTurnEvaluatorResultRef {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.ExptTurnResultID = field.NewInt64(table, "expt_turn_result_id")
	e.EvaluatorVersionID = field.NewInt64(table, "evaluator_version_id")
	e.EvaluatorResultID = field.NewInt64(table, "evaluator_result_id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.ExptID = field.NewInt64(table, "expt_id")

	e.fillFieldMap()

	return e
}

func (e *exptTurnEvaluatorResultRef) WithContext(ctx context.Context) *exptTurnEvaluatorResultRefDo {
	return e.exptTurnEvaluatorResultRefDo.WithContext(ctx)
}

func (e exptTurnEvaluatorResultRef) TableName() string {
	return e.exptTurnEvaluatorResultRefDo.TableName()
}

func (e exptTurnEvaluatorResultRef) Alias() string { return e.exptTurnEvaluatorResultRefDo.Alias() }

func (e exptTurnEvaluatorResultRef) Columns(cols ...field.Expr) gen.Columns {
	return e.exptTurnEvaluatorResultRefDo.Columns(cols...)
}

func (e *exptTurnEvaluatorResultRef) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exptTurnEvaluatorResultRef) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["expt_turn_result_id"] = e.ExptTurnResultID
	e.fieldMap["evaluator_version_id"] = e.EvaluatorVersionID
	e.fieldMap["evaluator_result_id"] = e.EvaluatorResultID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["expt_id"] = e.ExptID
}

func (e exptTurnEvaluatorResultRef) clone(db *gorm.DB) exptTurnEvaluatorResultRef {
	e.exptTurnEvaluatorResultRefDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exptTurnEvaluatorResultRef) replaceDB(db *gorm.DB) exptTurnEvaluatorResultRef {
	e.exptTurnEvaluatorResultRefDo.ReplaceDB(db)
	return e
}

type exptTurnEvaluatorResultRefDo struct{ gen.DO }

func (e exptTurnEvaluatorResultRefDo) Debug() *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Debug())
}

func (e exptTurnEvaluatorResultRefDo) WithContext(ctx context.Context) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exptTurnEvaluatorResultRefDo) ReadDB() *exptTurnEvaluatorResultRefDo {
	return e.Clauses(dbresolver.Read)
}

func (e exptTurnEvaluatorResultRefDo) WriteDB() *exptTurnEvaluatorResultRefDo {
	return e.Clauses(dbresolver.Write)
}

func (e exptTurnEvaluatorResultRefDo) Session(config *gorm.Session) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Session(config))
}

func (e exptTurnEvaluatorResultRefDo) Clauses(conds ...clause.Expression) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exptTurnEvaluatorResultRefDo) Returning(value interface{}, columns ...string) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exptTurnEvaluatorResultRefDo) Not(conds ...gen.Condition) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exptTurnEvaluatorResultRefDo) Or(conds ...gen.Condition) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exptTurnEvaluatorResultRefDo) Select(conds ...field.Expr) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exptTurnEvaluatorResultRefDo) Where(conds ...gen.Condition) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exptTurnEvaluatorResultRefDo) Order(conds ...field.Expr) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exptTurnEvaluatorResultRefDo) Distinct(cols ...field.Expr) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exptTurnEvaluatorResultRefDo) Omit(cols ...field.Expr) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exptTurnEvaluatorResultRefDo) Join(table schema.Tabler, on ...field.Expr) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exptTurnEvaluatorResultRefDo) LeftJoin(table schema.Tabler, on ...field.Expr) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exptTurnEvaluatorResultRefDo) RightJoin(table schema.Tabler, on ...field.Expr) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exptTurnEvaluatorResultRefDo) Group(cols ...field.Expr) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exptTurnEvaluatorResultRefDo) Having(conds ...gen.Condition) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exptTurnEvaluatorResultRefDo) Limit(limit int) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exptTurnEvaluatorResultRefDo) Offset(offset int) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exptTurnEvaluatorResultRefDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exptTurnEvaluatorResultRefDo) Unscoped() *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exptTurnEvaluatorResultRefDo) Create(values ...*model.ExptTurnEvaluatorResultRef) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exptTurnEvaluatorResultRefDo) CreateInBatches(values []*model.ExptTurnEvaluatorResultRef, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exptTurnEvaluatorResultRefDo) Save(values ...*model.ExptTurnEvaluatorResultRef) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exptTurnEvaluatorResultRefDo) First() (*model.ExptTurnEvaluatorResultRef, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnEvaluatorResultRef), nil
	}
}

func (e exptTurnEvaluatorResultRefDo) Take() (*model.ExptTurnEvaluatorResultRef, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnEvaluatorResultRef), nil
	}
}

func (e exptTurnEvaluatorResultRefDo) Last() (*model.ExptTurnEvaluatorResultRef, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnEvaluatorResultRef), nil
	}
}

func (e exptTurnEvaluatorResultRefDo) Find() ([]*model.ExptTurnEvaluatorResultRef, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExptTurnEvaluatorResultRef), err
}

func (e exptTurnEvaluatorResultRefDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptTurnEvaluatorResultRef, err error) {
	buf := make([]*model.ExptTurnEvaluatorResultRef, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exptTurnEvaluatorResultRefDo) FindInBatches(result *[]*model.ExptTurnEvaluatorResultRef, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exptTurnEvaluatorResultRefDo) Attrs(attrs ...field.AssignExpr) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exptTurnEvaluatorResultRefDo) Assign(attrs ...field.AssignExpr) *exptTurnEvaluatorResultRefDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exptTurnEvaluatorResultRefDo) Joins(fields ...field.RelationField) *exptTurnEvaluatorResultRefDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exptTurnEvaluatorResultRefDo) Preload(fields ...field.RelationField) *exptTurnEvaluatorResultRefDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exptTurnEvaluatorResultRefDo) FirstOrInit() (*model.ExptTurnEvaluatorResultRef, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnEvaluatorResultRef), nil
	}
}

func (e exptTurnEvaluatorResultRefDo) FirstOrCreate() (*model.ExptTurnEvaluatorResultRef, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnEvaluatorResultRef), nil
	}
}

func (e exptTurnEvaluatorResultRefDo) FindByPage(offset int, limit int) (result []*model.ExptTurnEvaluatorResultRef, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exptTurnEvaluatorResultRefDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exptTurnEvaluatorResultRefDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exptTurnEvaluatorResultRefDo) Delete(models ...*model.ExptTurnEvaluatorResultRef) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exptTurnEvaluatorResultRefDo) withDO(do gen.Dao) *exptTurnEvaluatorResultRefDo {
	e.DO = *do.(*gen.DO)
	return e
}
