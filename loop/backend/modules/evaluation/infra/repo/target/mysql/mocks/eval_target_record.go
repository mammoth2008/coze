// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/target/mysql (interfaces: EvalTargetRecordDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/eval_target_record.go -package=mocks . EvalTargetRecordDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/target/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEvalTargetRecordDAO is a mock of EvalTargetRecordDAO interface.
type MockEvalTargetRecordDAO struct {
	ctrl     *gomock.Controller
	recorder *MockEvalTargetRecordDAOMockRecorder
	isgomock struct{}
}

// MockEvalTargetRecordDAOMockRecorder is the mock recorder for MockEvalTargetRecordDAO.
type MockEvalTargetRecordDAOMockRecorder struct {
	mock *MockEvalTargetRecordDAO
}

// NewMockEvalTargetRecordDAO creates a new mock instance.
func NewMockEvalTargetRecordDAO(ctrl *gomock.Controller) *MockEvalTargetRecordDAO {
	mock := &MockEvalTargetRecordDAO{ctrl: ctrl}
	mock.recorder = &MockEvalTargetRecordDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvalTargetRecordDAO) EXPECT() *MockEvalTargetRecordDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEvalTargetRecordDAO) Create(ctx context.Context, record *model.TargetRecord) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, record)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEvalTargetRecordDAOMockRecorder) Create(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEvalTargetRecordDAO)(nil).Create), ctx, record)
}

// GetByIDAndSpaceID mocks base method.
func (m *MockEvalTargetRecordDAO) GetByIDAndSpaceID(ctx context.Context, recordID, spaceID int64) (*model.TargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDAndSpaceID", ctx, recordID, spaceID)
	ret0, _ := ret[0].(*model.TargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDAndSpaceID indicates an expected call of GetByIDAndSpaceID.
func (mr *MockEvalTargetRecordDAOMockRecorder) GetByIDAndSpaceID(ctx, recordID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDAndSpaceID", reflect.TypeOf((*MockEvalTargetRecordDAO)(nil).GetByIDAndSpaceID), ctx, recordID, spaceID)
}

// ListByIDsAndSpaceID mocks base method.
func (m *MockEvalTargetRecordDAO) ListByIDsAndSpaceID(ctx context.Context, recordIDs []int64, spaceID int64) ([]*model.TargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByIDsAndSpaceID", ctx, recordIDs, spaceID)
	ret0, _ := ret[0].([]*model.TargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByIDsAndSpaceID indicates an expected call of ListByIDsAndSpaceID.
func (mr *MockEvalTargetRecordDAOMockRecorder) ListByIDsAndSpaceID(ctx, recordIDs, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByIDsAndSpaceID", reflect.TypeOf((*MockEvalTargetRecordDAO)(nil).ListByIDsAndSpaceID), ctx, recordIDs, spaceID)
}
