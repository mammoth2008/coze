// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/target/mysql (interfaces: EvalTargetDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/eval_target.go -package=mocks . EvalTargetDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/target/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEvalTargetDAO is a mock of EvalTargetDAO interface.
type MockEvalTargetDAO struct {
	ctrl     *gomock.Controller
	recorder *MockEvalTargetDAOMockRecorder
	isgomock struct{}
}

// MockEvalTargetDAOMockRecorder is the mock recorder for MockEvalTargetDAO.
type MockEvalTargetDAOMockRecorder struct {
	mock *MockEvalTargetDAO
}

// NewMockEvalTargetDAO creates a new mock instance.
func NewMockEvalTargetDAO(ctrl *gomock.Controller) *MockEvalTargetDAO {
	mock := &MockEvalTargetDAO{ctrl: ctrl}
	mock.recorder = &MockEvalTargetDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvalTargetDAO) EXPECT() *MockEvalTargetDAOMockRecorder {
	return m.recorder
}

// BatchGetEvalTarget mocks base method.
func (m *MockEvalTargetDAO) BatchGetEvalTarget(ctx context.Context, spaceID int64, targetIDs []int64, opts ...db.Option) ([]*model.Target, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, targetIDs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetEvalTarget", varargs...)
	ret0, _ := ret[0].([]*model.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvalTarget indicates an expected call of BatchGetEvalTarget.
func (mr *MockEvalTargetDAOMockRecorder) BatchGetEvalTarget(ctx, spaceID, targetIDs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, targetIDs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvalTarget", reflect.TypeOf((*MockEvalTargetDAO)(nil).BatchGetEvalTarget), varargs...)
}

// BatchGetEvalTargetBySource mocks base method.
func (m *MockEvalTargetDAO) BatchGetEvalTargetBySource(ctx context.Context, spaceID int64, sourceTargetIDs []string, targetType int32, opts ...db.Option) ([]*model.Target, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, sourceTargetIDs, targetType}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetEvalTargetBySource", varargs...)
	ret0, _ := ret[0].([]*model.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvalTargetBySource indicates an expected call of BatchGetEvalTargetBySource.
func (mr *MockEvalTargetDAOMockRecorder) BatchGetEvalTargetBySource(ctx, spaceID, sourceTargetIDs, targetType any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, sourceTargetIDs, targetType}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvalTargetBySource", reflect.TypeOf((*MockEvalTargetDAO)(nil).BatchGetEvalTargetBySource), varargs...)
}

// CreateEvalTarget mocks base method.
func (m *MockEvalTargetDAO) CreateEvalTarget(ctx context.Context, target *model.Target, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, target}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEvalTarget", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvalTarget indicates an expected call of CreateEvalTarget.
func (mr *MockEvalTargetDAOMockRecorder) CreateEvalTarget(ctx, target any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, target}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvalTarget", reflect.TypeOf((*MockEvalTargetDAO)(nil).CreateEvalTarget), varargs...)
}

// GetEvalTarget mocks base method.
func (m *MockEvalTargetDAO) GetEvalTarget(ctx context.Context, targetID int64, opts ...db.Option) (*model.Target, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, targetID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvalTarget", varargs...)
	ret0, _ := ret[0].(*model.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTarget indicates an expected call of GetEvalTarget.
func (mr *MockEvalTargetDAOMockRecorder) GetEvalTarget(ctx, targetID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, targetID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTarget", reflect.TypeOf((*MockEvalTargetDAO)(nil).GetEvalTarget), varargs...)
}

// GetEvalTargetBySourceID mocks base method.
func (m *MockEvalTargetDAO) GetEvalTargetBySourceID(ctx context.Context, spaceID int64, sourceTargetID string, targetType int32, opts ...db.Option) (*model.Target, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, sourceTargetID, targetType}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvalTargetBySourceID", varargs...)
	ret0, _ := ret[0].(*model.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTargetBySourceID indicates an expected call of GetEvalTargetBySourceID.
func (mr *MockEvalTargetDAOMockRecorder) GetEvalTargetBySourceID(ctx, spaceID, sourceTargetID, targetType any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, sourceTargetID, targetType}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTargetBySourceID", reflect.TypeOf((*MockEvalTargetDAO)(nil).GetEvalTargetBySourceID), varargs...)
}
