// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/target/mysql/gorm_gen/model"
)

func newTargetVersion(db *gorm.DB, opts ...gen.DOOption) targetVersion {
	_targetVersion := targetVersion{}

	_targetVersion.targetVersionDo.UseDB(db, opts...)
	_targetVersion.targetVersionDo.UseModel(&model.TargetVersion{})

	tableName := _targetVersion.targetVersionDo.TableName()
	_targetVersion.ALL = field.NewAsterisk(tableName)
	_targetVersion.ID = field.NewInt64(tableName, "id")
	_targetVersion.SpaceID = field.NewInt64(tableName, "space_id")
	_targetVersion.TargetID = field.NewInt64(tableName, "target_id")
	_targetVersion.SourceTargetVersion = field.NewString(tableName, "source_target_version")
	_targetVersion.TargetMeta = field.NewBytes(tableName, "target_meta")
	_targetVersion.InputSchema = field.NewBytes(tableName, "input_schema")
	_targetVersion.OutputSchema = field.NewBytes(tableName, "output_schema")
	_targetVersion.CreatedBy = field.NewString(tableName, "created_by")
	_targetVersion.UpdatedBy = field.NewString(tableName, "updated_by")
	_targetVersion.CreatedAt = field.NewTime(tableName, "created_at")
	_targetVersion.UpdatedAt = field.NewTime(tableName, "updated_at")
	_targetVersion.DeletedAt = field.NewField(tableName, "deleted_at")

	_targetVersion.fillFieldMap()

	return _targetVersion
}

// targetVersion NDB_SHARE_TABLE;评估对象版本信息
type targetVersion struct {
	targetVersionDo targetVersionDo

	ALL                 field.Asterisk
	ID                  field.Int64  // target version id
	SpaceID             field.Int64  // 空间id
	TargetID            field.Int64  // target id
	SourceTargetVersion field.String // source target version
	TargetMeta          field.Bytes  // 具体内容, 每种静态规则类型对应一个解析方式, json
	InputSchema         field.Bytes  // 评估器输入结构信息, json
	OutputSchema        field.Bytes  // 评估器输出结构信息, json
	CreatedBy           field.String // 创建人
	UpdatedBy           field.String // 更新人
	CreatedAt           field.Time   // 创建时间
	UpdatedAt           field.Time   // 更新时间
	DeletedAt           field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (t targetVersion) Table(newTableName string) *targetVersion {
	t.targetVersionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t targetVersion) As(alias string) *targetVersion {
	t.targetVersionDo.DO = *(t.targetVersionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *targetVersion) updateTableName(table string) *targetVersion {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.SpaceID = field.NewInt64(table, "space_id")
	t.TargetID = field.NewInt64(table, "target_id")
	t.SourceTargetVersion = field.NewString(table, "source_target_version")
	t.TargetMeta = field.NewBytes(table, "target_meta")
	t.InputSchema = field.NewBytes(table, "input_schema")
	t.OutputSchema = field.NewBytes(table, "output_schema")
	t.CreatedBy = field.NewString(table, "created_by")
	t.UpdatedBy = field.NewString(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *targetVersion) WithContext(ctx context.Context) *targetVersionDo {
	return t.targetVersionDo.WithContext(ctx)
}

func (t targetVersion) TableName() string { return t.targetVersionDo.TableName() }

func (t targetVersion) Alias() string { return t.targetVersionDo.Alias() }

func (t targetVersion) Columns(cols ...field.Expr) gen.Columns {
	return t.targetVersionDo.Columns(cols...)
}

func (t *targetVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *targetVersion) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.ID
	t.fieldMap["space_id"] = t.SpaceID
	t.fieldMap["target_id"] = t.TargetID
	t.fieldMap["source_target_version"] = t.SourceTargetVersion
	t.fieldMap["target_meta"] = t.TargetMeta
	t.fieldMap["input_schema"] = t.InputSchema
	t.fieldMap["output_schema"] = t.OutputSchema
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t targetVersion) clone(db *gorm.DB) targetVersion {
	t.targetVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t targetVersion) replaceDB(db *gorm.DB) targetVersion {
	t.targetVersionDo.ReplaceDB(db)
	return t
}

type targetVersionDo struct{ gen.DO }

func (t targetVersionDo) Debug() *targetVersionDo {
	return t.withDO(t.DO.Debug())
}

func (t targetVersionDo) WithContext(ctx context.Context) *targetVersionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t targetVersionDo) ReadDB() *targetVersionDo {
	return t.Clauses(dbresolver.Read)
}

func (t targetVersionDo) WriteDB() *targetVersionDo {
	return t.Clauses(dbresolver.Write)
}

func (t targetVersionDo) Session(config *gorm.Session) *targetVersionDo {
	return t.withDO(t.DO.Session(config))
}

func (t targetVersionDo) Clauses(conds ...clause.Expression) *targetVersionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t targetVersionDo) Returning(value interface{}, columns ...string) *targetVersionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t targetVersionDo) Not(conds ...gen.Condition) *targetVersionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t targetVersionDo) Or(conds ...gen.Condition) *targetVersionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t targetVersionDo) Select(conds ...field.Expr) *targetVersionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t targetVersionDo) Where(conds ...gen.Condition) *targetVersionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t targetVersionDo) Order(conds ...field.Expr) *targetVersionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t targetVersionDo) Distinct(cols ...field.Expr) *targetVersionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t targetVersionDo) Omit(cols ...field.Expr) *targetVersionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t targetVersionDo) Join(table schema.Tabler, on ...field.Expr) *targetVersionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t targetVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *targetVersionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t targetVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) *targetVersionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t targetVersionDo) Group(cols ...field.Expr) *targetVersionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t targetVersionDo) Having(conds ...gen.Condition) *targetVersionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t targetVersionDo) Limit(limit int) *targetVersionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t targetVersionDo) Offset(offset int) *targetVersionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t targetVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *targetVersionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t targetVersionDo) Unscoped() *targetVersionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t targetVersionDo) Create(values ...*model.TargetVersion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t targetVersionDo) CreateInBatches(values []*model.TargetVersion, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t targetVersionDo) Save(values ...*model.TargetVersion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t targetVersionDo) First() (*model.TargetVersion, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TargetVersion), nil
	}
}

func (t targetVersionDo) Take() (*model.TargetVersion, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TargetVersion), nil
	}
}

func (t targetVersionDo) Last() (*model.TargetVersion, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TargetVersion), nil
	}
}

func (t targetVersionDo) Find() ([]*model.TargetVersion, error) {
	result, err := t.DO.Find()
	return result.([]*model.TargetVersion), err
}

func (t targetVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TargetVersion, err error) {
	buf := make([]*model.TargetVersion, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t targetVersionDo) FindInBatches(result *[]*model.TargetVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t targetVersionDo) Attrs(attrs ...field.AssignExpr) *targetVersionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t targetVersionDo) Assign(attrs ...field.AssignExpr) *targetVersionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t targetVersionDo) Joins(fields ...field.RelationField) *targetVersionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t targetVersionDo) Preload(fields ...field.RelationField) *targetVersionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t targetVersionDo) FirstOrInit() (*model.TargetVersion, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TargetVersion), nil
	}
}

func (t targetVersionDo) FirstOrCreate() (*model.TargetVersion, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TargetVersion), nil
	}
}

func (t targetVersionDo) FindByPage(offset int, limit int) (result []*model.TargetVersion, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t targetVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t targetVersionDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t targetVersionDo) Delete(models ...*model.TargetVersion) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *targetVersionDo) withDO(do gen.Dao) *targetVersionDo {
	t.DO = *do.(*gen.DO)
	return t
}
