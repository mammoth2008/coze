// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/target/mysql (interfaces: EvalTargetVersionDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/eval_target_version.go -package=mocks . EvalTargetVersionDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/target/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEvalTargetVersionDAO is a mock of EvalTargetVersionDAO interface.
type MockEvalTargetVersionDAO struct {
	ctrl     *gomock.Controller
	recorder *MockEvalTargetVersionDAOMockRecorder
	isgomock struct{}
}

// MockEvalTargetVersionDAOMockRecorder is the mock recorder for MockEvalTargetVersionDAO.
type MockEvalTargetVersionDAOMockRecorder struct {
	mock *MockEvalTargetVersionDAO
}

// NewMockEvalTargetVersionDAO creates a new mock instance.
func NewMockEvalTargetVersionDAO(ctrl *gomock.Controller) *MockEvalTargetVersionDAO {
	mock := &MockEvalTargetVersionDAO{ctrl: ctrl}
	mock.recorder = &MockEvalTargetVersionDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvalTargetVersionDAO) EXPECT() *MockEvalTargetVersionDAOMockRecorder {
	return m.recorder
}

// BatchGetEvalTargetVersion mocks base method.
func (m *MockEvalTargetVersionDAO) BatchGetEvalTargetVersion(ctx context.Context, spaceID int64, versionIDs []int64, opts ...db.Option) ([]*model.TargetVersion, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, versionIDs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetEvalTargetVersion", varargs...)
	ret0, _ := ret[0].([]*model.TargetVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvalTargetVersion indicates an expected call of BatchGetEvalTargetVersion.
func (mr *MockEvalTargetVersionDAOMockRecorder) BatchGetEvalTargetVersion(ctx, spaceID, versionIDs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, versionIDs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvalTargetVersion", reflect.TypeOf((*MockEvalTargetVersionDAO)(nil).BatchGetEvalTargetVersion), varargs...)
}

// CreateEvalTargetVersion mocks base method.
func (m *MockEvalTargetVersionDAO) CreateEvalTargetVersion(ctx context.Context, target *model.TargetVersion, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, target}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEvalTargetVersion", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvalTargetVersion indicates an expected call of CreateEvalTargetVersion.
func (mr *MockEvalTargetVersionDAOMockRecorder) CreateEvalTargetVersion(ctx, target any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, target}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvalTargetVersion", reflect.TypeOf((*MockEvalTargetVersionDAO)(nil).CreateEvalTargetVersion), varargs...)
}

// GetEvalTargetVersion mocks base method.
func (m *MockEvalTargetVersionDAO) GetEvalTargetVersion(ctx context.Context, spaceID, versionID int64, opts ...db.Option) (*model.TargetVersion, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, versionID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvalTargetVersion", varargs...)
	ret0, _ := ret[0].(*model.TargetVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTargetVersion indicates an expected call of GetEvalTargetVersion.
func (mr *MockEvalTargetVersionDAOMockRecorder) GetEvalTargetVersion(ctx, spaceID, versionID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, versionID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTargetVersion", reflect.TypeOf((*MockEvalTargetVersionDAO)(nil).GetEvalTargetVersion), varargs...)
}

// GetEvalTargetVersionByTarget mocks base method.
func (m *MockEvalTargetVersionDAO) GetEvalTargetVersionByTarget(ctx context.Context, spaceID, targetID int64, sourceTargetVersion string, opts ...db.Option) (*model.TargetVersion, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, targetID, sourceTargetVersion}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvalTargetVersionByTarget", varargs...)
	ret0, _ := ret[0].(*model.TargetVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTargetVersionByTarget indicates an expected call of GetEvalTargetVersionByTarget.
func (mr *MockEvalTargetVersionDAOMockRecorder) GetEvalTargetVersionByTarget(ctx, spaceID, targetID, sourceTargetVersion any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, targetID, sourceTargetVersion}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTargetVersionByTarget", reflect.TypeOf((*MockEvalTargetVersionDAO)(nil).GetEvalTargetVersionByTarget), varargs...)
}
