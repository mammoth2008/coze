// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/target/mysql/gorm_gen/model"
)

func newTarget(db *gorm.DB, opts ...gen.DOOption) target {
	_target := target{}

	_target.targetDo.UseDB(db, opts...)
	_target.targetDo.UseModel(&model.Target{})

	tableName := _target.targetDo.TableName()
	_target.ALL = field.NewAsterisk(tableName)
	_target.ID = field.NewInt64(tableName, "id")
	_target.SpaceID = field.NewInt64(tableName, "space_id")
	_target.SourceTargetID = field.NewString(tableName, "source_target_id")
	_target.TargetType = field.NewInt32(tableName, "target_type")
	_target.CreatedBy = field.NewString(tableName, "created_by")
	_target.UpdatedBy = field.NewString(tableName, "updated_by")
	_target.CreatedAt = field.NewTime(tableName, "created_at")
	_target.UpdatedAt = field.NewTime(tableName, "updated_at")
	_target.DeletedAt = field.NewField(tableName, "deleted_at")

	_target.fillFieldMap()

	return _target
}

// target NDB_SHARE_TABLE;评估对象信息
type target struct {
	targetDo targetDo

	ALL            field.Asterisk
	ID             field.Int64  // idgen id
	SpaceID        field.Int64  // 空间id
	SourceTargetID field.String // 来源的对象的ID，比如promptID
	TargetType     field.Int32  // 评估对象类型
	CreatedBy      field.String // 创建人
	UpdatedBy      field.String // 更新人
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间
	DeletedAt      field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (t target) Table(newTableName string) *target {
	t.targetDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t target) As(alias string) *target {
	t.targetDo.DO = *(t.targetDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *target) updateTableName(table string) *target {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.SpaceID = field.NewInt64(table, "space_id")
	t.SourceTargetID = field.NewString(table, "source_target_id")
	t.TargetType = field.NewInt32(table, "target_type")
	t.CreatedBy = field.NewString(table, "created_by")
	t.UpdatedBy = field.NewString(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *target) WithContext(ctx context.Context) *targetDo { return t.targetDo.WithContext(ctx) }

func (t target) TableName() string { return t.targetDo.TableName() }

func (t target) Alias() string { return t.targetDo.Alias() }

func (t target) Columns(cols ...field.Expr) gen.Columns { return t.targetDo.Columns(cols...) }

func (t *target) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *target) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["space_id"] = t.SpaceID
	t.fieldMap["source_target_id"] = t.SourceTargetID
	t.fieldMap["target_type"] = t.TargetType
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t target) clone(db *gorm.DB) target {
	t.targetDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t target) replaceDB(db *gorm.DB) target {
	t.targetDo.ReplaceDB(db)
	return t
}

type targetDo struct{ gen.DO }

func (t targetDo) Debug() *targetDo {
	return t.withDO(t.DO.Debug())
}

func (t targetDo) WithContext(ctx context.Context) *targetDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t targetDo) ReadDB() *targetDo {
	return t.Clauses(dbresolver.Read)
}

func (t targetDo) WriteDB() *targetDo {
	return t.Clauses(dbresolver.Write)
}

func (t targetDo) Session(config *gorm.Session) *targetDo {
	return t.withDO(t.DO.Session(config))
}

func (t targetDo) Clauses(conds ...clause.Expression) *targetDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t targetDo) Returning(value interface{}, columns ...string) *targetDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t targetDo) Not(conds ...gen.Condition) *targetDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t targetDo) Or(conds ...gen.Condition) *targetDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t targetDo) Select(conds ...field.Expr) *targetDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t targetDo) Where(conds ...gen.Condition) *targetDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t targetDo) Order(conds ...field.Expr) *targetDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t targetDo) Distinct(cols ...field.Expr) *targetDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t targetDo) Omit(cols ...field.Expr) *targetDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t targetDo) Join(table schema.Tabler, on ...field.Expr) *targetDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t targetDo) LeftJoin(table schema.Tabler, on ...field.Expr) *targetDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t targetDo) RightJoin(table schema.Tabler, on ...field.Expr) *targetDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t targetDo) Group(cols ...field.Expr) *targetDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t targetDo) Having(conds ...gen.Condition) *targetDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t targetDo) Limit(limit int) *targetDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t targetDo) Offset(offset int) *targetDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t targetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *targetDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t targetDo) Unscoped() *targetDo {
	return t.withDO(t.DO.Unscoped())
}

func (t targetDo) Create(values ...*model.Target) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t targetDo) CreateInBatches(values []*model.Target, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t targetDo) Save(values ...*model.Target) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t targetDo) First() (*model.Target, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Target), nil
	}
}

func (t targetDo) Take() (*model.Target, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Target), nil
	}
}

func (t targetDo) Last() (*model.Target, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Target), nil
	}
}

func (t targetDo) Find() ([]*model.Target, error) {
	result, err := t.DO.Find()
	return result.([]*model.Target), err
}

func (t targetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Target, err error) {
	buf := make([]*model.Target, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t targetDo) FindInBatches(result *[]*model.Target, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t targetDo) Attrs(attrs ...field.AssignExpr) *targetDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t targetDo) Assign(attrs ...field.AssignExpr) *targetDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t targetDo) Joins(fields ...field.RelationField) *targetDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t targetDo) Preload(fields ...field.RelationField) *targetDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t targetDo) FirstOrInit() (*model.Target, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Target), nil
	}
}

func (t targetDo) FirstOrCreate() (*model.Target, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Target), nil
	}
}

func (t targetDo) FindByPage(offset int, limit int) (result []*model.Target, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t targetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t targetDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t targetDo) Delete(models ...*model.Target) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *targetDo) withDO(do gen.Dao) *targetDo {
	t.DO = *do.(*gen.DO)
	return t
}
