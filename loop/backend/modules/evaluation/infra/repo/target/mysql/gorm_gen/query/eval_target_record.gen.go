// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/target/mysql/gorm_gen/model"
)

func newTargetRecord(db *gorm.DB, opts ...gen.DOOption) targetRecord {
	_targetRecord := targetRecord{}

	_targetRecord.targetRecordDo.UseDB(db, opts...)
	_targetRecord.targetRecordDo.UseModel(&model.TargetRecord{})

	tableName := _targetRecord.targetRecordDo.TableName()
	_targetRecord.ALL = field.NewAsterisk(tableName)
	_targetRecord.ID = field.NewInt64(tableName, "id")
	_targetRecord.SpaceID = field.NewInt64(tableName, "space_id")
	_targetRecord.TargetID = field.NewInt64(tableName, "target_id")
	_targetRecord.TargetVersionID = field.NewInt64(tableName, "target_version_id")
	_targetRecord.ExperimentRunID = field.NewInt64(tableName, "experiment_run_id")
	_targetRecord.ItemID = field.NewInt64(tableName, "item_id")
	_targetRecord.TurnID = field.NewInt64(tableName, "turn_id")
	_targetRecord.LogID = field.NewString(tableName, "log_id")
	_targetRecord.TraceID = field.NewString(tableName, "trace_id")
	_targetRecord.InputData = field.NewBytes(tableName, "input_data")
	_targetRecord.OutputData = field.NewBytes(tableName, "output_data")
	_targetRecord.Status = field.NewInt32(tableName, "status")
	_targetRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_targetRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_targetRecord.DeletedAt = field.NewField(tableName, "deleted_at")

	_targetRecord.fillFieldMap()

	return _targetRecord
}

// targetRecord NDB_SHARE_TABLE;评估对象记录信息
type targetRecord struct {
	targetRecordDo targetRecordDo

	ALL             field.Asterisk
	ID              field.Int64  // id
	SpaceID         field.Int64  // 空间id
	TargetID        field.Int64  // 评测对象id
	TargetVersionID field.Int64  // 版本ID
	ExperimentRunID field.Int64  // 实验执行id
	ItemID          field.Int64  // 评测集行id
	TurnID          field.Int64  // 评测集行轮次id
	LogID           field.String // log id
	TraceID         field.String // trace id
	InputData       field.Bytes  // 输入, json
	OutputData      field.Bytes  // 输出, json
	Status          field.Int32  // 执行状态
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (t targetRecord) Table(newTableName string) *targetRecord {
	t.targetRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t targetRecord) As(alias string) *targetRecord {
	t.targetRecordDo.DO = *(t.targetRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *targetRecord) updateTableName(table string) *targetRecord {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.SpaceID = field.NewInt64(table, "space_id")
	t.TargetID = field.NewInt64(table, "target_id")
	t.TargetVersionID = field.NewInt64(table, "target_version_id")
	t.ExperimentRunID = field.NewInt64(table, "experiment_run_id")
	t.ItemID = field.NewInt64(table, "item_id")
	t.TurnID = field.NewInt64(table, "turn_id")
	t.LogID = field.NewString(table, "log_id")
	t.TraceID = field.NewString(table, "trace_id")
	t.InputData = field.NewBytes(table, "input_data")
	t.OutputData = field.NewBytes(table, "output_data")
	t.Status = field.NewInt32(table, "status")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *targetRecord) WithContext(ctx context.Context) *targetRecordDo {
	return t.targetRecordDo.WithContext(ctx)
}

func (t targetRecord) TableName() string { return t.targetRecordDo.TableName() }

func (t targetRecord) Alias() string { return t.targetRecordDo.Alias() }

func (t targetRecord) Columns(cols ...field.Expr) gen.Columns {
	return t.targetRecordDo.Columns(cols...)
}

func (t *targetRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *targetRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.ID
	t.fieldMap["space_id"] = t.SpaceID
	t.fieldMap["target_id"] = t.TargetID
	t.fieldMap["target_version_id"] = t.TargetVersionID
	t.fieldMap["experiment_run_id"] = t.ExperimentRunID
	t.fieldMap["item_id"] = t.ItemID
	t.fieldMap["turn_id"] = t.TurnID
	t.fieldMap["log_id"] = t.LogID
	t.fieldMap["trace_id"] = t.TraceID
	t.fieldMap["input_data"] = t.InputData
	t.fieldMap["output_data"] = t.OutputData
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t targetRecord) clone(db *gorm.DB) targetRecord {
	t.targetRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t targetRecord) replaceDB(db *gorm.DB) targetRecord {
	t.targetRecordDo.ReplaceDB(db)
	return t
}

type targetRecordDo struct{ gen.DO }

func (t targetRecordDo) Debug() *targetRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t targetRecordDo) WithContext(ctx context.Context) *targetRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t targetRecordDo) ReadDB() *targetRecordDo {
	return t.Clauses(dbresolver.Read)
}

func (t targetRecordDo) WriteDB() *targetRecordDo {
	return t.Clauses(dbresolver.Write)
}

func (t targetRecordDo) Session(config *gorm.Session) *targetRecordDo {
	return t.withDO(t.DO.Session(config))
}

func (t targetRecordDo) Clauses(conds ...clause.Expression) *targetRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t targetRecordDo) Returning(value interface{}, columns ...string) *targetRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t targetRecordDo) Not(conds ...gen.Condition) *targetRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t targetRecordDo) Or(conds ...gen.Condition) *targetRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t targetRecordDo) Select(conds ...field.Expr) *targetRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t targetRecordDo) Where(conds ...gen.Condition) *targetRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t targetRecordDo) Order(conds ...field.Expr) *targetRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t targetRecordDo) Distinct(cols ...field.Expr) *targetRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t targetRecordDo) Omit(cols ...field.Expr) *targetRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t targetRecordDo) Join(table schema.Tabler, on ...field.Expr) *targetRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t targetRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *targetRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t targetRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *targetRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t targetRecordDo) Group(cols ...field.Expr) *targetRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t targetRecordDo) Having(conds ...gen.Condition) *targetRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t targetRecordDo) Limit(limit int) *targetRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t targetRecordDo) Offset(offset int) *targetRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t targetRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *targetRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t targetRecordDo) Unscoped() *targetRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t targetRecordDo) Create(values ...*model.TargetRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t targetRecordDo) CreateInBatches(values []*model.TargetRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t targetRecordDo) Save(values ...*model.TargetRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t targetRecordDo) First() (*model.TargetRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TargetRecord), nil
	}
}

func (t targetRecordDo) Take() (*model.TargetRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TargetRecord), nil
	}
}

func (t targetRecordDo) Last() (*model.TargetRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TargetRecord), nil
	}
}

func (t targetRecordDo) Find() ([]*model.TargetRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TargetRecord), err
}

func (t targetRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TargetRecord, err error) {
	buf := make([]*model.TargetRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t targetRecordDo) FindInBatches(result *[]*model.TargetRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t targetRecordDo) Attrs(attrs ...field.AssignExpr) *targetRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t targetRecordDo) Assign(attrs ...field.AssignExpr) *targetRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t targetRecordDo) Joins(fields ...field.RelationField) *targetRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t targetRecordDo) Preload(fields ...field.RelationField) *targetRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t targetRecordDo) FirstOrInit() (*model.TargetRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TargetRecord), nil
	}
}

func (t targetRecordDo) FirstOrCreate() (*model.TargetRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TargetRecord), nil
	}
}

func (t targetRecordDo) FindByPage(offset int, limit int) (result []*model.TargetRecord, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t targetRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t targetRecordDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t targetRecordDo) Delete(models ...*model.TargetRecord) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *targetRecordDo) withDO(do gen.Dao) *targetRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
