// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/pkg/conf (interfaces: IConfiger)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	limiter "github.com/coze-dev/coze-loop/backend/infra/limiter"
	evaluator "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/evaluator"
	gomock "go.uber.org/mock/gomock"
)

// MockIConfiger is a mock of IConfiger interface.
type MockIConfiger struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigerMockRecorder
}

// MockIConfigerMockRecorder is the mock recorder for MockIConfiger.
type MockIConfigerMockRecorder struct {
	mock *MockIConfiger
}

// NewMockIConfiger creates a new mock instance.
func NewMockIConfiger(ctrl *gomock.Controller) *MockIConfiger {
	mock := &MockIConfiger{ctrl: ctrl}
	mock.recorder = &MockIConfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfiger) EXPECT() *MockIConfigerMockRecorder {
	return m.recorder
}

// GetEvaluatorPromptSuffix mocks base method.
func (m *MockIConfiger) GetEvaluatorPromptSuffix(arg0 context.Context) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorPromptSuffix", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetEvaluatorPromptSuffix indicates an expected call of GetEvaluatorPromptSuffix.
func (mr *MockIConfigerMockRecorder) GetEvaluatorPromptSuffix(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorPromptSuffix", reflect.TypeOf((*MockIConfiger)(nil).GetEvaluatorPromptSuffix), arg0)
}

// GetEvaluatorPromptSuffixMapping mocks base method.
func (m *MockIConfiger) GetEvaluatorPromptSuffixMapping(arg0 context.Context) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorPromptSuffixMapping", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetEvaluatorPromptSuffixMapping indicates an expected call of GetEvaluatorPromptSuffixMapping.
func (mr *MockIConfigerMockRecorder) GetEvaluatorPromptSuffixMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorPromptSuffixMapping", reflect.TypeOf((*MockIConfiger)(nil).GetEvaluatorPromptSuffixMapping), arg0)
}

// GetEvaluatorTemplateConf mocks base method.
func (m *MockIConfiger) GetEvaluatorTemplateConf(arg0 context.Context) map[string]map[string]*evaluator.EvaluatorContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorTemplateConf", arg0)
	ret0, _ := ret[0].(map[string]map[string]*evaluator.EvaluatorContent)
	return ret0
}

// GetEvaluatorTemplateConf indicates an expected call of GetEvaluatorTemplateConf.
func (mr *MockIConfigerMockRecorder) GetEvaluatorTemplateConf(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorTemplateConf", reflect.TypeOf((*MockIConfiger)(nil).GetEvaluatorTemplateConf), arg0)
}

// GetEvaluatorToolConf mocks base method.
func (m *MockIConfiger) GetEvaluatorToolConf(arg0 context.Context) map[string]*evaluator.Tool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorToolConf", arg0)
	ret0, _ := ret[0].(map[string]*evaluator.Tool)
	return ret0
}

// GetEvaluatorToolConf indicates an expected call of GetEvaluatorToolConf.
func (mr *MockIConfigerMockRecorder) GetEvaluatorToolConf(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorToolConf", reflect.TypeOf((*MockIConfiger)(nil).GetEvaluatorToolConf), arg0)
}

// GetEvaluatorToolMapping mocks base method.
func (m *MockIConfiger) GetEvaluatorToolMapping(arg0 context.Context) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorToolMapping", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetEvaluatorToolMapping indicates an expected call of GetEvaluatorToolMapping.
func (mr *MockIConfigerMockRecorder) GetEvaluatorToolMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorToolMapping", reflect.TypeOf((*MockIConfiger)(nil).GetEvaluatorToolMapping), arg0)
}

// GetRateLimiterConf mocks base method.
func (m *MockIConfiger) GetRateLimiterConf(arg0 context.Context) []limiter.Rule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimiterConf", arg0)
	ret0, _ := ret[0].([]limiter.Rule)
	return ret0
}

// GetRateLimiterConf indicates an expected call of GetRateLimiterConf.
func (mr *MockIConfigerMockRecorder) GetRateLimiterConf(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimiterConf", reflect.TypeOf((*MockIConfiger)(nil).GetRateLimiterConf), arg0)
}
