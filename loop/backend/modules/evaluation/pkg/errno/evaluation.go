// Code generated by tool. DO NOT EDIT.
// app: cozeloop, biz: evaluation

package errno

import (
	"github.com/coze-dev/coze-loop/backend/pkg/errorx/code"
)

const (
	CommonNoPermissionCode              = 601200101
	commonNoPermissionMessage           = "no access permission"
	commonNoPermissionNoAffectStability = true

	CommonBadRequestCode              = 601200201
	commonBadRequestMessage           = "bad request"
	commonBadRequestNoAffectStability = true

	CommonInvalidParamCode              = 601200202
	commonInvalidParamMessage           = "invalid param"
	commonInvalidParamNoAffectStability = true

	CommonBizInvalidCode              = 601200203
	commonBizInvalidMessage           = "biz operation is not allowed"
	commonBizInvalidNoAffectStability = true

	CommonResourceDuplicatedCode              = 601200204
	commonResourceDuplicatedMessage           = "resource duplicated"
	commonResourceDuplicatedNoAffectStability = true

	CommonNetworkTimeOutCode              = 601200701
	commonNetworkTimeOutMessage           = "network timeout"
	commonNetworkTimeOutNoAffectStability = false

	CommonInternalErrorCode              = 601200702
	commonInternalErrorMessage           = "internal error"
	commonInternalErrorNoAffectStability = false

	CommonRPCErrorCode              = 601200703
	commonRPCErrorMessage           = "rpc error"
	commonRPCErrorNoAffectStability = false

	CommonMySqlErrorCode              = 601200801
	commonMySqlErrorMessage           = "mysql error"
	commonMySqlErrorNoAffectStability = false

	CommonRedisErrorCode              = 601200803
	commonRedisErrorMessage           = "redis error"
	commonRedisErrorNoAffectStability = false

	BalanceInsufficientCode              = 601203001 // user balance is insufficient
	balanceInsufficientMessage           = "user balance is insufficient"
	balanceInsufficientNoAffectStability = true

	RateLimitedCode              = 601203002 // request is limited
	rateLimitedMessage           = "request is limited"
	rateLimitedNoAffectStability = true

	InvalidResourceCode              = 601203003 // resource is invalid
	invalidResourceMessage           = "resource is invalid"
	invalidResourceNoAffectStability = true

	ResourceNotFoundCode              = 601203004 // resource not found
	resourceNotFoundMessage           = "resource not found"
	resourceNotFoundNoAffectStability = true

	DeletedResourceCode              = 601203005 // resource is deleted
	deletedResourceMessage           = "resource is deleted"
	deletedResourceNoAffectStability = true

	ExperimentValidateFailCode              = 601204001 // experiment configuration validation failed
	experimentValidateFailMessage           = "experiment configuration validation failed"
	experimentValidateFailNoAffectStability = true

	ExperimentRunningExistedCode              = 601204002 // experiment is already in running
	experimentRunningExistedMessage           = "experiment is already in running"
	experimentRunningExistedNoAffectStability = true

	CallTargetFailCode              = 601204003 // call target fail
	callTargetFailMessage           = "call target fail"
	callTargetFailNoAffectStability = true

	CallEvaluatorFailCode              = 601204004 // call evaluator fail
	callEvaluatorFailMessage           = "call evaluator fail"
	callEvaluatorFailNoAffectStability = true

	ExperimentNameExistedCode              = 601204005 // experiment name already exists
	experimentNameExistedMessage           = "experiment name already exists"
	experimentNameExistedNoAffectStability = true

	ExperimentRunningCountLimitCode              = 601204006 // number of experiments in running has reached the maximum limit
	experimentRunningCountLimitMessage           = "number of experiments in running has reached the maximum limit"
	experimentRunningCountLimitNoAffectStability = true

	ContentTypeNotSupportedCode              = 601205000 // content type is not supported
	contentTypeNotSupportedMessage           = "content type is not supported"
	contentTypeNotSupportedNoAffectStability = true

	SendAggrCalcEventFailedCode              = 601205001 // failed to send aggregation calculation event
	sendAggrCalcEventFailedMessage           = "failed to send aggregation calculation event"
	sendAggrCalcEventFailedNoAffectStability = true

	ActionRepeatedCode              = 601205002 // action has been repeated
	actionRepeatedMessage           = "action has been repeated"
	actionRepeatedNoAffectStability = true

	TemplateNotFoundCode              = 601205003 // template not found
	templateNotFoundMessage           = "template not found"
	templateNotFoundNoAffectStability = true

	ContentSchemaInvalidCode              = 601205004 // content schema is invalid
	contentSchemaInvalidMessage           = "content schema is invalid"
	contentSchemaInvalidNoAffectStability = true

	InvalidMessageListCode              = 601205006 // message list is invalid
	invalidMessageListMessage           = "message list is invalid"
	invalidMessageListNoAffectStability = true

	InvalidModelConfigCode              = 601205007 // model configuration is invalid
	invalidModelConfigMessage           = "model configuration is invalid"
	invalidModelConfigNoAffectStability = true

	InvalidEvaluatorIDCode              = 601205008 // evaluator ID is invalid
	invalidEvaluatorIDMessage           = "evaluator ID is invalid"
	invalidEvaluatorIDNoAffectStability = true

	EvaluatorNotExistCode              = 601205009 // evaluator does not exist
	evaluatorNotExistMessage           = "evaluator does not exist"
	evaluatorNotExistNoAffectStability = true

	InvalidSpaceIDCode              = 601205010 // space ID is invalid
	invalidSpaceIDMessage           = "space ID is invalid"
	invalidSpaceIDNoAffectStability = true

	EvaluatorNameExistCode              = 601205011 // evaluator name already exists
	evaluatorNameExistMessage           = "evaluator name already exists"
	evaluatorNameExistNoAffectStability = true

	EvaluatorVersionExistCode              = 601205012 // evaluator version already exists
	evaluatorVersionExistMessage           = "evaluator version already exists"
	evaluatorVersionExistNoAffectStability = true

	EvaluatorVersionNotFoundCode              = 601205013 // evaluator version not found
	evaluatorVersionNotFoundMessage           = "evaluator version not found"
	evaluatorVersionNotFoundNoAffectStability = true

	RiskContentDetectedCode              = 601205014 // detected risk content in user input or model response
	riskContentDetectedMessage           = "detected risk content in user input or model response"
	riskContentDetectedNoAffectStability = true

	InvalidOutputFromModelCode              = 601205015 // invalid output from model
	invalidOutputFromModelMessage           = "invalid output from model"
	invalidOutputFromModelNoAffectStability = false

	EvaluatorNameExceedMaxLengthCode              = 601205016 // evaluator name exceeds maximum length 50
	evaluatorNameExceedMaxLengthMessage           = "evaluator name exceeds maximum length 50"
	evaluatorNameExceedMaxLengthNoAffectStability = true

	EvaluatorDescriptionExceedMaxLengthCode              = 601205017 // evaluator description exceeds maximum length 200
	evaluatorDescriptionExceedMaxLengthMessage           = "evaluator description exceeds maximum length 200"
	evaluatorDescriptionExceedMaxLengthNoAffectStability = true

	EvaluatorVersionExceedMaxLengthCode              = 601205018 // evaluator version exceeds maximum length 50
	evaluatorVersionExceedMaxLengthMessage           = "evaluator version exceeds maximum length 50"
	evaluatorVersionExceedMaxLengthNoAffectStability = true

	EvaluatorVersionDescriptionExceedMaxLengthCode              = 601205019 // evaluator version description exceeds maximum length 200
	evaluatorVersionDescriptionExceedMaxLengthMessage           = "evaluator version description exceeds maximum length 200"
	evaluatorVersionDescriptionExceedMaxLengthNoAffectStability = true

	InvalidEvaluatorVersionFormatCode              = 601205020 // evaluator version format is invalid
	invalidEvaluatorVersionFormatMessage           = "evaluator version format is invalid"
	invalidEvaluatorVersionFormatNoAffectStability = true

	EvaluatorQPSLimitCode              = 601205021 // evaluator QPS limit exceeded
	evaluatorQPSLimitMessage           = "evaluator QPS limit exceeded"
	evaluatorQPSLimitNoAffectStability = true

	EvaluatorRecordNotFoundCode              = 601205022 // evaluator record not found
	evaluatorRecordNotFoundMessage           = "evaluator record not found"
	evaluatorRecordNotFoundNoAffectStability = true

	RunEvaluatorFailCode              = 601205023 // run evaluator fail
	runEvaluatorFailMessage           = "run evaluator fail"
	runEvaluatorFailNoAffectStability = true

	LLMOutputEmptyCode              = 601205024 // llm output is empty
	lLMOutputEmptyMessage           = "llm output is empty"
	lLMOutputEmptyNoAffectStability = true

	LLMToolCallFailCode              = 601205025 // llm tool call fail
	lLMToolCallFailMessage           = "llm tool call fail"
	lLMToolCallFailNoAffectStability = true

	EvaluatorBenefitDenyCode              = 601205026 // evaluator benefit deny
	evaluatorBenefitDenyMessage           = "evaluator benefit deny"
	evaluatorBenefitDenyNoAffectStability = true
)

func init() {

	code.Register(
		CommonNoPermissionCode,
		commonNoPermissionMessage,
		code.WithAffectStability(!commonNoPermissionNoAffectStability),
	)

	code.Register(
		CommonBadRequestCode,
		commonBadRequestMessage,
		code.WithAffectStability(!commonBadRequestNoAffectStability),
	)

	code.Register(
		CommonInvalidParamCode,
		commonInvalidParamMessage,
		code.WithAffectStability(!commonInvalidParamNoAffectStability),
	)

	code.Register(
		CommonBizInvalidCode,
		commonBizInvalidMessage,
		code.WithAffectStability(!commonBizInvalidNoAffectStability),
	)

	code.Register(
		CommonResourceDuplicatedCode,
		commonResourceDuplicatedMessage,
		code.WithAffectStability(!commonResourceDuplicatedNoAffectStability),
	)

	code.Register(
		CommonNetworkTimeOutCode,
		commonNetworkTimeOutMessage,
		code.WithAffectStability(!commonNetworkTimeOutNoAffectStability),
	)

	code.Register(
		CommonInternalErrorCode,
		commonInternalErrorMessage,
		code.WithAffectStability(!commonInternalErrorNoAffectStability),
	)

	code.Register(
		CommonRPCErrorCode,
		commonRPCErrorMessage,
		code.WithAffectStability(!commonRPCErrorNoAffectStability),
	)

	code.Register(
		CommonMySqlErrorCode,
		commonMySqlErrorMessage,
		code.WithAffectStability(!commonMySqlErrorNoAffectStability),
	)

	code.Register(
		CommonRedisErrorCode,
		commonRedisErrorMessage,
		code.WithAffectStability(!commonRedisErrorNoAffectStability),
	)

	code.Register(
		BalanceInsufficientCode,
		balanceInsufficientMessage,
		code.WithAffectStability(!balanceInsufficientNoAffectStability),
	)

	code.Register(
		RateLimitedCode,
		rateLimitedMessage,
		code.WithAffectStability(!rateLimitedNoAffectStability),
	)

	code.Register(
		InvalidResourceCode,
		invalidResourceMessage,
		code.WithAffectStability(!invalidResourceNoAffectStability),
	)

	code.Register(
		ResourceNotFoundCode,
		resourceNotFoundMessage,
		code.WithAffectStability(!resourceNotFoundNoAffectStability),
	)

	code.Register(
		DeletedResourceCode,
		deletedResourceMessage,
		code.WithAffectStability(!deletedResourceNoAffectStability),
	)

	code.Register(
		ExperimentValidateFailCode,
		experimentValidateFailMessage,
		code.WithAffectStability(!experimentValidateFailNoAffectStability),
	)

	code.Register(
		ExperimentRunningExistedCode,
		experimentRunningExistedMessage,
		code.WithAffectStability(!experimentRunningExistedNoAffectStability),
	)

	code.Register(
		CallTargetFailCode,
		callTargetFailMessage,
		code.WithAffectStability(!callTargetFailNoAffectStability),
	)

	code.Register(
		CallEvaluatorFailCode,
		callEvaluatorFailMessage,
		code.WithAffectStability(!callEvaluatorFailNoAffectStability),
	)

	code.Register(
		ExperimentNameExistedCode,
		experimentNameExistedMessage,
		code.WithAffectStability(!experimentNameExistedNoAffectStability),
	)

	code.Register(
		ExperimentRunningCountLimitCode,
		experimentRunningCountLimitMessage,
		code.WithAffectStability(!experimentRunningCountLimitNoAffectStability),
	)

	code.Register(
		ContentTypeNotSupportedCode,
		contentTypeNotSupportedMessage,
		code.WithAffectStability(!contentTypeNotSupportedNoAffectStability),
	)

	code.Register(
		SendAggrCalcEventFailedCode,
		sendAggrCalcEventFailedMessage,
		code.WithAffectStability(!sendAggrCalcEventFailedNoAffectStability),
	)

	code.Register(
		ActionRepeatedCode,
		actionRepeatedMessage,
		code.WithAffectStability(!actionRepeatedNoAffectStability),
	)

	code.Register(
		TemplateNotFoundCode,
		templateNotFoundMessage,
		code.WithAffectStability(!templateNotFoundNoAffectStability),
	)

	code.Register(
		ContentSchemaInvalidCode,
		contentSchemaInvalidMessage,
		code.WithAffectStability(!contentSchemaInvalidNoAffectStability),
	)

	code.Register(
		InvalidMessageListCode,
		invalidMessageListMessage,
		code.WithAffectStability(!invalidMessageListNoAffectStability),
	)

	code.Register(
		InvalidModelConfigCode,
		invalidModelConfigMessage,
		code.WithAffectStability(!invalidModelConfigNoAffectStability),
	)

	code.Register(
		InvalidEvaluatorIDCode,
		invalidEvaluatorIDMessage,
		code.WithAffectStability(!invalidEvaluatorIDNoAffectStability),
	)

	code.Register(
		EvaluatorNotExistCode,
		evaluatorNotExistMessage,
		code.WithAffectStability(!evaluatorNotExistNoAffectStability),
	)

	code.Register(
		InvalidSpaceIDCode,
		invalidSpaceIDMessage,
		code.WithAffectStability(!invalidSpaceIDNoAffectStability),
	)

	code.Register(
		EvaluatorNameExistCode,
		evaluatorNameExistMessage,
		code.WithAffectStability(!evaluatorNameExistNoAffectStability),
	)

	code.Register(
		EvaluatorVersionExistCode,
		evaluatorVersionExistMessage,
		code.WithAffectStability(!evaluatorVersionExistNoAffectStability),
	)

	code.Register(
		EvaluatorVersionNotFoundCode,
		evaluatorVersionNotFoundMessage,
		code.WithAffectStability(!evaluatorVersionNotFoundNoAffectStability),
	)

	code.Register(
		RiskContentDetectedCode,
		riskContentDetectedMessage,
		code.WithAffectStability(!riskContentDetectedNoAffectStability),
	)

	code.Register(
		InvalidOutputFromModelCode,
		invalidOutputFromModelMessage,
		code.WithAffectStability(!invalidOutputFromModelNoAffectStability),
	)

	code.Register(
		EvaluatorNameExceedMaxLengthCode,
		evaluatorNameExceedMaxLengthMessage,
		code.WithAffectStability(!evaluatorNameExceedMaxLengthNoAffectStability),
	)

	code.Register(
		EvaluatorDescriptionExceedMaxLengthCode,
		evaluatorDescriptionExceedMaxLengthMessage,
		code.WithAffectStability(!evaluatorDescriptionExceedMaxLengthNoAffectStability),
	)

	code.Register(
		EvaluatorVersionExceedMaxLengthCode,
		evaluatorVersionExceedMaxLengthMessage,
		code.WithAffectStability(!evaluatorVersionExceedMaxLengthNoAffectStability),
	)

	code.Register(
		EvaluatorVersionDescriptionExceedMaxLengthCode,
		evaluatorVersionDescriptionExceedMaxLengthMessage,
		code.WithAffectStability(!evaluatorVersionDescriptionExceedMaxLengthNoAffectStability),
	)

	code.Register(
		InvalidEvaluatorVersionFormatCode,
		invalidEvaluatorVersionFormatMessage,
		code.WithAffectStability(!invalidEvaluatorVersionFormatNoAffectStability),
	)

	code.Register(
		EvaluatorQPSLimitCode,
		evaluatorQPSLimitMessage,
		code.WithAffectStability(!evaluatorQPSLimitNoAffectStability),
	)

	code.Register(
		EvaluatorRecordNotFoundCode,
		evaluatorRecordNotFoundMessage,
		code.WithAffectStability(!evaluatorRecordNotFoundNoAffectStability),
	)

	code.Register(
		RunEvaluatorFailCode,
		runEvaluatorFailMessage,
		code.WithAffectStability(!runEvaluatorFailNoAffectStability),
	)

	code.Register(
		LLMOutputEmptyCode,
		lLMOutputEmptyMessage,
		code.WithAffectStability(!lLMOutputEmptyNoAffectStability),
	)

	code.Register(
		LLMToolCallFailCode,
		lLMToolCallFailMessage,
		code.WithAffectStability(!lLMToolCallFailNoAffectStability),
	)

	code.Register(
		EvaluatorBenefitDenyCode,
		evaluatorBenefitDenyMessage,
		code.WithAffectStability(!evaluatorBenefitDenyNoAffectStability),
	)

}
