// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo (interfaces: IEvaluatorRecordRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIEvaluatorRecordRepo is a mock of IEvaluatorRecordRepo interface.
type MockIEvaluatorRecordRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIEvaluatorRecordRepoMockRecorder
}

// MockIEvaluatorRecordRepoMockRecorder is the mock recorder for MockIEvaluatorRecordRepo.
type MockIEvaluatorRecordRepoMockRecorder struct {
	mock *MockIEvaluatorRecordRepo
}

// NewMockIEvaluatorRecordRepo creates a new mock instance.
func NewMockIEvaluatorRecordRepo(ctrl *gomock.Controller) *MockIEvaluatorRecordRepo {
	mock := &MockIEvaluatorRecordRepo{ctrl: ctrl}
	mock.recorder = &MockIEvaluatorRecordRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvaluatorRecordRepo) EXPECT() *MockIEvaluatorRecordRepoMockRecorder {
	return m.recorder
}

// BatchGetEvaluatorRecord mocks base method.
func (m *MockIEvaluatorRecordRepo) BatchGetEvaluatorRecord(arg0 context.Context, arg1 []int64, arg2 bool) ([]*entity.EvaluatorRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.EvaluatorRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorRecord indicates an expected call of BatchGetEvaluatorRecord.
func (mr *MockIEvaluatorRecordRepoMockRecorder) BatchGetEvaluatorRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorRecord", reflect.TypeOf((*MockIEvaluatorRecordRepo)(nil).BatchGetEvaluatorRecord), arg0, arg1, arg2)
}

// CorrectEvaluatorRecord mocks base method.
func (m *MockIEvaluatorRecordRepo) CorrectEvaluatorRecord(arg0 context.Context, arg1 *entity.EvaluatorRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CorrectEvaluatorRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CorrectEvaluatorRecord indicates an expected call of CorrectEvaluatorRecord.
func (mr *MockIEvaluatorRecordRepoMockRecorder) CorrectEvaluatorRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CorrectEvaluatorRecord", reflect.TypeOf((*MockIEvaluatorRecordRepo)(nil).CorrectEvaluatorRecord), arg0, arg1)
}

// CreateEvaluatorRecord mocks base method.
func (m *MockIEvaluatorRecordRepo) CreateEvaluatorRecord(arg0 context.Context, arg1 *entity.EvaluatorRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluatorRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvaluatorRecord indicates an expected call of CreateEvaluatorRecord.
func (mr *MockIEvaluatorRecordRepoMockRecorder) CreateEvaluatorRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluatorRecord", reflect.TypeOf((*MockIEvaluatorRecordRepo)(nil).CreateEvaluatorRecord), arg0, arg1)
}

// GetEvaluatorRecord mocks base method.
func (m *MockIEvaluatorRecordRepo) GetEvaluatorRecord(arg0 context.Context, arg1 int64, arg2 bool) (*entity.EvaluatorRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.EvaluatorRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluatorRecord indicates an expected call of GetEvaluatorRecord.
func (mr *MockIEvaluatorRecordRepoMockRecorder) GetEvaluatorRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorRecord", reflect.TypeOf((*MockIEvaluatorRecordRepo)(nil).GetEvaluatorRecord), arg0, arg1, arg2)
}
