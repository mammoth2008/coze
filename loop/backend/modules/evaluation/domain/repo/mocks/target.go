// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo (interfaces: IEvalTargetRepo)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repo.go -package=mocks . IEvalTargetRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	repo "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo"
)

// MockIEvalTargetRepo is a mock of IEvalTargetRepo interface.
type MockIEvalTargetRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIEvalTargetRepoMockRecorder
	isgomock struct{}
}

// MockIEvalTargetRepoMockRecorder is the mock recorder for MockIEvalTargetRepo.
type MockIEvalTargetRepoMockRecorder struct {
	mock *MockIEvalTargetRepo
}

// NewMockIEvalTargetRepo creates a new mock instance.
func NewMockIEvalTargetRepo(ctrl *gomock.Controller) *MockIEvalTargetRepo {
	mock := &MockIEvalTargetRepo{ctrl: ctrl}
	mock.recorder = &MockIEvalTargetRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvalTargetRepo) EXPECT() *MockIEvalTargetRepoMockRecorder {
	return m.recorder
}

// BatchGetEvalTargetBySource mocks base method.
func (m *MockIEvalTargetRepo) BatchGetEvalTargetBySource(ctx context.Context, param *repo.BatchGetEvalTargetBySourceParam) ([]*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvalTargetBySource", ctx, param)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvalTargetBySource indicates an expected call of BatchGetEvalTargetBySource.
func (mr *MockIEvalTargetRepoMockRecorder) BatchGetEvalTargetBySource(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvalTargetBySource", reflect.TypeOf((*MockIEvalTargetRepo)(nil).BatchGetEvalTargetBySource), ctx, param)
}

// BatchGetEvalTargetVersion mocks base method.
func (m *MockIEvalTargetRepo) BatchGetEvalTargetVersion(ctx context.Context, spaceID int64, versionIDs []int64) ([]*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvalTargetVersion", ctx, spaceID, versionIDs)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvalTargetVersion indicates an expected call of BatchGetEvalTargetVersion.
func (mr *MockIEvalTargetRepoMockRecorder) BatchGetEvalTargetVersion(ctx, spaceID, versionIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvalTargetVersion", reflect.TypeOf((*MockIEvalTargetRepo)(nil).BatchGetEvalTargetVersion), ctx, spaceID, versionIDs)
}

// CreateEvalTarget mocks base method.
func (m *MockIEvalTargetRepo) CreateEvalTarget(ctx context.Context, do *entity.EvalTarget) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvalTarget", ctx, do)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEvalTarget indicates an expected call of CreateEvalTarget.
func (mr *MockIEvalTargetRepoMockRecorder) CreateEvalTarget(ctx, do any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvalTarget", reflect.TypeOf((*MockIEvalTargetRepo)(nil).CreateEvalTarget), ctx, do)
}

// CreateEvalTargetRecord mocks base method.
func (m *MockIEvalTargetRepo) CreateEvalTargetRecord(ctx context.Context, record *entity.EvalTargetRecord) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvalTargetRecord", ctx, record)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvalTargetRecord indicates an expected call of CreateEvalTargetRecord.
func (mr *MockIEvalTargetRepoMockRecorder) CreateEvalTargetRecord(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvalTargetRecord", reflect.TypeOf((*MockIEvalTargetRepo)(nil).CreateEvalTargetRecord), ctx, record)
}

// GetEvalTarget mocks base method.
func (m *MockIEvalTargetRepo) GetEvalTarget(ctx context.Context, targetID int64) (*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvalTarget", ctx, targetID)
	ret0, _ := ret[0].(*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTarget indicates an expected call of GetEvalTarget.
func (mr *MockIEvalTargetRepoMockRecorder) GetEvalTarget(ctx, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTarget", reflect.TypeOf((*MockIEvalTargetRepo)(nil).GetEvalTarget), ctx, targetID)
}

// GetEvalTargetRecordByIDAndSpaceID mocks base method.
func (m *MockIEvalTargetRepo) GetEvalTargetRecordByIDAndSpaceID(ctx context.Context, spaceID, recordID int64) (*entity.EvalTargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvalTargetRecordByIDAndSpaceID", ctx, spaceID, recordID)
	ret0, _ := ret[0].(*entity.EvalTargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTargetRecordByIDAndSpaceID indicates an expected call of GetEvalTargetRecordByIDAndSpaceID.
func (mr *MockIEvalTargetRepoMockRecorder) GetEvalTargetRecordByIDAndSpaceID(ctx, spaceID, recordID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTargetRecordByIDAndSpaceID", reflect.TypeOf((*MockIEvalTargetRepo)(nil).GetEvalTargetRecordByIDAndSpaceID), ctx, spaceID, recordID)
}

// GetEvalTargetVersion mocks base method.
func (m *MockIEvalTargetRepo) GetEvalTargetVersion(ctx context.Context, spaceID, versionID int64) (*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvalTargetVersion", ctx, spaceID, versionID)
	ret0, _ := ret[0].(*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTargetVersion indicates an expected call of GetEvalTargetVersion.
func (mr *MockIEvalTargetRepoMockRecorder) GetEvalTargetVersion(ctx, spaceID, versionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTargetVersion", reflect.TypeOf((*MockIEvalTargetRepo)(nil).GetEvalTargetVersion), ctx, spaceID, versionID)
}

// ListEvalTargetRecordByIDsAndSpaceID mocks base method.
func (m *MockIEvalTargetRepo) ListEvalTargetRecordByIDsAndSpaceID(ctx context.Context, spaceID int64, recordIDs []int64) ([]*entity.EvalTargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvalTargetRecordByIDsAndSpaceID", ctx, spaceID, recordIDs)
	ret0, _ := ret[0].([]*entity.EvalTargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvalTargetRecordByIDsAndSpaceID indicates an expected call of ListEvalTargetRecordByIDsAndSpaceID.
func (mr *MockIEvalTargetRepoMockRecorder) ListEvalTargetRecordByIDsAndSpaceID(ctx, spaceID, recordIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvalTargetRecordByIDsAndSpaceID", reflect.TypeOf((*MockIEvalTargetRepo)(nil).ListEvalTargetRecordByIDsAndSpaceID), ctx, spaceID, recordIDs)
}
