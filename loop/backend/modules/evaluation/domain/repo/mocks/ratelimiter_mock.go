// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo (interfaces: RateLimiter)

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"go.uber.org/mock/gomock"
)

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// AllowInvoke mocks base method.
func (m *MockRateLimiter) AllowInvoke(arg0 context.Context, arg1 int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowInvoke", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowInvoke indicates an expected call of AllowInvoke.
func (mr *MockRateLimiterMockRecorder) AllowInvoke(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowInvoke", reflect.TypeOf((*MockRateLimiter)(nil).AllowInvoke), arg0, arg1)
}
