// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity (interfaces: IEvaluatorVersion)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIEvaluatorVersion is a mock of IEvaluatorVersion interface.
type MockIEvaluatorVersion struct {
	ctrl     *gomock.Controller
	recorder *MockIEvaluatorVersionMockRecorder
}

// MockIEvaluatorVersionMockRecorder is the mock recorder for MockIEvaluatorVersion.
type MockIEvaluatorVersionMockRecorder struct {
	mock *MockIEvaluatorVersion
}

// NewMockIEvaluatorVersion creates a new mock instance.
func NewMockIEvaluatorVersion(ctrl *gomock.Controller) *MockIEvaluatorVersion {
	mock := &MockIEvaluatorVersion{ctrl: ctrl}
	mock.recorder = &MockIEvaluatorVersionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvaluatorVersion) EXPECT() *MockIEvaluatorVersionMockRecorder {
	return m.recorder
}

// GetBaseInfo mocks base method.
func (m *MockIEvaluatorVersion) GetBaseInfo() *entity.BaseInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseInfo")
	ret0, _ := ret[0].(*entity.BaseInfo)
	return ret0
}

// GetBaseInfo indicates an expected call of GetBaseInfo.
func (mr *MockIEvaluatorVersionMockRecorder) GetBaseInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseInfo", reflect.TypeOf((*MockIEvaluatorVersion)(nil).GetBaseInfo))
}

// GetDescription mocks base method.
func (m *MockIEvaluatorVersion) GetDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDescription indicates an expected call of GetDescription.
func (mr *MockIEvaluatorVersionMockRecorder) GetDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockIEvaluatorVersion)(nil).GetDescription))
}

// GetEvaluatorID mocks base method.
func (m *MockIEvaluatorVersion) GetEvaluatorID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetEvaluatorID indicates an expected call of GetEvaluatorID.
func (mr *MockIEvaluatorVersionMockRecorder) GetEvaluatorID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorID", reflect.TypeOf((*MockIEvaluatorVersion)(nil).GetEvaluatorID))
}

// GetID mocks base method.
func (m *MockIEvaluatorVersion) GetID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockIEvaluatorVersionMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIEvaluatorVersion)(nil).GetID))
}

// GetModelConfig mocks base method.
func (m *MockIEvaluatorVersion) GetModelConfig() *entity.ModelConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelConfig")
	ret0, _ := ret[0].(*entity.ModelConfig)
	return ret0
}

// GetModelConfig indicates an expected call of GetModelConfig.
func (mr *MockIEvaluatorVersionMockRecorder) GetModelConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelConfig", reflect.TypeOf((*MockIEvaluatorVersion)(nil).GetModelConfig))
}

// GetPromptTemplateKey mocks base method.
func (m *MockIEvaluatorVersion) GetPromptTemplateKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromptTemplateKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPromptTemplateKey indicates an expected call of GetPromptTemplateKey.
func (mr *MockIEvaluatorVersionMockRecorder) GetPromptTemplateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromptTemplateKey", reflect.TypeOf((*MockIEvaluatorVersion)(nil).GetPromptTemplateKey))
}

// GetSpaceID mocks base method.
func (m *MockIEvaluatorVersion) GetSpaceID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetSpaceID indicates an expected call of GetSpaceID.
func (mr *MockIEvaluatorVersionMockRecorder) GetSpaceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceID", reflect.TypeOf((*MockIEvaluatorVersion)(nil).GetSpaceID))
}

// GetVersion mocks base method.
func (m *MockIEvaluatorVersion) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockIEvaluatorVersionMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockIEvaluatorVersion)(nil).GetVersion))
}

// SetBaseInfo mocks base method.
func (m *MockIEvaluatorVersion) SetBaseInfo(arg0 *entity.BaseInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaseInfo", arg0)
}

// SetBaseInfo indicates an expected call of SetBaseInfo.
func (mr *MockIEvaluatorVersionMockRecorder) SetBaseInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseInfo", reflect.TypeOf((*MockIEvaluatorVersion)(nil).SetBaseInfo), arg0)
}

// SetDescription mocks base method.
func (m *MockIEvaluatorVersion) SetDescription(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDescription", arg0)
}

// SetDescription indicates an expected call of SetDescription.
func (mr *MockIEvaluatorVersionMockRecorder) SetDescription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDescription", reflect.TypeOf((*MockIEvaluatorVersion)(nil).SetDescription), arg0)
}

// SetEvaluatorID mocks base method.
func (m *MockIEvaluatorVersion) SetEvaluatorID(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEvaluatorID", arg0)
}

// SetEvaluatorID indicates an expected call of SetEvaluatorID.
func (mr *MockIEvaluatorVersionMockRecorder) SetEvaluatorID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEvaluatorID", reflect.TypeOf((*MockIEvaluatorVersion)(nil).SetEvaluatorID), arg0)
}

// SetID mocks base method.
func (m *MockIEvaluatorVersion) SetID(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", arg0)
}

// SetID indicates an expected call of SetID.
func (mr *MockIEvaluatorVersionMockRecorder) SetID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockIEvaluatorVersion)(nil).SetID), arg0)
}

// SetParseType mocks base method.
func (m *MockIEvaluatorVersion) SetParseType(arg0 entity.ParseType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParseType", arg0)
}

// SetParseType indicates an expected call of SetParseType.
func (mr *MockIEvaluatorVersionMockRecorder) SetParseType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParseType", reflect.TypeOf((*MockIEvaluatorVersion)(nil).SetParseType), arg0)
}

// SetPromptSuffix mocks base method.
func (m *MockIEvaluatorVersion) SetPromptSuffix(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPromptSuffix", arg0)
}

// SetPromptSuffix indicates an expected call of SetPromptSuffix.
func (mr *MockIEvaluatorVersionMockRecorder) SetPromptSuffix(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPromptSuffix", reflect.TypeOf((*MockIEvaluatorVersion)(nil).SetPromptSuffix), arg0)
}

// SetSpaceID mocks base method.
func (m *MockIEvaluatorVersion) SetSpaceID(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSpaceID", arg0)
}

// SetSpaceID indicates an expected call of SetSpaceID.
func (mr *MockIEvaluatorVersionMockRecorder) SetSpaceID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSpaceID", reflect.TypeOf((*MockIEvaluatorVersion)(nil).SetSpaceID), arg0)
}

// SetTools mocks base method.
func (m *MockIEvaluatorVersion) SetTools(arg0 []*entity.Tool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTools", arg0)
}

// SetTools indicates an expected call of SetTools.
func (mr *MockIEvaluatorVersionMockRecorder) SetTools(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTools", reflect.TypeOf((*MockIEvaluatorVersion)(nil).SetTools), arg0)
}

// SetVersion mocks base method.
func (m *MockIEvaluatorVersion) SetVersion(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVersion", arg0)
}

// SetVersion indicates an expected call of SetVersion.
func (mr *MockIEvaluatorVersionMockRecorder) SetVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockIEvaluatorVersion)(nil).SetVersion), arg0)
}

// ValidateBaseInfo mocks base method.
func (m *MockIEvaluatorVersion) ValidateBaseInfo() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBaseInfo")
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateBaseInfo indicates an expected call of ValidateBaseInfo.
func (mr *MockIEvaluatorVersionMockRecorder) ValidateBaseInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBaseInfo", reflect.TypeOf((*MockIEvaluatorVersion)(nil).ValidateBaseInfo))
}

// ValidateInput mocks base method.
func (m *MockIEvaluatorVersion) ValidateInput(arg0 *entity.EvaluatorInputData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateInput", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateInput indicates an expected call of ValidateInput.
func (mr *MockIEvaluatorVersionMockRecorder) ValidateInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateInput", reflect.TypeOf((*MockIEvaluatorVersion)(nil).ValidateInput), arg0)
}
