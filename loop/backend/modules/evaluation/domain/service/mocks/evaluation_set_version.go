// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: EvaluationSetVersionService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/evaluation_set_version.go -package=mocks . EvaluationSetVersionService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEvaluationSetVersionService is a mock of EvaluationSetVersionService interface.
type MockEvaluationSetVersionService struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluationSetVersionServiceMockRecorder
	isgomock struct{}
}

// MockEvaluationSetVersionServiceMockRecorder is the mock recorder for MockEvaluationSetVersionService.
type MockEvaluationSetVersionServiceMockRecorder struct {
	mock *MockEvaluationSetVersionService
}

// NewMockEvaluationSetVersionService creates a new mock instance.
func NewMockEvaluationSetVersionService(ctrl *gomock.Controller) *MockEvaluationSetVersionService {
	mock := &MockEvaluationSetVersionService{ctrl: ctrl}
	mock.recorder = &MockEvaluationSetVersionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluationSetVersionService) EXPECT() *MockEvaluationSetVersionServiceMockRecorder {
	return m.recorder
}

// BatchGetEvaluationSetVersions mocks base method.
func (m *MockEvaluationSetVersionService) BatchGetEvaluationSetVersions(ctx context.Context, spaceID *int64, evaluationSetIDs []int64, deletedAt *bool) ([]*entity.BatchGetEvaluationSetVersionsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluationSetVersions", ctx, spaceID, evaluationSetIDs, deletedAt)
	ret0, _ := ret[0].([]*entity.BatchGetEvaluationSetVersionsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluationSetVersions indicates an expected call of BatchGetEvaluationSetVersions.
func (mr *MockEvaluationSetVersionServiceMockRecorder) BatchGetEvaluationSetVersions(ctx, spaceID, evaluationSetIDs, deletedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluationSetVersions", reflect.TypeOf((*MockEvaluationSetVersionService)(nil).BatchGetEvaluationSetVersions), ctx, spaceID, evaluationSetIDs, deletedAt)
}

// CreateEvaluationSetVersion mocks base method.
func (m *MockEvaluationSetVersionService) CreateEvaluationSetVersion(ctx context.Context, param *entity.CreateEvaluationSetVersionParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluationSetVersion", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluationSetVersion indicates an expected call of CreateEvaluationSetVersion.
func (mr *MockEvaluationSetVersionServiceMockRecorder) CreateEvaluationSetVersion(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluationSetVersion", reflect.TypeOf((*MockEvaluationSetVersionService)(nil).CreateEvaluationSetVersion), ctx, param)
}

// GetEvaluationSetVersion mocks base method.
func (m *MockEvaluationSetVersionService) GetEvaluationSetVersion(ctx context.Context, spaceID, versionID int64, deletedAt *bool) (*entity.EvaluationSetVersion, *entity.EvaluationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationSetVersion", ctx, spaceID, versionID, deletedAt)
	ret0, _ := ret[0].(*entity.EvaluationSetVersion)
	ret1, _ := ret[1].(*entity.EvaluationSet)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEvaluationSetVersion indicates an expected call of GetEvaluationSetVersion.
func (mr *MockEvaluationSetVersionServiceMockRecorder) GetEvaluationSetVersion(ctx, spaceID, versionID, deletedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationSetVersion", reflect.TypeOf((*MockEvaluationSetVersionService)(nil).GetEvaluationSetVersion), ctx, spaceID, versionID, deletedAt)
}

// ListEvaluationSetVersions mocks base method.
func (m *MockEvaluationSetVersionService) ListEvaluationSetVersions(ctx context.Context, param *entity.ListEvaluationSetVersionsParam) ([]*entity.EvaluationSetVersion, *int64, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluationSetVersions", ctx, param)
	ret0, _ := ret[0].([]*entity.EvaluationSetVersion)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListEvaluationSetVersions indicates an expected call of ListEvaluationSetVersions.
func (mr *MockEvaluationSetVersionServiceMockRecorder) ListEvaluationSetVersions(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluationSetVersions", reflect.TypeOf((*MockEvaluationSetVersionService)(nil).ListEvaluationSetVersions), ctx, param)
}
