// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: IEvalTargetService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/target.go -package=mocks . IEvalTargetService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIEvalTargetService is a mock of IEvalTargetService interface.
type MockIEvalTargetService struct {
	ctrl     *gomock.Controller
	recorder *MockIEvalTargetServiceMockRecorder
	isgomock struct{}
}

// MockIEvalTargetServiceMockRecorder is the mock recorder for MockIEvalTargetService.
type MockIEvalTargetServiceMockRecorder struct {
	mock *MockIEvalTargetService
}

// NewMockIEvalTargetService creates a new mock instance.
func NewMockIEvalTargetService(ctrl *gomock.Controller) *MockIEvalTargetService {
	mock := &MockIEvalTargetService{ctrl: ctrl}
	mock.recorder = &MockIEvalTargetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvalTargetService) EXPECT() *MockIEvalTargetServiceMockRecorder {
	return m.recorder
}

// BatchGetEvalTargetBySource mocks base method.
func (m *MockIEvalTargetService) BatchGetEvalTargetBySource(ctx context.Context, param *entity.BatchGetEvalTargetBySourceParam) ([]*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvalTargetBySource", ctx, param)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvalTargetBySource indicates an expected call of BatchGetEvalTargetBySource.
func (mr *MockIEvalTargetServiceMockRecorder) BatchGetEvalTargetBySource(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvalTargetBySource", reflect.TypeOf((*MockIEvalTargetService)(nil).BatchGetEvalTargetBySource), ctx, param)
}

// BatchGetEvalTargetVersion mocks base method.
func (m *MockIEvalTargetService) BatchGetEvalTargetVersion(ctx context.Context, spaceID int64, versionIDs []int64, needSourceInfo bool) ([]*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvalTargetVersion", ctx, spaceID, versionIDs, needSourceInfo)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvalTargetVersion indicates an expected call of BatchGetEvalTargetVersion.
func (mr *MockIEvalTargetServiceMockRecorder) BatchGetEvalTargetVersion(ctx, spaceID, versionIDs, needSourceInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvalTargetVersion", reflect.TypeOf((*MockIEvalTargetService)(nil).BatchGetEvalTargetVersion), ctx, spaceID, versionIDs, needSourceInfo)
}

// BatchGetRecordByIDs mocks base method.
func (m *MockIEvalTargetService) BatchGetRecordByIDs(ctx context.Context, spaceID int64, recordIDs []int64) ([]*entity.EvalTargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetRecordByIDs", ctx, spaceID, recordIDs)
	ret0, _ := ret[0].([]*entity.EvalTargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRecordByIDs indicates an expected call of BatchGetRecordByIDs.
func (mr *MockIEvalTargetServiceMockRecorder) BatchGetRecordByIDs(ctx, spaceID, recordIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRecordByIDs", reflect.TypeOf((*MockIEvalTargetService)(nil).BatchGetRecordByIDs), ctx, spaceID, recordIDs)
}

// CreateEvalTarget mocks base method.
func (m *MockIEvalTargetService) CreateEvalTarget(ctx context.Context, spaceID int64, sourceTargetID, sourceTargetVersion string, targetType entity.EvalTargetType, opts ...entity.Option) (int64, int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, sourceTargetID, sourceTargetVersion, targetType}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEvalTarget", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEvalTarget indicates an expected call of CreateEvalTarget.
func (mr *MockIEvalTargetServiceMockRecorder) CreateEvalTarget(ctx, spaceID, sourceTargetID, sourceTargetVersion, targetType any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, sourceTargetID, sourceTargetVersion, targetType}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvalTarget", reflect.TypeOf((*MockIEvalTargetService)(nil).CreateEvalTarget), varargs...)
}

// ExecuteTarget mocks base method.
func (m *MockIEvalTargetService) ExecuteTarget(ctx context.Context, spaceID, targetID, targetVersionID int64, param *entity.ExecuteTargetCtx, inputData *entity.EvalTargetInputData) (*entity.EvalTargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTarget", ctx, spaceID, targetID, targetVersionID, param, inputData)
	ret0, _ := ret[0].(*entity.EvalTargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTarget indicates an expected call of ExecuteTarget.
func (mr *MockIEvalTargetServiceMockRecorder) ExecuteTarget(ctx, spaceID, targetID, targetVersionID, param, inputData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTarget", reflect.TypeOf((*MockIEvalTargetService)(nil).ExecuteTarget), ctx, spaceID, targetID, targetVersionID, param, inputData)
}

// GetEvalTarget mocks base method.
func (m *MockIEvalTargetService) GetEvalTarget(ctx context.Context, targetID int64) (*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvalTarget", ctx, targetID)
	ret0, _ := ret[0].(*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTarget indicates an expected call of GetEvalTarget.
func (mr *MockIEvalTargetServiceMockRecorder) GetEvalTarget(ctx, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTarget", reflect.TypeOf((*MockIEvalTargetService)(nil).GetEvalTarget), ctx, targetID)
}

// GetEvalTargetVersion mocks base method.
func (m *MockIEvalTargetService) GetEvalTargetVersion(ctx context.Context, spaceID, versionID int64, needSourceInfo bool) (*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvalTargetVersion", ctx, spaceID, versionID, needSourceInfo)
	ret0, _ := ret[0].(*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTargetVersion indicates an expected call of GetEvalTargetVersion.
func (mr *MockIEvalTargetServiceMockRecorder) GetEvalTargetVersion(ctx, spaceID, versionID, needSourceInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTargetVersion", reflect.TypeOf((*MockIEvalTargetService)(nil).GetEvalTargetVersion), ctx, spaceID, versionID, needSourceInfo)
}

// GetRecordByID mocks base method.
func (m *MockIEvalTargetService) GetRecordByID(ctx context.Context, spaceID, recordID int64) (*entity.EvalTargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordByID", ctx, spaceID, recordID)
	ret0, _ := ret[0].(*entity.EvalTargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordByID indicates an expected call of GetRecordByID.
func (mr *MockIEvalTargetServiceMockRecorder) GetRecordByID(ctx, spaceID, recordID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordByID", reflect.TypeOf((*MockIEvalTargetService)(nil).GetRecordByID), ctx, spaceID, recordID)
}
