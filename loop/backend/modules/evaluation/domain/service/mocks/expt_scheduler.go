// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: SchedulerModeFactory)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockSchedulerModeFactory is a mock of SchedulerModeFactory interface.
type MockSchedulerModeFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerModeFactoryMockRecorder
}

// MockSchedulerModeFactoryMockRecorder is the mock recorder for MockSchedulerModeFactory.
type MockSchedulerModeFactoryMockRecorder struct {
	mock *MockSchedulerModeFactory
}

// NewMockSchedulerModeFactory creates a new mock instance.
func NewMockSchedulerModeFactory(ctrl *gomock.Controller) *MockSchedulerModeFactory {
	mock := &MockSchedulerModeFactory{ctrl: ctrl}
	mock.recorder = &MockSchedulerModeFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerModeFactory) EXPECT() *MockSchedulerModeFactoryMockRecorder {
	return m.recorder
}

// NewSchedulerMode mocks base method.
func (m *MockSchedulerModeFactory) NewSchedulerMode(arg0 entity.ExptRunMode) (entity.ExptSchedulerMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSchedulerMode", arg0)
	ret0, _ := ret[0].(entity.ExptSchedulerMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSchedulerMode indicates an expected call of NewSchedulerMode.
func (mr *MockSchedulerModeFactoryMockRecorder) NewSchedulerMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSchedulerMode", reflect.TypeOf((*MockSchedulerModeFactory)(nil).NewSchedulerMode), arg0)
}
