// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: EvaluatorRecordService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEvaluatorRecordService is a mock of EvaluatorRecordService interface.
type MockEvaluatorRecordService struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorRecordServiceMockRecorder
}

// MockEvaluatorRecordServiceMockRecorder is the mock recorder for MockEvaluatorRecordService.
type MockEvaluatorRecordServiceMockRecorder struct {
	mock *MockEvaluatorRecordService
}

// NewMockEvaluatorRecordService creates a new mock instance.
func NewMockEvaluatorRecordService(ctrl *gomock.Controller) *MockEvaluatorRecordService {
	mock := &MockEvaluatorRecordService{ctrl: ctrl}
	mock.recorder = &MockEvaluatorRecordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorRecordService) EXPECT() *MockEvaluatorRecordServiceMockRecorder {
	return m.recorder
}

// BatchGetEvaluatorRecord mocks base method.
func (m *MockEvaluatorRecordService) BatchGetEvaluatorRecord(arg0 context.Context, arg1 []int64, arg2 bool) ([]*entity.EvaluatorRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.EvaluatorRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorRecord indicates an expected call of BatchGetEvaluatorRecord.
func (mr *MockEvaluatorRecordServiceMockRecorder) BatchGetEvaluatorRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorRecord", reflect.TypeOf((*MockEvaluatorRecordService)(nil).BatchGetEvaluatorRecord), arg0, arg1, arg2)
}

// CorrectEvaluatorRecord mocks base method.
func (m *MockEvaluatorRecordService) CorrectEvaluatorRecord(arg0 context.Context, arg1 *entity.EvaluatorRecord, arg2 *entity.Correction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CorrectEvaluatorRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CorrectEvaluatorRecord indicates an expected call of CorrectEvaluatorRecord.
func (mr *MockEvaluatorRecordServiceMockRecorder) CorrectEvaluatorRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CorrectEvaluatorRecord", reflect.TypeOf((*MockEvaluatorRecordService)(nil).CorrectEvaluatorRecord), arg0, arg1, arg2)
}

// GetEvaluatorRecord mocks base method.
func (m *MockEvaluatorRecordService) GetEvaluatorRecord(arg0 context.Context, arg1 int64, arg2 bool) (*entity.EvaluatorRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.EvaluatorRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluatorRecord indicates an expected call of GetEvaluatorRecord.
func (mr *MockEvaluatorRecordServiceMockRecorder) GetEvaluatorRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorRecord", reflect.TypeOf((*MockEvaluatorRecordService)(nil).GetEvaluatorRecord), arg0, arg1, arg2)
}
