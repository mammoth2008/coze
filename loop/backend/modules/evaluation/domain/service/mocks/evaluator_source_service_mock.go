// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: EvaluatorSourceService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEvaluatorSourceService is a mock of EvaluatorSourceService interface.
type MockEvaluatorSourceService struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorSourceServiceMockRecorder
}

// MockEvaluatorSourceServiceMockRecorder is the mock recorder for MockEvaluatorSourceService.
type MockEvaluatorSourceServiceMockRecorder struct {
	mock *MockEvaluatorSourceService
}

// NewMockEvaluatorSourceService creates a new mock instance.
func NewMockEvaluatorSourceService(ctrl *gomock.Controller) *MockEvaluatorSourceService {
	mock := &MockEvaluatorSourceService{ctrl: ctrl}
	mock.recorder = &MockEvaluatorSourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorSourceService) EXPECT() *MockEvaluatorSourceServiceMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockEvaluatorSourceService) Debug(arg0 context.Context, arg1 *entity.Evaluator, arg2 *entity.EvaluatorInputData) (*entity.EvaluatorOutputData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.EvaluatorOutputData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Debug indicates an expected call of Debug.
func (mr *MockEvaluatorSourceServiceMockRecorder) Debug(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockEvaluatorSourceService)(nil).Debug), arg0, arg1, arg2)
}

// EvaluatorType mocks base method.
func (m *MockEvaluatorSourceService) EvaluatorType() entity.EvaluatorType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluatorType")
	ret0, _ := ret[0].(entity.EvaluatorType)
	return ret0
}

// EvaluatorType indicates an expected call of EvaluatorType.
func (mr *MockEvaluatorSourceServiceMockRecorder) EvaluatorType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluatorType", reflect.TypeOf((*MockEvaluatorSourceService)(nil).EvaluatorType))
}

// PreHandle mocks base method.
func (m *MockEvaluatorSourceService) PreHandle(arg0 context.Context, arg1 *entity.Evaluator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreHandle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreHandle indicates an expected call of PreHandle.
func (mr *MockEvaluatorSourceServiceMockRecorder) PreHandle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreHandle", reflect.TypeOf((*MockEvaluatorSourceService)(nil).PreHandle), arg0, arg1)
}

// Run mocks base method.
func (m *MockEvaluatorSourceService) Run(arg0 context.Context, arg1 *entity.Evaluator, arg2 *entity.EvaluatorInputData) (*entity.EvaluatorOutputData, entity.EvaluatorRunStatus, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.EvaluatorOutputData)
	ret1, _ := ret[1].(entity.EvaluatorRunStatus)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// Run indicates an expected call of Run.
func (mr *MockEvaluatorSourceServiceMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockEvaluatorSourceService)(nil).Run), arg0, arg1, arg2)
}
