// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/rpc (interfaces: ILLMProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockILLMProvider is a mock of ILLMProvider interface.
type MockILLMProvider struct {
	ctrl     *gomock.Controller
	recorder *MockILLMProviderMockRecorder
}

// MockILLMProviderMockRecorder is the mock recorder for MockILLMProvider.
type MockILLMProviderMockRecorder struct {
	mock *MockILLMProvider
}

// NewMockILLMProvider creates a new mock instance.
func NewMockILLMProvider(ctrl *gomock.Controller) *MockILLMProvider {
	mock := &MockILLMProvider{ctrl: ctrl}
	mock.recorder = &MockILLMProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILLMProvider) EXPECT() *MockILLMProviderMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockILLMProvider) Call(arg0 context.Context, arg1 *entity.LLMCallParam) (*entity.ReplyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(*entity.ReplyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockILLMProviderMockRecorder) Call(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockILLMProvider)(nil).Call), arg0, arg1)
}
