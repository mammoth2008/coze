// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/metrics (interfaces: EvaluatorExecMetrics)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockEvaluatorExecMetrics is a mock of EvaluatorExecMetrics interface.
type MockEvaluatorExecMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorExecMetricsMockRecorder
}

// MockEvaluatorExecMetricsMockRecorder is the mock recorder for MockEvaluatorExecMetrics.
type MockEvaluatorExecMetricsMockRecorder struct {
	mock *MockEvaluatorExecMetrics
}

// NewMockEvaluatorExecMetrics creates a new mock instance.
func NewMockEvaluatorExecMetrics(ctrl *gomock.Controller) *MockEvaluatorExecMetrics {
	mock := &MockEvaluatorExecMetrics{ctrl: ctrl}
	mock.recorder = &MockEvaluatorExecMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorExecMetrics) EXPECT() *MockEvaluatorExecMetricsMockRecorder {
	return m.recorder
}

// EmitCreate mocks base method.
func (m *MockEvaluatorExecMetrics) EmitCreate(arg0 int64, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitCreate", arg0, arg1)
}

// EmitCreate indicates an expected call of EmitCreate.
func (mr *MockEvaluatorExecMetricsMockRecorder) EmitCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitCreate", reflect.TypeOf((*MockEvaluatorExecMetrics)(nil).EmitCreate), arg0, arg1)
}

// EmitRun mocks base method.
func (m *MockEvaluatorExecMetrics) EmitRun(arg0 int64, arg1 error, arg2 time.Time, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitRun", arg0, arg1, arg2, arg3)
}

// EmitRun indicates an expected call of EmitRun.
func (mr *MockEvaluatorExecMetricsMockRecorder) EmitRun(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitRun", reflect.TypeOf((*MockEvaluatorExecMetrics)(nil).EmitRun), arg0, arg1, arg2, arg3)
}
