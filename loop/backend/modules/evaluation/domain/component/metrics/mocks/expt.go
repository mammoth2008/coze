// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/metrics (interfaces: ExptMetric)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt.go -package=mocks . ExptMetric
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockExptMetric is a mock of ExptMetric interface.
type MockExptMetric struct {
	ctrl     *gomock.Controller
	recorder *MockExptMetricMockRecorder
	isgomock struct{}
}

// MockExptMetricMockRecorder is the mock recorder for MockExptMetric.
type MockExptMetricMockRecorder struct {
	mock *MockExptMetric
}

// NewMockExptMetric creates a new mock instance.
func NewMockExptMetric(ctrl *gomock.Controller) *MockExptMetric {
	mock := &MockExptMetric{ctrl: ctrl}
	mock.recorder = &MockExptMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptMetric) EXPECT() *MockExptMetricMockRecorder {
	return m.recorder
}

// EmitCalculateExptAggrResult mocks base method.
func (m *MockExptMetric) EmitCalculateExptAggrResult(spaceID, mode int64, isErr bool, startTime int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitCalculateExptAggrResult", spaceID, mode, isErr, startTime)
}

// EmitCalculateExptAggrResult indicates an expected call of EmitCalculateExptAggrResult.
func (mr *MockExptMetricMockRecorder) EmitCalculateExptAggrResult(spaceID, mode, isErr, startTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitCalculateExptAggrResult", reflect.TypeOf((*MockExptMetric)(nil).EmitCalculateExptAggrResult), spaceID, mode, isErr, startTime)
}

// EmitExptExecResult mocks base method.
func (m *MockExptMetric) EmitExptExecResult(spaceID, typ, status int64, start time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitExptExecResult", spaceID, typ, status, start)
}

// EmitExptExecResult indicates an expected call of EmitExptExecResult.
func (mr *MockExptMetricMockRecorder) EmitExptExecResult(spaceID, typ, status, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitExptExecResult", reflect.TypeOf((*MockExptMetric)(nil).EmitExptExecResult), spaceID, typ, status, start)
}

// EmitExptExecRun mocks base method.
func (m *MockExptMetric) EmitExptExecRun(spaceID, mode int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitExptExecRun", spaceID, mode)
}

// EmitExptExecRun indicates an expected call of EmitExptExecRun.
func (mr *MockExptMetricMockRecorder) EmitExptExecRun(spaceID, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitExptExecRun", reflect.TypeOf((*MockExptMetric)(nil).EmitExptExecRun), spaceID, mode)
}

// EmitGetExptResult mocks base method.
func (m *MockExptMetric) EmitGetExptResult(spaceID int64, isErr bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitGetExptResult", spaceID, isErr)
}

// EmitGetExptResult indicates an expected call of EmitGetExptResult.
func (mr *MockExptMetricMockRecorder) EmitGetExptResult(spaceID, isErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitGetExptResult", reflect.TypeOf((*MockExptMetric)(nil).EmitGetExptResult), spaceID, isErr)
}

// EmitItemExecEval mocks base method.
func (m *MockExptMetric) EmitItemExecEval(spaceID, mode int64, cnt int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitItemExecEval", spaceID, mode, cnt)
}

// EmitItemExecEval indicates an expected call of EmitItemExecEval.
func (mr *MockExptMetricMockRecorder) EmitItemExecEval(spaceID, mode, cnt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitItemExecEval", reflect.TypeOf((*MockExptMetric)(nil).EmitItemExecEval), spaceID, mode, cnt)
}

// EmitItemExecResult mocks base method.
func (m *MockExptMetric) EmitItemExecResult(spaceID, mode int64, isErr, retry, stable bool, code, startTime int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitItemExecResult", spaceID, mode, isErr, retry, stable, code, startTime)
}

// EmitItemExecResult indicates an expected call of EmitItemExecResult.
func (mr *MockExptMetricMockRecorder) EmitItemExecResult(spaceID, mode, isErr, retry, stable, code, startTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitItemExecResult", reflect.TypeOf((*MockExptMetric)(nil).EmitItemExecResult), spaceID, mode, isErr, retry, stable, code, startTime)
}

// EmitTurnExecEval mocks base method.
func (m *MockExptMetric) EmitTurnExecEval(spaceID, mode int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitTurnExecEval", spaceID, mode)
}

// EmitTurnExecEval indicates an expected call of EmitTurnExecEval.
func (mr *MockExptMetricMockRecorder) EmitTurnExecEval(spaceID, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitTurnExecEval", reflect.TypeOf((*MockExptMetric)(nil).EmitTurnExecEval), spaceID, mode)
}

// EmitTurnExecEvaluatorResult mocks base method.
func (m *MockExptMetric) EmitTurnExecEvaluatorResult(spaceID int64, isErr bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitTurnExecEvaluatorResult", spaceID, isErr)
}

// EmitTurnExecEvaluatorResult indicates an expected call of EmitTurnExecEvaluatorResult.
func (mr *MockExptMetricMockRecorder) EmitTurnExecEvaluatorResult(spaceID, isErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitTurnExecEvaluatorResult", reflect.TypeOf((*MockExptMetric)(nil).EmitTurnExecEvaluatorResult), spaceID, isErr)
}

// EmitTurnExecResult mocks base method.
func (m *MockExptMetric) EmitTurnExecResult(spaceID, mode int64, isErr, stable bool, code int64, startTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitTurnExecResult", spaceID, mode, isErr, stable, code, startTime)
}

// EmitTurnExecResult indicates an expected call of EmitTurnExecResult.
func (mr *MockExptMetricMockRecorder) EmitTurnExecResult(spaceID, mode, isErr, stable, code, startTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitTurnExecResult", reflect.TypeOf((*MockExptMetric)(nil).EmitTurnExecResult), spaceID, mode, isErr, stable, code, startTime)
}

// EmitTurnExecTargetResult mocks base method.
func (m *MockExptMetric) EmitTurnExecTargetResult(spaceID int64, isErr bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitTurnExecTargetResult", spaceID, isErr)
}

// EmitTurnExecTargetResult indicates an expected call of EmitTurnExecTargetResult.
func (mr *MockExptMetricMockRecorder) EmitTurnExecTargetResult(spaceID, isErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitTurnExecTargetResult", reflect.TypeOf((*MockExptMetric)(nil).EmitTurnExecTargetResult), spaceID, isErr)
}

// EmitZombies mocks base method.
func (m *MockExptMetric) EmitZombies(spaceID, mode, exptTyp, cnt int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitZombies", spaceID, mode, exptTyp, cnt)
}

// EmitZombies indicates an expected call of EmitZombies.
func (mr *MockExptMetricMockRecorder) EmitZombies(spaceID, mode, exptTyp, cnt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitZombies", reflect.TypeOf((*MockExptMetric)(nil).EmitZombies), spaceID, mode, exptTyp, cnt)
}
