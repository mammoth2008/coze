// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/data/domain/component/rpc (interfaces: IAuthProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/auth.go -package=mocks . IAuthProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	rpc "github.com/coze-dev/coze-loop/backend/modules/data/domain/component/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuthProvider is a mock of IAuthProvider interface.
type MockIAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthProviderMockRecorder
	isgomock struct{}
}

// MockIAuthProviderMockRecorder is the mock recorder for MockIAuthProvider.
type MockIAuthProviderMockRecorder struct {
	mock *MockIAuthProvider
}

// NewMockIAuthProvider creates a new mock instance.
func NewMockIAuthProvider(ctrl *gomock.Controller) *MockIAuthProvider {
	mock := &MockIAuthProvider{ctrl: ctrl}
	mock.recorder = &MockIAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthProvider) EXPECT() *MockIAuthProviderMockRecorder {
	return m.recorder
}

// Authorization mocks base method.
func (m *MockIAuthProvider) Authorization(ctx context.Context, param *rpc.AuthorizationParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorization", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authorization indicates an expected call of Authorization.
func (mr *MockIAuthProviderMockRecorder) Authorization(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorization", reflect.TypeOf((*MockIAuthProvider)(nil).Authorization), ctx, param)
}

// AuthorizationWithoutSPI mocks base method.
func (m *MockIAuthProvider) AuthorizationWithoutSPI(ctx context.Context, param *rpc.AuthorizationWithoutSPIParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationWithoutSPI", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizationWithoutSPI indicates an expected call of AuthorizationWithoutSPI.
func (mr *MockIAuthProviderMockRecorder) AuthorizationWithoutSPI(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationWithoutSPI", reflect.TypeOf((*MockIAuthProvider)(nil).AuthorizationWithoutSPI), ctx, param)
}
