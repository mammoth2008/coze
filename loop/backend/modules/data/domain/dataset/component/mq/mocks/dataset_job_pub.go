// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/data/domain/dataset/component/mq (interfaces: IDatasetJobPublisher)
//
// Generated by this command:
//
//	mockgen -destination=mocks/dataset_job_pub.go -package=mocks . IDatasetJobPublisher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mq "github.com/coze-dev/coze-loop/backend/modules/data/domain/dataset/component/mq"
	entity "github.com/coze-dev/coze-loop/backend/modules/data/domain/dataset/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIDatasetJobPublisher is a mock of IDatasetJobPublisher interface.
type MockIDatasetJobPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockIDatasetJobPublisherMockRecorder
	isgomock struct{}
}

// MockIDatasetJobPublisherMockRecorder is the mock recorder for MockIDatasetJobPublisher.
type MockIDatasetJobPublisherMockRecorder struct {
	mock *MockIDatasetJobPublisher
}

// NewMockIDatasetJobPublisher creates a new mock instance.
func NewMockIDatasetJobPublisher(ctrl *gomock.Controller) *MockIDatasetJobPublisher {
	mock := &MockIDatasetJobPublisher{ctrl: ctrl}
	mock.recorder = &MockIDatasetJobPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatasetJobPublisher) EXPECT() *MockIDatasetJobPublisherMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockIDatasetJobPublisher) Send(ctx context.Context, msg *entity.JobRunMessage, opts ...mq.MessageOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIDatasetJobPublisherMockRecorder) Send(ctx, msg any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIDatasetJobPublisher)(nil).Send), varargs...)
}
