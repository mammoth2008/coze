// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/data/domain/dataset/repo (interfaces: IDatasetAPI)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repo.go -package=mocks . IDatasetAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/data/domain/dataset/entity"
	repo "github.com/coze-dev/coze-loop/backend/modules/data/domain/dataset/repo"
	entity0 "github.com/coze-dev/coze-loop/backend/modules/data/domain/entity"
	pagination "github.com/coze-dev/coze-loop/backend/modules/data/pkg/pagination"
	gomock "go.uber.org/mock/gomock"
)

// MockIDatasetAPI is a mock of IDatasetAPI interface.
type MockIDatasetAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIDatasetAPIMockRecorder
	isgomock struct{}
}

// MockIDatasetAPIMockRecorder is the mock recorder for MockIDatasetAPI.
type MockIDatasetAPIMockRecorder struct {
	mock *MockIDatasetAPI
}

// NewMockIDatasetAPI creates a new mock instance.
func NewMockIDatasetAPI(ctrl *gomock.Controller) *MockIDatasetAPI {
	mock := &MockIDatasetAPI{ctrl: ctrl}
	mock.recorder = &MockIDatasetAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatasetAPI) EXPECT() *MockIDatasetAPIMockRecorder {
	return m.recorder
}

// AddDatasetOperation mocks base method.
func (m *MockIDatasetAPI) AddDatasetOperation(ctx context.Context, datasetID int64, op *entity.DatasetOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDatasetOperation", ctx, datasetID, op)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDatasetOperation indicates an expected call of AddDatasetOperation.
func (mr *MockIDatasetAPIMockRecorder) AddDatasetOperation(ctx, datasetID, op any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDatasetOperation", reflect.TypeOf((*MockIDatasetAPI)(nil).AddDatasetOperation), ctx, datasetID, op)
}

// ArchiveItems mocks base method.
func (m *MockIDatasetAPI) ArchiveItems(ctx context.Context, spaceID, delVN int64, ids []int64, opt ...repo.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, delVN, ids}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArchiveItems", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveItems indicates an expected call of ArchiveItems.
func (mr *MockIDatasetAPIMockRecorder) ArchiveItems(ctx, spaceID, delVN, ids any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, delVN, ids}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveItems", reflect.TypeOf((*MockIDatasetAPI)(nil).ArchiveItems), varargs...)
}

// BatchUpsertItemSnapshots mocks base method.
func (m *MockIDatasetAPI) BatchUpsertItemSnapshots(ctx context.Context, snapshots []*entity.ItemSnapshot, opt ...repo.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, snapshots}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpsertItemSnapshots", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpsertItemSnapshots indicates an expected call of BatchUpsertItemSnapshots.
func (mr *MockIDatasetAPIMockRecorder) BatchUpsertItemSnapshots(ctx, snapshots any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, snapshots}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpsertItemSnapshots", reflect.TypeOf((*MockIDatasetAPI)(nil).BatchUpsertItemSnapshots), varargs...)
}

// ClearDataset mocks base method.
func (m *MockIDatasetAPI) ClearDataset(ctx context.Context, spaceID, datasetID, delVN int64, opt ...repo.Option) ([]*entity.ItemIdentity, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, datasetID, delVN}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearDataset", varargs...)
	ret0, _ := ret[0].([]*entity.ItemIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearDataset indicates an expected call of ClearDataset.
func (mr *MockIDatasetAPIMockRecorder) ClearDataset(ctx, spaceID, datasetID, delVN any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, datasetID, delVN}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDataset", reflect.TypeOf((*MockIDatasetAPI)(nil).ClearDataset), varargs...)
}

// CountDatasets mocks base method.
func (m *MockIDatasetAPI) CountDatasets(ctx context.Context, params *repo.ListDatasetsParams, opt ...repo.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountDatasets", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDatasets indicates an expected call of CountDatasets.
func (mr *MockIDatasetAPIMockRecorder) CountDatasets(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDatasets", reflect.TypeOf((*MockIDatasetAPI)(nil).CountDatasets), varargs...)
}

// CountItemSnapshots mocks base method.
func (m *MockIDatasetAPI) CountItemSnapshots(ctx context.Context, params *repo.ListItemSnapshotsParams, opt ...repo.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountItemSnapshots", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountItemSnapshots indicates an expected call of CountItemSnapshots.
func (mr *MockIDatasetAPIMockRecorder) CountItemSnapshots(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountItemSnapshots", reflect.TypeOf((*MockIDatasetAPI)(nil).CountItemSnapshots), varargs...)
}

// CountItems mocks base method.
func (m *MockIDatasetAPI) CountItems(ctx context.Context, params *repo.ListItemsParams, opt ...repo.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountItems", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountItems indicates an expected call of CountItems.
func (mr *MockIDatasetAPIMockRecorder) CountItems(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountItems", reflect.TypeOf((*MockIDatasetAPI)(nil).CountItems), varargs...)
}

// CountVersions mocks base method.
func (m *MockIDatasetAPI) CountVersions(ctx context.Context, params *repo.ListDatasetVersionsParams, opt ...repo.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountVersions", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVersions indicates an expected call of CountVersions.
func (mr *MockIDatasetAPIMockRecorder) CountVersions(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVersions", reflect.TypeOf((*MockIDatasetAPI)(nil).CountVersions), varargs...)
}

// CreateDatasetAndSchema mocks base method.
func (m *MockIDatasetAPI) CreateDatasetAndSchema(ctx context.Context, dataset *entity.Dataset, fields []*entity.FieldSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetAndSchema", ctx, dataset, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatasetAndSchema indicates an expected call of CreateDatasetAndSchema.
func (mr *MockIDatasetAPIMockRecorder) CreateDatasetAndSchema(ctx, dataset, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetAndSchema", reflect.TypeOf((*MockIDatasetAPI)(nil).CreateDatasetAndSchema), ctx, dataset, fields)
}

// CreateIOJob mocks base method.
func (m *MockIDatasetAPI) CreateIOJob(ctx context.Context, job *entity.IOJob, opt ...repo.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, job}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIOJob", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIOJob indicates an expected call of CreateIOJob.
func (mr *MockIDatasetAPIMockRecorder) CreateIOJob(ctx, job any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, job}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIOJob", reflect.TypeOf((*MockIDatasetAPI)(nil).CreateIOJob), varargs...)
}

// CreateSchema mocks base method.
func (m *MockIDatasetAPI) CreateSchema(ctx context.Context, schema *entity.DatasetSchema, opt ...repo.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, schema}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockIDatasetAPIMockRecorder) CreateSchema(ctx, schema any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, schema}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockIDatasetAPI)(nil).CreateSchema), varargs...)
}

// CreateVersion mocks base method.
func (m *MockIDatasetAPI) CreateVersion(ctx context.Context, version *entity.DatasetVersion, opt ...repo.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, version}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVersion", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVersion indicates an expected call of CreateVersion.
func (mr *MockIDatasetAPIMockRecorder) CreateVersion(ctx, version any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, version}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersion", reflect.TypeOf((*MockIDatasetAPI)(nil).CreateVersion), varargs...)
}

// DelDatasetOperation mocks base method.
func (m *MockIDatasetAPI) DelDatasetOperation(ctx context.Context, datasetID int64, opType entity.DatasetOpType, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelDatasetOperation", ctx, datasetID, opType, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelDatasetOperation indicates an expected call of DelDatasetOperation.
func (mr *MockIDatasetAPIMockRecorder) DelDatasetOperation(ctx, datasetID, opType, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelDatasetOperation", reflect.TypeOf((*MockIDatasetAPI)(nil).DelDatasetOperation), ctx, datasetID, opType, id)
}

// DeleteDataset mocks base method.
func (m *MockIDatasetAPI) DeleteDataset(ctx context.Context, spaceID, id int64, opt ...repo.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, id}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataset", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockIDatasetAPIMockRecorder) DeleteDataset(ctx, spaceID, id any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, id}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockIDatasetAPI)(nil).DeleteDataset), varargs...)
}

// DeleteItems mocks base method.
func (m *MockIDatasetAPI) DeleteItems(ctx context.Context, spaceID int64, ids []int64, opt ...repo.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, ids}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteItems", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItems indicates an expected call of DeleteItems.
func (mr *MockIDatasetAPIMockRecorder) DeleteItems(ctx, spaceID, ids any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, ids}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItems", reflect.TypeOf((*MockIDatasetAPI)(nil).DeleteItems), varargs...)
}

// GetDataset mocks base method.
func (m *MockIDatasetAPI) GetDataset(ctx context.Context, spaceID, id int64, opt ...repo.Option) (*entity.Dataset, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, id}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataset", varargs...)
	ret0, _ := ret[0].(*entity.Dataset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataset indicates an expected call of GetDataset.
func (mr *MockIDatasetAPIMockRecorder) GetDataset(ctx, spaceID, id any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, id}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataset", reflect.TypeOf((*MockIDatasetAPI)(nil).GetDataset), varargs...)
}

// GetIOJob mocks base method.
func (m *MockIDatasetAPI) GetIOJob(ctx context.Context, id int64, opt ...repo.Option) (*entity.IOJob, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIOJob", varargs...)
	ret0, _ := ret[0].(*entity.IOJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIOJob indicates an expected call of GetIOJob.
func (mr *MockIDatasetAPIMockRecorder) GetIOJob(ctx, id any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIOJob", reflect.TypeOf((*MockIDatasetAPI)(nil).GetIOJob), varargs...)
}

// GetItemCount mocks base method.
func (m *MockIDatasetAPI) GetItemCount(ctx context.Context, datasetID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemCount", ctx, datasetID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemCount indicates an expected call of GetItemCount.
func (mr *MockIDatasetAPIMockRecorder) GetItemCount(ctx, datasetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemCount", reflect.TypeOf((*MockIDatasetAPI)(nil).GetItemCount), ctx, datasetID)
}

// GetItemCountOfVersion mocks base method.
func (m *MockIDatasetAPI) GetItemCountOfVersion(ctx context.Context, versionID int64) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemCountOfVersion", ctx, versionID)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemCountOfVersion indicates an expected call of GetItemCountOfVersion.
func (mr *MockIDatasetAPIMockRecorder) GetItemCountOfVersion(ctx, versionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemCountOfVersion", reflect.TypeOf((*MockIDatasetAPI)(nil).GetItemCountOfVersion), ctx, versionID)
}

// GetSchema mocks base method.
func (m *MockIDatasetAPI) GetSchema(ctx context.Context, spaceID, id int64, opt ...repo.Option) (*entity.DatasetSchema, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, id}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchema", varargs...)
	ret0, _ := ret[0].(*entity.DatasetSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockIDatasetAPIMockRecorder) GetSchema(ctx, spaceID, id any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, id}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockIDatasetAPI)(nil).GetSchema), varargs...)
}

// GetVersion mocks base method.
func (m *MockIDatasetAPI) GetVersion(ctx context.Context, spaceID, versionID int64, opt ...repo.Option) (*entity.DatasetVersion, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, versionID}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*entity.DatasetVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockIDatasetAPIMockRecorder) GetVersion(ctx, spaceID, versionID any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, versionID}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockIDatasetAPI)(nil).GetVersion), varargs...)
}

// IncrItemCount mocks base method.
func (m *MockIDatasetAPI) IncrItemCount(ctx context.Context, datasetID, n int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrItemCount", ctx, datasetID, n)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrItemCount indicates an expected call of IncrItemCount.
func (mr *MockIDatasetAPIMockRecorder) IncrItemCount(ctx, datasetID, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrItemCount", reflect.TypeOf((*MockIDatasetAPI)(nil).IncrItemCount), ctx, datasetID, n)
}

// ListDatasets mocks base method.
func (m *MockIDatasetAPI) ListDatasets(ctx context.Context, params *repo.ListDatasetsParams, opt ...repo.Option) ([]*entity.Dataset, *pagination.PageResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasets", varargs...)
	ret0, _ := ret[0].([]*entity.Dataset)
	ret1, _ := ret[1].(*pagination.PageResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDatasets indicates an expected call of ListDatasets.
func (mr *MockIDatasetAPIMockRecorder) ListDatasets(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockIDatasetAPI)(nil).ListDatasets), varargs...)
}

// ListIOJobs mocks base method.
func (m *MockIDatasetAPI) ListIOJobs(ctx context.Context, params *repo.ListIOJobsParams, opt ...repo.Option) ([]*entity.IOJob, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIOJobs", varargs...)
	ret0, _ := ret[0].([]*entity.IOJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIOJobs indicates an expected call of ListIOJobs.
func (mr *MockIDatasetAPIMockRecorder) ListIOJobs(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIOJobs", reflect.TypeOf((*MockIDatasetAPI)(nil).ListIOJobs), varargs...)
}

// ListItemSnapshots mocks base method.
func (m *MockIDatasetAPI) ListItemSnapshots(ctx context.Context, params *repo.ListItemSnapshotsParams, opt ...repo.Option) ([]*entity.ItemSnapshot, *pagination.PageResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListItemSnapshots", varargs...)
	ret0, _ := ret[0].([]*entity.ItemSnapshot)
	ret1, _ := ret[1].(*pagination.PageResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListItemSnapshots indicates an expected call of ListItemSnapshots.
func (mr *MockIDatasetAPIMockRecorder) ListItemSnapshots(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItemSnapshots", reflect.TypeOf((*MockIDatasetAPI)(nil).ListItemSnapshots), varargs...)
}

// ListItems mocks base method.
func (m *MockIDatasetAPI) ListItems(ctx context.Context, params *repo.ListItemsParams, opt ...repo.Option) ([]*entity.Item, *pagination.PageResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListItems", varargs...)
	ret0, _ := ret[0].([]*entity.Item)
	ret1, _ := ret[1].(*pagination.PageResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListItems indicates an expected call of ListItems.
func (mr *MockIDatasetAPIMockRecorder) ListItems(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItems", reflect.TypeOf((*MockIDatasetAPI)(nil).ListItems), varargs...)
}

// ListVersions mocks base method.
func (m *MockIDatasetAPI) ListVersions(ctx context.Context, params *repo.ListDatasetVersionsParams, opt ...repo.Option) ([]*entity.DatasetVersion, *pagination.PageResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVersions", varargs...)
	ret0, _ := ret[0].([]*entity.DatasetVersion)
	ret1, _ := ret[1].(*pagination.PageResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVersions indicates an expected call of ListVersions.
func (mr *MockIDatasetAPIMockRecorder) ListVersions(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersions", reflect.TypeOf((*MockIDatasetAPI)(nil).ListVersions), varargs...)
}

// MCreateItems mocks base method.
func (m *MockIDatasetAPI) MCreateItems(ctx context.Context, items []*entity.Item, opt ...repo.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, items}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MCreateItems", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MCreateItems indicates an expected call of MCreateItems.
func (mr *MockIDatasetAPIMockRecorder) MCreateItems(ctx, items any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, items}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MCreateItems", reflect.TypeOf((*MockIDatasetAPI)(nil).MCreateItems), varargs...)
}

// MGetDatasetOperations mocks base method.
func (m *MockIDatasetAPI) MGetDatasetOperations(ctx context.Context, datasetID int64, opTypes []entity.DatasetOpType) (map[entity.DatasetOpType][]*entity.DatasetOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetDatasetOperations", ctx, datasetID, opTypes)
	ret0, _ := ret[0].(map[entity.DatasetOpType][]*entity.DatasetOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetDatasetOperations indicates an expected call of MGetDatasetOperations.
func (mr *MockIDatasetAPIMockRecorder) MGetDatasetOperations(ctx, datasetID, opTypes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetDatasetOperations", reflect.TypeOf((*MockIDatasetAPI)(nil).MGetDatasetOperations), ctx, datasetID, opTypes)
}

// MGetDatasets mocks base method.
func (m *MockIDatasetAPI) MGetDatasets(ctx context.Context, spaceID int64, ids []int64, opt ...repo.Option) ([]*entity.Dataset, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, ids}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetDatasets", varargs...)
	ret0, _ := ret[0].([]*entity.Dataset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetDatasets indicates an expected call of MGetDatasets.
func (mr *MockIDatasetAPIMockRecorder) MGetDatasets(ctx, spaceID, ids any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, ids}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetDatasets", reflect.TypeOf((*MockIDatasetAPI)(nil).MGetDatasets), varargs...)
}

// MGetItemCount mocks base method.
func (m *MockIDatasetAPI) MGetItemCount(ctx context.Context, datasetID ...int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range datasetID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetItemCount", varargs...)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetItemCount indicates an expected call of MGetItemCount.
func (mr *MockIDatasetAPIMockRecorder) MGetItemCount(ctx any, datasetID ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, datasetID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetItemCount", reflect.TypeOf((*MockIDatasetAPI)(nil).MGetItemCount), varargs...)
}

// MGetItemData mocks base method.
func (m *MockIDatasetAPI) MGetItemData(ctx context.Context, items []*entity.Item, provider entity0.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetItemData", ctx, items, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// MGetItemData indicates an expected call of MGetItemData.
func (mr *MockIDatasetAPIMockRecorder) MGetItemData(ctx, items, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetItemData", reflect.TypeOf((*MockIDatasetAPI)(nil).MGetItemData), ctx, items, provider)
}

// MGetSchema mocks base method.
func (m *MockIDatasetAPI) MGetSchema(ctx context.Context, spaceID int64, ids []int64, opt ...repo.Option) ([]*entity.DatasetSchema, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, ids}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetSchema", varargs...)
	ret0, _ := ret[0].([]*entity.DatasetSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetSchema indicates an expected call of MGetSchema.
func (mr *MockIDatasetAPIMockRecorder) MGetSchema(ctx, spaceID, ids any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, ids}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetSchema", reflect.TypeOf((*MockIDatasetAPI)(nil).MGetSchema), varargs...)
}

// MGetVersions mocks base method.
func (m *MockIDatasetAPI) MGetVersions(ctx context.Context, spaceID int64, ids []int64, opt ...repo.Option) ([]*entity.DatasetVersion, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, ids}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetVersions", varargs...)
	ret0, _ := ret[0].([]*entity.DatasetVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetVersions indicates an expected call of MGetVersions.
func (mr *MockIDatasetAPIMockRecorder) MGetVersions(ctx, spaceID, ids any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, ids}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetVersions", reflect.TypeOf((*MockIDatasetAPI)(nil).MGetVersions), varargs...)
}

// MSetItemData mocks base method.
func (m *MockIDatasetAPI) MSetItemData(ctx context.Context, items []*entity.Item, provider entity0.Provider) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSetItemData", ctx, items, provider)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MSetItemData indicates an expected call of MSetItemData.
func (mr *MockIDatasetAPIMockRecorder) MSetItemData(ctx, items, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSetItemData", reflect.TypeOf((*MockIDatasetAPI)(nil).MSetItemData), ctx, items, provider)
}

// PatchDataset mocks base method.
func (m *MockIDatasetAPI) PatchDataset(ctx context.Context, patch, where *entity.Dataset, opt ...repo.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, patch, where}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDataset", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDataset indicates an expected call of PatchDataset.
func (mr *MockIDatasetAPIMockRecorder) PatchDataset(ctx, patch, where any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, patch, where}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDataset", reflect.TypeOf((*MockIDatasetAPI)(nil).PatchDataset), varargs...)
}

// PatchVersion mocks base method.
func (m *MockIDatasetAPI) PatchVersion(ctx context.Context, patch, where *entity.DatasetVersion, opt ...repo.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, patch, where}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchVersion", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchVersion indicates an expected call of PatchVersion.
func (mr *MockIDatasetAPIMockRecorder) PatchVersion(ctx, patch, where any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, patch, where}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchVersion", reflect.TypeOf((*MockIDatasetAPI)(nil).PatchVersion), varargs...)
}

// SetItemCount mocks base method.
func (m *MockIDatasetAPI) SetItemCount(ctx context.Context, datasetID, n int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItemCount", ctx, datasetID, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetItemCount indicates an expected call of SetItemCount.
func (mr *MockIDatasetAPIMockRecorder) SetItemCount(ctx, datasetID, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItemCount", reflect.TypeOf((*MockIDatasetAPI)(nil).SetItemCount), ctx, datasetID, n)
}

// SetItemCountOfVersion mocks base method.
func (m *MockIDatasetAPI) SetItemCountOfVersion(ctx context.Context, datasetID, n int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItemCountOfVersion", ctx, datasetID, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetItemCountOfVersion indicates an expected call of SetItemCountOfVersion.
func (mr *MockIDatasetAPIMockRecorder) SetItemCountOfVersion(ctx, datasetID, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItemCountOfVersion", reflect.TypeOf((*MockIDatasetAPI)(nil).SetItemCountOfVersion), ctx, datasetID, n)
}

// UpdateIOJob mocks base method.
func (m *MockIDatasetAPI) UpdateIOJob(ctx context.Context, id int64, delta *repo.DeltaDatasetIOJob, opt ...repo.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, delta}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIOJob", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIOJob indicates an expected call of UpdateIOJob.
func (mr *MockIDatasetAPIMockRecorder) UpdateIOJob(ctx, id, delta any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, delta}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIOJob", reflect.TypeOf((*MockIDatasetAPI)(nil).UpdateIOJob), varargs...)
}

// UpdateItem mocks base method.
func (m *MockIDatasetAPI) UpdateItem(ctx context.Context, item *entity.Item, opt ...repo.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, item}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItem", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockIDatasetAPIMockRecorder) UpdateItem(ctx, item any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, item}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockIDatasetAPI)(nil).UpdateItem), varargs...)
}

// UpdateSchema mocks base method.
func (m *MockIDatasetAPI) UpdateSchema(ctx context.Context, updateVersion int64, schema *entity.DatasetSchema, opt ...repo.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, updateVersion, schema}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchema indicates an expected call of UpdateSchema.
func (mr *MockIDatasetAPIMockRecorder) UpdateSchema(ctx, updateVersion, schema any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, updateVersion, schema}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchema", reflect.TypeOf((*MockIDatasetAPI)(nil).UpdateSchema), varargs...)
}
