// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/redis (interfaces: DatasetDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/dataset_dao.go -package=mocks . DatasetDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDatasetDAO is a mock of DatasetDAO interface.
type MockDatasetDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDatasetDAOMockRecorder
	isgomock struct{}
}

// MockDatasetDAOMockRecorder is the mock recorder for MockDatasetDAO.
type MockDatasetDAOMockRecorder struct {
	mock *MockDatasetDAO
}

// NewMockDatasetDAO creates a new mock instance.
func NewMockDatasetDAO(ctrl *gomock.Controller) *MockDatasetDAO {
	mock := &MockDatasetDAO{ctrl: ctrl}
	mock.recorder = &MockDatasetDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatasetDAO) EXPECT() *MockDatasetDAOMockRecorder {
	return m.recorder
}

// GetItemCount mocks base method.
func (m *MockDatasetDAO) GetItemCount(ctx context.Context, datasetID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemCount", ctx, datasetID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemCount indicates an expected call of GetItemCount.
func (mr *MockDatasetDAOMockRecorder) GetItemCount(ctx, datasetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemCount", reflect.TypeOf((*MockDatasetDAO)(nil).GetItemCount), ctx, datasetID)
}

// IncrItemCount mocks base method.
func (m *MockDatasetDAO) IncrItemCount(ctx context.Context, datasetID, n int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrItemCount", ctx, datasetID, n)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrItemCount indicates an expected call of IncrItemCount.
func (mr *MockDatasetDAOMockRecorder) IncrItemCount(ctx, datasetID, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrItemCount", reflect.TypeOf((*MockDatasetDAO)(nil).IncrItemCount), ctx, datasetID, n)
}

// MGetItemCount mocks base method.
func (m *MockDatasetDAO) MGetItemCount(ctx context.Context, datasetIDs ...int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range datasetIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetItemCount", varargs...)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetItemCount indicates an expected call of MGetItemCount.
func (mr *MockDatasetDAOMockRecorder) MGetItemCount(ctx any, datasetIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, datasetIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetItemCount", reflect.TypeOf((*MockDatasetDAO)(nil).MGetItemCount), varargs...)
}

// SetItemCount mocks base method.
func (m *MockDatasetDAO) SetItemCount(ctx context.Context, datasetID, n int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItemCount", ctx, datasetID, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetItemCount indicates an expected call of SetItemCount.
func (mr *MockDatasetDAOMockRecorder) SetItemCount(ctx, datasetID, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItemCount", reflect.TypeOf((*MockDatasetDAO)(nil).SetItemCount), ctx, datasetID, n)
}
