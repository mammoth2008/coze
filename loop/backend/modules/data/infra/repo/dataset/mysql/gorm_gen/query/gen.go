// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Dataset:        newDataset(db, opts...),
		DatasetIOJob:   newDatasetIOJob(db, opts...),
		DatasetItem:    newDatasetItem(db, opts...),
		DatasetSchema:  newDatasetSchema(db, opts...),
		DatasetVersion: newDatasetVersion(db, opts...),
		ItemSnapshot:   newItemSnapshot(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Dataset        dataset
	DatasetIOJob   datasetIOJob
	DatasetItem    datasetItem
	DatasetSchema  datasetSchema
	DatasetVersion datasetVersion
	ItemSnapshot   itemSnapshot
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Dataset:        q.Dataset.clone(db),
		DatasetIOJob:   q.DatasetIOJob.clone(db),
		DatasetItem:    q.DatasetItem.clone(db),
		DatasetSchema:  q.DatasetSchema.clone(db),
		DatasetVersion: q.DatasetVersion.clone(db),
		ItemSnapshot:   q.ItemSnapshot.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Dataset:        q.Dataset.replaceDB(db),
		DatasetIOJob:   q.DatasetIOJob.replaceDB(db),
		DatasetItem:    q.DatasetItem.replaceDB(db),
		DatasetSchema:  q.DatasetSchema.replaceDB(db),
		DatasetVersion: q.DatasetVersion.replaceDB(db),
		ItemSnapshot:   q.ItemSnapshot.replaceDB(db),
	}
}

type queryCtx struct {
	Dataset        *datasetDo
	DatasetIOJob   *datasetIOJobDo
	DatasetItem    *datasetItemDo
	DatasetSchema  *datasetSchemaDo
	DatasetVersion *datasetVersionDo
	ItemSnapshot   *itemSnapshotDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Dataset:        q.Dataset.WithContext(ctx),
		DatasetIOJob:   q.DatasetIOJob.WithContext(ctx),
		DatasetItem:    q.DatasetItem.WithContext(ctx),
		DatasetSchema:  q.DatasetSchema.WithContext(ctx),
		DatasetVersion: q.DatasetVersion.WithContext(ctx),
		ItemSnapshot:   q.ItemSnapshot.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
