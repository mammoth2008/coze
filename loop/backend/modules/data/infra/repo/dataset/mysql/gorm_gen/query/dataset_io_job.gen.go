// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql/gorm_gen/model"
)

func newDatasetIOJob(db *gorm.DB, opts ...gen.DOOption) datasetIOJob {
	_datasetIOJob := datasetIOJob{}

	_datasetIOJob.datasetIOJobDo.UseDB(db, opts...)
	_datasetIOJob.datasetIOJobDo.UseModel(&model.DatasetIOJob{})

	tableName := _datasetIOJob.datasetIOJobDo.TableName()
	_datasetIOJob.ALL = field.NewAsterisk(tableName)
	_datasetIOJob.ID = field.NewInt64(tableName, "id")
	_datasetIOJob.AppID = field.NewInt32(tableName, "app_id")
	_datasetIOJob.SpaceID = field.NewInt64(tableName, "space_id")
	_datasetIOJob.DatasetID = field.NewInt64(tableName, "dataset_id")
	_datasetIOJob.JobType = field.NewString(tableName, "job_type")
	_datasetIOJob.SourceFile = field.NewField(tableName, "source_file")
	_datasetIOJob.SourceDataset = field.NewField(tableName, "source_dataset")
	_datasetIOJob.TargetFile = field.NewField(tableName, "target_file")
	_datasetIOJob.TargetDataset = field.NewField(tableName, "target_dataset")
	_datasetIOJob.FieldMappings = field.NewField(tableName, "field_mappings")
	_datasetIOJob.Option = field.NewField(tableName, "option")
	_datasetIOJob.Status = field.NewString(tableName, "status")
	_datasetIOJob.ProgressTotal = field.NewInt64(tableName, "progress_total")
	_datasetIOJob.ProgressProcessed = field.NewInt64(tableName, "progress_processed")
	_datasetIOJob.ProgressAdded = field.NewInt64(tableName, "progress_added")
	_datasetIOJob.SubProgresses = field.NewField(tableName, "sub_progresses")
	_datasetIOJob.Errors = field.NewField(tableName, "errors")
	_datasetIOJob.CreatedBy = field.NewString(tableName, "created_by")
	_datasetIOJob.CreatedAt = field.NewTime(tableName, "created_at")
	_datasetIOJob.UpdatedBy = field.NewString(tableName, "updated_by")
	_datasetIOJob.UpdatedAt = field.NewTime(tableName, "updated_at")
	_datasetIOJob.StartedAt = field.NewTime(tableName, "started_at")
	_datasetIOJob.EndedAt = field.NewTime(tableName, "ended_at")

	_datasetIOJob.fillFieldMap()

	return _datasetIOJob
}

// datasetIOJob 数据集导入导出任务
type datasetIOJob struct {
	datasetIOJobDo datasetIOJobDo

	ALL               field.Asterisk
	ID                field.Int64  // ID
	AppID             field.Int32  // 应用 ID
	SpaceID           field.Int64  // 空间 ID
	DatasetID         field.Int64  // 数据集 ID
	JobType           field.String // 任务类型
	SourceFile        field.Field  // 源文件信息
	SourceDataset     field.Field  // 源数据集信息
	TargetFile        field.Field  // 目标文件信息
	TargetDataset     field.Field  // 目标数据集信息
	FieldMappings     field.Field  // 字段映射
	Option            field.Field  // 任务选项
	Status            field.String // 状态
	ProgressTotal     field.Int64  // 总数
	ProgressProcessed field.Int64  // 已处理的数量
	ProgressAdded     field.Int64  // 已写入的数量
	SubProgresses     field.Field  // 进度信息
	Errors            field.Field  // 错误信息
	CreatedBy         field.String // 创建人
	CreatedAt         field.Time   // 创建时间
	UpdatedBy         field.String // 修改人
	UpdatedAt         field.Time   // 修改时间
	StartedAt         field.Time   // 开始时间
	EndedAt           field.Time   // 结束时间

	fieldMap map[string]field.Expr
}

func (d datasetIOJob) Table(newTableName string) *datasetIOJob {
	d.datasetIOJobDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d datasetIOJob) As(alias string) *datasetIOJob {
	d.datasetIOJobDo.DO = *(d.datasetIOJobDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *datasetIOJob) updateTableName(table string) *datasetIOJob {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.AppID = field.NewInt32(table, "app_id")
	d.SpaceID = field.NewInt64(table, "space_id")
	d.DatasetID = field.NewInt64(table, "dataset_id")
	d.JobType = field.NewString(table, "job_type")
	d.SourceFile = field.NewField(table, "source_file")
	d.SourceDataset = field.NewField(table, "source_dataset")
	d.TargetFile = field.NewField(table, "target_file")
	d.TargetDataset = field.NewField(table, "target_dataset")
	d.FieldMappings = field.NewField(table, "field_mappings")
	d.Option = field.NewField(table, "option")
	d.Status = field.NewString(table, "status")
	d.ProgressTotal = field.NewInt64(table, "progress_total")
	d.ProgressProcessed = field.NewInt64(table, "progress_processed")
	d.ProgressAdded = field.NewInt64(table, "progress_added")
	d.SubProgresses = field.NewField(table, "sub_progresses")
	d.Errors = field.NewField(table, "errors")
	d.CreatedBy = field.NewString(table, "created_by")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedBy = field.NewString(table, "updated_by")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.StartedAt = field.NewTime(table, "started_at")
	d.EndedAt = field.NewTime(table, "ended_at")

	d.fillFieldMap()

	return d
}

func (d *datasetIOJob) WithContext(ctx context.Context) *datasetIOJobDo {
	return d.datasetIOJobDo.WithContext(ctx)
}

func (d datasetIOJob) TableName() string { return d.datasetIOJobDo.TableName() }

func (d datasetIOJob) Alias() string { return d.datasetIOJobDo.Alias() }

func (d datasetIOJob) Columns(cols ...field.Expr) gen.Columns {
	return d.datasetIOJobDo.Columns(cols...)
}

func (d *datasetIOJob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *datasetIOJob) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 23)
	d.fieldMap["id"] = d.ID
	d.fieldMap["app_id"] = d.AppID
	d.fieldMap["space_id"] = d.SpaceID
	d.fieldMap["dataset_id"] = d.DatasetID
	d.fieldMap["job_type"] = d.JobType
	d.fieldMap["source_file"] = d.SourceFile
	d.fieldMap["source_dataset"] = d.SourceDataset
	d.fieldMap["target_file"] = d.TargetFile
	d.fieldMap["target_dataset"] = d.TargetDataset
	d.fieldMap["field_mappings"] = d.FieldMappings
	d.fieldMap["option"] = d.Option
	d.fieldMap["status"] = d.Status
	d.fieldMap["progress_total"] = d.ProgressTotal
	d.fieldMap["progress_processed"] = d.ProgressProcessed
	d.fieldMap["progress_added"] = d.ProgressAdded
	d.fieldMap["sub_progresses"] = d.SubProgresses
	d.fieldMap["errors"] = d.Errors
	d.fieldMap["created_by"] = d.CreatedBy
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_by"] = d.UpdatedBy
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["started_at"] = d.StartedAt
	d.fieldMap["ended_at"] = d.EndedAt
}

func (d datasetIOJob) clone(db *gorm.DB) datasetIOJob {
	d.datasetIOJobDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d datasetIOJob) replaceDB(db *gorm.DB) datasetIOJob {
	d.datasetIOJobDo.ReplaceDB(db)
	return d
}

type datasetIOJobDo struct{ gen.DO }

func (d datasetIOJobDo) Debug() *datasetIOJobDo {
	return d.withDO(d.DO.Debug())
}

func (d datasetIOJobDo) WithContext(ctx context.Context) *datasetIOJobDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d datasetIOJobDo) ReadDB() *datasetIOJobDo {
	return d.Clauses(dbresolver.Read)
}

func (d datasetIOJobDo) WriteDB() *datasetIOJobDo {
	return d.Clauses(dbresolver.Write)
}

func (d datasetIOJobDo) Session(config *gorm.Session) *datasetIOJobDo {
	return d.withDO(d.DO.Session(config))
}

func (d datasetIOJobDo) Clauses(conds ...clause.Expression) *datasetIOJobDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d datasetIOJobDo) Returning(value interface{}, columns ...string) *datasetIOJobDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d datasetIOJobDo) Not(conds ...gen.Condition) *datasetIOJobDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d datasetIOJobDo) Or(conds ...gen.Condition) *datasetIOJobDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d datasetIOJobDo) Select(conds ...field.Expr) *datasetIOJobDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d datasetIOJobDo) Where(conds ...gen.Condition) *datasetIOJobDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d datasetIOJobDo) Order(conds ...field.Expr) *datasetIOJobDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d datasetIOJobDo) Distinct(cols ...field.Expr) *datasetIOJobDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d datasetIOJobDo) Omit(cols ...field.Expr) *datasetIOJobDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d datasetIOJobDo) Join(table schema.Tabler, on ...field.Expr) *datasetIOJobDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d datasetIOJobDo) LeftJoin(table schema.Tabler, on ...field.Expr) *datasetIOJobDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d datasetIOJobDo) RightJoin(table schema.Tabler, on ...field.Expr) *datasetIOJobDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d datasetIOJobDo) Group(cols ...field.Expr) *datasetIOJobDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d datasetIOJobDo) Having(conds ...gen.Condition) *datasetIOJobDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d datasetIOJobDo) Limit(limit int) *datasetIOJobDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d datasetIOJobDo) Offset(offset int) *datasetIOJobDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d datasetIOJobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *datasetIOJobDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d datasetIOJobDo) Unscoped() *datasetIOJobDo {
	return d.withDO(d.DO.Unscoped())
}

func (d datasetIOJobDo) Create(values ...*model.DatasetIOJob) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d datasetIOJobDo) CreateInBatches(values []*model.DatasetIOJob, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d datasetIOJobDo) Save(values ...*model.DatasetIOJob) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d datasetIOJobDo) First() (*model.DatasetIOJob, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetIOJob), nil
	}
}

func (d datasetIOJobDo) Take() (*model.DatasetIOJob, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetIOJob), nil
	}
}

func (d datasetIOJobDo) Last() (*model.DatasetIOJob, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetIOJob), nil
	}
}

func (d datasetIOJobDo) Find() ([]*model.DatasetIOJob, error) {
	result, err := d.DO.Find()
	return result.([]*model.DatasetIOJob), err
}

func (d datasetIOJobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DatasetIOJob, err error) {
	buf := make([]*model.DatasetIOJob, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d datasetIOJobDo) FindInBatches(result *[]*model.DatasetIOJob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d datasetIOJobDo) Attrs(attrs ...field.AssignExpr) *datasetIOJobDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d datasetIOJobDo) Assign(attrs ...field.AssignExpr) *datasetIOJobDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d datasetIOJobDo) Joins(fields ...field.RelationField) *datasetIOJobDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d datasetIOJobDo) Preload(fields ...field.RelationField) *datasetIOJobDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d datasetIOJobDo) FirstOrInit() (*model.DatasetIOJob, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetIOJob), nil
	}
}

func (d datasetIOJobDo) FirstOrCreate() (*model.DatasetIOJob, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetIOJob), nil
	}
}

func (d datasetIOJobDo) FindByPage(offset int, limit int) (result []*model.DatasetIOJob, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d datasetIOJobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d datasetIOJobDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d datasetIOJobDo) Delete(models ...*model.DatasetIOJob) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *datasetIOJobDo) withDO(do gen.Dao) *datasetIOJobDo {
	d.DO = *do.(*gen.DO)
	return d
}
