// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql (interfaces: ISchemaDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/schema_dao.go -package=mocks . ISchemaDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockISchemaDAO is a mock of ISchemaDAO interface.
type MockISchemaDAO struct {
	ctrl     *gomock.Controller
	recorder *MockISchemaDAOMockRecorder
	isgomock struct{}
}

// MockISchemaDAOMockRecorder is the mock recorder for MockISchemaDAO.
type MockISchemaDAOMockRecorder struct {
	mock *MockISchemaDAO
}

// NewMockISchemaDAO creates a new mock instance.
func NewMockISchemaDAO(ctrl *gomock.Controller) *MockISchemaDAO {
	mock := &MockISchemaDAO{ctrl: ctrl}
	mock.recorder = &MockISchemaDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISchemaDAO) EXPECT() *MockISchemaDAOMockRecorder {
	return m.recorder
}

// CreateSchema mocks base method.
func (m *MockISchemaDAO) CreateSchema(ctx context.Context, schema *model.DatasetSchema, opt ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, schema}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockISchemaDAOMockRecorder) CreateSchema(ctx, schema any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, schema}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockISchemaDAO)(nil).CreateSchema), varargs...)
}

// GetSchema mocks base method.
func (m *MockISchemaDAO) GetSchema(ctx context.Context, spaceID, id int64, opt ...db.Option) (*model.DatasetSchema, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, id}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchema", varargs...)
	ret0, _ := ret[0].(*model.DatasetSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockISchemaDAOMockRecorder) GetSchema(ctx, spaceID, id any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, id}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockISchemaDAO)(nil).GetSchema), varargs...)
}

// MGetSchema mocks base method.
func (m *MockISchemaDAO) MGetSchema(ctx context.Context, spaceID int64, ids []int64, opt ...db.Option) ([]*model.DatasetSchema, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, ids}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetSchema", varargs...)
	ret0, _ := ret[0].([]*model.DatasetSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetSchema indicates an expected call of MGetSchema.
func (mr *MockISchemaDAOMockRecorder) MGetSchema(ctx, spaceID, ids any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, ids}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetSchema", reflect.TypeOf((*MockISchemaDAO)(nil).MGetSchema), varargs...)
}

// UpdateSchema mocks base method.
func (m *MockISchemaDAO) UpdateSchema(ctx context.Context, updateVersion int64, schema *model.DatasetSchema, opt ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, updateVersion, schema}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSchema", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchema indicates an expected call of UpdateSchema.
func (mr *MockISchemaDAOMockRecorder) UpdateSchema(ctx, updateVersion, schema any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, updateVersion, schema}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchema", reflect.TypeOf((*MockISchemaDAO)(nil).UpdateSchema), varargs...)
}
