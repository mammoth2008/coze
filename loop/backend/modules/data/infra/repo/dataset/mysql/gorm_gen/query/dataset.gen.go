// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql/gorm_gen/model"
)

func newDataset(db *gorm.DB, opts ...gen.DOOption) dataset {
	_dataset := dataset{}

	_dataset.datasetDo.UseDB(db, opts...)
	_dataset.datasetDo.UseModel(&model.Dataset{})

	tableName := _dataset.datasetDo.TableName()
	_dataset.ALL = field.NewAsterisk(tableName)
	_dataset.ID = field.NewInt64(tableName, "id")
	_dataset.AppID = field.NewInt32(tableName, "app_id")
	_dataset.SpaceID = field.NewInt64(tableName, "space_id")
	_dataset.SchemaID = field.NewInt64(tableName, "schema_id")
	_dataset.Name = field.NewString(tableName, "name")
	_dataset.Description = field.NewString(tableName, "description")
	_dataset.Category = field.NewString(tableName, "category")
	_dataset.BizCategory = field.NewString(tableName, "biz_category")
	_dataset.Status = field.NewString(tableName, "status")
	_dataset.SecurityLevel = field.NewString(tableName, "security_level")
	_dataset.Visibility = field.NewString(tableName, "visibility")
	_dataset.Spec = field.NewField(tableName, "spec")
	_dataset.Features = field.NewField(tableName, "features")
	_dataset.LatestVersion = field.NewString(tableName, "latest_version")
	_dataset.NextVersionNum = field.NewInt64(tableName, "next_version_num")
	_dataset.LastOperation = field.NewString(tableName, "last_operation")
	_dataset.CreatedBy = field.NewString(tableName, "created_by")
	_dataset.CreatedAt = field.NewTime(tableName, "created_at")
	_dataset.UpdatedBy = field.NewString(tableName, "updated_by")
	_dataset.UpdatedAt = field.NewTime(tableName, "updated_at")
	_dataset.DeletedAt = field.NewField(tableName, "deleted_at")
	_dataset.ExpiredAt = field.NewTime(tableName, "expired_at")

	_dataset.fillFieldMap()

	return _dataset
}

// dataset NDB_SHARE_TABLE;数据集
type dataset struct {
	datasetDo datasetDo

	ALL            field.Asterisk
	ID             field.Int64  // ID
	AppID          field.Int32  // 应用 ID
	SpaceID        field.Int64  // 空间 ID
	SchemaID       field.Int64  // Schema ID
	Name           field.String // 数据集名称
	Description    field.String // 数据集描述
	Category       field.String // 业务场景分类
	BizCategory    field.String // 业务场景下自定义分类
	Status         field.String // 状态
	SecurityLevel  field.String // 安全等级
	Visibility     field.String // 可见性
	Spec           field.Field  // 规格配置
	Features       field.Field  // 功能开关
	LatestVersion  field.String // 最新版本号
	NextVersionNum field.Int64  // 下一个版本的数字版本号
	LastOperation  field.String // 最新操作
	CreatedBy      field.String // 创建人
	CreatedAt      field.Time   // 创建时间
	UpdatedBy      field.String // 修改人
	UpdatedAt      field.Time   // 修改时间
	DeletedAt      field.Field  // 删除时间
	ExpiredAt      field.Time   // 过期时间

	fieldMap map[string]field.Expr
}

func (d dataset) Table(newTableName string) *dataset {
	d.datasetDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataset) As(alias string) *dataset {
	d.datasetDo.DO = *(d.datasetDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataset) updateTableName(table string) *dataset {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.AppID = field.NewInt32(table, "app_id")
	d.SpaceID = field.NewInt64(table, "space_id")
	d.SchemaID = field.NewInt64(table, "schema_id")
	d.Name = field.NewString(table, "name")
	d.Description = field.NewString(table, "description")
	d.Category = field.NewString(table, "category")
	d.BizCategory = field.NewString(table, "biz_category")
	d.Status = field.NewString(table, "status")
	d.SecurityLevel = field.NewString(table, "security_level")
	d.Visibility = field.NewString(table, "visibility")
	d.Spec = field.NewField(table, "spec")
	d.Features = field.NewField(table, "features")
	d.LatestVersion = field.NewString(table, "latest_version")
	d.NextVersionNum = field.NewInt64(table, "next_version_num")
	d.LastOperation = field.NewString(table, "last_operation")
	d.CreatedBy = field.NewString(table, "created_by")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedBy = field.NewString(table, "updated_by")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.ExpiredAt = field.NewTime(table, "expired_at")

	d.fillFieldMap()

	return d
}

func (d *dataset) WithContext(ctx context.Context) *datasetDo { return d.datasetDo.WithContext(ctx) }

func (d dataset) TableName() string { return d.datasetDo.TableName() }

func (d dataset) Alias() string { return d.datasetDo.Alias() }

func (d dataset) Columns(cols ...field.Expr) gen.Columns { return d.datasetDo.Columns(cols...) }

func (d *dataset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataset) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 22)
	d.fieldMap["id"] = d.ID
	d.fieldMap["app_id"] = d.AppID
	d.fieldMap["space_id"] = d.SpaceID
	d.fieldMap["schema_id"] = d.SchemaID
	d.fieldMap["name"] = d.Name
	d.fieldMap["description"] = d.Description
	d.fieldMap["category"] = d.Category
	d.fieldMap["biz_category"] = d.BizCategory
	d.fieldMap["status"] = d.Status
	d.fieldMap["security_level"] = d.SecurityLevel
	d.fieldMap["visibility"] = d.Visibility
	d.fieldMap["spec"] = d.Spec
	d.fieldMap["features"] = d.Features
	d.fieldMap["latest_version"] = d.LatestVersion
	d.fieldMap["next_version_num"] = d.NextVersionNum
	d.fieldMap["last_operation"] = d.LastOperation
	d.fieldMap["created_by"] = d.CreatedBy
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_by"] = d.UpdatedBy
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["expired_at"] = d.ExpiredAt
}

func (d dataset) clone(db *gorm.DB) dataset {
	d.datasetDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataset) replaceDB(db *gorm.DB) dataset {
	d.datasetDo.ReplaceDB(db)
	return d
}

type datasetDo struct{ gen.DO }

func (d datasetDo) Debug() *datasetDo {
	return d.withDO(d.DO.Debug())
}

func (d datasetDo) WithContext(ctx context.Context) *datasetDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d datasetDo) ReadDB() *datasetDo {
	return d.Clauses(dbresolver.Read)
}

func (d datasetDo) WriteDB() *datasetDo {
	return d.Clauses(dbresolver.Write)
}

func (d datasetDo) Session(config *gorm.Session) *datasetDo {
	return d.withDO(d.DO.Session(config))
}

func (d datasetDo) Clauses(conds ...clause.Expression) *datasetDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d datasetDo) Returning(value interface{}, columns ...string) *datasetDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d datasetDo) Not(conds ...gen.Condition) *datasetDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d datasetDo) Or(conds ...gen.Condition) *datasetDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d datasetDo) Select(conds ...field.Expr) *datasetDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d datasetDo) Where(conds ...gen.Condition) *datasetDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d datasetDo) Order(conds ...field.Expr) *datasetDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d datasetDo) Distinct(cols ...field.Expr) *datasetDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d datasetDo) Omit(cols ...field.Expr) *datasetDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d datasetDo) Join(table schema.Tabler, on ...field.Expr) *datasetDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d datasetDo) LeftJoin(table schema.Tabler, on ...field.Expr) *datasetDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d datasetDo) RightJoin(table schema.Tabler, on ...field.Expr) *datasetDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d datasetDo) Group(cols ...field.Expr) *datasetDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d datasetDo) Having(conds ...gen.Condition) *datasetDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d datasetDo) Limit(limit int) *datasetDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d datasetDo) Offset(offset int) *datasetDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d datasetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *datasetDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d datasetDo) Unscoped() *datasetDo {
	return d.withDO(d.DO.Unscoped())
}

func (d datasetDo) Create(values ...*model.Dataset) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d datasetDo) CreateInBatches(values []*model.Dataset, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d datasetDo) Save(values ...*model.Dataset) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d datasetDo) First() (*model.Dataset, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dataset), nil
	}
}

func (d datasetDo) Take() (*model.Dataset, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dataset), nil
	}
}

func (d datasetDo) Last() (*model.Dataset, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dataset), nil
	}
}

func (d datasetDo) Find() ([]*model.Dataset, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dataset), err
}

func (d datasetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dataset, err error) {
	buf := make([]*model.Dataset, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d datasetDo) FindInBatches(result *[]*model.Dataset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d datasetDo) Attrs(attrs ...field.AssignExpr) *datasetDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d datasetDo) Assign(attrs ...field.AssignExpr) *datasetDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d datasetDo) Joins(fields ...field.RelationField) *datasetDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d datasetDo) Preload(fields ...field.RelationField) *datasetDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d datasetDo) FirstOrInit() (*model.Dataset, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dataset), nil
	}
}

func (d datasetDo) FirstOrCreate() (*model.Dataset, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dataset), nil
	}
}

func (d datasetDo) FindByPage(offset int, limit int) (result []*model.Dataset, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d datasetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d datasetDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d datasetDo) Delete(models ...*model.Dataset) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *datasetDo) withDO(do gen.Dao) *datasetDo {
	d.DO = *do.(*gen.DO)
	return d
}
