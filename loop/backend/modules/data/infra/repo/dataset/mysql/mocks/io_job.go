// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql (interfaces: IIOJobDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/io_job.go -package=mocks . IIOJobDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	mysql "github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql"
	model "github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIIOJobDAO is a mock of IIOJobDAO interface.
type MockIIOJobDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIIOJobDAOMockRecorder
	isgomock struct{}
}

// MockIIOJobDAOMockRecorder is the mock recorder for MockIIOJobDAO.
type MockIIOJobDAOMockRecorder struct {
	mock *MockIIOJobDAO
}

// NewMockIIOJobDAO creates a new mock instance.
func NewMockIIOJobDAO(ctrl *gomock.Controller) *MockIIOJobDAO {
	mock := &MockIIOJobDAO{ctrl: ctrl}
	mock.recorder = &MockIIOJobDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIOJobDAO) EXPECT() *MockIIOJobDAOMockRecorder {
	return m.recorder
}

// CreateIOJob mocks base method.
func (m *MockIIOJobDAO) CreateIOJob(ctx context.Context, job *model.DatasetIOJob, opt ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, job}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIOJob", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIOJob indicates an expected call of CreateIOJob.
func (mr *MockIIOJobDAOMockRecorder) CreateIOJob(ctx, job any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, job}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIOJob", reflect.TypeOf((*MockIIOJobDAO)(nil).CreateIOJob), varargs...)
}

// GetIOJob mocks base method.
func (m *MockIIOJobDAO) GetIOJob(ctx context.Context, id int64, opt ...db.Option) (*model.DatasetIOJob, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIOJob", varargs...)
	ret0, _ := ret[0].(*model.DatasetIOJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIOJob indicates an expected call of GetIOJob.
func (mr *MockIIOJobDAOMockRecorder) GetIOJob(ctx, id any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIOJob", reflect.TypeOf((*MockIIOJobDAO)(nil).GetIOJob), varargs...)
}

// ListIOJobs mocks base method.
func (m *MockIIOJobDAO) ListIOJobs(ctx context.Context, params *mysql.ListIOJobsParams, opt ...db.Option) ([]*model.DatasetIOJob, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIOJobs", varargs...)
	ret0, _ := ret[0].([]*model.DatasetIOJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIOJobs indicates an expected call of ListIOJobs.
func (mr *MockIIOJobDAOMockRecorder) ListIOJobs(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIOJobs", reflect.TypeOf((*MockIIOJobDAO)(nil).ListIOJobs), varargs...)
}

// UpdateIOJob mocks base method.
func (m *MockIIOJobDAO) UpdateIOJob(ctx context.Context, id int64, delta *mysql.DeltaDatasetIOJob, opt ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, delta}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIOJob", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIOJob indicates an expected call of UpdateIOJob.
func (mr *MockIIOJobDAOMockRecorder) UpdateIOJob(ctx, id, delta any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, delta}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIOJob", reflect.TypeOf((*MockIIOJobDAO)(nil).UpdateIOJob), varargs...)
}
