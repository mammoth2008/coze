// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql/gorm_gen/model"
)

func newItemSnapshot(db *gorm.DB, opts ...gen.DOOption) itemSnapshot {
	_itemSnapshot := itemSnapshot{}

	_itemSnapshot.itemSnapshotDo.UseDB(db, opts...)
	_itemSnapshot.itemSnapshotDo.UseModel(&model.ItemSnapshot{})

	tableName := _itemSnapshot.itemSnapshotDo.TableName()
	_itemSnapshot.ALL = field.NewAsterisk(tableName)
	_itemSnapshot.ID = field.NewInt64(tableName, "id")
	_itemSnapshot.AppID = field.NewInt32(tableName, "app_id")
	_itemSnapshot.SpaceID = field.NewInt64(tableName, "space_id")
	_itemSnapshot.DatasetID = field.NewInt64(tableName, "dataset_id")
	_itemSnapshot.SchemaID = field.NewInt64(tableName, "schema_id")
	_itemSnapshot.VersionID = field.NewInt64(tableName, "version_id")
	_itemSnapshot.ItemPrimaryID = field.NewInt64(tableName, "item_primary_id")
	_itemSnapshot.ItemID = field.NewInt64(tableName, "item_id")
	_itemSnapshot.ItemKey = field.NewString(tableName, "item_key")
	_itemSnapshot.Data = field.NewField(tableName, "data")
	_itemSnapshot.RepeatedData = field.NewField(tableName, "repeated_data")
	_itemSnapshot.DataProperties = field.NewField(tableName, "data_properties")
	_itemSnapshot.AddVn = field.NewInt64(tableName, "add_vn")
	_itemSnapshot.DelVn = field.NewInt64(tableName, "del_vn")
	_itemSnapshot.CreatedAt = field.NewTime(tableName, "created_at")
	_itemSnapshot.ItemCreatedBy = field.NewString(tableName, "item_created_by")
	_itemSnapshot.ItemCreatedAt = field.NewTime(tableName, "item_created_at")
	_itemSnapshot.ItemUpdatedBy = field.NewString(tableName, "item_updated_by")
	_itemSnapshot.ItemUpdatedAt = field.NewTime(tableName, "item_updated_at")

	_itemSnapshot.fillFieldMap()

	return _itemSnapshot
}

// itemSnapshot NDB_SHARE_TABLE;数据集条目快照
type itemSnapshot struct {
	itemSnapshotDo itemSnapshotDo

	ALL            field.Asterisk
	ID             field.Int64  // ID
	AppID          field.Int32  // 应用 ID
	SpaceID        field.Int64  // 空间 ID
	DatasetID      field.Int64  // 数据集 ID
	SchemaID       field.Int64  // Schema ID
	VersionID      field.Int64  // Version ID
	ItemPrimaryID  field.Int64  // 条目主键 ID
	ItemID         field.Int64  // 条目 ID
	ItemKey        field.String // 条目幂等 key
	Data           field.Field  // 数据内容
	RepeatedData   field.Field  // 多轮数据内容
	DataProperties field.Field  // 内容属性
	AddVn          field.Int64  // 添加版本号
	DelVn          field.Int64  // 删除版本号
	CreatedAt      field.Time   // snapshot 创建时间
	ItemCreatedBy  field.String // item 创建人
	ItemCreatedAt  field.Time   // item 创建时间
	ItemUpdatedBy  field.String // item 修改人
	ItemUpdatedAt  field.Time   // item 修改时间

	fieldMap map[string]field.Expr
}

func (i itemSnapshot) Table(newTableName string) *itemSnapshot {
	i.itemSnapshotDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemSnapshot) As(alias string) *itemSnapshot {
	i.itemSnapshotDo.DO = *(i.itemSnapshotDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemSnapshot) updateTableName(table string) *itemSnapshot {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.AppID = field.NewInt32(table, "app_id")
	i.SpaceID = field.NewInt64(table, "space_id")
	i.DatasetID = field.NewInt64(table, "dataset_id")
	i.SchemaID = field.NewInt64(table, "schema_id")
	i.VersionID = field.NewInt64(table, "version_id")
	i.ItemPrimaryID = field.NewInt64(table, "item_primary_id")
	i.ItemID = field.NewInt64(table, "item_id")
	i.ItemKey = field.NewString(table, "item_key")
	i.Data = field.NewField(table, "data")
	i.RepeatedData = field.NewField(table, "repeated_data")
	i.DataProperties = field.NewField(table, "data_properties")
	i.AddVn = field.NewInt64(table, "add_vn")
	i.DelVn = field.NewInt64(table, "del_vn")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.ItemCreatedBy = field.NewString(table, "item_created_by")
	i.ItemCreatedAt = field.NewTime(table, "item_created_at")
	i.ItemUpdatedBy = field.NewString(table, "item_updated_by")
	i.ItemUpdatedAt = field.NewTime(table, "item_updated_at")

	i.fillFieldMap()

	return i
}

func (i *itemSnapshot) WithContext(ctx context.Context) *itemSnapshotDo {
	return i.itemSnapshotDo.WithContext(ctx)
}

func (i itemSnapshot) TableName() string { return i.itemSnapshotDo.TableName() }

func (i itemSnapshot) Alias() string { return i.itemSnapshotDo.Alias() }

func (i itemSnapshot) Columns(cols ...field.Expr) gen.Columns {
	return i.itemSnapshotDo.Columns(cols...)
}

func (i *itemSnapshot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemSnapshot) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 19)
	i.fieldMap["id"] = i.ID
	i.fieldMap["app_id"] = i.AppID
	i.fieldMap["space_id"] = i.SpaceID
	i.fieldMap["dataset_id"] = i.DatasetID
	i.fieldMap["schema_id"] = i.SchemaID
	i.fieldMap["version_id"] = i.VersionID
	i.fieldMap["item_primary_id"] = i.ItemPrimaryID
	i.fieldMap["item_id"] = i.ItemID
	i.fieldMap["item_key"] = i.ItemKey
	i.fieldMap["data"] = i.Data
	i.fieldMap["repeated_data"] = i.RepeatedData
	i.fieldMap["data_properties"] = i.DataProperties
	i.fieldMap["add_vn"] = i.AddVn
	i.fieldMap["del_vn"] = i.DelVn
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["item_created_by"] = i.ItemCreatedBy
	i.fieldMap["item_created_at"] = i.ItemCreatedAt
	i.fieldMap["item_updated_by"] = i.ItemUpdatedBy
	i.fieldMap["item_updated_at"] = i.ItemUpdatedAt
}

func (i itemSnapshot) clone(db *gorm.DB) itemSnapshot {
	i.itemSnapshotDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemSnapshot) replaceDB(db *gorm.DB) itemSnapshot {
	i.itemSnapshotDo.ReplaceDB(db)
	return i
}

type itemSnapshotDo struct{ gen.DO }

func (i itemSnapshotDo) Debug() *itemSnapshotDo {
	return i.withDO(i.DO.Debug())
}

func (i itemSnapshotDo) WithContext(ctx context.Context) *itemSnapshotDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemSnapshotDo) ReadDB() *itemSnapshotDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemSnapshotDo) WriteDB() *itemSnapshotDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemSnapshotDo) Session(config *gorm.Session) *itemSnapshotDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemSnapshotDo) Clauses(conds ...clause.Expression) *itemSnapshotDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemSnapshotDo) Returning(value interface{}, columns ...string) *itemSnapshotDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemSnapshotDo) Not(conds ...gen.Condition) *itemSnapshotDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemSnapshotDo) Or(conds ...gen.Condition) *itemSnapshotDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemSnapshotDo) Select(conds ...field.Expr) *itemSnapshotDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemSnapshotDo) Where(conds ...gen.Condition) *itemSnapshotDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemSnapshotDo) Order(conds ...field.Expr) *itemSnapshotDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemSnapshotDo) Distinct(cols ...field.Expr) *itemSnapshotDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemSnapshotDo) Omit(cols ...field.Expr) *itemSnapshotDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemSnapshotDo) Join(table schema.Tabler, on ...field.Expr) *itemSnapshotDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemSnapshotDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemSnapshotDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemSnapshotDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemSnapshotDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemSnapshotDo) Group(cols ...field.Expr) *itemSnapshotDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemSnapshotDo) Having(conds ...gen.Condition) *itemSnapshotDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemSnapshotDo) Limit(limit int) *itemSnapshotDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemSnapshotDo) Offset(offset int) *itemSnapshotDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemSnapshotDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemSnapshotDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemSnapshotDo) Unscoped() *itemSnapshotDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemSnapshotDo) Create(values ...*model.ItemSnapshot) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemSnapshotDo) CreateInBatches(values []*model.ItemSnapshot, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemSnapshotDo) Save(values ...*model.ItemSnapshot) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemSnapshotDo) First() (*model.ItemSnapshot, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemSnapshot), nil
	}
}

func (i itemSnapshotDo) Take() (*model.ItemSnapshot, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemSnapshot), nil
	}
}

func (i itemSnapshotDo) Last() (*model.ItemSnapshot, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemSnapshot), nil
	}
}

func (i itemSnapshotDo) Find() ([]*model.ItemSnapshot, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemSnapshot), err
}

func (i itemSnapshotDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemSnapshot, err error) {
	buf := make([]*model.ItemSnapshot, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemSnapshotDo) FindInBatches(result *[]*model.ItemSnapshot, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemSnapshotDo) Attrs(attrs ...field.AssignExpr) *itemSnapshotDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemSnapshotDo) Assign(attrs ...field.AssignExpr) *itemSnapshotDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemSnapshotDo) Joins(fields ...field.RelationField) *itemSnapshotDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemSnapshotDo) Preload(fields ...field.RelationField) *itemSnapshotDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemSnapshotDo) FirstOrInit() (*model.ItemSnapshot, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemSnapshot), nil
	}
}

func (i itemSnapshotDo) FirstOrCreate() (*model.ItemSnapshot, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemSnapshot), nil
	}
}

func (i itemSnapshotDo) FindByPage(offset int, limit int) (result []*model.ItemSnapshot, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemSnapshotDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemSnapshotDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemSnapshotDo) Delete(models ...*model.ItemSnapshot) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemSnapshotDo) withDO(do gen.Dao) *itemSnapshotDo {
	i.DO = *do.(*gen.DO)
	return i
}
