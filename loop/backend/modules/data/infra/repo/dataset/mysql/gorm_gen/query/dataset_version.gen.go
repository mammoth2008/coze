// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql/gorm_gen/model"
)

func newDatasetVersion(db *gorm.DB, opts ...gen.DOOption) datasetVersion {
	_datasetVersion := datasetVersion{}

	_datasetVersion.datasetVersionDo.UseDB(db, opts...)
	_datasetVersion.datasetVersionDo.UseModel(&model.DatasetVersion{})

	tableName := _datasetVersion.datasetVersionDo.TableName()
	_datasetVersion.ALL = field.NewAsterisk(tableName)
	_datasetVersion.ID = field.NewInt64(tableName, "id")
	_datasetVersion.AppID = field.NewInt32(tableName, "app_id")
	_datasetVersion.SpaceID = field.NewInt64(tableName, "space_id")
	_datasetVersion.DatasetID = field.NewInt64(tableName, "dataset_id")
	_datasetVersion.SchemaID = field.NewInt64(tableName, "schema_id")
	_datasetVersion.DatasetBrief = field.NewField(tableName, "dataset_brief")
	_datasetVersion.Version = field.NewString(tableName, "version")
	_datasetVersion.VersionNum = field.NewInt64(tableName, "version_num")
	_datasetVersion.Description = field.NewString(tableName, "description")
	_datasetVersion.ItemCount = field.NewInt64(tableName, "item_count")
	_datasetVersion.SnapshotStatus = field.NewString(tableName, "snapshot_status")
	_datasetVersion.SnapshotProgress = field.NewField(tableName, "snapshot_progress")
	_datasetVersion.UpdateVersion = field.NewInt64(tableName, "update_version")
	_datasetVersion.CreatedBy = field.NewString(tableName, "created_by")
	_datasetVersion.CreatedAt = field.NewTime(tableName, "created_at")
	_datasetVersion.DisabledAt = field.NewTime(tableName, "disabled_at")

	_datasetVersion.fillFieldMap()

	return _datasetVersion
}

// datasetVersion NDB_SHARE_TABLE;数据集版本
type datasetVersion struct {
	datasetVersionDo datasetVersionDo

	ALL              field.Asterisk
	ID               field.Int64  // ID
	AppID            field.Int32  // 应用 ID
	SpaceID          field.Int64  // 空间 ID
	DatasetID        field.Int64  // 数据集 ID
	SchemaID         field.Int64  // Schema ID
	DatasetBrief     field.Field  // 数据集元信息备份
	Version          field.String // 版本号，SemVer2 三段式
	VersionNum       field.Int64  // 数字版本号，从1开始递增
	Description      field.String // 版本描述
	ItemCount        field.Int64  // 条数
	SnapshotStatus   field.String // 快照状态
	SnapshotProgress field.Field  // 快照进度详情
	UpdateVersion    field.Int64  // 更新版本号
	CreatedBy        field.String // 创建人
	CreatedAt        field.Time   // 创建时间
	DisabledAt       field.Time   // 版本禁用时间

	fieldMap map[string]field.Expr
}

func (d datasetVersion) Table(newTableName string) *datasetVersion {
	d.datasetVersionDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d datasetVersion) As(alias string) *datasetVersion {
	d.datasetVersionDo.DO = *(d.datasetVersionDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *datasetVersion) updateTableName(table string) *datasetVersion {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.AppID = field.NewInt32(table, "app_id")
	d.SpaceID = field.NewInt64(table, "space_id")
	d.DatasetID = field.NewInt64(table, "dataset_id")
	d.SchemaID = field.NewInt64(table, "schema_id")
	d.DatasetBrief = field.NewField(table, "dataset_brief")
	d.Version = field.NewString(table, "version")
	d.VersionNum = field.NewInt64(table, "version_num")
	d.Description = field.NewString(table, "description")
	d.ItemCount = field.NewInt64(table, "item_count")
	d.SnapshotStatus = field.NewString(table, "snapshot_status")
	d.SnapshotProgress = field.NewField(table, "snapshot_progress")
	d.UpdateVersion = field.NewInt64(table, "update_version")
	d.CreatedBy = field.NewString(table, "created_by")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.DisabledAt = field.NewTime(table, "disabled_at")

	d.fillFieldMap()

	return d
}

func (d *datasetVersion) WithContext(ctx context.Context) *datasetVersionDo {
	return d.datasetVersionDo.WithContext(ctx)
}

func (d datasetVersion) TableName() string { return d.datasetVersionDo.TableName() }

func (d datasetVersion) Alias() string { return d.datasetVersionDo.Alias() }

func (d datasetVersion) Columns(cols ...field.Expr) gen.Columns {
	return d.datasetVersionDo.Columns(cols...)
}

func (d *datasetVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *datasetVersion) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 16)
	d.fieldMap["id"] = d.ID
	d.fieldMap["app_id"] = d.AppID
	d.fieldMap["space_id"] = d.SpaceID
	d.fieldMap["dataset_id"] = d.DatasetID
	d.fieldMap["schema_id"] = d.SchemaID
	d.fieldMap["dataset_brief"] = d.DatasetBrief
	d.fieldMap["version"] = d.Version
	d.fieldMap["version_num"] = d.VersionNum
	d.fieldMap["description"] = d.Description
	d.fieldMap["item_count"] = d.ItemCount
	d.fieldMap["snapshot_status"] = d.SnapshotStatus
	d.fieldMap["snapshot_progress"] = d.SnapshotProgress
	d.fieldMap["update_version"] = d.UpdateVersion
	d.fieldMap["created_by"] = d.CreatedBy
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["disabled_at"] = d.DisabledAt
}

func (d datasetVersion) clone(db *gorm.DB) datasetVersion {
	d.datasetVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d datasetVersion) replaceDB(db *gorm.DB) datasetVersion {
	d.datasetVersionDo.ReplaceDB(db)
	return d
}

type datasetVersionDo struct{ gen.DO }

func (d datasetVersionDo) Debug() *datasetVersionDo {
	return d.withDO(d.DO.Debug())
}

func (d datasetVersionDo) WithContext(ctx context.Context) *datasetVersionDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d datasetVersionDo) ReadDB() *datasetVersionDo {
	return d.Clauses(dbresolver.Read)
}

func (d datasetVersionDo) WriteDB() *datasetVersionDo {
	return d.Clauses(dbresolver.Write)
}

func (d datasetVersionDo) Session(config *gorm.Session) *datasetVersionDo {
	return d.withDO(d.DO.Session(config))
}

func (d datasetVersionDo) Clauses(conds ...clause.Expression) *datasetVersionDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d datasetVersionDo) Returning(value interface{}, columns ...string) *datasetVersionDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d datasetVersionDo) Not(conds ...gen.Condition) *datasetVersionDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d datasetVersionDo) Or(conds ...gen.Condition) *datasetVersionDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d datasetVersionDo) Select(conds ...field.Expr) *datasetVersionDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d datasetVersionDo) Where(conds ...gen.Condition) *datasetVersionDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d datasetVersionDo) Order(conds ...field.Expr) *datasetVersionDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d datasetVersionDo) Distinct(cols ...field.Expr) *datasetVersionDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d datasetVersionDo) Omit(cols ...field.Expr) *datasetVersionDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d datasetVersionDo) Join(table schema.Tabler, on ...field.Expr) *datasetVersionDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d datasetVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *datasetVersionDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d datasetVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) *datasetVersionDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d datasetVersionDo) Group(cols ...field.Expr) *datasetVersionDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d datasetVersionDo) Having(conds ...gen.Condition) *datasetVersionDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d datasetVersionDo) Limit(limit int) *datasetVersionDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d datasetVersionDo) Offset(offset int) *datasetVersionDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d datasetVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *datasetVersionDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d datasetVersionDo) Unscoped() *datasetVersionDo {
	return d.withDO(d.DO.Unscoped())
}

func (d datasetVersionDo) Create(values ...*model.DatasetVersion) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d datasetVersionDo) CreateInBatches(values []*model.DatasetVersion, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d datasetVersionDo) Save(values ...*model.DatasetVersion) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d datasetVersionDo) First() (*model.DatasetVersion, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetVersion), nil
	}
}

func (d datasetVersionDo) Take() (*model.DatasetVersion, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetVersion), nil
	}
}

func (d datasetVersionDo) Last() (*model.DatasetVersion, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetVersion), nil
	}
}

func (d datasetVersionDo) Find() ([]*model.DatasetVersion, error) {
	result, err := d.DO.Find()
	return result.([]*model.DatasetVersion), err
}

func (d datasetVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DatasetVersion, err error) {
	buf := make([]*model.DatasetVersion, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d datasetVersionDo) FindInBatches(result *[]*model.DatasetVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d datasetVersionDo) Attrs(attrs ...field.AssignExpr) *datasetVersionDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d datasetVersionDo) Assign(attrs ...field.AssignExpr) *datasetVersionDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d datasetVersionDo) Joins(fields ...field.RelationField) *datasetVersionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d datasetVersionDo) Preload(fields ...field.RelationField) *datasetVersionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d datasetVersionDo) FirstOrInit() (*model.DatasetVersion, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetVersion), nil
	}
}

func (d datasetVersionDo) FirstOrCreate() (*model.DatasetVersion, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetVersion), nil
	}
}

func (d datasetVersionDo) FindByPage(offset int, limit int) (result []*model.DatasetVersion, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d datasetVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d datasetVersionDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d datasetVersionDo) Delete(models ...*model.DatasetVersion) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *datasetVersionDo) withDO(do gen.Dao) *datasetVersionDo {
	d.DO = *do.(*gen.DO)
	return d
}
