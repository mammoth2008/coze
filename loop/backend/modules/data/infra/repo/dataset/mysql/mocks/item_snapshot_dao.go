// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql (interfaces: IItemSnapshotDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/item_snapshot_dao.go -package=mocks . IItemSnapshotDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	mysql "github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql"
	model "github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql/gorm_gen/model"
	pagination "github.com/coze-dev/coze-loop/backend/modules/data/pkg/pagination"
	gomock "go.uber.org/mock/gomock"
)

// MockIItemSnapshotDAO is a mock of IItemSnapshotDAO interface.
type MockIItemSnapshotDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIItemSnapshotDAOMockRecorder
	isgomock struct{}
}

// MockIItemSnapshotDAOMockRecorder is the mock recorder for MockIItemSnapshotDAO.
type MockIItemSnapshotDAOMockRecorder struct {
	mock *MockIItemSnapshotDAO
}

// NewMockIItemSnapshotDAO creates a new mock instance.
func NewMockIItemSnapshotDAO(ctrl *gomock.Controller) *MockIItemSnapshotDAO {
	mock := &MockIItemSnapshotDAO{ctrl: ctrl}
	mock.recorder = &MockIItemSnapshotDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIItemSnapshotDAO) EXPECT() *MockIItemSnapshotDAOMockRecorder {
	return m.recorder
}

// BatchUpsertItemSnapshots mocks base method.
func (m *MockIItemSnapshotDAO) BatchUpsertItemSnapshots(ctx context.Context, snapshots []*model.ItemSnapshot, opt ...db.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, snapshots}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpsertItemSnapshots", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpsertItemSnapshots indicates an expected call of BatchUpsertItemSnapshots.
func (mr *MockIItemSnapshotDAOMockRecorder) BatchUpsertItemSnapshots(ctx, snapshots any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, snapshots}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpsertItemSnapshots", reflect.TypeOf((*MockIItemSnapshotDAO)(nil).BatchUpsertItemSnapshots), varargs...)
}

// CountItemSnapshots mocks base method.
func (m *MockIItemSnapshotDAO) CountItemSnapshots(ctx context.Context, params *mysql.ListItemSnapshotsParams, opt ...db.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountItemSnapshots", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountItemSnapshots indicates an expected call of CountItemSnapshots.
func (mr *MockIItemSnapshotDAOMockRecorder) CountItemSnapshots(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountItemSnapshots", reflect.TypeOf((*MockIItemSnapshotDAO)(nil).CountItemSnapshots), varargs...)
}

// ListItemSnapshots mocks base method.
func (m *MockIItemSnapshotDAO) ListItemSnapshots(ctx context.Context, params *mysql.ListItemSnapshotsParams, opt ...db.Option) ([]*model.ItemSnapshot, *pagination.PageResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListItemSnapshots", varargs...)
	ret0, _ := ret[0].([]*model.ItemSnapshot)
	ret1, _ := ret[1].(*pagination.PageResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListItemSnapshots indicates an expected call of ListItemSnapshots.
func (mr *MockIItemSnapshotDAOMockRecorder) ListItemSnapshots(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItemSnapshots", reflect.TypeOf((*MockIItemSnapshotDAO)(nil).ListItemSnapshots), varargs...)
}
