// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql/gorm_gen/model"
)

func newDatasetSchema(db *gorm.DB, opts ...gen.DOOption) datasetSchema {
	_datasetSchema := datasetSchema{}

	_datasetSchema.datasetSchemaDo.UseDB(db, opts...)
	_datasetSchema.datasetSchemaDo.UseModel(&model.DatasetSchema{})

	tableName := _datasetSchema.datasetSchemaDo.TableName()
	_datasetSchema.ALL = field.NewAsterisk(tableName)
	_datasetSchema.ID = field.NewInt64(tableName, "id")
	_datasetSchema.AppID = field.NewInt32(tableName, "app_id")
	_datasetSchema.SpaceID = field.NewInt64(tableName, "space_id")
	_datasetSchema.DatasetID = field.NewInt64(tableName, "dataset_id")
	_datasetSchema.Fields = field.NewField(tableName, "fields")
	_datasetSchema.Immutable = field.NewBool(tableName, "immutable")
	_datasetSchema.CreatedBy = field.NewString(tableName, "created_by")
	_datasetSchema.CreatedAt = field.NewTime(tableName, "created_at")
	_datasetSchema.UpdatedBy = field.NewString(tableName, "updated_by")
	_datasetSchema.UpdatedAt = field.NewTime(tableName, "updated_at")
	_datasetSchema.UpdateVersion = field.NewInt64(tableName, "update_version")

	_datasetSchema.fillFieldMap()

	return _datasetSchema
}

// datasetSchema NDB_SHARE_TABLE;数据集 Schema
type datasetSchema struct {
	datasetSchemaDo datasetSchemaDo

	ALL           field.Asterisk
	ID            field.Int64  // ID
	AppID         field.Int32  // 应用 ID
	SpaceID       field.Int64  // 空间 ID
	DatasetID     field.Int64  // 数据集 ID
	Fields        field.Field  // 字段格式
	Immutable     field.Bool   // 是否不允许编辑
	CreatedBy     field.String // 创建人
	CreatedAt     field.Time   // 创建时间
	UpdatedBy     field.String // 修改人
	UpdatedAt     field.Time   // 修改时间
	UpdateVersion field.Int64  // 更新版本号

	fieldMap map[string]field.Expr
}

func (d datasetSchema) Table(newTableName string) *datasetSchema {
	d.datasetSchemaDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d datasetSchema) As(alias string) *datasetSchema {
	d.datasetSchemaDo.DO = *(d.datasetSchemaDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *datasetSchema) updateTableName(table string) *datasetSchema {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.AppID = field.NewInt32(table, "app_id")
	d.SpaceID = field.NewInt64(table, "space_id")
	d.DatasetID = field.NewInt64(table, "dataset_id")
	d.Fields = field.NewField(table, "fields")
	d.Immutable = field.NewBool(table, "immutable")
	d.CreatedBy = field.NewString(table, "created_by")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedBy = field.NewString(table, "updated_by")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.UpdateVersion = field.NewInt64(table, "update_version")

	d.fillFieldMap()

	return d
}

func (d *datasetSchema) WithContext(ctx context.Context) *datasetSchemaDo {
	return d.datasetSchemaDo.WithContext(ctx)
}

func (d datasetSchema) TableName() string { return d.datasetSchemaDo.TableName() }

func (d datasetSchema) Alias() string { return d.datasetSchemaDo.Alias() }

func (d datasetSchema) Columns(cols ...field.Expr) gen.Columns {
	return d.datasetSchemaDo.Columns(cols...)
}

func (d *datasetSchema) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *datasetSchema) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["app_id"] = d.AppID
	d.fieldMap["space_id"] = d.SpaceID
	d.fieldMap["dataset_id"] = d.DatasetID
	d.fieldMap["fields"] = d.Fields
	d.fieldMap["immutable"] = d.Immutable
	d.fieldMap["created_by"] = d.CreatedBy
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_by"] = d.UpdatedBy
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["update_version"] = d.UpdateVersion
}

func (d datasetSchema) clone(db *gorm.DB) datasetSchema {
	d.datasetSchemaDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d datasetSchema) replaceDB(db *gorm.DB) datasetSchema {
	d.datasetSchemaDo.ReplaceDB(db)
	return d
}

type datasetSchemaDo struct{ gen.DO }

func (d datasetSchemaDo) Debug() *datasetSchemaDo {
	return d.withDO(d.DO.Debug())
}

func (d datasetSchemaDo) WithContext(ctx context.Context) *datasetSchemaDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d datasetSchemaDo) ReadDB() *datasetSchemaDo {
	return d.Clauses(dbresolver.Read)
}

func (d datasetSchemaDo) WriteDB() *datasetSchemaDo {
	return d.Clauses(dbresolver.Write)
}

func (d datasetSchemaDo) Session(config *gorm.Session) *datasetSchemaDo {
	return d.withDO(d.DO.Session(config))
}

func (d datasetSchemaDo) Clauses(conds ...clause.Expression) *datasetSchemaDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d datasetSchemaDo) Returning(value interface{}, columns ...string) *datasetSchemaDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d datasetSchemaDo) Not(conds ...gen.Condition) *datasetSchemaDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d datasetSchemaDo) Or(conds ...gen.Condition) *datasetSchemaDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d datasetSchemaDo) Select(conds ...field.Expr) *datasetSchemaDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d datasetSchemaDo) Where(conds ...gen.Condition) *datasetSchemaDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d datasetSchemaDo) Order(conds ...field.Expr) *datasetSchemaDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d datasetSchemaDo) Distinct(cols ...field.Expr) *datasetSchemaDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d datasetSchemaDo) Omit(cols ...field.Expr) *datasetSchemaDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d datasetSchemaDo) Join(table schema.Tabler, on ...field.Expr) *datasetSchemaDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d datasetSchemaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *datasetSchemaDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d datasetSchemaDo) RightJoin(table schema.Tabler, on ...field.Expr) *datasetSchemaDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d datasetSchemaDo) Group(cols ...field.Expr) *datasetSchemaDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d datasetSchemaDo) Having(conds ...gen.Condition) *datasetSchemaDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d datasetSchemaDo) Limit(limit int) *datasetSchemaDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d datasetSchemaDo) Offset(offset int) *datasetSchemaDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d datasetSchemaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *datasetSchemaDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d datasetSchemaDo) Unscoped() *datasetSchemaDo {
	return d.withDO(d.DO.Unscoped())
}

func (d datasetSchemaDo) Create(values ...*model.DatasetSchema) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d datasetSchemaDo) CreateInBatches(values []*model.DatasetSchema, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d datasetSchemaDo) Save(values ...*model.DatasetSchema) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d datasetSchemaDo) First() (*model.DatasetSchema, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetSchema), nil
	}
}

func (d datasetSchemaDo) Take() (*model.DatasetSchema, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetSchema), nil
	}
}

func (d datasetSchemaDo) Last() (*model.DatasetSchema, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetSchema), nil
	}
}

func (d datasetSchemaDo) Find() ([]*model.DatasetSchema, error) {
	result, err := d.DO.Find()
	return result.([]*model.DatasetSchema), err
}

func (d datasetSchemaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DatasetSchema, err error) {
	buf := make([]*model.DatasetSchema, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d datasetSchemaDo) FindInBatches(result *[]*model.DatasetSchema, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d datasetSchemaDo) Attrs(attrs ...field.AssignExpr) *datasetSchemaDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d datasetSchemaDo) Assign(attrs ...field.AssignExpr) *datasetSchemaDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d datasetSchemaDo) Joins(fields ...field.RelationField) *datasetSchemaDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d datasetSchemaDo) Preload(fields ...field.RelationField) *datasetSchemaDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d datasetSchemaDo) FirstOrInit() (*model.DatasetSchema, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetSchema), nil
	}
}

func (d datasetSchemaDo) FirstOrCreate() (*model.DatasetSchema, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetSchema), nil
	}
}

func (d datasetSchemaDo) FindByPage(offset int, limit int) (result []*model.DatasetSchema, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d datasetSchemaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d datasetSchemaDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d datasetSchemaDo) Delete(models ...*model.DatasetSchema) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *datasetSchemaDo) withDO(do gen.Dao) *datasetSchemaDo {
	d.DO = *do.(*gen.DO)
	return d
}
