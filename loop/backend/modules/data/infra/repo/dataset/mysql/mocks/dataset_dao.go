// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql (interfaces: IDatasetDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/dataset_dao.go -package=mocks . IDatasetDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	mysql "github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql"
	model "github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql/gorm_gen/model"
	pagination "github.com/coze-dev/coze-loop/backend/modules/data/pkg/pagination"
	gomock "go.uber.org/mock/gomock"
)

// MockIDatasetDAO is a mock of IDatasetDAO interface.
type MockIDatasetDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIDatasetDAOMockRecorder
	isgomock struct{}
}

// MockIDatasetDAOMockRecorder is the mock recorder for MockIDatasetDAO.
type MockIDatasetDAOMockRecorder struct {
	mock *MockIDatasetDAO
}

// NewMockIDatasetDAO creates a new mock instance.
func NewMockIDatasetDAO(ctrl *gomock.Controller) *MockIDatasetDAO {
	mock := &MockIDatasetDAO{ctrl: ctrl}
	mock.recorder = &MockIDatasetDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatasetDAO) EXPECT() *MockIDatasetDAOMockRecorder {
	return m.recorder
}

// CountDatasets mocks base method.
func (m *MockIDatasetDAO) CountDatasets(ctx context.Context, params *mysql.ListDatasetsParams, opt ...db.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountDatasets", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDatasets indicates an expected call of CountDatasets.
func (mr *MockIDatasetDAOMockRecorder) CountDatasets(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDatasets", reflect.TypeOf((*MockIDatasetDAO)(nil).CountDatasets), varargs...)
}

// CreateDataset mocks base method.
func (m *MockIDatasetDAO) CreateDataset(ctx context.Context, dataset *model.Dataset, opt ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dataset}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataset", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockIDatasetDAOMockRecorder) CreateDataset(ctx, dataset any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dataset}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockIDatasetDAO)(nil).CreateDataset), varargs...)
}

// DeleteDataset mocks base method.
func (m *MockIDatasetDAO) DeleteDataset(ctx context.Context, spaceID, datasetID int64, opt ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, datasetID}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataset", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockIDatasetDAOMockRecorder) DeleteDataset(ctx, spaceID, datasetID any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, datasetID}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockIDatasetDAO)(nil).DeleteDataset), varargs...)
}

// GetDataset mocks base method.
func (m *MockIDatasetDAO) GetDataset(ctx context.Context, spaceID, datasetID int64, opt ...db.Option) (*model.Dataset, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, datasetID}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataset", varargs...)
	ret0, _ := ret[0].(*model.Dataset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataset indicates an expected call of GetDataset.
func (mr *MockIDatasetDAOMockRecorder) GetDataset(ctx, spaceID, datasetID any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, datasetID}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataset", reflect.TypeOf((*MockIDatasetDAO)(nil).GetDataset), varargs...)
}

// ListDatasets mocks base method.
func (m *MockIDatasetDAO) ListDatasets(ctx context.Context, params *mysql.ListDatasetsParams, opt ...db.Option) ([]*model.Dataset, *pagination.PageResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasets", varargs...)
	ret0, _ := ret[0].([]*model.Dataset)
	ret1, _ := ret[1].(*pagination.PageResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDatasets indicates an expected call of ListDatasets.
func (mr *MockIDatasetDAOMockRecorder) ListDatasets(ctx, params any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockIDatasetDAO)(nil).ListDatasets), varargs...)
}

// MGetDatasets mocks base method.
func (m *MockIDatasetDAO) MGetDatasets(ctx context.Context, spaceID int64, ids []int64, opt ...db.Option) ([]*model.Dataset, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, ids}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetDatasets", varargs...)
	ret0, _ := ret[0].([]*model.Dataset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetDatasets indicates an expected call of MGetDatasets.
func (mr *MockIDatasetDAOMockRecorder) MGetDatasets(ctx, spaceID, ids any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, ids}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetDatasets", reflect.TypeOf((*MockIDatasetDAO)(nil).MGetDatasets), varargs...)
}

// PatchDataset mocks base method.
func (m *MockIDatasetDAO) PatchDataset(ctx context.Context, patch, where *model.Dataset, opt ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, patch, where}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchDataset", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchDataset indicates an expected call of PatchDataset.
func (mr *MockIDatasetDAOMockRecorder) PatchDataset(ctx, patch, where any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, patch, where}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDataset", reflect.TypeOf((*MockIDatasetDAO)(nil).PatchDataset), varargs...)
}
