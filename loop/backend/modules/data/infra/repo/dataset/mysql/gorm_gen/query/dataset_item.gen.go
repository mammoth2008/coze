// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/dataset/mysql/gorm_gen/model"
)

func newDatasetItem(db *gorm.DB, opts ...gen.DOOption) datasetItem {
	_datasetItem := datasetItem{}

	_datasetItem.datasetItemDo.UseDB(db, opts...)
	_datasetItem.datasetItemDo.UseModel(&model.DatasetItem{})

	tableName := _datasetItem.datasetItemDo.TableName()
	_datasetItem.ALL = field.NewAsterisk(tableName)
	_datasetItem.ID = field.NewInt64(tableName, "id")
	_datasetItem.AppID = field.NewInt32(tableName, "app_id")
	_datasetItem.SpaceID = field.NewInt64(tableName, "space_id")
	_datasetItem.DatasetID = field.NewInt64(tableName, "dataset_id")
	_datasetItem.SchemaID = field.NewInt64(tableName, "schema_id")
	_datasetItem.ItemID = field.NewInt64(tableName, "item_id")
	_datasetItem.ItemKey = field.NewString(tableName, "item_key")
	_datasetItem.Data = field.NewField(tableName, "data")
	_datasetItem.RepeatedData = field.NewField(tableName, "repeated_data")
	_datasetItem.DataProperties = field.NewField(tableName, "data_properties")
	_datasetItem.AddVn = field.NewInt64(tableName, "add_vn")
	_datasetItem.DelVn = field.NewInt64(tableName, "del_vn")
	_datasetItem.CreatedBy = field.NewString(tableName, "created_by")
	_datasetItem.CreatedAt = field.NewTime(tableName, "created_at")
	_datasetItem.UpdatedBy = field.NewString(tableName, "updated_by")
	_datasetItem.UpdatedAt = field.NewTime(tableName, "updated_at")
	_datasetItem.DeletedAt = field.NewField(tableName, "deleted_at")
	_datasetItem.UpdateVersion = field.NewInt64(tableName, "update_version")

	_datasetItem.fillFieldMap()

	return _datasetItem
}

// datasetItem NDB_SHARE_TABLE;数据集条目
type datasetItem struct {
	datasetItemDo datasetItemDo

	ALL            field.Asterisk
	ID             field.Int64  // ID
	AppID          field.Int32  // 应用 ID
	SpaceID        field.Int64  // 空间 ID
	DatasetID      field.Int64  // 数据集 ID
	SchemaID       field.Int64  // Schema ID
	ItemID         field.Int64  // 条目 ID
	ItemKey        field.String // 幂等 key
	Data           field.Field  // 数据内容
	RepeatedData   field.Field  // 多轮数据内容
	DataProperties field.Field  // 内容属性
	AddVn          field.Int64  // 添加版本号
	DelVn          field.Int64  // 删除版本号
	CreatedBy      field.String // 创建人
	CreatedAt      field.Time   // 创建时间
	UpdatedBy      field.String // 修改人
	UpdatedAt      field.Time   // 修改时间
	DeletedAt      field.Field  // 删除时间
	UpdateVersion  field.Int64  // 更新版本号，用于乐观锁

	fieldMap map[string]field.Expr
}

func (d datasetItem) Table(newTableName string) *datasetItem {
	d.datasetItemDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d datasetItem) As(alias string) *datasetItem {
	d.datasetItemDo.DO = *(d.datasetItemDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *datasetItem) updateTableName(table string) *datasetItem {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.AppID = field.NewInt32(table, "app_id")
	d.SpaceID = field.NewInt64(table, "space_id")
	d.DatasetID = field.NewInt64(table, "dataset_id")
	d.SchemaID = field.NewInt64(table, "schema_id")
	d.ItemID = field.NewInt64(table, "item_id")
	d.ItemKey = field.NewString(table, "item_key")
	d.Data = field.NewField(table, "data")
	d.RepeatedData = field.NewField(table, "repeated_data")
	d.DataProperties = field.NewField(table, "data_properties")
	d.AddVn = field.NewInt64(table, "add_vn")
	d.DelVn = field.NewInt64(table, "del_vn")
	d.CreatedBy = field.NewString(table, "created_by")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedBy = field.NewString(table, "updated_by")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.UpdateVersion = field.NewInt64(table, "update_version")

	d.fillFieldMap()

	return d
}

func (d *datasetItem) WithContext(ctx context.Context) *datasetItemDo {
	return d.datasetItemDo.WithContext(ctx)
}

func (d datasetItem) TableName() string { return d.datasetItemDo.TableName() }

func (d datasetItem) Alias() string { return d.datasetItemDo.Alias() }

func (d datasetItem) Columns(cols ...field.Expr) gen.Columns { return d.datasetItemDo.Columns(cols...) }

func (d *datasetItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *datasetItem) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 18)
	d.fieldMap["id"] = d.ID
	d.fieldMap["app_id"] = d.AppID
	d.fieldMap["space_id"] = d.SpaceID
	d.fieldMap["dataset_id"] = d.DatasetID
	d.fieldMap["schema_id"] = d.SchemaID
	d.fieldMap["item_id"] = d.ItemID
	d.fieldMap["item_key"] = d.ItemKey
	d.fieldMap["data"] = d.Data
	d.fieldMap["repeated_data"] = d.RepeatedData
	d.fieldMap["data_properties"] = d.DataProperties
	d.fieldMap["add_vn"] = d.AddVn
	d.fieldMap["del_vn"] = d.DelVn
	d.fieldMap["created_by"] = d.CreatedBy
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_by"] = d.UpdatedBy
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["update_version"] = d.UpdateVersion
}

func (d datasetItem) clone(db *gorm.DB) datasetItem {
	d.datasetItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d datasetItem) replaceDB(db *gorm.DB) datasetItem {
	d.datasetItemDo.ReplaceDB(db)
	return d
}

type datasetItemDo struct{ gen.DO }

func (d datasetItemDo) Debug() *datasetItemDo {
	return d.withDO(d.DO.Debug())
}

func (d datasetItemDo) WithContext(ctx context.Context) *datasetItemDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d datasetItemDo) ReadDB() *datasetItemDo {
	return d.Clauses(dbresolver.Read)
}

func (d datasetItemDo) WriteDB() *datasetItemDo {
	return d.Clauses(dbresolver.Write)
}

func (d datasetItemDo) Session(config *gorm.Session) *datasetItemDo {
	return d.withDO(d.DO.Session(config))
}

func (d datasetItemDo) Clauses(conds ...clause.Expression) *datasetItemDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d datasetItemDo) Returning(value interface{}, columns ...string) *datasetItemDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d datasetItemDo) Not(conds ...gen.Condition) *datasetItemDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d datasetItemDo) Or(conds ...gen.Condition) *datasetItemDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d datasetItemDo) Select(conds ...field.Expr) *datasetItemDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d datasetItemDo) Where(conds ...gen.Condition) *datasetItemDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d datasetItemDo) Order(conds ...field.Expr) *datasetItemDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d datasetItemDo) Distinct(cols ...field.Expr) *datasetItemDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d datasetItemDo) Omit(cols ...field.Expr) *datasetItemDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d datasetItemDo) Join(table schema.Tabler, on ...field.Expr) *datasetItemDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d datasetItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *datasetItemDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d datasetItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *datasetItemDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d datasetItemDo) Group(cols ...field.Expr) *datasetItemDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d datasetItemDo) Having(conds ...gen.Condition) *datasetItemDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d datasetItemDo) Limit(limit int) *datasetItemDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d datasetItemDo) Offset(offset int) *datasetItemDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d datasetItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *datasetItemDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d datasetItemDo) Unscoped() *datasetItemDo {
	return d.withDO(d.DO.Unscoped())
}

func (d datasetItemDo) Create(values ...*model.DatasetItem) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d datasetItemDo) CreateInBatches(values []*model.DatasetItem, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d datasetItemDo) Save(values ...*model.DatasetItem) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d datasetItemDo) First() (*model.DatasetItem, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetItem), nil
	}
}

func (d datasetItemDo) Take() (*model.DatasetItem, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetItem), nil
	}
}

func (d datasetItemDo) Last() (*model.DatasetItem, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetItem), nil
	}
}

func (d datasetItemDo) Find() ([]*model.DatasetItem, error) {
	result, err := d.DO.Find()
	return result.([]*model.DatasetItem), err
}

func (d datasetItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DatasetItem, err error) {
	buf := make([]*model.DatasetItem, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d datasetItemDo) FindInBatches(result *[]*model.DatasetItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d datasetItemDo) Attrs(attrs ...field.AssignExpr) *datasetItemDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d datasetItemDo) Assign(attrs ...field.AssignExpr) *datasetItemDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d datasetItemDo) Joins(fields ...field.RelationField) *datasetItemDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d datasetItemDo) Preload(fields ...field.RelationField) *datasetItemDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d datasetItemDo) FirstOrInit() (*model.DatasetItem, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetItem), nil
	}
}

func (d datasetItemDo) FirstOrCreate() (*model.DatasetItem, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DatasetItem), nil
	}
}

func (d datasetItemDo) FindByPage(offset int, limit int) (result []*model.DatasetItem, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d datasetItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d datasetItemDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d datasetItemDo) Delete(models ...*model.DatasetItem) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *datasetItemDo) withDO(do gen.Dao) *datasetItemDo {
	d.DO = *do.(*gen.DO)
	return d
}
