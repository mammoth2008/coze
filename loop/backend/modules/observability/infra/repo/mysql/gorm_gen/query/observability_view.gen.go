// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/mysql/gorm_gen/model"
)

func newObservabilityView(db *gorm.DB, opts ...gen.DOOption) observabilityView {
	_observabilityView := observabilityView{}

	_observabilityView.observabilityViewDo.UseDB(db, opts...)
	_observabilityView.observabilityViewDo.UseModel(&model.ObservabilityView{})

	tableName := _observabilityView.observabilityViewDo.TableName()
	_observabilityView.ALL = field.NewAsterisk(tableName)
	_observabilityView.ID = field.NewInt64(tableName, "id")
	_observabilityView.EnterpriseID = field.NewString(tableName, "enterprise_id")
	_observabilityView.WorkspaceID = field.NewInt64(tableName, "workspace_id")
	_observabilityView.ViewName = field.NewString(tableName, "view_name")
	_observabilityView.PlatformType = field.NewString(tableName, "platform_type")
	_observabilityView.SpanListType = field.NewString(tableName, "span_list_type")
	_observabilityView.Filters = field.NewString(tableName, "filters")
	_observabilityView.CreatedAt = field.NewTime(tableName, "created_at")
	_observabilityView.CreatedBy = field.NewString(tableName, "created_by")
	_observabilityView.UpdatedAt = field.NewTime(tableName, "updated_at")
	_observabilityView.UpdatedBy = field.NewString(tableName, "updated_by")
	_observabilityView.IsDeleted = field.NewBool(tableName, "is_deleted")
	_observabilityView.DeletedAt = field.NewField(tableName, "deleted_at")
	_observabilityView.DeletedBy = field.NewString(tableName, "deleted_by")

	_observabilityView.fillFieldMap()

	return _observabilityView
}

// observabilityView 观测视图信息
type observabilityView struct {
	observabilityViewDo observabilityViewDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键ID
	EnterpriseID field.String // 企业id
	WorkspaceID  field.Int64  // 空间 ID
	ViewName     field.String // 视图名称
	PlatformType field.String // 数据来源
	SpanListType field.String // 列表信息
	Filters      field.String // 过滤条件信息
	CreatedAt    field.Time   // 创建时间
	CreatedBy    field.String // 创建人
	UpdatedAt    field.Time   // 修改时间
	UpdatedBy    field.String // 修改人
	IsDeleted    field.Bool   // 是否删除, 0 表示未删除, 1 表示已删除
	DeletedAt    field.Field  // 删除时间
	DeletedBy    field.String // 删除人

	fieldMap map[string]field.Expr
}

func (o observabilityView) Table(newTableName string) *observabilityView {
	o.observabilityViewDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o observabilityView) As(alias string) *observabilityView {
	o.observabilityViewDo.DO = *(o.observabilityViewDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *observabilityView) updateTableName(table string) *observabilityView {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.EnterpriseID = field.NewString(table, "enterprise_id")
	o.WorkspaceID = field.NewInt64(table, "workspace_id")
	o.ViewName = field.NewString(table, "view_name")
	o.PlatformType = field.NewString(table, "platform_type")
	o.SpanListType = field.NewString(table, "span_list_type")
	o.Filters = field.NewString(table, "filters")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.CreatedBy = field.NewString(table, "created_by")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.UpdatedBy = field.NewString(table, "updated_by")
	o.IsDeleted = field.NewBool(table, "is_deleted")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.DeletedBy = field.NewString(table, "deleted_by")

	o.fillFieldMap()

	return o
}

func (o *observabilityView) WithContext(ctx context.Context) *observabilityViewDo {
	return o.observabilityViewDo.WithContext(ctx)
}

func (o observabilityView) TableName() string { return o.observabilityViewDo.TableName() }

func (o observabilityView) Alias() string { return o.observabilityViewDo.Alias() }

func (o observabilityView) Columns(cols ...field.Expr) gen.Columns {
	return o.observabilityViewDo.Columns(cols...)
}

func (o *observabilityView) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *observabilityView) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 14)
	o.fieldMap["id"] = o.ID
	o.fieldMap["enterprise_id"] = o.EnterpriseID
	o.fieldMap["workspace_id"] = o.WorkspaceID
	o.fieldMap["view_name"] = o.ViewName
	o.fieldMap["platform_type"] = o.PlatformType
	o.fieldMap["span_list_type"] = o.SpanListType
	o.fieldMap["filters"] = o.Filters
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["updated_by"] = o.UpdatedBy
	o.fieldMap["is_deleted"] = o.IsDeleted
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["deleted_by"] = o.DeletedBy
}

func (o observabilityView) clone(db *gorm.DB) observabilityView {
	o.observabilityViewDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o observabilityView) replaceDB(db *gorm.DB) observabilityView {
	o.observabilityViewDo.ReplaceDB(db)
	return o
}

type observabilityViewDo struct{ gen.DO }

func (o observabilityViewDo) Debug() *observabilityViewDo {
	return o.withDO(o.DO.Debug())
}

func (o observabilityViewDo) WithContext(ctx context.Context) *observabilityViewDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o observabilityViewDo) ReadDB() *observabilityViewDo {
	return o.Clauses(dbresolver.Read)
}

func (o observabilityViewDo) WriteDB() *observabilityViewDo {
	return o.Clauses(dbresolver.Write)
}

func (o observabilityViewDo) Session(config *gorm.Session) *observabilityViewDo {
	return o.withDO(o.DO.Session(config))
}

func (o observabilityViewDo) Clauses(conds ...clause.Expression) *observabilityViewDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o observabilityViewDo) Returning(value interface{}, columns ...string) *observabilityViewDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o observabilityViewDo) Not(conds ...gen.Condition) *observabilityViewDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o observabilityViewDo) Or(conds ...gen.Condition) *observabilityViewDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o observabilityViewDo) Select(conds ...field.Expr) *observabilityViewDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o observabilityViewDo) Where(conds ...gen.Condition) *observabilityViewDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o observabilityViewDo) Order(conds ...field.Expr) *observabilityViewDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o observabilityViewDo) Distinct(cols ...field.Expr) *observabilityViewDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o observabilityViewDo) Omit(cols ...field.Expr) *observabilityViewDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o observabilityViewDo) Join(table schema.Tabler, on ...field.Expr) *observabilityViewDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o observabilityViewDo) LeftJoin(table schema.Tabler, on ...field.Expr) *observabilityViewDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o observabilityViewDo) RightJoin(table schema.Tabler, on ...field.Expr) *observabilityViewDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o observabilityViewDo) Group(cols ...field.Expr) *observabilityViewDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o observabilityViewDo) Having(conds ...gen.Condition) *observabilityViewDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o observabilityViewDo) Limit(limit int) *observabilityViewDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o observabilityViewDo) Offset(offset int) *observabilityViewDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o observabilityViewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *observabilityViewDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o observabilityViewDo) Unscoped() *observabilityViewDo {
	return o.withDO(o.DO.Unscoped())
}

func (o observabilityViewDo) Create(values ...*model.ObservabilityView) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o observabilityViewDo) CreateInBatches(values []*model.ObservabilityView, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o observabilityViewDo) Save(values ...*model.ObservabilityView) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o observabilityViewDo) First() (*model.ObservabilityView, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityView), nil
	}
}

func (o observabilityViewDo) Take() (*model.ObservabilityView, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityView), nil
	}
}

func (o observabilityViewDo) Last() (*model.ObservabilityView, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityView), nil
	}
}

func (o observabilityViewDo) Find() ([]*model.ObservabilityView, error) {
	result, err := o.DO.Find()
	return result.([]*model.ObservabilityView), err
}

func (o observabilityViewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ObservabilityView, err error) {
	buf := make([]*model.ObservabilityView, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o observabilityViewDo) FindInBatches(result *[]*model.ObservabilityView, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o observabilityViewDo) Attrs(attrs ...field.AssignExpr) *observabilityViewDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o observabilityViewDo) Assign(attrs ...field.AssignExpr) *observabilityViewDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o observabilityViewDo) Joins(fields ...field.RelationField) *observabilityViewDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o observabilityViewDo) Preload(fields ...field.RelationField) *observabilityViewDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o observabilityViewDo) FirstOrInit() (*model.ObservabilityView, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityView), nil
	}
}

func (o observabilityViewDo) FirstOrCreate() (*model.ObservabilityView, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityView), nil
	}
}

func (o observabilityViewDo) FindByPage(offset int, limit int) (result []*model.ObservabilityView, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o observabilityViewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o observabilityViewDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o observabilityViewDo) Delete(models ...*model.ObservabilityView) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *observabilityViewDo) withDO(do gen.Dao) *observabilityViewDo {
	o.DO = *do.(*gen.DO)
	return o
}
