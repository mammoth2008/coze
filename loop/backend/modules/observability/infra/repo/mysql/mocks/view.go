// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/mysql (interfaces: IViewDao)
//
// Generated by this command:
//
//	mockgen -destination=mocks/view.go -package=mocks . IViewDao
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIViewDao is a mock of IViewDao interface.
type MockIViewDao struct {
	ctrl     *gomock.Controller
	recorder *MockIViewDaoMockRecorder
	isgomock struct{}
}

// MockIViewDaoMockRecorder is the mock recorder for MockIViewDao.
type MockIViewDaoMockRecorder struct {
	mock *MockIViewDao
}

// NewMockIViewDao creates a new mock instance.
func NewMockIViewDao(ctrl *gomock.Controller) *MockIViewDao {
	mock := &MockIViewDao{ctrl: ctrl}
	mock.recorder = &MockIViewDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIViewDao) EXPECT() *MockIViewDaoMockRecorder {
	return m.recorder
}

// CreateView mocks base method.
func (m *MockIViewDao) CreateView(ctx context.Context, po *model.ObservabilityView) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateView", ctx, po)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateView indicates an expected call of CreateView.
func (mr *MockIViewDaoMockRecorder) CreateView(ctx, po any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateView", reflect.TypeOf((*MockIViewDao)(nil).CreateView), ctx, po)
}

// DeleteView mocks base method.
func (m *MockIViewDao) DeleteView(ctx context.Context, id, workspaceID int64, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteView", ctx, id, workspaceID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteView indicates an expected call of DeleteView.
func (mr *MockIViewDaoMockRecorder) DeleteView(ctx, id, workspaceID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteView", reflect.TypeOf((*MockIViewDao)(nil).DeleteView), ctx, id, workspaceID, userID)
}

// GetView mocks base method.
func (m *MockIViewDao) GetView(ctx context.Context, id int64, workspaceID *int64, userID *string) (*model.ObservabilityView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetView", ctx, id, workspaceID, userID)
	ret0, _ := ret[0].(*model.ObservabilityView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetView indicates an expected call of GetView.
func (mr *MockIViewDaoMockRecorder) GetView(ctx, id, workspaceID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetView", reflect.TypeOf((*MockIViewDao)(nil).GetView), ctx, id, workspaceID, userID)
}

// ListViews mocks base method.
func (m *MockIViewDao) ListViews(ctx context.Context, workspaceID int64, userID string) ([]*model.ObservabilityView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListViews", ctx, workspaceID, userID)
	ret0, _ := ret[0].([]*model.ObservabilityView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListViews indicates an expected call of ListViews.
func (mr *MockIViewDaoMockRecorder) ListViews(ctx, workspaceID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViews", reflect.TypeOf((*MockIViewDao)(nil).ListViews), ctx, workspaceID, userID)
}

// UpdateView mocks base method.
func (m *MockIViewDao) UpdateView(ctx context.Context, po *model.ObservabilityView) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateView", ctx, po)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateView indicates an expected call of UpdateView.
func (mr *MockIViewDaoMockRecorder) UpdateView(ctx, po any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateView", reflect.TypeOf((*MockIViewDao)(nil).UpdateView), ctx, po)
}
