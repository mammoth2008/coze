// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/metrics (interfaces: ITraceMetrics)
//
// Generated by this command:
//
//	mockgen -destination=mocks/metrics.go -package=mocks . ITraceMetrics
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockITraceMetrics is a mock of ITraceMetrics interface.
type MockITraceMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockITraceMetricsMockRecorder
	isgomock struct{}
}

// MockITraceMetricsMockRecorder is the mock recorder for MockITraceMetrics.
type MockITraceMetricsMockRecorder struct {
	mock *MockITraceMetrics
}

// NewMockITraceMetrics creates a new mock instance.
func NewMockITraceMetrics(ctrl *gomock.Controller) *MockITraceMetrics {
	mock := &MockITraceMetrics{ctrl: ctrl}
	mock.recorder = &MockITraceMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITraceMetrics) EXPECT() *MockITraceMetricsMockRecorder {
	return m.recorder
}

// EmitGetTrace mocks base method.
func (m *MockITraceMetrics) EmitGetTrace(workspaceId int64, start time.Time, isError bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitGetTrace", workspaceId, start, isError)
}

// EmitGetTrace indicates an expected call of EmitGetTrace.
func (mr *MockITraceMetricsMockRecorder) EmitGetTrace(workspaceId, start, isError any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitGetTrace", reflect.TypeOf((*MockITraceMetrics)(nil).EmitGetTrace), workspaceId, start, isError)
}

// EmitListSpans mocks base method.
func (m *MockITraceMetrics) EmitListSpans(workspaceId int64, spanType string, start time.Time, isError bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitListSpans", workspaceId, spanType, start, isError)
}

// EmitListSpans indicates an expected call of EmitListSpans.
func (mr *MockITraceMetricsMockRecorder) EmitListSpans(workspaceId, spanType, start, isError any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitListSpans", reflect.TypeOf((*MockITraceMetrics)(nil).EmitListSpans), workspaceId, spanType, start, isError)
}
