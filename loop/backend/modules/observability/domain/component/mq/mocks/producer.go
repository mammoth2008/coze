// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/mq (interfaces: ITraceProducer)
//
// Generated by this command:
//
//	mockgen -destination=mocks/producer.go -package=mocks . ITraceProducer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockITraceProducer is a mock of ITraceProducer interface.
type MockITraceProducer struct {
	ctrl     *gomock.Controller
	recorder *MockITraceProducerMockRecorder
	isgomock struct{}
}

// MockITraceProducerMockRecorder is the mock recorder for MockITraceProducer.
type MockITraceProducerMockRecorder struct {
	mock *MockITraceProducer
}

// NewMockITraceProducer creates a new mock instance.
func NewMockITraceProducer(ctrl *gomock.Controller) *MockITraceProducer {
	mock := &MockITraceProducer{ctrl: ctrl}
	mock.recorder = &MockITraceProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITraceProducer) EXPECT() *MockITraceProducerMockRecorder {
	return m.recorder
}

// IngestSpans mocks base method.
func (m *MockITraceProducer) IngestSpans(ctx context.Context, data *entity.TraceData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestSpans", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// IngestSpans indicates an expected call of IngestSpans.
func (mr *MockITraceProducerMockRecorder) IngestSpans(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestSpans", reflect.TypeOf((*MockITraceProducer)(nil).IngestSpans), ctx, data)
}
