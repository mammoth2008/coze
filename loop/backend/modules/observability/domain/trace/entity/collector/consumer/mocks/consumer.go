// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/collector/consumer (interfaces: Consumer)
//
// Generated by this command:
//
//	mockgen -destination=mocks/consumer.go -package=mocks . Consumer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	consumer "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/collector/consumer"
	gomock "go.uber.org/mock/gomock"
)

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
	isgomock struct{}
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// ConsumeTraces mocks base method.
func (m *MockConsumer) ConsumeTraces(ctx context.Context, tds consumer.Traces) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeTraces", ctx, tds)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeTraces indicates an expected call of ConsumeTraces.
func (mr *MockConsumerMockRecorder) ConsumeTraces(ctx, tds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeTraces", reflect.TypeOf((*MockConsumer)(nil).ConsumeTraces), ctx, tds)
}
