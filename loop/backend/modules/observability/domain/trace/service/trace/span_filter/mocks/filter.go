// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/trace/span_filter (interfaces: Filter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/filter.go -package=mocks . Filter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	loop_span "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/loop_span"
	span_filter "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/trace/span_filter"
	gomock "go.uber.org/mock/gomock"
)

// MockFilter is a mock of Filter interface.
type MockFilter struct {
	ctrl     *gomock.Controller
	recorder *MockFilterMockRecorder
	isgomock struct{}
}

// MockFilterMockRecorder is the mock recorder for MockFilter.
type MockFilterMockRecorder struct {
	mock *MockFilter
}

// NewMockFilter creates a new mock instance.
func NewMockFilter(ctrl *gomock.Controller) *MockFilter {
	mock := &MockFilter{ctrl: ctrl}
	mock.recorder = &MockFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilter) EXPECT() *MockFilterMockRecorder {
	return m.recorder
}

// BuildALLSpanFilter mocks base method.
func (m *MockFilter) BuildALLSpanFilter(arg0 context.Context, arg1 *span_filter.SpanEnv) ([]*loop_span.FilterField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildALLSpanFilter", arg0, arg1)
	ret0, _ := ret[0].([]*loop_span.FilterField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildALLSpanFilter indicates an expected call of BuildALLSpanFilter.
func (mr *MockFilterMockRecorder) BuildALLSpanFilter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildALLSpanFilter", reflect.TypeOf((*MockFilter)(nil).BuildALLSpanFilter), arg0, arg1)
}

// BuildBasicSpanFilter mocks base method.
func (m *MockFilter) BuildBasicSpanFilter(arg0 context.Context, arg1 *span_filter.SpanEnv) ([]*loop_span.FilterField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildBasicSpanFilter", arg0, arg1)
	ret0, _ := ret[0].([]*loop_span.FilterField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildBasicSpanFilter indicates an expected call of BuildBasicSpanFilter.
func (mr *MockFilterMockRecorder) BuildBasicSpanFilter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildBasicSpanFilter", reflect.TypeOf((*MockFilter)(nil).BuildBasicSpanFilter), arg0, arg1)
}

// BuildLLMSpanFilter mocks base method.
func (m *MockFilter) BuildLLMSpanFilter(arg0 context.Context, arg1 *span_filter.SpanEnv) ([]*loop_span.FilterField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildLLMSpanFilter", arg0, arg1)
	ret0, _ := ret[0].([]*loop_span.FilterField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildLLMSpanFilter indicates an expected call of BuildLLMSpanFilter.
func (mr *MockFilterMockRecorder) BuildLLMSpanFilter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildLLMSpanFilter", reflect.TypeOf((*MockFilter)(nil).BuildLLMSpanFilter), arg0, arg1)
}

// BuildRootSpanFilter mocks base method.
func (m *MockFilter) BuildRootSpanFilter(arg0 context.Context, arg1 *span_filter.SpanEnv) ([]*loop_span.FilterField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRootSpanFilter", arg0, arg1)
	ret0, _ := ret[0].([]*loop_span.FilterField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildRootSpanFilter indicates an expected call of BuildRootSpanFilter.
func (mr *MockFilterMockRecorder) BuildRootSpanFilter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRootSpanFilter", reflect.TypeOf((*MockFilter)(nil).BuildRootSpanFilter), arg0, arg1)
}
