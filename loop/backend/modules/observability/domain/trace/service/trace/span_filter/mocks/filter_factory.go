// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/trace/span_filter (interfaces: PlatformFilterFactory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/filter_factory.go -package=mocks . PlatformFilterFactory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	loop_span "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/loop_span"
	span_filter "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/trace/span_filter"
	gomock "go.uber.org/mock/gomock"
)

// MockPlatformFilterFactory is a mock of PlatformFilterFactory interface.
type MockPlatformFilterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformFilterFactoryMockRecorder
	isgomock struct{}
}

// MockPlatformFilterFactoryMockRecorder is the mock recorder for MockPlatformFilterFactory.
type MockPlatformFilterFactoryMockRecorder struct {
	mock *MockPlatformFilterFactory
}

// NewMockPlatformFilterFactory creates a new mock instance.
func NewMockPlatformFilterFactory(ctrl *gomock.Controller) *MockPlatformFilterFactory {
	mock := &MockPlatformFilterFactory{ctrl: ctrl}
	mock.recorder = &MockPlatformFilterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlatformFilterFactory) EXPECT() *MockPlatformFilterFactoryMockRecorder {
	return m.recorder
}

// GetFilter mocks base method.
func (m *MockPlatformFilterFactory) GetFilter(arg0 context.Context, arg1 loop_span.PlatformType) (span_filter.Filter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilter", arg0, arg1)
	ret0, _ := ret[0].(span_filter.Filter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilter indicates an expected call of GetFilter.
func (mr *MockPlatformFilterFactoryMockRecorder) GetFilter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilter", reflect.TypeOf((*MockPlatformFilterFactory)(nil).GetFilter), arg0, arg1)
}
