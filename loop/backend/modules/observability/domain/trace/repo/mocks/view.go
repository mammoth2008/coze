// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/repo (interfaces: IViewRepo)
//
// Generated by this command:
//
//	mockgen -destination=mocks/view.go -package=mocks . IViewRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIViewRepo is a mock of IViewRepo interface.
type MockIViewRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIViewRepoMockRecorder
	isgomock struct{}
}

// MockIViewRepoMockRecorder is the mock recorder for MockIViewRepo.
type MockIViewRepoMockRecorder struct {
	mock *MockIViewRepo
}

// NewMockIViewRepo creates a new mock instance.
func NewMockIViewRepo(ctrl *gomock.Controller) *MockIViewRepo {
	mock := &MockIViewRepo{ctrl: ctrl}
	mock.recorder = &MockIViewRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIViewRepo) EXPECT() *MockIViewRepoMockRecorder {
	return m.recorder
}

// CreateView mocks base method.
func (m *MockIViewRepo) CreateView(ctx context.Context, do *entity.ObservabilityView) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateView", ctx, do)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateView indicates an expected call of CreateView.
func (mr *MockIViewRepoMockRecorder) CreateView(ctx, do any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateView", reflect.TypeOf((*MockIViewRepo)(nil).CreateView), ctx, do)
}

// DeleteView mocks base method.
func (m *MockIViewRepo) DeleteView(ctx context.Context, id, workspaceID int64, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteView", ctx, id, workspaceID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteView indicates an expected call of DeleteView.
func (mr *MockIViewRepoMockRecorder) DeleteView(ctx, id, workspaceID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteView", reflect.TypeOf((*MockIViewRepo)(nil).DeleteView), ctx, id, workspaceID, userID)
}

// GetView mocks base method.
func (m *MockIViewRepo) GetView(ctx context.Context, id int64, workspaceID *int64, userID *string) (*entity.ObservabilityView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetView", ctx, id, workspaceID, userID)
	ret0, _ := ret[0].(*entity.ObservabilityView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetView indicates an expected call of GetView.
func (mr *MockIViewRepoMockRecorder) GetView(ctx, id, workspaceID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetView", reflect.TypeOf((*MockIViewRepo)(nil).GetView), ctx, id, workspaceID, userID)
}

// ListViews mocks base method.
func (m *MockIViewRepo) ListViews(ctx context.Context, workspaceID int64, userID string) ([]*entity.ObservabilityView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListViews", ctx, workspaceID, userID)
	ret0, _ := ret[0].([]*entity.ObservabilityView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListViews indicates an expected call of ListViews.
func (mr *MockIViewRepoMockRecorder) ListViews(ctx, workspaceID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViews", reflect.TypeOf((*MockIViewRepo)(nil).ListViews), ctx, workspaceID, userID)
}

// UpdateView mocks base method.
func (m *MockIViewRepo) UpdateView(ctx context.Context, do *entity.ObservabilityView) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateView", ctx, do)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateView indicates an expected call of UpdateView.
func (mr *MockIViewRepoMockRecorder) UpdateView(ctx, do any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateView", reflect.TypeOf((*MockIViewRepo)(nil).UpdateView), ctx, do)
}
