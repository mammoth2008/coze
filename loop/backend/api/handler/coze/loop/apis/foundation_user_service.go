// Copyright (c) 2025 coze-dev Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by hertz generator.

package apis

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol"
	"github.com/cloudwego/kitex/client/callopt"

	"github.com/coze-dev/coze-loop/backend/infra/middleware/session"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user/userservice"
	"github.com/coze-dev/coze-loop/backend/pkg/hertzutil"
)

var localUserClient userservice.Client

// Register .
// @router /api/foundation/v1/users/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, func(ctx context.Context, request *user.UserRegisterRequest, callOptions ...callopt.Option) (r *user.UserRegisterResponse, err error) {
		r, err = localUserClient.Register(ctx, request, callOptions...)
		if err != nil {
			return nil, err
		}
		if r.Token != nil {
			c.SetCookie(session.SessionKey,
				r.GetToken(),
				int(r.GetExpireTime()),
				"/",
				hertzutil.GetOriginHost(c),
				protocol.CookieSameSiteDefaultMode,
				false,
				true)
		}
		return r, nil
	})
}

// ResetPassword .
// @router /api/foundation/v1/users/reset_password [POST]
func ResetPassword(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localUserClient.ResetPassword)
}

// LoginByPassword .
// @router /api/foundation/v1/users/login_by_password [POST]
func LoginByPassword(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, func(ctx context.Context, request *user.LoginByPasswordRequest, callOptions ...callopt.Option) (r *user.LoginByPasswordResponse, err error) {
		r, err = localUserClient.LoginByPassword(ctx, request, callOptions...)
		if err != nil {
			return nil, err
		}
		if r.Token != nil {
			c.SetCookie(session.SessionKey,
				*r.Token,
				int(*r.ExpireTime),
				"/",
				hertzutil.GetOriginHost(c),
				protocol.CookieSameSiteDefaultMode,
				false,
				true)
		}
		return r, nil
	})
}

// Logout .
// @router /api/foundation/v1/users/logout [POST]
func Logout(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, func(ctx context.Context, request *user.LogoutRequest, callOptions ...callopt.Option) (r *user.LogoutResponse, err error) {
		r, err = localUserClient.Logout(ctx, request, callOptions...)
		if err != nil {
			return nil, err
		}
		c.SetCookie(session.SessionKey,
			"",
			-1,
			"/",
			hertzutil.GetOriginHost(c),
			protocol.CookieSameSiteDefaultMode,
			false,
			true)
		return r, nil
	})
}

// ModifyUserProfile .
// @router /api/foundation/v1/users/update_profile [POST]
func ModifyUserProfile(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localUserClient.ModifyUserProfile)
}

// GetUserInfoByToken .
// @router /api/foundation/v1/users/session [GET]
func GetUserInfoByToken(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localUserClient.GetUserInfoByToken)
}
