// Code generated by Kitex v0.13.1. DO NOT EDIT.

package datasetservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	dataset "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/dataset"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateDataset": kitex.NewMethodInfo(
		createDatasetHandler,
		newDatasetServiceCreateDatasetArgs,
		newDatasetServiceCreateDatasetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateDataset": kitex.NewMethodInfo(
		updateDatasetHandler,
		newDatasetServiceUpdateDatasetArgs,
		newDatasetServiceUpdateDatasetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteDataset": kitex.NewMethodInfo(
		deleteDatasetHandler,
		newDatasetServiceDeleteDatasetArgs,
		newDatasetServiceDeleteDatasetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListDatasets": kitex.NewMethodInfo(
		listDatasetsHandler,
		newDatasetServiceListDatasetsArgs,
		newDatasetServiceListDatasetsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDataset": kitex.NewMethodInfo(
		getDatasetHandler,
		newDatasetServiceGetDatasetArgs,
		newDatasetServiceGetDatasetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetDatasets": kitex.NewMethodInfo(
		batchGetDatasetsHandler,
		newDatasetServiceBatchGetDatasetsArgs,
		newDatasetServiceBatchGetDatasetsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ImportDataset": kitex.NewMethodInfo(
		importDatasetHandler,
		newDatasetServiceImportDatasetArgs,
		newDatasetServiceImportDatasetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDatasetIOJob": kitex.NewMethodInfo(
		getDatasetIOJobHandler,
		newDatasetServiceGetDatasetIOJobArgs,
		newDatasetServiceGetDatasetIOJobResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListDatasetIOJobs": kitex.NewMethodInfo(
		listDatasetIOJobsHandler,
		newDatasetServiceListDatasetIOJobsArgs,
		newDatasetServiceListDatasetIOJobsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateDatasetVersion": kitex.NewMethodInfo(
		createDatasetVersionHandler,
		newDatasetServiceCreateDatasetVersionArgs,
		newDatasetServiceCreateDatasetVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListDatasetVersions": kitex.NewMethodInfo(
		listDatasetVersionsHandler,
		newDatasetServiceListDatasetVersionsArgs,
		newDatasetServiceListDatasetVersionsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDatasetVersion": kitex.NewMethodInfo(
		getDatasetVersionHandler,
		newDatasetServiceGetDatasetVersionArgs,
		newDatasetServiceGetDatasetVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetDatasetVersions": kitex.NewMethodInfo(
		batchGetDatasetVersionsHandler,
		newDatasetServiceBatchGetDatasetVersionsArgs,
		newDatasetServiceBatchGetDatasetVersionsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDatasetSchema": kitex.NewMethodInfo(
		getDatasetSchemaHandler,
		newDatasetServiceGetDatasetSchemaArgs,
		newDatasetServiceGetDatasetSchemaResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateDatasetSchema": kitex.NewMethodInfo(
		updateDatasetSchemaHandler,
		newDatasetServiceUpdateDatasetSchemaArgs,
		newDatasetServiceUpdateDatasetSchemaResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchCreateDatasetItems": kitex.NewMethodInfo(
		batchCreateDatasetItemsHandler,
		newDatasetServiceBatchCreateDatasetItemsArgs,
		newDatasetServiceBatchCreateDatasetItemsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateDatasetItem": kitex.NewMethodInfo(
		updateDatasetItemHandler,
		newDatasetServiceUpdateDatasetItemArgs,
		newDatasetServiceUpdateDatasetItemResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteDatasetItem": kitex.NewMethodInfo(
		deleteDatasetItemHandler,
		newDatasetServiceDeleteDatasetItemArgs,
		newDatasetServiceDeleteDatasetItemResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchDeleteDatasetItems": kitex.NewMethodInfo(
		batchDeleteDatasetItemsHandler,
		newDatasetServiceBatchDeleteDatasetItemsArgs,
		newDatasetServiceBatchDeleteDatasetItemsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListDatasetItems": kitex.NewMethodInfo(
		listDatasetItemsHandler,
		newDatasetServiceListDatasetItemsArgs,
		newDatasetServiceListDatasetItemsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListDatasetItemsByVersion": kitex.NewMethodInfo(
		listDatasetItemsByVersionHandler,
		newDatasetServiceListDatasetItemsByVersionArgs,
		newDatasetServiceListDatasetItemsByVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDatasetItem": kitex.NewMethodInfo(
		getDatasetItemHandler,
		newDatasetServiceGetDatasetItemArgs,
		newDatasetServiceGetDatasetItemResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetDatasetItems": kitex.NewMethodInfo(
		batchGetDatasetItemsHandler,
		newDatasetServiceBatchGetDatasetItemsArgs,
		newDatasetServiceBatchGetDatasetItemsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetDatasetItemsByVersion": kitex.NewMethodInfo(
		batchGetDatasetItemsByVersionHandler,
		newDatasetServiceBatchGetDatasetItemsByVersionArgs,
		newDatasetServiceBatchGetDatasetItemsByVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ClearDatasetItem": kitex.NewMethodInfo(
		clearDatasetItemHandler,
		newDatasetServiceClearDatasetItemArgs,
		newDatasetServiceClearDatasetItemResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	datasetServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return datasetServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "DatasetService"
	handlerType := (*dataset.DatasetService)(nil)
	extra := map[string]interface{}{
		"PackageName": "dataset",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func createDatasetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceCreateDatasetArgs)
	realResult := result.(*dataset.DatasetServiceCreateDatasetResult)
	success, err := handler.(dataset.DatasetService).CreateDataset(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceCreateDatasetArgs() interface{} {
	return dataset.NewDatasetServiceCreateDatasetArgs()
}

func newDatasetServiceCreateDatasetResult() interface{} {
	return dataset.NewDatasetServiceCreateDatasetResult()
}

func updateDatasetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceUpdateDatasetArgs)
	realResult := result.(*dataset.DatasetServiceUpdateDatasetResult)
	success, err := handler.(dataset.DatasetService).UpdateDataset(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceUpdateDatasetArgs() interface{} {
	return dataset.NewDatasetServiceUpdateDatasetArgs()
}

func newDatasetServiceUpdateDatasetResult() interface{} {
	return dataset.NewDatasetServiceUpdateDatasetResult()
}

func deleteDatasetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceDeleteDatasetArgs)
	realResult := result.(*dataset.DatasetServiceDeleteDatasetResult)
	success, err := handler.(dataset.DatasetService).DeleteDataset(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceDeleteDatasetArgs() interface{} {
	return dataset.NewDatasetServiceDeleteDatasetArgs()
}

func newDatasetServiceDeleteDatasetResult() interface{} {
	return dataset.NewDatasetServiceDeleteDatasetResult()
}

func listDatasetsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceListDatasetsArgs)
	realResult := result.(*dataset.DatasetServiceListDatasetsResult)
	success, err := handler.(dataset.DatasetService).ListDatasets(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceListDatasetsArgs() interface{} {
	return dataset.NewDatasetServiceListDatasetsArgs()
}

func newDatasetServiceListDatasetsResult() interface{} {
	return dataset.NewDatasetServiceListDatasetsResult()
}

func getDatasetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceGetDatasetArgs)
	realResult := result.(*dataset.DatasetServiceGetDatasetResult)
	success, err := handler.(dataset.DatasetService).GetDataset(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceGetDatasetArgs() interface{} {
	return dataset.NewDatasetServiceGetDatasetArgs()
}

func newDatasetServiceGetDatasetResult() interface{} {
	return dataset.NewDatasetServiceGetDatasetResult()
}

func batchGetDatasetsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceBatchGetDatasetsArgs)
	realResult := result.(*dataset.DatasetServiceBatchGetDatasetsResult)
	success, err := handler.(dataset.DatasetService).BatchGetDatasets(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceBatchGetDatasetsArgs() interface{} {
	return dataset.NewDatasetServiceBatchGetDatasetsArgs()
}

func newDatasetServiceBatchGetDatasetsResult() interface{} {
	return dataset.NewDatasetServiceBatchGetDatasetsResult()
}

func importDatasetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceImportDatasetArgs)
	realResult := result.(*dataset.DatasetServiceImportDatasetResult)
	success, err := handler.(dataset.DatasetService).ImportDataset(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceImportDatasetArgs() interface{} {
	return dataset.NewDatasetServiceImportDatasetArgs()
}

func newDatasetServiceImportDatasetResult() interface{} {
	return dataset.NewDatasetServiceImportDatasetResult()
}

func getDatasetIOJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceGetDatasetIOJobArgs)
	realResult := result.(*dataset.DatasetServiceGetDatasetIOJobResult)
	success, err := handler.(dataset.DatasetService).GetDatasetIOJob(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceGetDatasetIOJobArgs() interface{} {
	return dataset.NewDatasetServiceGetDatasetIOJobArgs()
}

func newDatasetServiceGetDatasetIOJobResult() interface{} {
	return dataset.NewDatasetServiceGetDatasetIOJobResult()
}

func listDatasetIOJobsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceListDatasetIOJobsArgs)
	realResult := result.(*dataset.DatasetServiceListDatasetIOJobsResult)
	success, err := handler.(dataset.DatasetService).ListDatasetIOJobs(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceListDatasetIOJobsArgs() interface{} {
	return dataset.NewDatasetServiceListDatasetIOJobsArgs()
}

func newDatasetServiceListDatasetIOJobsResult() interface{} {
	return dataset.NewDatasetServiceListDatasetIOJobsResult()
}

func createDatasetVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceCreateDatasetVersionArgs)
	realResult := result.(*dataset.DatasetServiceCreateDatasetVersionResult)
	success, err := handler.(dataset.DatasetService).CreateDatasetVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceCreateDatasetVersionArgs() interface{} {
	return dataset.NewDatasetServiceCreateDatasetVersionArgs()
}

func newDatasetServiceCreateDatasetVersionResult() interface{} {
	return dataset.NewDatasetServiceCreateDatasetVersionResult()
}

func listDatasetVersionsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceListDatasetVersionsArgs)
	realResult := result.(*dataset.DatasetServiceListDatasetVersionsResult)
	success, err := handler.(dataset.DatasetService).ListDatasetVersions(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceListDatasetVersionsArgs() interface{} {
	return dataset.NewDatasetServiceListDatasetVersionsArgs()
}

func newDatasetServiceListDatasetVersionsResult() interface{} {
	return dataset.NewDatasetServiceListDatasetVersionsResult()
}

func getDatasetVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceGetDatasetVersionArgs)
	realResult := result.(*dataset.DatasetServiceGetDatasetVersionResult)
	success, err := handler.(dataset.DatasetService).GetDatasetVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceGetDatasetVersionArgs() interface{} {
	return dataset.NewDatasetServiceGetDatasetVersionArgs()
}

func newDatasetServiceGetDatasetVersionResult() interface{} {
	return dataset.NewDatasetServiceGetDatasetVersionResult()
}

func batchGetDatasetVersionsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceBatchGetDatasetVersionsArgs)
	realResult := result.(*dataset.DatasetServiceBatchGetDatasetVersionsResult)
	success, err := handler.(dataset.DatasetService).BatchGetDatasetVersions(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceBatchGetDatasetVersionsArgs() interface{} {
	return dataset.NewDatasetServiceBatchGetDatasetVersionsArgs()
}

func newDatasetServiceBatchGetDatasetVersionsResult() interface{} {
	return dataset.NewDatasetServiceBatchGetDatasetVersionsResult()
}

func getDatasetSchemaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceGetDatasetSchemaArgs)
	realResult := result.(*dataset.DatasetServiceGetDatasetSchemaResult)
	success, err := handler.(dataset.DatasetService).GetDatasetSchema(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceGetDatasetSchemaArgs() interface{} {
	return dataset.NewDatasetServiceGetDatasetSchemaArgs()
}

func newDatasetServiceGetDatasetSchemaResult() interface{} {
	return dataset.NewDatasetServiceGetDatasetSchemaResult()
}

func updateDatasetSchemaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceUpdateDatasetSchemaArgs)
	realResult := result.(*dataset.DatasetServiceUpdateDatasetSchemaResult)
	success, err := handler.(dataset.DatasetService).UpdateDatasetSchema(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceUpdateDatasetSchemaArgs() interface{} {
	return dataset.NewDatasetServiceUpdateDatasetSchemaArgs()
}

func newDatasetServiceUpdateDatasetSchemaResult() interface{} {
	return dataset.NewDatasetServiceUpdateDatasetSchemaResult()
}

func batchCreateDatasetItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceBatchCreateDatasetItemsArgs)
	realResult := result.(*dataset.DatasetServiceBatchCreateDatasetItemsResult)
	success, err := handler.(dataset.DatasetService).BatchCreateDatasetItems(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceBatchCreateDatasetItemsArgs() interface{} {
	return dataset.NewDatasetServiceBatchCreateDatasetItemsArgs()
}

func newDatasetServiceBatchCreateDatasetItemsResult() interface{} {
	return dataset.NewDatasetServiceBatchCreateDatasetItemsResult()
}

func updateDatasetItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceUpdateDatasetItemArgs)
	realResult := result.(*dataset.DatasetServiceUpdateDatasetItemResult)
	success, err := handler.(dataset.DatasetService).UpdateDatasetItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceUpdateDatasetItemArgs() interface{} {
	return dataset.NewDatasetServiceUpdateDatasetItemArgs()
}

func newDatasetServiceUpdateDatasetItemResult() interface{} {
	return dataset.NewDatasetServiceUpdateDatasetItemResult()
}

func deleteDatasetItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceDeleteDatasetItemArgs)
	realResult := result.(*dataset.DatasetServiceDeleteDatasetItemResult)
	success, err := handler.(dataset.DatasetService).DeleteDatasetItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceDeleteDatasetItemArgs() interface{} {
	return dataset.NewDatasetServiceDeleteDatasetItemArgs()
}

func newDatasetServiceDeleteDatasetItemResult() interface{} {
	return dataset.NewDatasetServiceDeleteDatasetItemResult()
}

func batchDeleteDatasetItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceBatchDeleteDatasetItemsArgs)
	realResult := result.(*dataset.DatasetServiceBatchDeleteDatasetItemsResult)
	success, err := handler.(dataset.DatasetService).BatchDeleteDatasetItems(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceBatchDeleteDatasetItemsArgs() interface{} {
	return dataset.NewDatasetServiceBatchDeleteDatasetItemsArgs()
}

func newDatasetServiceBatchDeleteDatasetItemsResult() interface{} {
	return dataset.NewDatasetServiceBatchDeleteDatasetItemsResult()
}

func listDatasetItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceListDatasetItemsArgs)
	realResult := result.(*dataset.DatasetServiceListDatasetItemsResult)
	success, err := handler.(dataset.DatasetService).ListDatasetItems(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceListDatasetItemsArgs() interface{} {
	return dataset.NewDatasetServiceListDatasetItemsArgs()
}

func newDatasetServiceListDatasetItemsResult() interface{} {
	return dataset.NewDatasetServiceListDatasetItemsResult()
}

func listDatasetItemsByVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceListDatasetItemsByVersionArgs)
	realResult := result.(*dataset.DatasetServiceListDatasetItemsByVersionResult)
	success, err := handler.(dataset.DatasetService).ListDatasetItemsByVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceListDatasetItemsByVersionArgs() interface{} {
	return dataset.NewDatasetServiceListDatasetItemsByVersionArgs()
}

func newDatasetServiceListDatasetItemsByVersionResult() interface{} {
	return dataset.NewDatasetServiceListDatasetItemsByVersionResult()
}

func getDatasetItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceGetDatasetItemArgs)
	realResult := result.(*dataset.DatasetServiceGetDatasetItemResult)
	success, err := handler.(dataset.DatasetService).GetDatasetItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceGetDatasetItemArgs() interface{} {
	return dataset.NewDatasetServiceGetDatasetItemArgs()
}

func newDatasetServiceGetDatasetItemResult() interface{} {
	return dataset.NewDatasetServiceGetDatasetItemResult()
}

func batchGetDatasetItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceBatchGetDatasetItemsArgs)
	realResult := result.(*dataset.DatasetServiceBatchGetDatasetItemsResult)
	success, err := handler.(dataset.DatasetService).BatchGetDatasetItems(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceBatchGetDatasetItemsArgs() interface{} {
	return dataset.NewDatasetServiceBatchGetDatasetItemsArgs()
}

func newDatasetServiceBatchGetDatasetItemsResult() interface{} {
	return dataset.NewDatasetServiceBatchGetDatasetItemsResult()
}

func batchGetDatasetItemsByVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceBatchGetDatasetItemsByVersionArgs)
	realResult := result.(*dataset.DatasetServiceBatchGetDatasetItemsByVersionResult)
	success, err := handler.(dataset.DatasetService).BatchGetDatasetItemsByVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceBatchGetDatasetItemsByVersionArgs() interface{} {
	return dataset.NewDatasetServiceBatchGetDatasetItemsByVersionArgs()
}

func newDatasetServiceBatchGetDatasetItemsByVersionResult() interface{} {
	return dataset.NewDatasetServiceBatchGetDatasetItemsByVersionResult()
}

func clearDatasetItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*dataset.DatasetServiceClearDatasetItemArgs)
	realResult := result.(*dataset.DatasetServiceClearDatasetItemResult)
	success, err := handler.(dataset.DatasetService).ClearDatasetItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newDatasetServiceClearDatasetItemArgs() interface{} {
	return dataset.NewDatasetServiceClearDatasetItemArgs()
}

func newDatasetServiceClearDatasetItemResult() interface{} {
	return dataset.NewDatasetServiceClearDatasetItemResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) CreateDataset(ctx context.Context, req *dataset.CreateDatasetRequest) (r *dataset.CreateDatasetResponse, err error) {
	var _args dataset.DatasetServiceCreateDatasetArgs
	_args.Req = req
	var _result dataset.DatasetServiceCreateDatasetResult
	if err = p.c.Call(ctx, "CreateDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDataset(ctx context.Context, req *dataset.UpdateDatasetRequest) (r *dataset.UpdateDatasetResponse, err error) {
	var _args dataset.DatasetServiceUpdateDatasetArgs
	_args.Req = req
	var _result dataset.DatasetServiceUpdateDatasetResult
	if err = p.c.Call(ctx, "UpdateDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDataset(ctx context.Context, req *dataset.DeleteDatasetRequest) (r *dataset.DeleteDatasetResponse, err error) {
	var _args dataset.DatasetServiceDeleteDatasetArgs
	_args.Req = req
	var _result dataset.DatasetServiceDeleteDatasetResult
	if err = p.c.Call(ctx, "DeleteDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDatasets(ctx context.Context, req *dataset.ListDatasetsRequest) (r *dataset.ListDatasetsResponse, err error) {
	var _args dataset.DatasetServiceListDatasetsArgs
	_args.Req = req
	var _result dataset.DatasetServiceListDatasetsResult
	if err = p.c.Call(ctx, "ListDatasets", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDataset(ctx context.Context, req *dataset.GetDatasetRequest) (r *dataset.GetDatasetResponse, err error) {
	var _args dataset.DatasetServiceGetDatasetArgs
	_args.Req = req
	var _result dataset.DatasetServiceGetDatasetResult
	if err = p.c.Call(ctx, "GetDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetDatasets(ctx context.Context, req *dataset.BatchGetDatasetsRequest) (r *dataset.BatchGetDatasetsResponse, err error) {
	var _args dataset.DatasetServiceBatchGetDatasetsArgs
	_args.Req = req
	var _result dataset.DatasetServiceBatchGetDatasetsResult
	if err = p.c.Call(ctx, "BatchGetDatasets", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportDataset(ctx context.Context, req *dataset.ImportDatasetRequest) (r *dataset.ImportDatasetResponse, err error) {
	var _args dataset.DatasetServiceImportDatasetArgs
	_args.Req = req
	var _result dataset.DatasetServiceImportDatasetResult
	if err = p.c.Call(ctx, "ImportDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDatasetIOJob(ctx context.Context, req *dataset.GetDatasetIOJobRequest) (r *dataset.GetDatasetIOJobResponse, err error) {
	var _args dataset.DatasetServiceGetDatasetIOJobArgs
	_args.Req = req
	var _result dataset.DatasetServiceGetDatasetIOJobResult
	if err = p.c.Call(ctx, "GetDatasetIOJob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDatasetIOJobs(ctx context.Context, req *dataset.ListDatasetIOJobsRequest) (r *dataset.ListDatasetIOJobsResponse, err error) {
	var _args dataset.DatasetServiceListDatasetIOJobsArgs
	_args.Req = req
	var _result dataset.DatasetServiceListDatasetIOJobsResult
	if err = p.c.Call(ctx, "ListDatasetIOJobs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDatasetVersion(ctx context.Context, req *dataset.CreateDatasetVersionRequest) (r *dataset.CreateDatasetVersionResponse, err error) {
	var _args dataset.DatasetServiceCreateDatasetVersionArgs
	_args.Req = req
	var _result dataset.DatasetServiceCreateDatasetVersionResult
	if err = p.c.Call(ctx, "CreateDatasetVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDatasetVersions(ctx context.Context, req *dataset.ListDatasetVersionsRequest) (r *dataset.ListDatasetVersionsResponse, err error) {
	var _args dataset.DatasetServiceListDatasetVersionsArgs
	_args.Req = req
	var _result dataset.DatasetServiceListDatasetVersionsResult
	if err = p.c.Call(ctx, "ListDatasetVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDatasetVersion(ctx context.Context, req *dataset.GetDatasetVersionRequest) (r *dataset.GetDatasetVersionResponse, err error) {
	var _args dataset.DatasetServiceGetDatasetVersionArgs
	_args.Req = req
	var _result dataset.DatasetServiceGetDatasetVersionResult
	if err = p.c.Call(ctx, "GetDatasetVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetDatasetVersions(ctx context.Context, req *dataset.BatchGetDatasetVersionsRequest) (r *dataset.BatchGetDatasetVersionsResponse, err error) {
	var _args dataset.DatasetServiceBatchGetDatasetVersionsArgs
	_args.Req = req
	var _result dataset.DatasetServiceBatchGetDatasetVersionsResult
	if err = p.c.Call(ctx, "BatchGetDatasetVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDatasetSchema(ctx context.Context, req *dataset.GetDatasetSchemaRequest) (r *dataset.GetDatasetSchemaResponse, err error) {
	var _args dataset.DatasetServiceGetDatasetSchemaArgs
	_args.Req = req
	var _result dataset.DatasetServiceGetDatasetSchemaResult
	if err = p.c.Call(ctx, "GetDatasetSchema", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDatasetSchema(ctx context.Context, req *dataset.UpdateDatasetSchemaRequest) (r *dataset.UpdateDatasetSchemaResponse, err error) {
	var _args dataset.DatasetServiceUpdateDatasetSchemaArgs
	_args.Req = req
	var _result dataset.DatasetServiceUpdateDatasetSchemaResult
	if err = p.c.Call(ctx, "UpdateDatasetSchema", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchCreateDatasetItems(ctx context.Context, req *dataset.BatchCreateDatasetItemsRequest) (r *dataset.BatchCreateDatasetItemsResponse, err error) {
	var _args dataset.DatasetServiceBatchCreateDatasetItemsArgs
	_args.Req = req
	var _result dataset.DatasetServiceBatchCreateDatasetItemsResult
	if err = p.c.Call(ctx, "BatchCreateDatasetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDatasetItem(ctx context.Context, req *dataset.UpdateDatasetItemRequest) (r *dataset.UpdateDatasetItemResponse, err error) {
	var _args dataset.DatasetServiceUpdateDatasetItemArgs
	_args.Req = req
	var _result dataset.DatasetServiceUpdateDatasetItemResult
	if err = p.c.Call(ctx, "UpdateDatasetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDatasetItem(ctx context.Context, req *dataset.DeleteDatasetItemRequest) (r *dataset.DeleteDatasetItemResponse, err error) {
	var _args dataset.DatasetServiceDeleteDatasetItemArgs
	_args.Req = req
	var _result dataset.DatasetServiceDeleteDatasetItemResult
	if err = p.c.Call(ctx, "DeleteDatasetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchDeleteDatasetItems(ctx context.Context, req *dataset.BatchDeleteDatasetItemsRequest) (r *dataset.BatchDeleteDatasetItemsResponse, err error) {
	var _args dataset.DatasetServiceBatchDeleteDatasetItemsArgs
	_args.Req = req
	var _result dataset.DatasetServiceBatchDeleteDatasetItemsResult
	if err = p.c.Call(ctx, "BatchDeleteDatasetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDatasetItems(ctx context.Context, req *dataset.ListDatasetItemsRequest) (r *dataset.ListDatasetItemsResponse, err error) {
	var _args dataset.DatasetServiceListDatasetItemsArgs
	_args.Req = req
	var _result dataset.DatasetServiceListDatasetItemsResult
	if err = p.c.Call(ctx, "ListDatasetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDatasetItemsByVersion(ctx context.Context, req *dataset.ListDatasetItemsByVersionRequest) (r *dataset.ListDatasetItemsByVersionResponse, err error) {
	var _args dataset.DatasetServiceListDatasetItemsByVersionArgs
	_args.Req = req
	var _result dataset.DatasetServiceListDatasetItemsByVersionResult
	if err = p.c.Call(ctx, "ListDatasetItemsByVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDatasetItem(ctx context.Context, req *dataset.GetDatasetItemRequest) (r *dataset.GetDatasetItemResponse, err error) {
	var _args dataset.DatasetServiceGetDatasetItemArgs
	_args.Req = req
	var _result dataset.DatasetServiceGetDatasetItemResult
	if err = p.c.Call(ctx, "GetDatasetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetDatasetItems(ctx context.Context, req *dataset.BatchGetDatasetItemsRequest) (r *dataset.BatchGetDatasetItemsResponse, err error) {
	var _args dataset.DatasetServiceBatchGetDatasetItemsArgs
	_args.Req = req
	var _result dataset.DatasetServiceBatchGetDatasetItemsResult
	if err = p.c.Call(ctx, "BatchGetDatasetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetDatasetItemsByVersion(ctx context.Context, req *dataset.BatchGetDatasetItemsByVersionRequest) (r *dataset.BatchGetDatasetItemsByVersionResponse, err error) {
	var _args dataset.DatasetServiceBatchGetDatasetItemsByVersionArgs
	_args.Req = req
	var _result dataset.DatasetServiceBatchGetDatasetItemsByVersionResult
	if err = p.c.Call(ctx, "BatchGetDatasetItemsByVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ClearDatasetItem(ctx context.Context, req *dataset.ClearDatasetItemRequest) (r *dataset.ClearDatasetItemResponse, err error) {
	var _args dataset.DatasetServiceClearDatasetItemArgs
	_args.Req = req
	var _result dataset.DatasetServiceClearDatasetItemResult
	if err = p.c.Call(ctx, "ClearDatasetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
