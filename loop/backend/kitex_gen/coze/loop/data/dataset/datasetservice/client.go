// Code generated by Kitex v0.13.1. DO NOT EDIT.

package datasetservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	dataset "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/dataset"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateDataset(ctx context.Context, req *dataset.CreateDatasetRequest, callOptions ...callopt.Option) (r *dataset.CreateDatasetResponse, err error)
	UpdateDataset(ctx context.Context, req *dataset.UpdateDatasetRequest, callOptions ...callopt.Option) (r *dataset.UpdateDatasetResponse, err error)
	DeleteDataset(ctx context.Context, req *dataset.DeleteDatasetRequest, callOptions ...callopt.Option) (r *dataset.DeleteDatasetResponse, err error)
	ListDatasets(ctx context.Context, req *dataset.ListDatasetsRequest, callOptions ...callopt.Option) (r *dataset.ListDatasetsResponse, err error)
	GetDataset(ctx context.Context, req *dataset.GetDatasetRequest, callOptions ...callopt.Option) (r *dataset.GetDatasetResponse, err error)
	BatchGetDatasets(ctx context.Context, req *dataset.BatchGetDatasetsRequest, callOptions ...callopt.Option) (r *dataset.BatchGetDatasetsResponse, err error)
	ImportDataset(ctx context.Context, req *dataset.ImportDatasetRequest, callOptions ...callopt.Option) (r *dataset.ImportDatasetResponse, err error)
	GetDatasetIOJob(ctx context.Context, req *dataset.GetDatasetIOJobRequest, callOptions ...callopt.Option) (r *dataset.GetDatasetIOJobResponse, err error)
	ListDatasetIOJobs(ctx context.Context, req *dataset.ListDatasetIOJobsRequest, callOptions ...callopt.Option) (r *dataset.ListDatasetIOJobsResponse, err error)
	CreateDatasetVersion(ctx context.Context, req *dataset.CreateDatasetVersionRequest, callOptions ...callopt.Option) (r *dataset.CreateDatasetVersionResponse, err error)
	ListDatasetVersions(ctx context.Context, req *dataset.ListDatasetVersionsRequest, callOptions ...callopt.Option) (r *dataset.ListDatasetVersionsResponse, err error)
	GetDatasetVersion(ctx context.Context, req *dataset.GetDatasetVersionRequest, callOptions ...callopt.Option) (r *dataset.GetDatasetVersionResponse, err error)
	BatchGetDatasetVersions(ctx context.Context, req *dataset.BatchGetDatasetVersionsRequest, callOptions ...callopt.Option) (r *dataset.BatchGetDatasetVersionsResponse, err error)
	GetDatasetSchema(ctx context.Context, req *dataset.GetDatasetSchemaRequest, callOptions ...callopt.Option) (r *dataset.GetDatasetSchemaResponse, err error)
	UpdateDatasetSchema(ctx context.Context, req *dataset.UpdateDatasetSchemaRequest, callOptions ...callopt.Option) (r *dataset.UpdateDatasetSchemaResponse, err error)
	BatchCreateDatasetItems(ctx context.Context, req *dataset.BatchCreateDatasetItemsRequest, callOptions ...callopt.Option) (r *dataset.BatchCreateDatasetItemsResponse, err error)
	UpdateDatasetItem(ctx context.Context, req *dataset.UpdateDatasetItemRequest, callOptions ...callopt.Option) (r *dataset.UpdateDatasetItemResponse, err error)
	DeleteDatasetItem(ctx context.Context, req *dataset.DeleteDatasetItemRequest, callOptions ...callopt.Option) (r *dataset.DeleteDatasetItemResponse, err error)
	BatchDeleteDatasetItems(ctx context.Context, req *dataset.BatchDeleteDatasetItemsRequest, callOptions ...callopt.Option) (r *dataset.BatchDeleteDatasetItemsResponse, err error)
	ListDatasetItems(ctx context.Context, req *dataset.ListDatasetItemsRequest, callOptions ...callopt.Option) (r *dataset.ListDatasetItemsResponse, err error)
	ListDatasetItemsByVersion(ctx context.Context, req *dataset.ListDatasetItemsByVersionRequest, callOptions ...callopt.Option) (r *dataset.ListDatasetItemsByVersionResponse, err error)
	GetDatasetItem(ctx context.Context, req *dataset.GetDatasetItemRequest, callOptions ...callopt.Option) (r *dataset.GetDatasetItemResponse, err error)
	BatchGetDatasetItems(ctx context.Context, req *dataset.BatchGetDatasetItemsRequest, callOptions ...callopt.Option) (r *dataset.BatchGetDatasetItemsResponse, err error)
	BatchGetDatasetItemsByVersion(ctx context.Context, req *dataset.BatchGetDatasetItemsByVersionRequest, callOptions ...callopt.Option) (r *dataset.BatchGetDatasetItemsByVersionResponse, err error)
	ClearDatasetItem(ctx context.Context, req *dataset.ClearDatasetItemRequest, callOptions ...callopt.Option) (r *dataset.ClearDatasetItemResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kDatasetServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kDatasetServiceClient struct {
	*kClient
}

func (p *kDatasetServiceClient) CreateDataset(ctx context.Context, req *dataset.CreateDatasetRequest, callOptions ...callopt.Option) (r *dataset.CreateDatasetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateDataset(ctx, req)
}

func (p *kDatasetServiceClient) UpdateDataset(ctx context.Context, req *dataset.UpdateDatasetRequest, callOptions ...callopt.Option) (r *dataset.UpdateDatasetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateDataset(ctx, req)
}

func (p *kDatasetServiceClient) DeleteDataset(ctx context.Context, req *dataset.DeleteDatasetRequest, callOptions ...callopt.Option) (r *dataset.DeleteDatasetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteDataset(ctx, req)
}

func (p *kDatasetServiceClient) ListDatasets(ctx context.Context, req *dataset.ListDatasetsRequest, callOptions ...callopt.Option) (r *dataset.ListDatasetsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListDatasets(ctx, req)
}

func (p *kDatasetServiceClient) GetDataset(ctx context.Context, req *dataset.GetDatasetRequest, callOptions ...callopt.Option) (r *dataset.GetDatasetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDataset(ctx, req)
}

func (p *kDatasetServiceClient) BatchGetDatasets(ctx context.Context, req *dataset.BatchGetDatasetsRequest, callOptions ...callopt.Option) (r *dataset.BatchGetDatasetsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetDatasets(ctx, req)
}

func (p *kDatasetServiceClient) ImportDataset(ctx context.Context, req *dataset.ImportDatasetRequest, callOptions ...callopt.Option) (r *dataset.ImportDatasetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ImportDataset(ctx, req)
}

func (p *kDatasetServiceClient) GetDatasetIOJob(ctx context.Context, req *dataset.GetDatasetIOJobRequest, callOptions ...callopt.Option) (r *dataset.GetDatasetIOJobResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDatasetIOJob(ctx, req)
}

func (p *kDatasetServiceClient) ListDatasetIOJobs(ctx context.Context, req *dataset.ListDatasetIOJobsRequest, callOptions ...callopt.Option) (r *dataset.ListDatasetIOJobsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListDatasetIOJobs(ctx, req)
}

func (p *kDatasetServiceClient) CreateDatasetVersion(ctx context.Context, req *dataset.CreateDatasetVersionRequest, callOptions ...callopt.Option) (r *dataset.CreateDatasetVersionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateDatasetVersion(ctx, req)
}

func (p *kDatasetServiceClient) ListDatasetVersions(ctx context.Context, req *dataset.ListDatasetVersionsRequest, callOptions ...callopt.Option) (r *dataset.ListDatasetVersionsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListDatasetVersions(ctx, req)
}

func (p *kDatasetServiceClient) GetDatasetVersion(ctx context.Context, req *dataset.GetDatasetVersionRequest, callOptions ...callopt.Option) (r *dataset.GetDatasetVersionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDatasetVersion(ctx, req)
}

func (p *kDatasetServiceClient) BatchGetDatasetVersions(ctx context.Context, req *dataset.BatchGetDatasetVersionsRequest, callOptions ...callopt.Option) (r *dataset.BatchGetDatasetVersionsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetDatasetVersions(ctx, req)
}

func (p *kDatasetServiceClient) GetDatasetSchema(ctx context.Context, req *dataset.GetDatasetSchemaRequest, callOptions ...callopt.Option) (r *dataset.GetDatasetSchemaResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDatasetSchema(ctx, req)
}

func (p *kDatasetServiceClient) UpdateDatasetSchema(ctx context.Context, req *dataset.UpdateDatasetSchemaRequest, callOptions ...callopt.Option) (r *dataset.UpdateDatasetSchemaResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateDatasetSchema(ctx, req)
}

func (p *kDatasetServiceClient) BatchCreateDatasetItems(ctx context.Context, req *dataset.BatchCreateDatasetItemsRequest, callOptions ...callopt.Option) (r *dataset.BatchCreateDatasetItemsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchCreateDatasetItems(ctx, req)
}

func (p *kDatasetServiceClient) UpdateDatasetItem(ctx context.Context, req *dataset.UpdateDatasetItemRequest, callOptions ...callopt.Option) (r *dataset.UpdateDatasetItemResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateDatasetItem(ctx, req)
}

func (p *kDatasetServiceClient) DeleteDatasetItem(ctx context.Context, req *dataset.DeleteDatasetItemRequest, callOptions ...callopt.Option) (r *dataset.DeleteDatasetItemResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteDatasetItem(ctx, req)
}

func (p *kDatasetServiceClient) BatchDeleteDatasetItems(ctx context.Context, req *dataset.BatchDeleteDatasetItemsRequest, callOptions ...callopt.Option) (r *dataset.BatchDeleteDatasetItemsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchDeleteDatasetItems(ctx, req)
}

func (p *kDatasetServiceClient) ListDatasetItems(ctx context.Context, req *dataset.ListDatasetItemsRequest, callOptions ...callopt.Option) (r *dataset.ListDatasetItemsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListDatasetItems(ctx, req)
}

func (p *kDatasetServiceClient) ListDatasetItemsByVersion(ctx context.Context, req *dataset.ListDatasetItemsByVersionRequest, callOptions ...callopt.Option) (r *dataset.ListDatasetItemsByVersionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListDatasetItemsByVersion(ctx, req)
}

func (p *kDatasetServiceClient) GetDatasetItem(ctx context.Context, req *dataset.GetDatasetItemRequest, callOptions ...callopt.Option) (r *dataset.GetDatasetItemResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDatasetItem(ctx, req)
}

func (p *kDatasetServiceClient) BatchGetDatasetItems(ctx context.Context, req *dataset.BatchGetDatasetItemsRequest, callOptions ...callopt.Option) (r *dataset.BatchGetDatasetItemsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetDatasetItems(ctx, req)
}

func (p *kDatasetServiceClient) BatchGetDatasetItemsByVersion(ctx context.Context, req *dataset.BatchGetDatasetItemsByVersionRequest, callOptions ...callopt.Option) (r *dataset.BatchGetDatasetItemsByVersionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetDatasetItemsByVersion(ctx, req)
}

func (p *kDatasetServiceClient) ClearDatasetItem(ctx context.Context, req *dataset.ClearDatasetItemRequest, callOptions ...callopt.Option) (r *dataset.ClearDatasetItemResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ClearDatasetItem(ctx, req)
}
