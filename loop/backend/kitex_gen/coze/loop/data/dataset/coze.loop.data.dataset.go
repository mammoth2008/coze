// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package dataset

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/domain/dataset"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/domain/dataset_job"
	"strings"
)

type CreateDatasetRequest struct {
	WorkspaceID   int64                      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	AppID         *int32                     `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,string,omitempty" query:"app_id"`
	Name          string                     `thrift:"name,3,required" frugal:"3,required,string" form:"name,required" json:"name,required" query:"name,required"`
	Description   *string                    `thrift:"description,4,optional" frugal:"4,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Category      *dataset.DatasetCategory   `thrift:"category,5,optional" frugal:"5,optional,DatasetCategory" form:"category" json:"category,omitempty" query:"category"`
	BizCategory   *string                    `thrift:"biz_category,6,optional" frugal:"6,optional,string" form:"biz_category" json:"biz_category,omitempty" query:"biz_category"`
	Fields        []*dataset.FieldSchema     `thrift:"fields,7,optional" frugal:"7,optional,list<dataset.FieldSchema>" form:"fields" json:"fields,omitempty" query:"fields"`
	SecurityLevel *dataset.SecurityLevel     `thrift:"security_level,15,optional" frugal:"15,optional,SecurityLevel" form:"security_level" json:"security_level,omitempty" query:"security_level"`
	Visibility    *dataset.DatasetVisibility `thrift:"visibility,16,optional" frugal:"16,optional,DatasetVisibility" form:"visibility" json:"visibility,omitempty" query:"visibility"`
	Spec          *dataset.DatasetSpec       `thrift:"spec,17,optional" frugal:"17,optional,dataset.DatasetSpec" form:"spec" json:"spec,omitempty" query:"spec"`
	Features      *dataset.DatasetFeatures   `thrift:"features,18,optional" frugal:"18,optional,dataset.DatasetFeatures" form:"features" json:"features,omitempty" query:"features"`
	Base          *base.Base                 `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateDatasetRequest() *CreateDatasetRequest {
	return &CreateDatasetRequest{}
}

func (p *CreateDatasetRequest) InitDefault() {
}

func (p *CreateDatasetRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var CreateDatasetRequest_AppID_DEFAULT int32

func (p *CreateDatasetRequest) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return CreateDatasetRequest_AppID_DEFAULT
	}
	return *p.AppID
}

func (p *CreateDatasetRequest) GetName() (v string) {
	if p != nil {
		return p.Name
	}
	return
}

var CreateDatasetRequest_Description_DEFAULT string

func (p *CreateDatasetRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CreateDatasetRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateDatasetRequest_Category_DEFAULT dataset.DatasetCategory

func (p *CreateDatasetRequest) GetCategory() (v dataset.DatasetCategory) {
	if p == nil {
		return
	}
	if !p.IsSetCategory() {
		return CreateDatasetRequest_Category_DEFAULT
	}
	return *p.Category
}

var CreateDatasetRequest_BizCategory_DEFAULT string

func (p *CreateDatasetRequest) GetBizCategory() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetBizCategory() {
		return CreateDatasetRequest_BizCategory_DEFAULT
	}
	return *p.BizCategory
}

var CreateDatasetRequest_Fields_DEFAULT []*dataset.FieldSchema

func (p *CreateDatasetRequest) GetFields() (v []*dataset.FieldSchema) {
	if p == nil {
		return
	}
	if !p.IsSetFields() {
		return CreateDatasetRequest_Fields_DEFAULT
	}
	return p.Fields
}

var CreateDatasetRequest_SecurityLevel_DEFAULT dataset.SecurityLevel

func (p *CreateDatasetRequest) GetSecurityLevel() (v dataset.SecurityLevel) {
	if p == nil {
		return
	}
	if !p.IsSetSecurityLevel() {
		return CreateDatasetRequest_SecurityLevel_DEFAULT
	}
	return *p.SecurityLevel
}

var CreateDatasetRequest_Visibility_DEFAULT dataset.DatasetVisibility

func (p *CreateDatasetRequest) GetVisibility() (v dataset.DatasetVisibility) {
	if p == nil {
		return
	}
	if !p.IsSetVisibility() {
		return CreateDatasetRequest_Visibility_DEFAULT
	}
	return *p.Visibility
}

var CreateDatasetRequest_Spec_DEFAULT *dataset.DatasetSpec

func (p *CreateDatasetRequest) GetSpec() (v *dataset.DatasetSpec) {
	if p == nil {
		return
	}
	if !p.IsSetSpec() {
		return CreateDatasetRequest_Spec_DEFAULT
	}
	return p.Spec
}

var CreateDatasetRequest_Features_DEFAULT *dataset.DatasetFeatures

func (p *CreateDatasetRequest) GetFeatures() (v *dataset.DatasetFeatures) {
	if p == nil {
		return
	}
	if !p.IsSetFeatures() {
		return CreateDatasetRequest_Features_DEFAULT
	}
	return p.Features
}

var CreateDatasetRequest_Base_DEFAULT *base.Base

func (p *CreateDatasetRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateDatasetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateDatasetRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CreateDatasetRequest) SetAppID(val *int32) {
	p.AppID = val
}
func (p *CreateDatasetRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateDatasetRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateDatasetRequest) SetCategory(val *dataset.DatasetCategory) {
	p.Category = val
}
func (p *CreateDatasetRequest) SetBizCategory(val *string) {
	p.BizCategory = val
}
func (p *CreateDatasetRequest) SetFields(val []*dataset.FieldSchema) {
	p.Fields = val
}
func (p *CreateDatasetRequest) SetSecurityLevel(val *dataset.SecurityLevel) {
	p.SecurityLevel = val
}
func (p *CreateDatasetRequest) SetVisibility(val *dataset.DatasetVisibility) {
	p.Visibility = val
}
func (p *CreateDatasetRequest) SetSpec(val *dataset.DatasetSpec) {
	p.Spec = val
}
func (p *CreateDatasetRequest) SetFeatures(val *dataset.DatasetFeatures) {
	p.Features = val
}
func (p *CreateDatasetRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateDatasetRequest = map[int16]string{
	1:   "workspace_id",
	2:   "app_id",
	3:   "name",
	4:   "description",
	5:   "category",
	6:   "biz_category",
	7:   "fields",
	15:  "security_level",
	16:  "visibility",
	17:  "spec",
	18:  "features",
	255: "Base",
}

func (p *CreateDatasetRequest) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *CreateDatasetRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateDatasetRequest) IsSetCategory() bool {
	return p.Category != nil
}

func (p *CreateDatasetRequest) IsSetBizCategory() bool {
	return p.BizCategory != nil
}

func (p *CreateDatasetRequest) IsSetFields() bool {
	return p.Fields != nil
}

func (p *CreateDatasetRequest) IsSetSecurityLevel() bool {
	return p.SecurityLevel != nil
}

func (p *CreateDatasetRequest) IsSetVisibility() bool {
	return p.Visibility != nil
}

func (p *CreateDatasetRequest) IsSetSpec() bool {
	return p.Spec != nil
}

func (p *CreateDatasetRequest) IsSetFeatures() bool {
	return p.Features != nil
}

func (p *CreateDatasetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateDatasetRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateDatasetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateDatasetRequest[fieldId]))
}

func (p *CreateDatasetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateDatasetRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *CreateDatasetRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateDatasetRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CreateDatasetRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *dataset.DatasetCategory
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := dataset.DatasetCategory(v)
		_field = &tmp
	}
	p.Category = _field
	return nil
}
func (p *CreateDatasetRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BizCategory = _field
	return nil
}
func (p *CreateDatasetRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.FieldSchema, 0, size)
	values := make([]dataset.FieldSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Fields = _field
	return nil
}
func (p *CreateDatasetRequest) ReadField15(iprot thrift.TProtocol) error {

	var _field *dataset.SecurityLevel
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := dataset.SecurityLevel(v)
		_field = &tmp
	}
	p.SecurityLevel = _field
	return nil
}
func (p *CreateDatasetRequest) ReadField16(iprot thrift.TProtocol) error {

	var _field *dataset.DatasetVisibility
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := dataset.DatasetVisibility(v)
		_field = &tmp
	}
	p.Visibility = _field
	return nil
}
func (p *CreateDatasetRequest) ReadField17(iprot thrift.TProtocol) error {
	_field := dataset.NewDatasetSpec()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Spec = _field
	return nil
}
func (p *CreateDatasetRequest) ReadField18(iprot thrift.TProtocol) error {
	_field := dataset.NewDatasetFeatures()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Features = _field
	return nil
}
func (p *CreateDatasetRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateDatasetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDatasetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateDatasetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateDatasetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateDatasetRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateDatasetRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateDatasetRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategory() {
		if err = oprot.WriteFieldBegin("category", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Category)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *CreateDatasetRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizCategory() {
		if err = oprot.WriteFieldBegin("biz_category", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BizCategory); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *CreateDatasetRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err = oprot.WriteFieldBegin("fields", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
			return err
		}
		for _, v := range p.Fields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *CreateDatasetRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecurityLevel() {
		if err = oprot.WriteFieldBegin("security_level", thrift.I32, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SecurityLevel)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}
func (p *CreateDatasetRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetVisibility() {
		if err = oprot.WriteFieldBegin("visibility", thrift.I32, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Visibility)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}
func (p *CreateDatasetRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpec() {
		if err = oprot.WriteFieldBegin("spec", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Spec.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}
func (p *CreateDatasetRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeatures() {
		if err = oprot.WriteFieldBegin("features", thrift.STRUCT, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Features.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}
func (p *CreateDatasetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateDatasetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDatasetRequest(%+v)", *p)

}

func (p *CreateDatasetRequest) DeepEqual(ano *CreateDatasetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.Category) {
		return false
	}
	if !p.Field6DeepEqual(ano.BizCategory) {
		return false
	}
	if !p.Field7DeepEqual(ano.Fields) {
		return false
	}
	if !p.Field15DeepEqual(ano.SecurityLevel) {
		return false
	}
	if !p.Field16DeepEqual(ano.Visibility) {
		return false
	}
	if !p.Field17DeepEqual(ano.Spec) {
		return false
	}
	if !p.Field18DeepEqual(ano.Features) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateDatasetRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CreateDatasetRequest) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *CreateDatasetRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateDatasetRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateDatasetRequest) Field5DeepEqual(src *dataset.DatasetCategory) bool {

	if p.Category == src {
		return true
	} else if p.Category == nil || src == nil {
		return false
	}
	if *p.Category != *src {
		return false
	}
	return true
}
func (p *CreateDatasetRequest) Field6DeepEqual(src *string) bool {

	if p.BizCategory == src {
		return true
	} else if p.BizCategory == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BizCategory, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateDatasetRequest) Field7DeepEqual(src []*dataset.FieldSchema) bool {

	if len(p.Fields) != len(src) {
		return false
	}
	for i, v := range p.Fields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateDatasetRequest) Field15DeepEqual(src *dataset.SecurityLevel) bool {

	if p.SecurityLevel == src {
		return true
	} else if p.SecurityLevel == nil || src == nil {
		return false
	}
	if *p.SecurityLevel != *src {
		return false
	}
	return true
}
func (p *CreateDatasetRequest) Field16DeepEqual(src *dataset.DatasetVisibility) bool {

	if p.Visibility == src {
		return true
	} else if p.Visibility == nil || src == nil {
		return false
	}
	if *p.Visibility != *src {
		return false
	}
	return true
}
func (p *CreateDatasetRequest) Field17DeepEqual(src *dataset.DatasetSpec) bool {

	if !p.Spec.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateDatasetRequest) Field18DeepEqual(src *dataset.DatasetFeatures) bool {

	if !p.Features.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateDatasetRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateDatasetResponse struct {
	DatasetID *int64         `thrift:"dataset_id,1,optional" frugal:"1,optional,i64" json:"dataset_id" form:"dataset_id" query:"dataset_id"`
	BaseResp  *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateDatasetResponse() *CreateDatasetResponse {
	return &CreateDatasetResponse{}
}

func (p *CreateDatasetResponse) InitDefault() {
}

var CreateDatasetResponse_DatasetID_DEFAULT int64

func (p *CreateDatasetResponse) GetDatasetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetDatasetID() {
		return CreateDatasetResponse_DatasetID_DEFAULT
	}
	return *p.DatasetID
}

var CreateDatasetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateDatasetResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateDatasetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateDatasetResponse) SetDatasetID(val *int64) {
	p.DatasetID = val
}
func (p *CreateDatasetResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateDatasetResponse = map[int16]string{
	1:   "dataset_id",
	255: "BaseResp",
}

func (p *CreateDatasetResponse) IsSetDatasetID() bool {
	return p.DatasetID != nil
}

func (p *CreateDatasetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateDatasetResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateDatasetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateDatasetResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DatasetID = _field
	return nil
}
func (p *CreateDatasetResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateDatasetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDatasetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateDatasetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatasetID() {
		if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DatasetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateDatasetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateDatasetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDatasetResponse(%+v)", *p)

}

func (p *CreateDatasetResponse) DeepEqual(ano *CreateDatasetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateDatasetResponse) Field1DeepEqual(src *int64) bool {

	if p.DatasetID == src {
		return true
	} else if p.DatasetID == nil || src == nil {
		return false
	}
	if *p.DatasetID != *src {
		return false
	}
	return true
}
func (p *CreateDatasetResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateDatasetRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64      `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	Name        *string    `thrift:"name,3,optional" frugal:"3,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description *string    `thrift:"description,4,optional" frugal:"4,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateDatasetRequest() *UpdateDatasetRequest {
	return &UpdateDatasetRequest{}
}

func (p *UpdateDatasetRequest) InitDefault() {
}

var UpdateDatasetRequest_WorkspaceID_DEFAULT int64

func (p *UpdateDatasetRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return UpdateDatasetRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *UpdateDatasetRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var UpdateDatasetRequest_Name_DEFAULT string

func (p *UpdateDatasetRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return UpdateDatasetRequest_Name_DEFAULT
	}
	return *p.Name
}

var UpdateDatasetRequest_Description_DEFAULT string

func (p *UpdateDatasetRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return UpdateDatasetRequest_Description_DEFAULT
	}
	return *p.Description
}

var UpdateDatasetRequest_Base_DEFAULT *base.Base

func (p *UpdateDatasetRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateDatasetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateDatasetRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *UpdateDatasetRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *UpdateDatasetRequest) SetName(val *string) {
	p.Name = val
}
func (p *UpdateDatasetRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *UpdateDatasetRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateDatasetRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "name",
	4:   "description",
	255: "Base",
}

func (p *UpdateDatasetRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *UpdateDatasetRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *UpdateDatasetRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UpdateDatasetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateDatasetRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateDatasetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateDatasetRequest[fieldId]))
}

func (p *UpdateDatasetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateDatasetRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *UpdateDatasetRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *UpdateDatasetRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *UpdateDatasetRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateDatasetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDatasetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateDatasetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateDatasetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateDatasetRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateDatasetRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *UpdateDatasetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateDatasetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDatasetRequest(%+v)", *p)

}

func (p *UpdateDatasetRequest) DeepEqual(ano *UpdateDatasetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateDatasetRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *UpdateDatasetRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *UpdateDatasetRequest) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateDatasetRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateDatasetRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateDatasetResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateDatasetResponse() *UpdateDatasetResponse {
	return &UpdateDatasetResponse{}
}

func (p *UpdateDatasetResponse) InitDefault() {
}

var UpdateDatasetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateDatasetResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateDatasetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateDatasetResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateDatasetResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdateDatasetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateDatasetResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateDatasetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateDatasetResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateDatasetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDatasetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateDatasetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateDatasetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDatasetResponse(%+v)", *p)

}

func (p *UpdateDatasetResponse) DeepEqual(ano *UpdateDatasetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateDatasetResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteDatasetRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	DatasetID   int64      `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDeleteDatasetRequest() *DeleteDatasetRequest {
	return &DeleteDatasetRequest{}
}

func (p *DeleteDatasetRequest) InitDefault() {
}

var DeleteDatasetRequest_WorkspaceID_DEFAULT int64

func (p *DeleteDatasetRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return DeleteDatasetRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *DeleteDatasetRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var DeleteDatasetRequest_Base_DEFAULT *base.Base

func (p *DeleteDatasetRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DeleteDatasetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteDatasetRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *DeleteDatasetRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *DeleteDatasetRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteDatasetRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	255: "Base",
}

func (p *DeleteDatasetRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *DeleteDatasetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteDatasetRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteDatasetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteDatasetRequest[fieldId]))
}

func (p *DeleteDatasetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *DeleteDatasetRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *DeleteDatasetRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeleteDatasetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDatasetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteDatasetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeleteDatasetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeleteDatasetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteDatasetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteDatasetRequest(%+v)", *p)

}

func (p *DeleteDatasetRequest) DeepEqual(ano *DeleteDatasetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteDatasetRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *DeleteDatasetRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *DeleteDatasetRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteDatasetResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewDeleteDatasetResponse() *DeleteDatasetResponse {
	return &DeleteDatasetResponse{}
}

func (p *DeleteDatasetResponse) InitDefault() {
}

var DeleteDatasetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DeleteDatasetResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DeleteDatasetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteDatasetResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeleteDatasetResponse = map[int16]string{
	255: "BaseResp",
}

func (p *DeleteDatasetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteDatasetResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteDatasetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteDatasetResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeleteDatasetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDatasetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteDatasetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteDatasetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteDatasetResponse(%+v)", *p)

}

func (p *DeleteDatasetResponse) DeepEqual(ano *DeleteDatasetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeleteDatasetResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetDatasetRequest struct {
	WorkspaceID *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	DatasetID   int64  `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	// 数据集已删除时是否返回
	WithDeleted *bool      `thrift:"with_deleted,10,optional" frugal:"10,optional,bool" json:"with_deleted,omitempty" query:"with_deleted"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetDatasetRequest() *GetDatasetRequest {
	return &GetDatasetRequest{}
}

func (p *GetDatasetRequest) InitDefault() {
}

var GetDatasetRequest_WorkspaceID_DEFAULT int64

func (p *GetDatasetRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetDatasetRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *GetDatasetRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var GetDatasetRequest_WithDeleted_DEFAULT bool

func (p *GetDatasetRequest) GetWithDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetWithDeleted() {
		return GetDatasetRequest_WithDeleted_DEFAULT
	}
	return *p.WithDeleted
}

var GetDatasetRequest_Base_DEFAULT *base.Base

func (p *GetDatasetRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetDatasetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetDatasetRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetDatasetRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *GetDatasetRequest) SetWithDeleted(val *bool) {
	p.WithDeleted = val
}
func (p *GetDatasetRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetDatasetRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	10:  "with_deleted",
	255: "Base",
}

func (p *GetDatasetRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetDatasetRequest) IsSetWithDeleted() bool {
	return p.WithDeleted != nil
}

func (p *GetDatasetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDatasetRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDatasetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetDatasetRequest[fieldId]))
}

func (p *GetDatasetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetDatasetRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *GetDatasetRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WithDeleted = _field
	return nil
}
func (p *GetDatasetRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetDatasetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDatasetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDatasetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetDatasetRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWithDeleted() {
		if err = oprot.WriteFieldBegin("with_deleted", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.WithDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *GetDatasetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDatasetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatasetRequest(%+v)", *p)

}

func (p *GetDatasetRequest) DeepEqual(ano *GetDatasetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field10DeepEqual(ano.WithDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetDatasetRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetDatasetRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *GetDatasetRequest) Field10DeepEqual(src *bool) bool {

	if p.WithDeleted == src {
		return true
	} else if p.WithDeleted == nil || src == nil {
		return false
	}
	if *p.WithDeleted != *src {
		return false
	}
	return true
}
func (p *GetDatasetRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetDatasetResponse struct {
	Dataset  *dataset.Dataset `thrift:"dataset,1,optional" frugal:"1,optional,dataset.Dataset" form:"dataset" json:"dataset,omitempty" query:"dataset"`
	BaseResp *base.BaseResp   `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetDatasetResponse() *GetDatasetResponse {
	return &GetDatasetResponse{}
}

func (p *GetDatasetResponse) InitDefault() {
}

var GetDatasetResponse_Dataset_DEFAULT *dataset.Dataset

func (p *GetDatasetResponse) GetDataset() (v *dataset.Dataset) {
	if p == nil {
		return
	}
	if !p.IsSetDataset() {
		return GetDatasetResponse_Dataset_DEFAULT
	}
	return p.Dataset
}

var GetDatasetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetDatasetResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetDatasetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetDatasetResponse) SetDataset(val *dataset.Dataset) {
	p.Dataset = val
}
func (p *GetDatasetResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetDatasetResponse = map[int16]string{
	1:   "dataset",
	255: "BaseResp",
}

func (p *GetDatasetResponse) IsSetDataset() bool {
	return p.Dataset != nil
}

func (p *GetDatasetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetDatasetResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDatasetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDatasetResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewDataset()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Dataset = _field
	return nil
}
func (p *GetDatasetResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetDatasetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDatasetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataset() {
		if err = oprot.WriteFieldBegin("dataset", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Dataset.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDatasetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDatasetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatasetResponse(%+v)", *p)

}

func (p *GetDatasetResponse) DeepEqual(ano *GetDatasetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Dataset) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetDatasetResponse) Field1DeepEqual(src *dataset.Dataset) bool {

	if !p.Dataset.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDatasetResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetDatasetsRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	DatasetIds  []int64    `thrift:"dataset_ids,2,required" frugal:"2,required,list<i64>" json:"dataset_ids" form:"dataset_ids,required" query:"dataset_ids,required"`
	WithDeleted *bool      `thrift:"with_deleted,10,optional" frugal:"10,optional,bool" form:"with_deleted" json:"with_deleted,omitempty" query:"with_deleted"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetDatasetsRequest() *BatchGetDatasetsRequest {
	return &BatchGetDatasetsRequest{}
}

func (p *BatchGetDatasetsRequest) InitDefault() {
}

func (p *BatchGetDatasetsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchGetDatasetsRequest) GetDatasetIds() (v []int64) {
	if p != nil {
		return p.DatasetIds
	}
	return
}

var BatchGetDatasetsRequest_WithDeleted_DEFAULT bool

func (p *BatchGetDatasetsRequest) GetWithDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetWithDeleted() {
		return BatchGetDatasetsRequest_WithDeleted_DEFAULT
	}
	return *p.WithDeleted
}

var BatchGetDatasetsRequest_Base_DEFAULT *base.Base

func (p *BatchGetDatasetsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetDatasetsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetDatasetsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetDatasetsRequest) SetDatasetIds(val []int64) {
	p.DatasetIds = val
}
func (p *BatchGetDatasetsRequest) SetWithDeleted(val *bool) {
	p.WithDeleted = val
}
func (p *BatchGetDatasetsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetDatasetsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_ids",
	10:  "with_deleted",
	255: "Base",
}

func (p *BatchGetDatasetsRequest) IsSetWithDeleted() bool {
	return p.WithDeleted != nil
}

func (p *BatchGetDatasetsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetDatasetsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetDatasetIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDatasetIds {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetDatasetsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetDatasetsRequest[fieldId]))
}

func (p *BatchGetDatasetsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetDatasetsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DatasetIds = _field
	return nil
}
func (p *BatchGetDatasetsRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WithDeleted = _field
	return nil
}
func (p *BatchGetDatasetsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetDatasetsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetDatasetsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetDatasetsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_ids", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.DatasetIds)); err != nil {
		return err
	}
	for _, v := range p.DatasetIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetDatasetsRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWithDeleted() {
		if err = oprot.WriteFieldBegin("with_deleted", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.WithDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *BatchGetDatasetsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetDatasetsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetDatasetsRequest(%+v)", *p)

}

func (p *BatchGetDatasetsRequest) DeepEqual(ano *BatchGetDatasetsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetIds) {
		return false
	}
	if !p.Field10DeepEqual(ano.WithDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetDatasetsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetDatasetsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.DatasetIds) != len(src) {
		return false
	}
	for i, v := range p.DatasetIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetDatasetsRequest) Field10DeepEqual(src *bool) bool {

	if p.WithDeleted == src {
		return true
	} else if p.WithDeleted == nil || src == nil {
		return false
	}
	if *p.WithDeleted != *src {
		return false
	}
	return true
}
func (p *BatchGetDatasetsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetDatasetsResponse struct {
	Datasets []*dataset.Dataset `thrift:"datasets,1,optional" frugal:"1,optional,list<dataset.Dataset>" form:"datasets" json:"datasets,omitempty" query:"datasets"`
	BaseResp *base.BaseResp     `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetDatasetsResponse() *BatchGetDatasetsResponse {
	return &BatchGetDatasetsResponse{}
}

func (p *BatchGetDatasetsResponse) InitDefault() {
}

var BatchGetDatasetsResponse_Datasets_DEFAULT []*dataset.Dataset

func (p *BatchGetDatasetsResponse) GetDatasets() (v []*dataset.Dataset) {
	if p == nil {
		return
	}
	if !p.IsSetDatasets() {
		return BatchGetDatasetsResponse_Datasets_DEFAULT
	}
	return p.Datasets
}

var BatchGetDatasetsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetDatasetsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetDatasetsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetDatasetsResponse) SetDatasets(val []*dataset.Dataset) {
	p.Datasets = val
}
func (p *BatchGetDatasetsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetDatasetsResponse = map[int16]string{
	1:   "datasets",
	255: "BaseResp",
}

func (p *BatchGetDatasetsResponse) IsSetDatasets() bool {
	return p.Datasets != nil
}

func (p *BatchGetDatasetsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetDatasetsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetDatasetsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetDatasetsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.Dataset, 0, size)
	values := make([]dataset.Dataset, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Datasets = _field
	return nil
}
func (p *BatchGetDatasetsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetDatasetsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetDatasetsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatasets() {
		if err = oprot.WriteFieldBegin("datasets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Datasets)); err != nil {
			return err
		}
		for _, v := range p.Datasets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetDatasetsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetDatasetsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetDatasetsResponse(%+v)", *p)

}

func (p *BatchGetDatasetsResponse) DeepEqual(ano *BatchGetDatasetsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Datasets) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetDatasetsResponse) Field1DeepEqual(src []*dataset.Dataset) bool {

	if len(p.Datasets) != len(src) {
		return false
	}
	for i, v := range p.Datasets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetDatasetsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListDatasetsRequest struct {
	WorkspaceID int64                    `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" path:"workspace_id,required" `
	DatasetIds  []int64                  `thrift:"dataset_ids,2,optional" frugal:"2,optional,list<i64>" json:"dataset_ids" form:"dataset_ids" query:"dataset_ids"`
	Category    *dataset.DatasetCategory `thrift:"category,3,optional" frugal:"3,optional,DatasetCategory" form:"category" json:"category,omitempty" query:"category"`
	// 支持模糊搜索
	Name         *string  `thrift:"name,4,optional" frugal:"4,optional,string" form:"name" json:"name,omitempty" query:"name"`
	CreatedBys   []string `thrift:"created_bys,5,optional" frugal:"5,optional,list<string>" form:"created_bys" json:"created_bys,omitempty" query:"created_bys"`
	BizCategorys []string `thrift:"biz_categorys,6,optional" frugal:"6,optional,list<string>" form:"biz_categorys" json:"biz_categorys,omitempty" query:"biz_categorys"`
	/* pagination */
	PageNumber *int32 `thrift:"page_number,100,optional" frugal:"100,optional,i32" form:"page_number" json:"page_number,omitempty" query:"page_number"`
	// 分页大小(0, 200]，默认为 20
	PageSize *int32 `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	// 与 page 同时提供时，优先使用 cursor
	PageToken *string            `thrift:"page_token,102,optional" frugal:"102,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	OrderBys  []*dataset.OrderBy `thrift:"order_bys,103,optional" frugal:"103,optional,list<dataset.OrderBy>" form:"order_bys" json:"order_bys,omitempty" query:"order_bys"`
	Base      *base.Base         `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListDatasetsRequest() *ListDatasetsRequest {
	return &ListDatasetsRequest{}
}

func (p *ListDatasetsRequest) InitDefault() {
}

func (p *ListDatasetsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var ListDatasetsRequest_DatasetIds_DEFAULT []int64

func (p *ListDatasetsRequest) GetDatasetIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetDatasetIds() {
		return ListDatasetsRequest_DatasetIds_DEFAULT
	}
	return p.DatasetIds
}

var ListDatasetsRequest_Category_DEFAULT dataset.DatasetCategory

func (p *ListDatasetsRequest) GetCategory() (v dataset.DatasetCategory) {
	if p == nil {
		return
	}
	if !p.IsSetCategory() {
		return ListDatasetsRequest_Category_DEFAULT
	}
	return *p.Category
}

var ListDatasetsRequest_Name_DEFAULT string

func (p *ListDatasetsRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ListDatasetsRequest_Name_DEFAULT
	}
	return *p.Name
}

var ListDatasetsRequest_CreatedBys_DEFAULT []string

func (p *ListDatasetsRequest) GetCreatedBys() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedBys() {
		return ListDatasetsRequest_CreatedBys_DEFAULT
	}
	return p.CreatedBys
}

var ListDatasetsRequest_BizCategorys_DEFAULT []string

func (p *ListDatasetsRequest) GetBizCategorys() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetBizCategorys() {
		return ListDatasetsRequest_BizCategorys_DEFAULT
	}
	return p.BizCategorys
}

var ListDatasetsRequest_PageNumber_DEFAULT int32

func (p *ListDatasetsRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListDatasetsRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListDatasetsRequest_PageSize_DEFAULT int32

func (p *ListDatasetsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListDatasetsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListDatasetsRequest_PageToken_DEFAULT string

func (p *ListDatasetsRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListDatasetsRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListDatasetsRequest_OrderBys_DEFAULT []*dataset.OrderBy

func (p *ListDatasetsRequest) GetOrderBys() (v []*dataset.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListDatasetsRequest_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListDatasetsRequest_Base_DEFAULT *base.Base

func (p *ListDatasetsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListDatasetsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListDatasetsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListDatasetsRequest) SetDatasetIds(val []int64) {
	p.DatasetIds = val
}
func (p *ListDatasetsRequest) SetCategory(val *dataset.DatasetCategory) {
	p.Category = val
}
func (p *ListDatasetsRequest) SetName(val *string) {
	p.Name = val
}
func (p *ListDatasetsRequest) SetCreatedBys(val []string) {
	p.CreatedBys = val
}
func (p *ListDatasetsRequest) SetBizCategorys(val []string) {
	p.BizCategorys = val
}
func (p *ListDatasetsRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListDatasetsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListDatasetsRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListDatasetsRequest) SetOrderBys(val []*dataset.OrderBy) {
	p.OrderBys = val
}
func (p *ListDatasetsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListDatasetsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_ids",
	3:   "category",
	4:   "name",
	5:   "created_bys",
	6:   "biz_categorys",
	100: "page_number",
	101: "page_size",
	102: "page_token",
	103: "order_bys",
	255: "Base",
}

func (p *ListDatasetsRequest) IsSetDatasetIds() bool {
	return p.DatasetIds != nil
}

func (p *ListDatasetsRequest) IsSetCategory() bool {
	return p.Category != nil
}

func (p *ListDatasetsRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *ListDatasetsRequest) IsSetCreatedBys() bool {
	return p.CreatedBys != nil
}

func (p *ListDatasetsRequest) IsSetBizCategorys() bool {
	return p.BizCategorys != nil
}

func (p *ListDatasetsRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListDatasetsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListDatasetsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListDatasetsRequest) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListDatasetsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListDatasetsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDatasetsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListDatasetsRequest[fieldId]))
}

func (p *ListDatasetsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListDatasetsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DatasetIds = _field
	return nil
}
func (p *ListDatasetsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *dataset.DatasetCategory
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := dataset.DatasetCategory(v)
		_field = &tmp
	}
	p.Category = _field
	return nil
}
func (p *ListDatasetsRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ListDatasetsRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CreatedBys = _field
	return nil
}
func (p *ListDatasetsRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.BizCategorys = _field
	return nil
}
func (p *ListDatasetsRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListDatasetsRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListDatasetsRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListDatasetsRequest) ReadField103(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.OrderBy, 0, size)
	values := make([]dataset.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListDatasetsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListDatasetsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDatasetsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDatasetsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatasetIds() {
		if err = oprot.WriteFieldBegin("dataset_ids", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.DatasetIds)); err != nil {
			return err
		}
		for _, v := range p.DatasetIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListDatasetsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategory() {
		if err = oprot.WriteFieldBegin("category", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Category)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListDatasetsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ListDatasetsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBys() {
		if err = oprot.WriteFieldBegin("created_bys", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.CreatedBys)); err != nil {
			return err
		}
		for _, v := range p.CreatedBys {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ListDatasetsRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizCategorys() {
		if err = oprot.WriteFieldBegin("biz_categorys", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.BizCategorys)); err != nil {
			return err
		}
		for _, v := range p.BizCategorys {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ListDatasetsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListDatasetsRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListDatasetsRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *ListDatasetsRequest) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *ListDatasetsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDatasetsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDatasetsRequest(%+v)", *p)

}

func (p *ListDatasetsRequest) DeepEqual(ano *ListDatasetsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetIds) {
		return false
	}
	if !p.Field3DeepEqual(ano.Category) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.CreatedBys) {
		return false
	}
	if !p.Field6DeepEqual(ano.BizCategorys) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListDatasetsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListDatasetsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.DatasetIds) != len(src) {
		return false
	}
	for i, v := range p.DatasetIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListDatasetsRequest) Field3DeepEqual(src *dataset.DatasetCategory) bool {

	if p.Category == src {
		return true
	} else if p.Category == nil || src == nil {
		return false
	}
	if *p.Category != *src {
		return false
	}
	return true
}
func (p *ListDatasetsRequest) Field4DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDatasetsRequest) Field5DeepEqual(src []string) bool {

	if len(p.CreatedBys) != len(src) {
		return false
	}
	for i, v := range p.CreatedBys {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListDatasetsRequest) Field6DeepEqual(src []string) bool {

	if len(p.BizCategorys) != len(src) {
		return false
	}
	for i, v := range p.BizCategorys {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListDatasetsRequest) Field100DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListDatasetsRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListDatasetsRequest) Field102DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDatasetsRequest) Field103DeepEqual(src []*dataset.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListDatasetsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListDatasetsResponse struct {
	Datasets []*dataset.Dataset `thrift:"datasets,1,optional" frugal:"1,optional,list<dataset.Dataset>" form:"datasets" json:"datasets,omitempty" query:"datasets"`
	/* pagination */
	NextPageToken *string        `thrift:"next_page_token,100,optional" frugal:"100,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int64         `thrift:"total,101,optional" frugal:"101,optional,i64" json:"total" form:"total" query:"total"`
	BaseResp      *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListDatasetsResponse() *ListDatasetsResponse {
	return &ListDatasetsResponse{}
}

func (p *ListDatasetsResponse) InitDefault() {
}

var ListDatasetsResponse_Datasets_DEFAULT []*dataset.Dataset

func (p *ListDatasetsResponse) GetDatasets() (v []*dataset.Dataset) {
	if p == nil {
		return
	}
	if !p.IsSetDatasets() {
		return ListDatasetsResponse_Datasets_DEFAULT
	}
	return p.Datasets
}

var ListDatasetsResponse_NextPageToken_DEFAULT string

func (p *ListDatasetsResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListDatasetsResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListDatasetsResponse_Total_DEFAULT int64

func (p *ListDatasetsResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListDatasetsResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListDatasetsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListDatasetsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListDatasetsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListDatasetsResponse) SetDatasets(val []*dataset.Dataset) {
	p.Datasets = val
}
func (p *ListDatasetsResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListDatasetsResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *ListDatasetsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListDatasetsResponse = map[int16]string{
	1:   "datasets",
	100: "next_page_token",
	101: "total",
	255: "BaseResp",
}

func (p *ListDatasetsResponse) IsSetDatasets() bool {
	return p.Datasets != nil
}

func (p *ListDatasetsResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListDatasetsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListDatasetsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListDatasetsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDatasetsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListDatasetsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.Dataset, 0, size)
	values := make([]dataset.Dataset, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Datasets = _field
	return nil
}
func (p *ListDatasetsResponse) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListDatasetsResponse) ReadField101(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListDatasetsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListDatasetsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDatasetsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatasets() {
		if err = oprot.WriteFieldBegin("datasets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Datasets)); err != nil {
			return err
		}
		for _, v := range p.Datasets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDatasetsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListDatasetsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListDatasetsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDatasetsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDatasetsResponse(%+v)", *p)

}

func (p *ListDatasetsResponse) DeepEqual(ano *ListDatasetsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Datasets) {
		return false
	}
	if !p.Field100DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListDatasetsResponse) Field1DeepEqual(src []*dataset.Dataset) bool {

	if len(p.Datasets) != len(src) {
		return false
	}
	for i, v := range p.Datasets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListDatasetsResponse) Field100DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDatasetsResponse) Field101DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListDatasetsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type SignUploadFileTokenRequest struct {
	WorkspaceID *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	// 支持 ImageX, TOS
	Storage  *dataset.StorageProvider `thrift:"storage,2,optional" frugal:"2,optional,StorageProvider" form:"storage" json:"storage,omitempty" query:"storage"`
	FileName *string                  `thrift:"file_name,3,optional" frugal:"3,optional,string" form:"file_name" json:"file_name,omitempty" query:"file_name"`
	/*base*/
	Base *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewSignUploadFileTokenRequest() *SignUploadFileTokenRequest {
	return &SignUploadFileTokenRequest{}
}

func (p *SignUploadFileTokenRequest) InitDefault() {
}

var SignUploadFileTokenRequest_WorkspaceID_DEFAULT int64

func (p *SignUploadFileTokenRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return SignUploadFileTokenRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var SignUploadFileTokenRequest_Storage_DEFAULT dataset.StorageProvider

func (p *SignUploadFileTokenRequest) GetStorage() (v dataset.StorageProvider) {
	if p == nil {
		return
	}
	if !p.IsSetStorage() {
		return SignUploadFileTokenRequest_Storage_DEFAULT
	}
	return *p.Storage
}

var SignUploadFileTokenRequest_FileName_DEFAULT string

func (p *SignUploadFileTokenRequest) GetFileName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFileName() {
		return SignUploadFileTokenRequest_FileName_DEFAULT
	}
	return *p.FileName
}

var SignUploadFileTokenRequest_Base_DEFAULT *base.Base

func (p *SignUploadFileTokenRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return SignUploadFileTokenRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SignUploadFileTokenRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *SignUploadFileTokenRequest) SetStorage(val *dataset.StorageProvider) {
	p.Storage = val
}
func (p *SignUploadFileTokenRequest) SetFileName(val *string) {
	p.FileName = val
}
func (p *SignUploadFileTokenRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_SignUploadFileTokenRequest = map[int16]string{
	1:   "workspace_id",
	2:   "storage",
	3:   "file_name",
	255: "Base",
}

func (p *SignUploadFileTokenRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *SignUploadFileTokenRequest) IsSetStorage() bool {
	return p.Storage != nil
}

func (p *SignUploadFileTokenRequest) IsSetFileName() bool {
	return p.FileName != nil
}

func (p *SignUploadFileTokenRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SignUploadFileTokenRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SignUploadFileTokenRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SignUploadFileTokenRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *SignUploadFileTokenRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *dataset.StorageProvider
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := dataset.StorageProvider(v)
		_field = &tmp
	}
	p.Storage = _field
	return nil
}
func (p *SignUploadFileTokenRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FileName = _field
	return nil
}
func (p *SignUploadFileTokenRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SignUploadFileTokenRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignUploadFileTokenRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SignUploadFileTokenRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SignUploadFileTokenRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorage() {
		if err = oprot.WriteFieldBegin("storage", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Storage)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SignUploadFileTokenRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileName() {
		if err = oprot.WriteFieldBegin("file_name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FileName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SignUploadFileTokenRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SignUploadFileTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignUploadFileTokenRequest(%+v)", *p)

}

func (p *SignUploadFileTokenRequest) DeepEqual(ano *SignUploadFileTokenRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Storage) {
		return false
	}
	if !p.Field3DeepEqual(ano.FileName) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SignUploadFileTokenRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *SignUploadFileTokenRequest) Field2DeepEqual(src *dataset.StorageProvider) bool {

	if p.Storage == src {
		return true
	} else if p.Storage == nil || src == nil {
		return false
	}
	if *p.Storage != *src {
		return false
	}
	return true
}
func (p *SignUploadFileTokenRequest) Field3DeepEqual(src *string) bool {

	if p.FileName == src {
		return true
	} else if p.FileName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FileName, *src) != 0 {
		return false
	}
	return true
}
func (p *SignUploadFileTokenRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SignUploadFileTokenResponse struct {
	URL             *string                  `thrift:"url,1,optional" frugal:"1,optional,string" form:"url" json:"url,omitempty" query:"url"`
	Token           *dataset.FileUploadToken `thrift:"token,2,optional" frugal:"2,optional,dataset.FileUploadToken" form:"token" json:"token,omitempty" query:"token"`
	ImageXServiceID *string                  `thrift:"image_x_service_id,3,optional" frugal:"3,optional,string" form:"image_x_service_id" json:"image_x_service_id,omitempty" query:"image_x_service_id"`
	/*base*/
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewSignUploadFileTokenResponse() *SignUploadFileTokenResponse {
	return &SignUploadFileTokenResponse{}
}

func (p *SignUploadFileTokenResponse) InitDefault() {
}

var SignUploadFileTokenResponse_URL_DEFAULT string

func (p *SignUploadFileTokenResponse) GetURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetURL() {
		return SignUploadFileTokenResponse_URL_DEFAULT
	}
	return *p.URL
}

var SignUploadFileTokenResponse_Token_DEFAULT *dataset.FileUploadToken

func (p *SignUploadFileTokenResponse) GetToken() (v *dataset.FileUploadToken) {
	if p == nil {
		return
	}
	if !p.IsSetToken() {
		return SignUploadFileTokenResponse_Token_DEFAULT
	}
	return p.Token
}

var SignUploadFileTokenResponse_ImageXServiceID_DEFAULT string

func (p *SignUploadFileTokenResponse) GetImageXServiceID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetImageXServiceID() {
		return SignUploadFileTokenResponse_ImageXServiceID_DEFAULT
	}
	return *p.ImageXServiceID
}

var SignUploadFileTokenResponse_BaseResp_DEFAULT *base.BaseResp

func (p *SignUploadFileTokenResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return SignUploadFileTokenResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SignUploadFileTokenResponse) SetURL(val *string) {
	p.URL = val
}
func (p *SignUploadFileTokenResponse) SetToken(val *dataset.FileUploadToken) {
	p.Token = val
}
func (p *SignUploadFileTokenResponse) SetImageXServiceID(val *string) {
	p.ImageXServiceID = val
}
func (p *SignUploadFileTokenResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SignUploadFileTokenResponse = map[int16]string{
	1:   "url",
	2:   "token",
	3:   "image_x_service_id",
	255: "BaseResp",
}

func (p *SignUploadFileTokenResponse) IsSetURL() bool {
	return p.URL != nil
}

func (p *SignUploadFileTokenResponse) IsSetToken() bool {
	return p.Token != nil
}

func (p *SignUploadFileTokenResponse) IsSetImageXServiceID() bool {
	return p.ImageXServiceID != nil
}

func (p *SignUploadFileTokenResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SignUploadFileTokenResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SignUploadFileTokenResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SignUploadFileTokenResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.URL = _field
	return nil
}
func (p *SignUploadFileTokenResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := dataset.NewFileUploadToken()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Token = _field
	return nil
}
func (p *SignUploadFileTokenResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ImageXServiceID = _field
	return nil
}
func (p *SignUploadFileTokenResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SignUploadFileTokenResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignUploadFileTokenResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SignUploadFileTokenResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.URL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SignUploadFileTokenResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Token.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SignUploadFileTokenResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageXServiceID() {
		if err = oprot.WriteFieldBegin("image_x_service_id", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ImageXServiceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SignUploadFileTokenResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SignUploadFileTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignUploadFileTokenResponse(%+v)", *p)

}

func (p *SignUploadFileTokenResponse) DeepEqual(ano *SignUploadFileTokenResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.URL) {
		return false
	}
	if !p.Field2DeepEqual(ano.Token) {
		return false
	}
	if !p.Field3DeepEqual(ano.ImageXServiceID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SignUploadFileTokenResponse) Field1DeepEqual(src *string) bool {

	if p.URL == src {
		return true
	} else if p.URL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.URL, *src) != 0 {
		return false
	}
	return true
}
func (p *SignUploadFileTokenResponse) Field2DeepEqual(src *dataset.FileUploadToken) bool {

	if !p.Token.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SignUploadFileTokenResponse) Field3DeepEqual(src *string) bool {

	if p.ImageXServiceID == src {
		return true
	} else if p.ImageXServiceID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ImageXServiceID, *src) != 0 {
		return false
	}
	return true
}
func (p *SignUploadFileTokenResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ImportDatasetRequest struct {
	WorkspaceID   *int64                          `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID     int64                           `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	File          *dataset_job.DatasetIOFile      `thrift:"file,3,optional" frugal:"3,optional,dataset_job.DatasetIOFile" form:"file" json:"file,omitempty" query:"file"`
	FieldMappings []*dataset_job.FieldMapping     `thrift:"field_mappings,4,optional" frugal:"4,optional,list<dataset_job.FieldMapping>" form:"field_mappings" json:"field_mappings,omitempty" query:"field_mappings"`
	Option        *dataset_job.DatasetIOJobOption `thrift:"option,5,optional" frugal:"5,optional,dataset_job.DatasetIOJobOption" form:"option" json:"option,omitempty" query:"option"`
	/*base*/
	Base *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewImportDatasetRequest() *ImportDatasetRequest {
	return &ImportDatasetRequest{}
}

func (p *ImportDatasetRequest) InitDefault() {
}

var ImportDatasetRequest_WorkspaceID_DEFAULT int64

func (p *ImportDatasetRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ImportDatasetRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *ImportDatasetRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var ImportDatasetRequest_File_DEFAULT *dataset_job.DatasetIOFile

func (p *ImportDatasetRequest) GetFile() (v *dataset_job.DatasetIOFile) {
	if p == nil {
		return
	}
	if !p.IsSetFile() {
		return ImportDatasetRequest_File_DEFAULT
	}
	return p.File
}

var ImportDatasetRequest_FieldMappings_DEFAULT []*dataset_job.FieldMapping

func (p *ImportDatasetRequest) GetFieldMappings() (v []*dataset_job.FieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetFieldMappings() {
		return ImportDatasetRequest_FieldMappings_DEFAULT
	}
	return p.FieldMappings
}

var ImportDatasetRequest_Option_DEFAULT *dataset_job.DatasetIOJobOption

func (p *ImportDatasetRequest) GetOption() (v *dataset_job.DatasetIOJobOption) {
	if p == nil {
		return
	}
	if !p.IsSetOption() {
		return ImportDatasetRequest_Option_DEFAULT
	}
	return p.Option
}

var ImportDatasetRequest_Base_DEFAULT *base.Base

func (p *ImportDatasetRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ImportDatasetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ImportDatasetRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ImportDatasetRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *ImportDatasetRequest) SetFile(val *dataset_job.DatasetIOFile) {
	p.File = val
}
func (p *ImportDatasetRequest) SetFieldMappings(val []*dataset_job.FieldMapping) {
	p.FieldMappings = val
}
func (p *ImportDatasetRequest) SetOption(val *dataset_job.DatasetIOJobOption) {
	p.Option = val
}
func (p *ImportDatasetRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ImportDatasetRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "file",
	4:   "field_mappings",
	5:   "option",
	255: "Base",
}

func (p *ImportDatasetRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ImportDatasetRequest) IsSetFile() bool {
	return p.File != nil
}

func (p *ImportDatasetRequest) IsSetFieldMappings() bool {
	return p.FieldMappings != nil
}

func (p *ImportDatasetRequest) IsSetOption() bool {
	return p.Option != nil
}

func (p *ImportDatasetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ImportDatasetRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportDatasetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ImportDatasetRequest[fieldId]))
}

func (p *ImportDatasetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ImportDatasetRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *ImportDatasetRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := dataset_job.NewDatasetIOFile()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.File = _field
	return nil
}
func (p *ImportDatasetRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset_job.FieldMapping, 0, size)
	values := make([]dataset_job.FieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldMappings = _field
	return nil
}
func (p *ImportDatasetRequest) ReadField5(iprot thrift.TProtocol) error {
	_field := dataset_job.NewDatasetIOJobOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Option = _field
	return nil
}
func (p *ImportDatasetRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ImportDatasetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportDatasetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportDatasetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ImportDatasetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ImportDatasetRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFile() {
		if err = oprot.WriteFieldBegin("file", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.File.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ImportDatasetRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldMappings() {
		if err = oprot.WriteFieldBegin("field_mappings", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldMappings)); err != nil {
			return err
		}
		for _, v := range p.FieldMappings {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ImportDatasetRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOption() {
		if err = oprot.WriteFieldBegin("option", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Option.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ImportDatasetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ImportDatasetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportDatasetRequest(%+v)", *p)

}

func (p *ImportDatasetRequest) DeepEqual(ano *ImportDatasetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.File) {
		return false
	}
	if !p.Field4DeepEqual(ano.FieldMappings) {
		return false
	}
	if !p.Field5DeepEqual(ano.Option) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ImportDatasetRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ImportDatasetRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *ImportDatasetRequest) Field3DeepEqual(src *dataset_job.DatasetIOFile) bool {

	if !p.File.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ImportDatasetRequest) Field4DeepEqual(src []*dataset_job.FieldMapping) bool {

	if len(p.FieldMappings) != len(src) {
		return false
	}
	for i, v := range p.FieldMappings {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ImportDatasetRequest) Field5DeepEqual(src *dataset_job.DatasetIOJobOption) bool {

	if !p.Option.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ImportDatasetRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ImportDatasetResponse struct {
	JobID    *int64         `thrift:"job_id,1,optional" frugal:"1,optional,i64" json:"job_id" form:"job_id" query:"job_id"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewImportDatasetResponse() *ImportDatasetResponse {
	return &ImportDatasetResponse{}
}

func (p *ImportDatasetResponse) InitDefault() {
}

var ImportDatasetResponse_JobID_DEFAULT int64

func (p *ImportDatasetResponse) GetJobID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetJobID() {
		return ImportDatasetResponse_JobID_DEFAULT
	}
	return *p.JobID
}

var ImportDatasetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ImportDatasetResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ImportDatasetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ImportDatasetResponse) SetJobID(val *int64) {
	p.JobID = val
}
func (p *ImportDatasetResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ImportDatasetResponse = map[int16]string{
	1:   "job_id",
	255: "BaseResp",
}

func (p *ImportDatasetResponse) IsSetJobID() bool {
	return p.JobID != nil
}

func (p *ImportDatasetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ImportDatasetResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImportDatasetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImportDatasetResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JobID = _field
	return nil
}
func (p *ImportDatasetResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ImportDatasetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportDatasetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImportDatasetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobID() {
		if err = oprot.WriteFieldBegin("job_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.JobID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ImportDatasetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ImportDatasetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportDatasetResponse(%+v)", *p)

}

func (p *ImportDatasetResponse) DeepEqual(ano *ImportDatasetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.JobID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ImportDatasetResponse) Field1DeepEqual(src *int64) bool {

	if p.JobID == src {
		return true
	} else if p.JobID == nil || src == nil {
		return false
	}
	if *p.JobID != *src {
		return false
	}
	return true
}
func (p *ImportDatasetResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetDatasetIOJobRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	JobID       int64      `thrift:"job_id,2,required" frugal:"2,required,i64" json:"job_id" path:"job_id,required" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetDatasetIOJobRequest() *GetDatasetIOJobRequest {
	return &GetDatasetIOJobRequest{}
}

func (p *GetDatasetIOJobRequest) InitDefault() {
}

var GetDatasetIOJobRequest_WorkspaceID_DEFAULT int64

func (p *GetDatasetIOJobRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetDatasetIOJobRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *GetDatasetIOJobRequest) GetJobID() (v int64) {
	if p != nil {
		return p.JobID
	}
	return
}

var GetDatasetIOJobRequest_Base_DEFAULT *base.Base

func (p *GetDatasetIOJobRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetDatasetIOJobRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetDatasetIOJobRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetDatasetIOJobRequest) SetJobID(val int64) {
	p.JobID = val
}
func (p *GetDatasetIOJobRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetDatasetIOJobRequest = map[int16]string{
	1:   "workspace_id",
	2:   "job_id",
	255: "Base",
}

func (p *GetDatasetIOJobRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetDatasetIOJobRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDatasetIOJobRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetJobID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetJobID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetJobID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDatasetIOJobRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetDatasetIOJobRequest[fieldId]))
}

func (p *GetDatasetIOJobRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetDatasetIOJobRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.JobID = _field
	return nil
}
func (p *GetDatasetIOJobRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetDatasetIOJobRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetIOJobRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDatasetIOJobRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDatasetIOJobRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("job_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.JobID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetDatasetIOJobRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDatasetIOJobRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatasetIOJobRequest(%+v)", *p)

}

func (p *GetDatasetIOJobRequest) DeepEqual(ano *GetDatasetIOJobRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.JobID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetDatasetIOJobRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetDatasetIOJobRequest) Field2DeepEqual(src int64) bool {

	if p.JobID != src {
		return false
	}
	return true
}
func (p *GetDatasetIOJobRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetDatasetIOJobResponse struct {
	Job      *dataset_job.DatasetIOJob `thrift:"job,1,optional" frugal:"1,optional,dataset_job.DatasetIOJob" form:"job" json:"job,omitempty" query:"job"`
	BaseResp *base.BaseResp            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetDatasetIOJobResponse() *GetDatasetIOJobResponse {
	return &GetDatasetIOJobResponse{}
}

func (p *GetDatasetIOJobResponse) InitDefault() {
}

var GetDatasetIOJobResponse_Job_DEFAULT *dataset_job.DatasetIOJob

func (p *GetDatasetIOJobResponse) GetJob() (v *dataset_job.DatasetIOJob) {
	if p == nil {
		return
	}
	if !p.IsSetJob() {
		return GetDatasetIOJobResponse_Job_DEFAULT
	}
	return p.Job
}

var GetDatasetIOJobResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetDatasetIOJobResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetDatasetIOJobResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetDatasetIOJobResponse) SetJob(val *dataset_job.DatasetIOJob) {
	p.Job = val
}
func (p *GetDatasetIOJobResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetDatasetIOJobResponse = map[int16]string{
	1:   "job",
	255: "BaseResp",
}

func (p *GetDatasetIOJobResponse) IsSetJob() bool {
	return p.Job != nil
}

func (p *GetDatasetIOJobResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetDatasetIOJobResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDatasetIOJobResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDatasetIOJobResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset_job.NewDatasetIOJob()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Job = _field
	return nil
}
func (p *GetDatasetIOJobResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetDatasetIOJobResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetIOJobResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDatasetIOJobResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetJob() {
		if err = oprot.WriteFieldBegin("job", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Job.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDatasetIOJobResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDatasetIOJobResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatasetIOJobResponse(%+v)", *p)

}

func (p *GetDatasetIOJobResponse) DeepEqual(ano *GetDatasetIOJobResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Job) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetDatasetIOJobResponse) Field1DeepEqual(src *dataset_job.DatasetIOJob) bool {

	if !p.Job.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDatasetIOJobResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListDatasetIOJobsRequest struct {
	WorkspaceID *int64                  `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64                   `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	Types       []dataset_job.JobType   `thrift:"types,3,optional" frugal:"3,optional,list<JobType>" form:"types" json:"types,omitempty" query:"types"`
	Statuses    []dataset_job.JobStatus `thrift:"statuses,4,optional" frugal:"4,optional,list<JobStatus>" form:"statuses" json:"statuses,omitempty" query:"statuses"`
	Base        *base.Base              `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListDatasetIOJobsRequest() *ListDatasetIOJobsRequest {
	return &ListDatasetIOJobsRequest{}
}

func (p *ListDatasetIOJobsRequest) InitDefault() {
}

var ListDatasetIOJobsRequest_WorkspaceID_DEFAULT int64

func (p *ListDatasetIOJobsRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListDatasetIOJobsRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *ListDatasetIOJobsRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var ListDatasetIOJobsRequest_Types_DEFAULT []dataset_job.JobType

func (p *ListDatasetIOJobsRequest) GetTypes() (v []dataset_job.JobType) {
	if p == nil {
		return
	}
	if !p.IsSetTypes() {
		return ListDatasetIOJobsRequest_Types_DEFAULT
	}
	return p.Types
}

var ListDatasetIOJobsRequest_Statuses_DEFAULT []dataset_job.JobStatus

func (p *ListDatasetIOJobsRequest) GetStatuses() (v []dataset_job.JobStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatuses() {
		return ListDatasetIOJobsRequest_Statuses_DEFAULT
	}
	return p.Statuses
}

var ListDatasetIOJobsRequest_Base_DEFAULT *base.Base

func (p *ListDatasetIOJobsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListDatasetIOJobsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListDatasetIOJobsRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListDatasetIOJobsRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *ListDatasetIOJobsRequest) SetTypes(val []dataset_job.JobType) {
	p.Types = val
}
func (p *ListDatasetIOJobsRequest) SetStatuses(val []dataset_job.JobStatus) {
	p.Statuses = val
}
func (p *ListDatasetIOJobsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListDatasetIOJobsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "types",
	4:   "statuses",
	255: "Base",
}

func (p *ListDatasetIOJobsRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListDatasetIOJobsRequest) IsSetTypes() bool {
	return p.Types != nil
}

func (p *ListDatasetIOJobsRequest) IsSetStatuses() bool {
	return p.Statuses != nil
}

func (p *ListDatasetIOJobsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListDatasetIOJobsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDatasetIOJobsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListDatasetIOJobsRequest[fieldId]))
}

func (p *ListDatasetIOJobsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListDatasetIOJobsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *ListDatasetIOJobsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]dataset_job.JobType, 0, size)
	for i := 0; i < size; i++ {

		var _elem dataset_job.JobType
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = dataset_job.JobType(v)
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Types = _field
	return nil
}
func (p *ListDatasetIOJobsRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]dataset_job.JobStatus, 0, size)
	for i := 0; i < size; i++ {

		var _elem dataset_job.JobStatus
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = dataset_job.JobStatus(v)
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Statuses = _field
	return nil
}
func (p *ListDatasetIOJobsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListDatasetIOJobsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetIOJobsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDatasetIOJobsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDatasetIOJobsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListDatasetIOJobsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypes() {
		if err = oprot.WriteFieldBegin("types", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.Types)); err != nil {
			return err
		}
		for _, v := range p.Types {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListDatasetIOJobsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatuses() {
		if err = oprot.WriteFieldBegin("statuses", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.Statuses)); err != nil {
			return err
		}
		for _, v := range p.Statuses {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ListDatasetIOJobsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDatasetIOJobsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDatasetIOJobsRequest(%+v)", *p)

}

func (p *ListDatasetIOJobsRequest) DeepEqual(ano *ListDatasetIOJobsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Types) {
		return false
	}
	if !p.Field4DeepEqual(ano.Statuses) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListDatasetIOJobsRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListDatasetIOJobsRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *ListDatasetIOJobsRequest) Field3DeepEqual(src []dataset_job.JobType) bool {

	if len(p.Types) != len(src) {
		return false
	}
	for i, v := range p.Types {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListDatasetIOJobsRequest) Field4DeepEqual(src []dataset_job.JobStatus) bool {

	if len(p.Statuses) != len(src) {
		return false
	}
	for i, v := range p.Statuses {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListDatasetIOJobsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListDatasetIOJobsResponse struct {
	Jobs     []*dataset_job.DatasetIOJob `thrift:"jobs,1,optional" frugal:"1,optional,list<dataset_job.DatasetIOJob>" form:"jobs" json:"jobs,omitempty" query:"jobs"`
	BaseResp *base.BaseResp              `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListDatasetIOJobsResponse() *ListDatasetIOJobsResponse {
	return &ListDatasetIOJobsResponse{}
}

func (p *ListDatasetIOJobsResponse) InitDefault() {
}

var ListDatasetIOJobsResponse_Jobs_DEFAULT []*dataset_job.DatasetIOJob

func (p *ListDatasetIOJobsResponse) GetJobs() (v []*dataset_job.DatasetIOJob) {
	if p == nil {
		return
	}
	if !p.IsSetJobs() {
		return ListDatasetIOJobsResponse_Jobs_DEFAULT
	}
	return p.Jobs
}

var ListDatasetIOJobsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListDatasetIOJobsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListDatasetIOJobsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListDatasetIOJobsResponse) SetJobs(val []*dataset_job.DatasetIOJob) {
	p.Jobs = val
}
func (p *ListDatasetIOJobsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListDatasetIOJobsResponse = map[int16]string{
	1:   "jobs",
	255: "BaseResp",
}

func (p *ListDatasetIOJobsResponse) IsSetJobs() bool {
	return p.Jobs != nil
}

func (p *ListDatasetIOJobsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListDatasetIOJobsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDatasetIOJobsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListDatasetIOJobsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset_job.DatasetIOJob, 0, size)
	values := make([]dataset_job.DatasetIOJob, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Jobs = _field
	return nil
}
func (p *ListDatasetIOJobsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListDatasetIOJobsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetIOJobsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDatasetIOJobsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobs() {
		if err = oprot.WriteFieldBegin("jobs", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Jobs)); err != nil {
			return err
		}
		for _, v := range p.Jobs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDatasetIOJobsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDatasetIOJobsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDatasetIOJobsResponse(%+v)", *p)

}

func (p *ListDatasetIOJobsResponse) DeepEqual(ano *ListDatasetIOJobsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Jobs) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListDatasetIOJobsResponse) Field1DeepEqual(src []*dataset_job.DatasetIOJob) bool {

	if len(p.Jobs) != len(src) {
		return false
	}
	for i, v := range p.Jobs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListDatasetIOJobsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListDatasetVersionsRequest struct {
	WorkspaceID *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64  `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	// 根据版本号模糊匹配
	VersionLike *string `thrift:"version_like,3,optional" frugal:"3,optional,string" form:"version_like" json:"version_like,omitempty" query:"version_like"`
	/* pagination */
	PageNumber *int32 `thrift:"page_number,100,optional" frugal:"100,optional,i32" form:"page_number" json:"page_number,omitempty" query:"page_number"`
	// 分页大小(0, 200]，默认为 20
	PageSize *int32 `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	// 与 page 同时提供时，优先使用 cursor
	PageToken *string            `thrift:"page_token,102,optional" frugal:"102,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	OrderBys  []*dataset.OrderBy `thrift:"order_bys,103,optional" frugal:"103,optional,list<dataset.OrderBy>" form:"order_bys" json:"order_bys,omitempty" query:"order_bys"`
	Base      *base.Base         `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListDatasetVersionsRequest() *ListDatasetVersionsRequest {
	return &ListDatasetVersionsRequest{}
}

func (p *ListDatasetVersionsRequest) InitDefault() {
}

var ListDatasetVersionsRequest_WorkspaceID_DEFAULT int64

func (p *ListDatasetVersionsRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListDatasetVersionsRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *ListDatasetVersionsRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var ListDatasetVersionsRequest_VersionLike_DEFAULT string

func (p *ListDatasetVersionsRequest) GetVersionLike() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersionLike() {
		return ListDatasetVersionsRequest_VersionLike_DEFAULT
	}
	return *p.VersionLike
}

var ListDatasetVersionsRequest_PageNumber_DEFAULT int32

func (p *ListDatasetVersionsRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListDatasetVersionsRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListDatasetVersionsRequest_PageSize_DEFAULT int32

func (p *ListDatasetVersionsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListDatasetVersionsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListDatasetVersionsRequest_PageToken_DEFAULT string

func (p *ListDatasetVersionsRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListDatasetVersionsRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListDatasetVersionsRequest_OrderBys_DEFAULT []*dataset.OrderBy

func (p *ListDatasetVersionsRequest) GetOrderBys() (v []*dataset.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListDatasetVersionsRequest_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListDatasetVersionsRequest_Base_DEFAULT *base.Base

func (p *ListDatasetVersionsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListDatasetVersionsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListDatasetVersionsRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListDatasetVersionsRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *ListDatasetVersionsRequest) SetVersionLike(val *string) {
	p.VersionLike = val
}
func (p *ListDatasetVersionsRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListDatasetVersionsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListDatasetVersionsRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListDatasetVersionsRequest) SetOrderBys(val []*dataset.OrderBy) {
	p.OrderBys = val
}
func (p *ListDatasetVersionsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListDatasetVersionsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "version_like",
	100: "page_number",
	101: "page_size",
	102: "page_token",
	103: "order_bys",
	255: "Base",
}

func (p *ListDatasetVersionsRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListDatasetVersionsRequest) IsSetVersionLike() bool {
	return p.VersionLike != nil
}

func (p *ListDatasetVersionsRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListDatasetVersionsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListDatasetVersionsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListDatasetVersionsRequest) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListDatasetVersionsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListDatasetVersionsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDatasetVersionsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListDatasetVersionsRequest[fieldId]))
}

func (p *ListDatasetVersionsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListDatasetVersionsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *ListDatasetVersionsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionLike = _field
	return nil
}
func (p *ListDatasetVersionsRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListDatasetVersionsRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListDatasetVersionsRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListDatasetVersionsRequest) ReadField103(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.OrderBy, 0, size)
	values := make([]dataset.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListDatasetVersionsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListDatasetVersionsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetVersionsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDatasetVersionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDatasetVersionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListDatasetVersionsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionLike() {
		if err = oprot.WriteFieldBegin("version_like", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.VersionLike); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListDatasetVersionsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListDatasetVersionsRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListDatasetVersionsRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *ListDatasetVersionsRequest) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *ListDatasetVersionsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDatasetVersionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDatasetVersionsRequest(%+v)", *p)

}

func (p *ListDatasetVersionsRequest) DeepEqual(ano *ListDatasetVersionsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionLike) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListDatasetVersionsRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListDatasetVersionsRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *ListDatasetVersionsRequest) Field3DeepEqual(src *string) bool {

	if p.VersionLike == src {
		return true
	} else if p.VersionLike == nil || src == nil {
		return false
	}
	if strings.Compare(*p.VersionLike, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDatasetVersionsRequest) Field100DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListDatasetVersionsRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListDatasetVersionsRequest) Field102DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDatasetVersionsRequest) Field103DeepEqual(src []*dataset.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListDatasetVersionsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListDatasetVersionsResponse struct {
	Versions []*dataset.DatasetVersion `thrift:"versions,1,optional" frugal:"1,optional,list<dataset.DatasetVersion>" form:"versions" json:"versions,omitempty" query:"versions"`
	/* pagination */
	NextPageToken *string        `thrift:"next_page_token,100,optional" frugal:"100,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int64         `thrift:"total,101,optional" frugal:"101,optional,i64" json:"total" form:"total" query:"total"`
	BaseResp      *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListDatasetVersionsResponse() *ListDatasetVersionsResponse {
	return &ListDatasetVersionsResponse{}
}

func (p *ListDatasetVersionsResponse) InitDefault() {
}

var ListDatasetVersionsResponse_Versions_DEFAULT []*dataset.DatasetVersion

func (p *ListDatasetVersionsResponse) GetVersions() (v []*dataset.DatasetVersion) {
	if p == nil {
		return
	}
	if !p.IsSetVersions() {
		return ListDatasetVersionsResponse_Versions_DEFAULT
	}
	return p.Versions
}

var ListDatasetVersionsResponse_NextPageToken_DEFAULT string

func (p *ListDatasetVersionsResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListDatasetVersionsResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListDatasetVersionsResponse_Total_DEFAULT int64

func (p *ListDatasetVersionsResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListDatasetVersionsResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListDatasetVersionsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListDatasetVersionsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListDatasetVersionsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListDatasetVersionsResponse) SetVersions(val []*dataset.DatasetVersion) {
	p.Versions = val
}
func (p *ListDatasetVersionsResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListDatasetVersionsResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *ListDatasetVersionsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListDatasetVersionsResponse = map[int16]string{
	1:   "versions",
	100: "next_page_token",
	101: "total",
	255: "BaseResp",
}

func (p *ListDatasetVersionsResponse) IsSetVersions() bool {
	return p.Versions != nil
}

func (p *ListDatasetVersionsResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListDatasetVersionsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListDatasetVersionsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListDatasetVersionsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDatasetVersionsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListDatasetVersionsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.DatasetVersion, 0, size)
	values := make([]dataset.DatasetVersion, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Versions = _field
	return nil
}
func (p *ListDatasetVersionsResponse) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListDatasetVersionsResponse) ReadField101(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListDatasetVersionsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListDatasetVersionsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetVersionsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDatasetVersionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersions() {
		if err = oprot.WriteFieldBegin("versions", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Versions)); err != nil {
			return err
		}
		for _, v := range p.Versions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDatasetVersionsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListDatasetVersionsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListDatasetVersionsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDatasetVersionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDatasetVersionsResponse(%+v)", *p)

}

func (p *ListDatasetVersionsResponse) DeepEqual(ano *ListDatasetVersionsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Versions) {
		return false
	}
	if !p.Field100DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListDatasetVersionsResponse) Field1DeepEqual(src []*dataset.DatasetVersion) bool {

	if len(p.Versions) != len(src) {
		return false
	}
	for i, v := range p.Versions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListDatasetVersionsResponse) Field100DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDatasetVersionsResponse) Field101DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListDatasetVersionsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetDatasetVersionRequest struct {
	WorkspaceID *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	VersionID   int64  `thrift:"version_id,2,required" frugal:"2,required,i64" json:"version_id" path:"version_id,required" `
	// 是否返回已删除的数据，默认不返回
	WithDeleted *bool      `thrift:"with_deleted,10,optional" frugal:"10,optional,bool" json:"with_deleted,omitempty" query:"with_deleted"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetDatasetVersionRequest() *GetDatasetVersionRequest {
	return &GetDatasetVersionRequest{}
}

func (p *GetDatasetVersionRequest) InitDefault() {
}

var GetDatasetVersionRequest_WorkspaceID_DEFAULT int64

func (p *GetDatasetVersionRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetDatasetVersionRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *GetDatasetVersionRequest) GetVersionID() (v int64) {
	if p != nil {
		return p.VersionID
	}
	return
}

var GetDatasetVersionRequest_WithDeleted_DEFAULT bool

func (p *GetDatasetVersionRequest) GetWithDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetWithDeleted() {
		return GetDatasetVersionRequest_WithDeleted_DEFAULT
	}
	return *p.WithDeleted
}

var GetDatasetVersionRequest_Base_DEFAULT *base.Base

func (p *GetDatasetVersionRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetDatasetVersionRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetDatasetVersionRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetDatasetVersionRequest) SetVersionID(val int64) {
	p.VersionID = val
}
func (p *GetDatasetVersionRequest) SetWithDeleted(val *bool) {
	p.WithDeleted = val
}
func (p *GetDatasetVersionRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetDatasetVersionRequest = map[int16]string{
	1:   "workspace_id",
	2:   "version_id",
	10:  "with_deleted",
	255: "Base",
}

func (p *GetDatasetVersionRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetDatasetVersionRequest) IsSetWithDeleted() bool {
	return p.WithDeleted != nil
}

func (p *GetDatasetVersionRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDatasetVersionRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVersionID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVersionID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDatasetVersionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetDatasetVersionRequest[fieldId]))
}

func (p *GetDatasetVersionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetDatasetVersionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionID = _field
	return nil
}
func (p *GetDatasetVersionRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WithDeleted = _field
	return nil
}
func (p *GetDatasetVersionRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetDatasetVersionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDatasetVersionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDatasetVersionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetDatasetVersionRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWithDeleted() {
		if err = oprot.WriteFieldBegin("with_deleted", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.WithDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *GetDatasetVersionRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDatasetVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatasetVersionRequest(%+v)", *p)

}

func (p *GetDatasetVersionRequest) DeepEqual(ano *GetDatasetVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.VersionID) {
		return false
	}
	if !p.Field10DeepEqual(ano.WithDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetDatasetVersionRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetDatasetVersionRequest) Field2DeepEqual(src int64) bool {

	if p.VersionID != src {
		return false
	}
	return true
}
func (p *GetDatasetVersionRequest) Field10DeepEqual(src *bool) bool {

	if p.WithDeleted == src {
		return true
	} else if p.WithDeleted == nil || src == nil {
		return false
	}
	if *p.WithDeleted != *src {
		return false
	}
	return true
}
func (p *GetDatasetVersionRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetDatasetVersionResponse struct {
	Version  *dataset.DatasetVersion `thrift:"version,1,optional" frugal:"1,optional,dataset.DatasetVersion" form:"version" json:"version,omitempty" query:"version"`
	Dataset  *dataset.Dataset        `thrift:"dataset,2,optional" frugal:"2,optional,dataset.Dataset" form:"dataset" json:"dataset,omitempty" query:"dataset"`
	BaseResp *base.BaseResp          `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetDatasetVersionResponse() *GetDatasetVersionResponse {
	return &GetDatasetVersionResponse{}
}

func (p *GetDatasetVersionResponse) InitDefault() {
}

var GetDatasetVersionResponse_Version_DEFAULT *dataset.DatasetVersion

func (p *GetDatasetVersionResponse) GetVersion() (v *dataset.DatasetVersion) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return GetDatasetVersionResponse_Version_DEFAULT
	}
	return p.Version
}

var GetDatasetVersionResponse_Dataset_DEFAULT *dataset.Dataset

func (p *GetDatasetVersionResponse) GetDataset() (v *dataset.Dataset) {
	if p == nil {
		return
	}
	if !p.IsSetDataset() {
		return GetDatasetVersionResponse_Dataset_DEFAULT
	}
	return p.Dataset
}

var GetDatasetVersionResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetDatasetVersionResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetDatasetVersionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetDatasetVersionResponse) SetVersion(val *dataset.DatasetVersion) {
	p.Version = val
}
func (p *GetDatasetVersionResponse) SetDataset(val *dataset.Dataset) {
	p.Dataset = val
}
func (p *GetDatasetVersionResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetDatasetVersionResponse = map[int16]string{
	1:   "version",
	2:   "dataset",
	255: "BaseResp",
}

func (p *GetDatasetVersionResponse) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetDatasetVersionResponse) IsSetDataset() bool {
	return p.Dataset != nil
}

func (p *GetDatasetVersionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetDatasetVersionResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDatasetVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDatasetVersionResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewDatasetVersion()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Version = _field
	return nil
}
func (p *GetDatasetVersionResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := dataset.NewDataset()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Dataset = _field
	return nil
}
func (p *GetDatasetVersionResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetDatasetVersionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDatasetVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Version.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDatasetVersionResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataset() {
		if err = oprot.WriteFieldBegin("dataset", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Dataset.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetDatasetVersionResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDatasetVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatasetVersionResponse(%+v)", *p)

}

func (p *GetDatasetVersionResponse) DeepEqual(ano *GetDatasetVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Version) {
		return false
	}
	if !p.Field2DeepEqual(ano.Dataset) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetDatasetVersionResponse) Field1DeepEqual(src *dataset.DatasetVersion) bool {

	if !p.Version.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDatasetVersionResponse) Field2DeepEqual(src *dataset.Dataset) bool {

	if !p.Dataset.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDatasetVersionResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type VersionedDataset struct {
	Version *dataset.DatasetVersion `thrift:"version,1,optional" frugal:"1,optional,dataset.DatasetVersion" form:"version" json:"version,omitempty" query:"version"`
	Dataset *dataset.Dataset        `thrift:"dataset,2,optional" frugal:"2,optional,dataset.Dataset" form:"dataset" json:"dataset,omitempty" query:"dataset"`
}

func NewVersionedDataset() *VersionedDataset {
	return &VersionedDataset{}
}

func (p *VersionedDataset) InitDefault() {
}

var VersionedDataset_Version_DEFAULT *dataset.DatasetVersion

func (p *VersionedDataset) GetVersion() (v *dataset.DatasetVersion) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return VersionedDataset_Version_DEFAULT
	}
	return p.Version
}

var VersionedDataset_Dataset_DEFAULT *dataset.Dataset

func (p *VersionedDataset) GetDataset() (v *dataset.Dataset) {
	if p == nil {
		return
	}
	if !p.IsSetDataset() {
		return VersionedDataset_Dataset_DEFAULT
	}
	return p.Dataset
}
func (p *VersionedDataset) SetVersion(val *dataset.DatasetVersion) {
	p.Version = val
}
func (p *VersionedDataset) SetDataset(val *dataset.Dataset) {
	p.Dataset = val
}

var fieldIDToName_VersionedDataset = map[int16]string{
	1: "version",
	2: "dataset",
}

func (p *VersionedDataset) IsSetVersion() bool {
	return p.Version != nil
}

func (p *VersionedDataset) IsSetDataset() bool {
	return p.Dataset != nil
}

func (p *VersionedDataset) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionedDataset[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionedDataset) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewDatasetVersion()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Version = _field
	return nil
}
func (p *VersionedDataset) ReadField2(iprot thrift.TProtocol) error {
	_field := dataset.NewDataset()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Dataset = _field
	return nil
}

func (p *VersionedDataset) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VersionedDataset"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionedDataset) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Version.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *VersionedDataset) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataset() {
		if err = oprot.WriteFieldBegin("dataset", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Dataset.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VersionedDataset) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionedDataset(%+v)", *p)

}

func (p *VersionedDataset) DeepEqual(ano *VersionedDataset) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Version) {
		return false
	}
	if !p.Field2DeepEqual(ano.Dataset) {
		return false
	}
	return true
}

func (p *VersionedDataset) Field1DeepEqual(src *dataset.DatasetVersion) bool {

	if !p.Version.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VersionedDataset) Field2DeepEqual(src *dataset.Dataset) bool {

	if !p.Dataset.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetDatasetVersionsRequest struct {
	WorkspaceID *int64  `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" path:"workspace_id" `
	VersionIds  []int64 `thrift:"version_ids,2,required" frugal:"2,required,list<i64>" json:"version_ids" form:"version_ids,required" query:"version_ids,required"`
	// 是否返回已删除的数据，默认不返回
	WithDeleted *bool      `thrift:"with_deleted,10,optional" frugal:"10,optional,bool" form:"with_deleted" json:"with_deleted,omitempty" query:"with_deleted"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetDatasetVersionsRequest() *BatchGetDatasetVersionsRequest {
	return &BatchGetDatasetVersionsRequest{}
}

func (p *BatchGetDatasetVersionsRequest) InitDefault() {
}

var BatchGetDatasetVersionsRequest_WorkspaceID_DEFAULT int64

func (p *BatchGetDatasetVersionsRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchGetDatasetVersionsRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *BatchGetDatasetVersionsRequest) GetVersionIds() (v []int64) {
	if p != nil {
		return p.VersionIds
	}
	return
}

var BatchGetDatasetVersionsRequest_WithDeleted_DEFAULT bool

func (p *BatchGetDatasetVersionsRequest) GetWithDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetWithDeleted() {
		return BatchGetDatasetVersionsRequest_WithDeleted_DEFAULT
	}
	return *p.WithDeleted
}

var BatchGetDatasetVersionsRequest_Base_DEFAULT *base.Base

func (p *BatchGetDatasetVersionsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetDatasetVersionsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetDatasetVersionsRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchGetDatasetVersionsRequest) SetVersionIds(val []int64) {
	p.VersionIds = val
}
func (p *BatchGetDatasetVersionsRequest) SetWithDeleted(val *bool) {
	p.WithDeleted = val
}
func (p *BatchGetDatasetVersionsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetDatasetVersionsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "version_ids",
	10:  "with_deleted",
	255: "Base",
}

func (p *BatchGetDatasetVersionsRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchGetDatasetVersionsRequest) IsSetWithDeleted() bool {
	return p.WithDeleted != nil
}

func (p *BatchGetDatasetVersionsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetDatasetVersionsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVersionIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVersionIds {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetDatasetVersionsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetDatasetVersionsRequest[fieldId]))
}

func (p *BatchGetDatasetVersionsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetDatasetVersionsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.VersionIds = _field
	return nil
}
func (p *BatchGetDatasetVersionsRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WithDeleted = _field
	return nil
}
func (p *BatchGetDatasetVersionsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetDatasetVersionsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetVersionsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetDatasetVersionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetDatasetVersionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_ids", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VersionIds)); err != nil {
		return err
	}
	for _, v := range p.VersionIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetDatasetVersionsRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWithDeleted() {
		if err = oprot.WriteFieldBegin("with_deleted", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.WithDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *BatchGetDatasetVersionsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetDatasetVersionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetDatasetVersionsRequest(%+v)", *p)

}

func (p *BatchGetDatasetVersionsRequest) DeepEqual(ano *BatchGetDatasetVersionsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.VersionIds) {
		return false
	}
	if !p.Field10DeepEqual(ano.WithDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetDatasetVersionsRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchGetDatasetVersionsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.VersionIds) != len(src) {
		return false
	}
	for i, v := range p.VersionIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetDatasetVersionsRequest) Field10DeepEqual(src *bool) bool {

	if p.WithDeleted == src {
		return true
	} else if p.WithDeleted == nil || src == nil {
		return false
	}
	if *p.WithDeleted != *src {
		return false
	}
	return true
}
func (p *BatchGetDatasetVersionsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetDatasetVersionsResponse struct {
	VersionedDataset []*VersionedDataset `thrift:"versioned_dataset,1,optional" frugal:"1,optional,list<VersionedDataset>" form:"versioned_dataset" json:"versioned_dataset,omitempty" query:"versioned_dataset"`
	BaseResp         *base.BaseResp      `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetDatasetVersionsResponse() *BatchGetDatasetVersionsResponse {
	return &BatchGetDatasetVersionsResponse{}
}

func (p *BatchGetDatasetVersionsResponse) InitDefault() {
}

var BatchGetDatasetVersionsResponse_VersionedDataset_DEFAULT []*VersionedDataset

func (p *BatchGetDatasetVersionsResponse) GetVersionedDataset() (v []*VersionedDataset) {
	if p == nil {
		return
	}
	if !p.IsSetVersionedDataset() {
		return BatchGetDatasetVersionsResponse_VersionedDataset_DEFAULT
	}
	return p.VersionedDataset
}

var BatchGetDatasetVersionsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetDatasetVersionsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetDatasetVersionsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetDatasetVersionsResponse) SetVersionedDataset(val []*VersionedDataset) {
	p.VersionedDataset = val
}
func (p *BatchGetDatasetVersionsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetDatasetVersionsResponse = map[int16]string{
	1:   "versioned_dataset",
	255: "BaseResp",
}

func (p *BatchGetDatasetVersionsResponse) IsSetVersionedDataset() bool {
	return p.VersionedDataset != nil
}

func (p *BatchGetDatasetVersionsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetDatasetVersionsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetDatasetVersionsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetDatasetVersionsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*VersionedDataset, 0, size)
	values := make([]VersionedDataset, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.VersionedDataset = _field
	return nil
}
func (p *BatchGetDatasetVersionsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetDatasetVersionsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetVersionsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetDatasetVersionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionedDataset() {
		if err = oprot.WriteFieldBegin("versioned_dataset", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VersionedDataset)); err != nil {
			return err
		}
		for _, v := range p.VersionedDataset {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetDatasetVersionsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetDatasetVersionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetDatasetVersionsResponse(%+v)", *p)

}

func (p *BatchGetDatasetVersionsResponse) DeepEqual(ano *BatchGetDatasetVersionsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VersionedDataset) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetDatasetVersionsResponse) Field1DeepEqual(src []*VersionedDataset) bool {

	if len(p.VersionedDataset) != len(src) {
		return false
	}
	for i, v := range p.VersionedDataset {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetDatasetVersionsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateDatasetVersionRequest struct {
	WorkspaceID *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64  `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	// 展示的版本号，SemVer2 三段式，需要大于上一版本
	Version string     `thrift:"version,3,required" frugal:"3,required,string" form:"version,required" json:"version,required" query:"version,required"`
	Desc    *string    `thrift:"desc,4,optional" frugal:"4,optional,string" form:"desc" json:"desc,omitempty" query:"desc"`
	Base    *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateDatasetVersionRequest() *CreateDatasetVersionRequest {
	return &CreateDatasetVersionRequest{}
}

func (p *CreateDatasetVersionRequest) InitDefault() {
}

var CreateDatasetVersionRequest_WorkspaceID_DEFAULT int64

func (p *CreateDatasetVersionRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return CreateDatasetVersionRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *CreateDatasetVersionRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

func (p *CreateDatasetVersionRequest) GetVersion() (v string) {
	if p != nil {
		return p.Version
	}
	return
}

var CreateDatasetVersionRequest_Desc_DEFAULT string

func (p *CreateDatasetVersionRequest) GetDesc() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDesc() {
		return CreateDatasetVersionRequest_Desc_DEFAULT
	}
	return *p.Desc
}

var CreateDatasetVersionRequest_Base_DEFAULT *base.Base

func (p *CreateDatasetVersionRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateDatasetVersionRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateDatasetVersionRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *CreateDatasetVersionRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *CreateDatasetVersionRequest) SetVersion(val string) {
	p.Version = val
}
func (p *CreateDatasetVersionRequest) SetDesc(val *string) {
	p.Desc = val
}
func (p *CreateDatasetVersionRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateDatasetVersionRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "version",
	4:   "desc",
	255: "Base",
}

func (p *CreateDatasetVersionRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *CreateDatasetVersionRequest) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *CreateDatasetVersionRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateDatasetVersionRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false
	var issetVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateDatasetVersionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateDatasetVersionRequest[fieldId]))
}

func (p *CreateDatasetVersionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateDatasetVersionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *CreateDatasetVersionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *CreateDatasetVersionRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *CreateDatasetVersionRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateDatasetVersionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDatasetVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateDatasetVersionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateDatasetVersionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateDatasetVersionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateDatasetVersionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateDatasetVersionRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateDatasetVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDatasetVersionRequest(%+v)", *p)

}

func (p *CreateDatasetVersionRequest) DeepEqual(ano *CreateDatasetVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateDatasetVersionRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *CreateDatasetVersionRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *CreateDatasetVersionRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *CreateDatasetVersionRequest) Field4DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateDatasetVersionRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateDatasetVersionResponse struct {
	ID       *int64         `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateDatasetVersionResponse() *CreateDatasetVersionResponse {
	return &CreateDatasetVersionResponse{}
}

func (p *CreateDatasetVersionResponse) InitDefault() {
}

var CreateDatasetVersionResponse_ID_DEFAULT int64

func (p *CreateDatasetVersionResponse) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return CreateDatasetVersionResponse_ID_DEFAULT
	}
	return *p.ID
}

var CreateDatasetVersionResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateDatasetVersionResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateDatasetVersionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateDatasetVersionResponse) SetID(val *int64) {
	p.ID = val
}
func (p *CreateDatasetVersionResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateDatasetVersionResponse = map[int16]string{
	1:   "id",
	255: "BaseResp",
}

func (p *CreateDatasetVersionResponse) IsSetID() bool {
	return p.ID != nil
}

func (p *CreateDatasetVersionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateDatasetVersionResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateDatasetVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateDatasetVersionResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *CreateDatasetVersionResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateDatasetVersionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDatasetVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateDatasetVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateDatasetVersionResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateDatasetVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDatasetVersionResponse(%+v)", *p)

}

func (p *CreateDatasetVersionResponse) DeepEqual(ano *CreateDatasetVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateDatasetVersionResponse) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *CreateDatasetVersionResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateDatasetSchemaRequest struct {
	WorkspaceID *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64  `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	// fieldSchema.key 为空时：插入新的一列
	// fieldSchema.key 不为空时：更新对应的列
	Fields []*dataset.FieldSchema `thrift:"fields,3,optional" frugal:"3,optional,list<dataset.FieldSchema>" form:"fields" json:"fields,omitempty" query:"fields"`
	Base   *base.Base             `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateDatasetSchemaRequest() *UpdateDatasetSchemaRequest {
	return &UpdateDatasetSchemaRequest{}
}

func (p *UpdateDatasetSchemaRequest) InitDefault() {
}

var UpdateDatasetSchemaRequest_WorkspaceID_DEFAULT int64

func (p *UpdateDatasetSchemaRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return UpdateDatasetSchemaRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *UpdateDatasetSchemaRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var UpdateDatasetSchemaRequest_Fields_DEFAULT []*dataset.FieldSchema

func (p *UpdateDatasetSchemaRequest) GetFields() (v []*dataset.FieldSchema) {
	if p == nil {
		return
	}
	if !p.IsSetFields() {
		return UpdateDatasetSchemaRequest_Fields_DEFAULT
	}
	return p.Fields
}

var UpdateDatasetSchemaRequest_Base_DEFAULT *base.Base

func (p *UpdateDatasetSchemaRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateDatasetSchemaRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateDatasetSchemaRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *UpdateDatasetSchemaRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *UpdateDatasetSchemaRequest) SetFields(val []*dataset.FieldSchema) {
	p.Fields = val
}
func (p *UpdateDatasetSchemaRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateDatasetSchemaRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "fields",
	255: "Base",
}

func (p *UpdateDatasetSchemaRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *UpdateDatasetSchemaRequest) IsSetFields() bool {
	return p.Fields != nil
}

func (p *UpdateDatasetSchemaRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateDatasetSchemaRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateDatasetSchemaRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateDatasetSchemaRequest[fieldId]))
}

func (p *UpdateDatasetSchemaRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateDatasetSchemaRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *UpdateDatasetSchemaRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.FieldSchema, 0, size)
	values := make([]dataset.FieldSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Fields = _field
	return nil
}
func (p *UpdateDatasetSchemaRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateDatasetSchemaRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDatasetSchemaRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateDatasetSchemaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateDatasetSchemaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateDatasetSchemaRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err = oprot.WriteFieldBegin("fields", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
			return err
		}
		for _, v := range p.Fields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateDatasetSchemaRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateDatasetSchemaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDatasetSchemaRequest(%+v)", *p)

}

func (p *UpdateDatasetSchemaRequest) DeepEqual(ano *UpdateDatasetSchemaRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Fields) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateDatasetSchemaRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *UpdateDatasetSchemaRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *UpdateDatasetSchemaRequest) Field3DeepEqual(src []*dataset.FieldSchema) bool {

	if len(p.Fields) != len(src) {
		return false
	}
	for i, v := range p.Fields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateDatasetSchemaRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateDatasetSchemaResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateDatasetSchemaResponse() *UpdateDatasetSchemaResponse {
	return &UpdateDatasetSchemaResponse{}
}

func (p *UpdateDatasetSchemaResponse) InitDefault() {
}

var UpdateDatasetSchemaResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateDatasetSchemaResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateDatasetSchemaResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateDatasetSchemaResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateDatasetSchemaResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdateDatasetSchemaResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateDatasetSchemaResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateDatasetSchemaResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateDatasetSchemaResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateDatasetSchemaResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDatasetSchemaResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateDatasetSchemaResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateDatasetSchemaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDatasetSchemaResponse(%+v)", *p)

}

func (p *UpdateDatasetSchemaResponse) DeepEqual(ano *UpdateDatasetSchemaResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateDatasetSchemaResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetDatasetSchemaRequest struct {
	WorkspaceID *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	DatasetID   int64  `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	// 是否获取已经删除的列，默认不返回
	WithDeleted *bool      `thrift:"with_deleted,10,optional" frugal:"10,optional,bool" json:"with_deleted,omitempty" query:"with_deleted"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetDatasetSchemaRequest() *GetDatasetSchemaRequest {
	return &GetDatasetSchemaRequest{}
}

func (p *GetDatasetSchemaRequest) InitDefault() {
}

var GetDatasetSchemaRequest_WorkspaceID_DEFAULT int64

func (p *GetDatasetSchemaRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetDatasetSchemaRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *GetDatasetSchemaRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var GetDatasetSchemaRequest_WithDeleted_DEFAULT bool

func (p *GetDatasetSchemaRequest) GetWithDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetWithDeleted() {
		return GetDatasetSchemaRequest_WithDeleted_DEFAULT
	}
	return *p.WithDeleted
}

var GetDatasetSchemaRequest_Base_DEFAULT *base.Base

func (p *GetDatasetSchemaRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetDatasetSchemaRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetDatasetSchemaRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetDatasetSchemaRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *GetDatasetSchemaRequest) SetWithDeleted(val *bool) {
	p.WithDeleted = val
}
func (p *GetDatasetSchemaRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetDatasetSchemaRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	10:  "with_deleted",
	255: "Base",
}

func (p *GetDatasetSchemaRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetDatasetSchemaRequest) IsSetWithDeleted() bool {
	return p.WithDeleted != nil
}

func (p *GetDatasetSchemaRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDatasetSchemaRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDatasetSchemaRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetDatasetSchemaRequest[fieldId]))
}

func (p *GetDatasetSchemaRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetDatasetSchemaRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *GetDatasetSchemaRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WithDeleted = _field
	return nil
}
func (p *GetDatasetSchemaRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetDatasetSchemaRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetSchemaRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDatasetSchemaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDatasetSchemaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetDatasetSchemaRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWithDeleted() {
		if err = oprot.WriteFieldBegin("with_deleted", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.WithDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *GetDatasetSchemaRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDatasetSchemaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatasetSchemaRequest(%+v)", *p)

}

func (p *GetDatasetSchemaRequest) DeepEqual(ano *GetDatasetSchemaRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field10DeepEqual(ano.WithDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetDatasetSchemaRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetDatasetSchemaRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *GetDatasetSchemaRequest) Field10DeepEqual(src *bool) bool {

	if p.WithDeleted == src {
		return true
	} else if p.WithDeleted == nil || src == nil {
		return false
	}
	if *p.WithDeleted != *src {
		return false
	}
	return true
}
func (p *GetDatasetSchemaRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetDatasetSchemaResponse struct {
	Fields   []*dataset.FieldSchema `thrift:"fields,1,optional" frugal:"1,optional,list<dataset.FieldSchema>" form:"fields" json:"fields,omitempty" query:"fields"`
	BaseResp *base.BaseResp         `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetDatasetSchemaResponse() *GetDatasetSchemaResponse {
	return &GetDatasetSchemaResponse{}
}

func (p *GetDatasetSchemaResponse) InitDefault() {
}

var GetDatasetSchemaResponse_Fields_DEFAULT []*dataset.FieldSchema

func (p *GetDatasetSchemaResponse) GetFields() (v []*dataset.FieldSchema) {
	if p == nil {
		return
	}
	if !p.IsSetFields() {
		return GetDatasetSchemaResponse_Fields_DEFAULT
	}
	return p.Fields
}

var GetDatasetSchemaResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetDatasetSchemaResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetDatasetSchemaResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetDatasetSchemaResponse) SetFields(val []*dataset.FieldSchema) {
	p.Fields = val
}
func (p *GetDatasetSchemaResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetDatasetSchemaResponse = map[int16]string{
	1:   "fields",
	255: "BaseResp",
}

func (p *GetDatasetSchemaResponse) IsSetFields() bool {
	return p.Fields != nil
}

func (p *GetDatasetSchemaResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetDatasetSchemaResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDatasetSchemaResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDatasetSchemaResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.FieldSchema, 0, size)
	values := make([]dataset.FieldSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Fields = _field
	return nil
}
func (p *GetDatasetSchemaResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetDatasetSchemaResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetSchemaResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDatasetSchemaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err = oprot.WriteFieldBegin("fields", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
			return err
		}
		for _, v := range p.Fields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDatasetSchemaResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDatasetSchemaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatasetSchemaResponse(%+v)", *p)

}

func (p *GetDatasetSchemaResponse) DeepEqual(ano *GetDatasetSchemaResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Fields) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetDatasetSchemaResponse) Field1DeepEqual(src []*dataset.FieldSchema) bool {

	if len(p.Fields) != len(src) {
		return false
	}
	for i, v := range p.Fields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetDatasetSchemaResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchCreateDatasetItemsRequest struct {
	WorkspaceID *int64                 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64                  `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	Items       []*dataset.DatasetItem `thrift:"items,3,optional" frugal:"3,optional,list<dataset.DatasetItem>" form:"items" json:"items,omitempty" query:"items"`
	// items 中存在无效数据时，默认不会写入任何数据；设置 skipInvalidItems=true 会跳过无效数据，写入有效数据
	SkipInvalidItems *bool `thrift:"skip_invalid_items,10,optional" frugal:"10,optional,bool" form:"skip_invalid_items" json:"skip_invalid_items,omitempty" query:"skip_invalid_items"`
	// 批量写入 items 如果超出数据集容量限制，默认不会写入任何数据；设置 partialAdd=true 会写入不超出容量限制的前 N 条
	AllowPartialAdd *bool      `thrift:"allow_partial_add,11,optional" frugal:"11,optional,bool" form:"allow_partial_add" json:"allow_partial_add,omitempty" query:"allow_partial_add"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchCreateDatasetItemsRequest() *BatchCreateDatasetItemsRequest {
	return &BatchCreateDatasetItemsRequest{}
}

func (p *BatchCreateDatasetItemsRequest) InitDefault() {
}

var BatchCreateDatasetItemsRequest_WorkspaceID_DEFAULT int64

func (p *BatchCreateDatasetItemsRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchCreateDatasetItemsRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *BatchCreateDatasetItemsRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var BatchCreateDatasetItemsRequest_Items_DEFAULT []*dataset.DatasetItem

func (p *BatchCreateDatasetItemsRequest) GetItems() (v []*dataset.DatasetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return BatchCreateDatasetItemsRequest_Items_DEFAULT
	}
	return p.Items
}

var BatchCreateDatasetItemsRequest_SkipInvalidItems_DEFAULT bool

func (p *BatchCreateDatasetItemsRequest) GetSkipInvalidItems() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetSkipInvalidItems() {
		return BatchCreateDatasetItemsRequest_SkipInvalidItems_DEFAULT
	}
	return *p.SkipInvalidItems
}

var BatchCreateDatasetItemsRequest_AllowPartialAdd_DEFAULT bool

func (p *BatchCreateDatasetItemsRequest) GetAllowPartialAdd() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetAllowPartialAdd() {
		return BatchCreateDatasetItemsRequest_AllowPartialAdd_DEFAULT
	}
	return *p.AllowPartialAdd
}

var BatchCreateDatasetItemsRequest_Base_DEFAULT *base.Base

func (p *BatchCreateDatasetItemsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchCreateDatasetItemsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchCreateDatasetItemsRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchCreateDatasetItemsRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *BatchCreateDatasetItemsRequest) SetItems(val []*dataset.DatasetItem) {
	p.Items = val
}
func (p *BatchCreateDatasetItemsRequest) SetSkipInvalidItems(val *bool) {
	p.SkipInvalidItems = val
}
func (p *BatchCreateDatasetItemsRequest) SetAllowPartialAdd(val *bool) {
	p.AllowPartialAdd = val
}
func (p *BatchCreateDatasetItemsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchCreateDatasetItemsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "items",
	10:  "skip_invalid_items",
	11:  "allow_partial_add",
	255: "Base",
}

func (p *BatchCreateDatasetItemsRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchCreateDatasetItemsRequest) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchCreateDatasetItemsRequest) IsSetSkipInvalidItems() bool {
	return p.SkipInvalidItems != nil
}

func (p *BatchCreateDatasetItemsRequest) IsSetAllowPartialAdd() bool {
	return p.AllowPartialAdd != nil
}

func (p *BatchCreateDatasetItemsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchCreateDatasetItemsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateDatasetItemsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchCreateDatasetItemsRequest[fieldId]))
}

func (p *BatchCreateDatasetItemsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchCreateDatasetItemsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *BatchCreateDatasetItemsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.DatasetItem, 0, size)
	values := make([]dataset.DatasetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *BatchCreateDatasetItemsRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SkipInvalidItems = _field
	return nil
}
func (p *BatchCreateDatasetItemsRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AllowPartialAdd = _field
	return nil
}
func (p *BatchCreateDatasetItemsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchCreateDatasetItemsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateDatasetItemsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateDatasetItemsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateDatasetItemsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchCreateDatasetItemsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchCreateDatasetItemsRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipInvalidItems() {
		if err = oprot.WriteFieldBegin("skip_invalid_items", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SkipInvalidItems); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *BatchCreateDatasetItemsRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowPartialAdd() {
		if err = oprot.WriteFieldBegin("allow_partial_add", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.AllowPartialAdd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *BatchCreateDatasetItemsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchCreateDatasetItemsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateDatasetItemsRequest(%+v)", *p)

}

func (p *BatchCreateDatasetItemsRequest) DeepEqual(ano *BatchCreateDatasetItemsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Items) {
		return false
	}
	if !p.Field10DeepEqual(ano.SkipInvalidItems) {
		return false
	}
	if !p.Field11DeepEqual(ano.AllowPartialAdd) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchCreateDatasetItemsRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchCreateDatasetItemsRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *BatchCreateDatasetItemsRequest) Field3DeepEqual(src []*dataset.DatasetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchCreateDatasetItemsRequest) Field10DeepEqual(src *bool) bool {

	if p.SkipInvalidItems == src {
		return true
	} else if p.SkipInvalidItems == nil || src == nil {
		return false
	}
	if *p.SkipInvalidItems != *src {
		return false
	}
	return true
}
func (p *BatchCreateDatasetItemsRequest) Field11DeepEqual(src *bool) bool {

	if p.AllowPartialAdd == src {
		return true
	} else if p.AllowPartialAdd == nil || src == nil {
		return false
	}
	if *p.AllowPartialAdd != *src {
		return false
	}
	return true
}
func (p *BatchCreateDatasetItemsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchCreateDatasetItemsResponse struct {
	// key: item 在 items 中的索引
	AddedItems map[int64]int64           `thrift:"added_items,1,optional" frugal:"1,optional,map<i64:i64>" json:"added_items" form:"added_items" query:"added_items"`
	Errors     []*dataset.ItemErrorGroup `thrift:"errors,2,optional" frugal:"2,optional,list<dataset.ItemErrorGroup>" form:"errors" json:"errors,omitempty" query:"errors"`
	/* base */
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchCreateDatasetItemsResponse() *BatchCreateDatasetItemsResponse {
	return &BatchCreateDatasetItemsResponse{}
}

func (p *BatchCreateDatasetItemsResponse) InitDefault() {
}

var BatchCreateDatasetItemsResponse_AddedItems_DEFAULT map[int64]int64

func (p *BatchCreateDatasetItemsResponse) GetAddedItems() (v map[int64]int64) {
	if p == nil {
		return
	}
	if !p.IsSetAddedItems() {
		return BatchCreateDatasetItemsResponse_AddedItems_DEFAULT
	}
	return p.AddedItems
}

var BatchCreateDatasetItemsResponse_Errors_DEFAULT []*dataset.ItemErrorGroup

func (p *BatchCreateDatasetItemsResponse) GetErrors() (v []*dataset.ItemErrorGroup) {
	if p == nil {
		return
	}
	if !p.IsSetErrors() {
		return BatchCreateDatasetItemsResponse_Errors_DEFAULT
	}
	return p.Errors
}

var BatchCreateDatasetItemsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchCreateDatasetItemsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchCreateDatasetItemsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchCreateDatasetItemsResponse) SetAddedItems(val map[int64]int64) {
	p.AddedItems = val
}
func (p *BatchCreateDatasetItemsResponse) SetErrors(val []*dataset.ItemErrorGroup) {
	p.Errors = val
}
func (p *BatchCreateDatasetItemsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchCreateDatasetItemsResponse = map[int16]string{
	1:   "added_items",
	2:   "errors",
	255: "BaseResp",
}

func (p *BatchCreateDatasetItemsResponse) IsSetAddedItems() bool {
	return p.AddedItems != nil
}

func (p *BatchCreateDatasetItemsResponse) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *BatchCreateDatasetItemsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchCreateDatasetItemsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateDatasetItemsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchCreateDatasetItemsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.AddedItems = _field
	return nil
}
func (p *BatchCreateDatasetItemsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.ItemErrorGroup, 0, size)
	values := make([]dataset.ItemErrorGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Errors = _field
	return nil
}
func (p *BatchCreateDatasetItemsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchCreateDatasetItemsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateDatasetItemsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateDatasetItemsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddedItems() {
		if err = oprot.WriteFieldBegin("added_items", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.AddedItems)); err != nil {
			return err
		}
		for k, v := range p.AddedItems {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateDatasetItemsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err = oprot.WriteFieldBegin("errors", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return err
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchCreateDatasetItemsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchCreateDatasetItemsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateDatasetItemsResponse(%+v)", *p)

}

func (p *BatchCreateDatasetItemsResponse) DeepEqual(ano *BatchCreateDatasetItemsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AddedItems) {
		return false
	}
	if !p.Field2DeepEqual(ano.Errors) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchCreateDatasetItemsResponse) Field1DeepEqual(src map[int64]int64) bool {

	if len(p.AddedItems) != len(src) {
		return false
	}
	for k, v := range p.AddedItems {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchCreateDatasetItemsResponse) Field2DeepEqual(src []*dataset.ItemErrorGroup) bool {

	if len(p.Errors) != len(src) {
		return false
	}
	for i, v := range p.Errors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchCreateDatasetItemsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateDatasetItemRequest struct {
	WorkspaceID *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64  `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	ItemID      int64  `thrift:"item_id,3,required" frugal:"3,required,i64" json:"item_id" path:"item_id,required" `
	// 单轮数据内容，当数据集为单轮时，写入此处的值
	Data []*dataset.FieldData `thrift:"data,4,optional" frugal:"4,optional,list<dataset.FieldData>" form:"data" json:"data,omitempty" query:"data"`
	// 多轮对话数据内容，当数据集为多轮对话时，写入此处的值
	RepeatedData []*dataset.ItemData `thrift:"repeated_data,5,optional" frugal:"5,optional,list<dataset.ItemData>" form:"repeated_data" json:"repeated_data,omitempty" query:"repeated_data"`
	Base         *base.Base          `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateDatasetItemRequest() *UpdateDatasetItemRequest {
	return &UpdateDatasetItemRequest{}
}

func (p *UpdateDatasetItemRequest) InitDefault() {
}

var UpdateDatasetItemRequest_WorkspaceID_DEFAULT int64

func (p *UpdateDatasetItemRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return UpdateDatasetItemRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *UpdateDatasetItemRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

func (p *UpdateDatasetItemRequest) GetItemID() (v int64) {
	if p != nil {
		return p.ItemID
	}
	return
}

var UpdateDatasetItemRequest_Data_DEFAULT []*dataset.FieldData

func (p *UpdateDatasetItemRequest) GetData() (v []*dataset.FieldData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return UpdateDatasetItemRequest_Data_DEFAULT
	}
	return p.Data
}

var UpdateDatasetItemRequest_RepeatedData_DEFAULT []*dataset.ItemData

func (p *UpdateDatasetItemRequest) GetRepeatedData() (v []*dataset.ItemData) {
	if p == nil {
		return
	}
	if !p.IsSetRepeatedData() {
		return UpdateDatasetItemRequest_RepeatedData_DEFAULT
	}
	return p.RepeatedData
}

var UpdateDatasetItemRequest_Base_DEFAULT *base.Base

func (p *UpdateDatasetItemRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateDatasetItemRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateDatasetItemRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *UpdateDatasetItemRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *UpdateDatasetItemRequest) SetItemID(val int64) {
	p.ItemID = val
}
func (p *UpdateDatasetItemRequest) SetData(val []*dataset.FieldData) {
	p.Data = val
}
func (p *UpdateDatasetItemRequest) SetRepeatedData(val []*dataset.ItemData) {
	p.RepeatedData = val
}
func (p *UpdateDatasetItemRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateDatasetItemRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "item_id",
	4:   "data",
	5:   "repeated_data",
	255: "Base",
}

func (p *UpdateDatasetItemRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *UpdateDatasetItemRequest) IsSetData() bool {
	return p.Data != nil
}

func (p *UpdateDatasetItemRequest) IsSetRepeatedData() bool {
	return p.RepeatedData != nil
}

func (p *UpdateDatasetItemRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateDatasetItemRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false
	var issetItemID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetItemID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetItemID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateDatasetItemRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateDatasetItemRequest[fieldId]))
}

func (p *UpdateDatasetItemRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateDatasetItemRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *UpdateDatasetItemRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ItemID = _field
	return nil
}
func (p *UpdateDatasetItemRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.FieldData, 0, size)
	values := make([]dataset.FieldData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *UpdateDatasetItemRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.ItemData, 0, size)
	values := make([]dataset.ItemData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RepeatedData = _field
	return nil
}
func (p *UpdateDatasetItemRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateDatasetItemRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDatasetItemRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateDatasetItemRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateDatasetItemRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateDatasetItemRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("item_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ItemID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateDatasetItemRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
			return err
		}
		for _, v := range p.Data {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *UpdateDatasetItemRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRepeatedData() {
		if err = oprot.WriteFieldBegin("repeated_data", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RepeatedData)); err != nil {
			return err
		}
		for _, v := range p.RepeatedData {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *UpdateDatasetItemRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateDatasetItemRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDatasetItemRequest(%+v)", *p)

}

func (p *UpdateDatasetItemRequest) DeepEqual(ano *UpdateDatasetItemRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field4DeepEqual(ano.Data) {
		return false
	}
	if !p.Field5DeepEqual(ano.RepeatedData) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateDatasetItemRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *UpdateDatasetItemRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *UpdateDatasetItemRequest) Field3DeepEqual(src int64) bool {

	if p.ItemID != src {
		return false
	}
	return true
}
func (p *UpdateDatasetItemRequest) Field4DeepEqual(src []*dataset.FieldData) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateDatasetItemRequest) Field5DeepEqual(src []*dataset.ItemData) bool {

	if len(p.RepeatedData) != len(src) {
		return false
	}
	for i, v := range p.RepeatedData {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateDatasetItemRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateDatasetItemResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateDatasetItemResponse() *UpdateDatasetItemResponse {
	return &UpdateDatasetItemResponse{}
}

func (p *UpdateDatasetItemResponse) InitDefault() {
}

var UpdateDatasetItemResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateDatasetItemResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateDatasetItemResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateDatasetItemResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateDatasetItemResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdateDatasetItemResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateDatasetItemResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateDatasetItemResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateDatasetItemResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateDatasetItemResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDatasetItemResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateDatasetItemResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateDatasetItemResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDatasetItemResponse(%+v)", *p)

}

func (p *UpdateDatasetItemResponse) DeepEqual(ano *UpdateDatasetItemResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateDatasetItemResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteDatasetItemRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	DatasetID   int64      `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	ItemID      int64      `thrift:"item_id,3,required" frugal:"3,required,i64" json:"item_id" path:"item_id,required" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDeleteDatasetItemRequest() *DeleteDatasetItemRequest {
	return &DeleteDatasetItemRequest{}
}

func (p *DeleteDatasetItemRequest) InitDefault() {
}

var DeleteDatasetItemRequest_WorkspaceID_DEFAULT int64

func (p *DeleteDatasetItemRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return DeleteDatasetItemRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *DeleteDatasetItemRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

func (p *DeleteDatasetItemRequest) GetItemID() (v int64) {
	if p != nil {
		return p.ItemID
	}
	return
}

var DeleteDatasetItemRequest_Base_DEFAULT *base.Base

func (p *DeleteDatasetItemRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DeleteDatasetItemRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteDatasetItemRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *DeleteDatasetItemRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *DeleteDatasetItemRequest) SetItemID(val int64) {
	p.ItemID = val
}
func (p *DeleteDatasetItemRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteDatasetItemRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "item_id",
	255: "Base",
}

func (p *DeleteDatasetItemRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *DeleteDatasetItemRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteDatasetItemRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false
	var issetItemID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetItemID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetItemID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteDatasetItemRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteDatasetItemRequest[fieldId]))
}

func (p *DeleteDatasetItemRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *DeleteDatasetItemRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *DeleteDatasetItemRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ItemID = _field
	return nil
}
func (p *DeleteDatasetItemRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeleteDatasetItemRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDatasetItemRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteDatasetItemRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeleteDatasetItemRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeleteDatasetItemRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("item_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ItemID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DeleteDatasetItemRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteDatasetItemRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteDatasetItemRequest(%+v)", *p)

}

func (p *DeleteDatasetItemRequest) DeepEqual(ano *DeleteDatasetItemRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteDatasetItemRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *DeleteDatasetItemRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *DeleteDatasetItemRequest) Field3DeepEqual(src int64) bool {

	if p.ItemID != src {
		return false
	}
	return true
}
func (p *DeleteDatasetItemRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteDatasetItemResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewDeleteDatasetItemResponse() *DeleteDatasetItemResponse {
	return &DeleteDatasetItemResponse{}
}

func (p *DeleteDatasetItemResponse) InitDefault() {
}

var DeleteDatasetItemResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DeleteDatasetItemResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DeleteDatasetItemResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteDatasetItemResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeleteDatasetItemResponse = map[int16]string{
	255: "BaseResp",
}

func (p *DeleteDatasetItemResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteDatasetItemResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteDatasetItemResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteDatasetItemResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeleteDatasetItemResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDatasetItemResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteDatasetItemResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteDatasetItemResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteDatasetItemResponse(%+v)", *p)

}

func (p *DeleteDatasetItemResponse) DeepEqual(ano *DeleteDatasetItemResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeleteDatasetItemResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDeleteDatasetItemsRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64      `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	ItemIds     []int64    `thrift:"item_ids,3,optional" frugal:"3,optional,list<i64>" json:"item_ids" form:"item_ids" query:"item_ids"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchDeleteDatasetItemsRequest() *BatchDeleteDatasetItemsRequest {
	return &BatchDeleteDatasetItemsRequest{}
}

func (p *BatchDeleteDatasetItemsRequest) InitDefault() {
}

var BatchDeleteDatasetItemsRequest_WorkspaceID_DEFAULT int64

func (p *BatchDeleteDatasetItemsRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchDeleteDatasetItemsRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *BatchDeleteDatasetItemsRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var BatchDeleteDatasetItemsRequest_ItemIds_DEFAULT []int64

func (p *BatchDeleteDatasetItemsRequest) GetItemIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemIds() {
		return BatchDeleteDatasetItemsRequest_ItemIds_DEFAULT
	}
	return p.ItemIds
}

var BatchDeleteDatasetItemsRequest_Base_DEFAULT *base.Base

func (p *BatchDeleteDatasetItemsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchDeleteDatasetItemsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchDeleteDatasetItemsRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchDeleteDatasetItemsRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *BatchDeleteDatasetItemsRequest) SetItemIds(val []int64) {
	p.ItemIds = val
}
func (p *BatchDeleteDatasetItemsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchDeleteDatasetItemsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "item_ids",
	255: "Base",
}

func (p *BatchDeleteDatasetItemsRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchDeleteDatasetItemsRequest) IsSetItemIds() bool {
	return p.ItemIds != nil
}

func (p *BatchDeleteDatasetItemsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchDeleteDatasetItemsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteDatasetItemsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchDeleteDatasetItemsRequest[fieldId]))
}

func (p *BatchDeleteDatasetItemsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchDeleteDatasetItemsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *BatchDeleteDatasetItemsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemIds = _field
	return nil
}
func (p *BatchDeleteDatasetItemsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchDeleteDatasetItemsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteDatasetItemsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteDatasetItemsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchDeleteDatasetItemsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchDeleteDatasetItemsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemIds() {
		if err = oprot.WriteFieldBegin("item_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ItemIds)); err != nil {
			return err
		}
		for _, v := range p.ItemIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchDeleteDatasetItemsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteDatasetItemsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteDatasetItemsRequest(%+v)", *p)

}

func (p *BatchDeleteDatasetItemsRequest) DeepEqual(ano *BatchDeleteDatasetItemsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchDeleteDatasetItemsRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchDeleteDatasetItemsRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *BatchDeleteDatasetItemsRequest) Field3DeepEqual(src []int64) bool {

	if len(p.ItemIds) != len(src) {
		return false
	}
	for i, v := range p.ItemIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchDeleteDatasetItemsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDeleteDatasetItemsResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchDeleteDatasetItemsResponse() *BatchDeleteDatasetItemsResponse {
	return &BatchDeleteDatasetItemsResponse{}
}

func (p *BatchDeleteDatasetItemsResponse) InitDefault() {
}

var BatchDeleteDatasetItemsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchDeleteDatasetItemsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchDeleteDatasetItemsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchDeleteDatasetItemsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchDeleteDatasetItemsResponse = map[int16]string{
	255: "BaseResp",
}

func (p *BatchDeleteDatasetItemsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchDeleteDatasetItemsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteDatasetItemsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchDeleteDatasetItemsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchDeleteDatasetItemsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteDatasetItemsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteDatasetItemsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteDatasetItemsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteDatasetItemsResponse(%+v)", *p)

}

func (p *BatchDeleteDatasetItemsResponse) DeepEqual(ano *BatchDeleteDatasetItemsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchDeleteDatasetItemsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListDatasetItemsRequest struct {
	WorkspaceID *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64  `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	/* pagination */
	PageNumber *int32 `thrift:"page_number,100,optional" frugal:"100,optional,i32" form:"page_number" json:"page_number,omitempty" query:"page_number"`
	// 分页大小(0, 200]，默认为 20
	PageSize *int32 `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	// 与 page 同时提供时，优先使用 cursor
	PageToken *string            `thrift:"page_token,102,optional" frugal:"102,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	OrderBys  []*dataset.OrderBy `thrift:"order_bys,103,optional" frugal:"103,optional,list<dataset.OrderBy>" form:"order_bys" json:"order_bys,omitempty" query:"order_bys"`
	Base      *base.Base         `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListDatasetItemsRequest() *ListDatasetItemsRequest {
	return &ListDatasetItemsRequest{}
}

func (p *ListDatasetItemsRequest) InitDefault() {
}

var ListDatasetItemsRequest_WorkspaceID_DEFAULT int64

func (p *ListDatasetItemsRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListDatasetItemsRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *ListDatasetItemsRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var ListDatasetItemsRequest_PageNumber_DEFAULT int32

func (p *ListDatasetItemsRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListDatasetItemsRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListDatasetItemsRequest_PageSize_DEFAULT int32

func (p *ListDatasetItemsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListDatasetItemsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListDatasetItemsRequest_PageToken_DEFAULT string

func (p *ListDatasetItemsRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListDatasetItemsRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListDatasetItemsRequest_OrderBys_DEFAULT []*dataset.OrderBy

func (p *ListDatasetItemsRequest) GetOrderBys() (v []*dataset.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListDatasetItemsRequest_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListDatasetItemsRequest_Base_DEFAULT *base.Base

func (p *ListDatasetItemsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListDatasetItemsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListDatasetItemsRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListDatasetItemsRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *ListDatasetItemsRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListDatasetItemsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListDatasetItemsRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListDatasetItemsRequest) SetOrderBys(val []*dataset.OrderBy) {
	p.OrderBys = val
}
func (p *ListDatasetItemsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListDatasetItemsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	100: "page_number",
	101: "page_size",
	102: "page_token",
	103: "order_bys",
	255: "Base",
}

func (p *ListDatasetItemsRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListDatasetItemsRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListDatasetItemsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListDatasetItemsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListDatasetItemsRequest) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListDatasetItemsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListDatasetItemsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDatasetItemsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListDatasetItemsRequest[fieldId]))
}

func (p *ListDatasetItemsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListDatasetItemsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *ListDatasetItemsRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListDatasetItemsRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListDatasetItemsRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListDatasetItemsRequest) ReadField103(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.OrderBy, 0, size)
	values := make([]dataset.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListDatasetItemsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListDatasetItemsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetItemsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDatasetItemsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDatasetItemsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListDatasetItemsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListDatasetItemsRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListDatasetItemsRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *ListDatasetItemsRequest) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *ListDatasetItemsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDatasetItemsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDatasetItemsRequest(%+v)", *p)

}

func (p *ListDatasetItemsRequest) DeepEqual(ano *ListDatasetItemsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListDatasetItemsRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListDatasetItemsRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *ListDatasetItemsRequest) Field100DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListDatasetItemsRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListDatasetItemsRequest) Field102DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDatasetItemsRequest) Field103DeepEqual(src []*dataset.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListDatasetItemsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListDatasetItemsResponse struct {
	Items []*dataset.DatasetItem `thrift:"items,1,optional" frugal:"1,optional,list<dataset.DatasetItem>" form:"items" json:"items,omitempty" query:"items"`
	/* pagination */
	NextPageToken *string        `thrift:"next_page_token,100,optional" frugal:"100,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int64         `thrift:"total,101,optional" frugal:"101,optional,i64" json:"total" form:"total" query:"total"`
	BaseResp      *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListDatasetItemsResponse() *ListDatasetItemsResponse {
	return &ListDatasetItemsResponse{}
}

func (p *ListDatasetItemsResponse) InitDefault() {
}

var ListDatasetItemsResponse_Items_DEFAULT []*dataset.DatasetItem

func (p *ListDatasetItemsResponse) GetItems() (v []*dataset.DatasetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return ListDatasetItemsResponse_Items_DEFAULT
	}
	return p.Items
}

var ListDatasetItemsResponse_NextPageToken_DEFAULT string

func (p *ListDatasetItemsResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListDatasetItemsResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListDatasetItemsResponse_Total_DEFAULT int64

func (p *ListDatasetItemsResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListDatasetItemsResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListDatasetItemsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListDatasetItemsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListDatasetItemsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListDatasetItemsResponse) SetItems(val []*dataset.DatasetItem) {
	p.Items = val
}
func (p *ListDatasetItemsResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListDatasetItemsResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *ListDatasetItemsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListDatasetItemsResponse = map[int16]string{
	1:   "items",
	100: "next_page_token",
	101: "total",
	255: "BaseResp",
}

func (p *ListDatasetItemsResponse) IsSetItems() bool {
	return p.Items != nil
}

func (p *ListDatasetItemsResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListDatasetItemsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListDatasetItemsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListDatasetItemsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDatasetItemsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListDatasetItemsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.DatasetItem, 0, size)
	values := make([]dataset.DatasetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *ListDatasetItemsResponse) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListDatasetItemsResponse) ReadField101(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListDatasetItemsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListDatasetItemsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetItemsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDatasetItemsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDatasetItemsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListDatasetItemsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListDatasetItemsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDatasetItemsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDatasetItemsResponse(%+v)", *p)

}

func (p *ListDatasetItemsResponse) DeepEqual(ano *ListDatasetItemsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field100DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListDatasetItemsResponse) Field1DeepEqual(src []*dataset.DatasetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListDatasetItemsResponse) Field100DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDatasetItemsResponse) Field101DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListDatasetItemsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListDatasetItemsByVersionRequest struct {
	WorkspaceID *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64  `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	VersionID   int64  `thrift:"version_id,3,required" frugal:"3,required,i64" json:"version_id" path:"version_id,required" `
	/* pagination */
	PageNumber *int32 `thrift:"page_number,100,optional" frugal:"100,optional,i32" form:"page_number" json:"page_number,omitempty" query:"page_number"`
	// 分页大小(0, 200]，默认为 20
	PageSize *int32 `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	// 与 page 同时提供时，优先使用 cursor
	PageToken *string            `thrift:"page_token,102,optional" frugal:"102,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	OrderBys  []*dataset.OrderBy `thrift:"order_bys,103,optional" frugal:"103,optional,list<dataset.OrderBy>" form:"order_bys" json:"order_bys,omitempty" query:"order_bys"`
	Base      *base.Base         `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListDatasetItemsByVersionRequest() *ListDatasetItemsByVersionRequest {
	return &ListDatasetItemsByVersionRequest{}
}

func (p *ListDatasetItemsByVersionRequest) InitDefault() {
}

var ListDatasetItemsByVersionRequest_WorkspaceID_DEFAULT int64

func (p *ListDatasetItemsByVersionRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListDatasetItemsByVersionRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *ListDatasetItemsByVersionRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

func (p *ListDatasetItemsByVersionRequest) GetVersionID() (v int64) {
	if p != nil {
		return p.VersionID
	}
	return
}

var ListDatasetItemsByVersionRequest_PageNumber_DEFAULT int32

func (p *ListDatasetItemsByVersionRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListDatasetItemsByVersionRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListDatasetItemsByVersionRequest_PageSize_DEFAULT int32

func (p *ListDatasetItemsByVersionRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListDatasetItemsByVersionRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListDatasetItemsByVersionRequest_PageToken_DEFAULT string

func (p *ListDatasetItemsByVersionRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListDatasetItemsByVersionRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListDatasetItemsByVersionRequest_OrderBys_DEFAULT []*dataset.OrderBy

func (p *ListDatasetItemsByVersionRequest) GetOrderBys() (v []*dataset.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListDatasetItemsByVersionRequest_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListDatasetItemsByVersionRequest_Base_DEFAULT *base.Base

func (p *ListDatasetItemsByVersionRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListDatasetItemsByVersionRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListDatasetItemsByVersionRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListDatasetItemsByVersionRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *ListDatasetItemsByVersionRequest) SetVersionID(val int64) {
	p.VersionID = val
}
func (p *ListDatasetItemsByVersionRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListDatasetItemsByVersionRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListDatasetItemsByVersionRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListDatasetItemsByVersionRequest) SetOrderBys(val []*dataset.OrderBy) {
	p.OrderBys = val
}
func (p *ListDatasetItemsByVersionRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListDatasetItemsByVersionRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "version_id",
	100: "page_number",
	101: "page_size",
	102: "page_token",
	103: "order_bys",
	255: "Base",
}

func (p *ListDatasetItemsByVersionRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListDatasetItemsByVersionRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListDatasetItemsByVersionRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListDatasetItemsByVersionRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListDatasetItemsByVersionRequest) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListDatasetItemsByVersionRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListDatasetItemsByVersionRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false
	var issetVersionID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersionID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDatasetItemsByVersionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListDatasetItemsByVersionRequest[fieldId]))
}

func (p *ListDatasetItemsByVersionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListDatasetItemsByVersionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *ListDatasetItemsByVersionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionID = _field
	return nil
}
func (p *ListDatasetItemsByVersionRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListDatasetItemsByVersionRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListDatasetItemsByVersionRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListDatasetItemsByVersionRequest) ReadField103(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.OrderBy, 0, size)
	values := make([]dataset.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListDatasetItemsByVersionRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListDatasetItemsByVersionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetItemsByVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDatasetItemsByVersionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDatasetItemsByVersionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListDatasetItemsByVersionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListDatasetItemsByVersionRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListDatasetItemsByVersionRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListDatasetItemsByVersionRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *ListDatasetItemsByVersionRequest) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *ListDatasetItemsByVersionRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDatasetItemsByVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDatasetItemsByVersionRequest(%+v)", *p)

}

func (p *ListDatasetItemsByVersionRequest) DeepEqual(ano *ListDatasetItemsByVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionID) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListDatasetItemsByVersionRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListDatasetItemsByVersionRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *ListDatasetItemsByVersionRequest) Field3DeepEqual(src int64) bool {

	if p.VersionID != src {
		return false
	}
	return true
}
func (p *ListDatasetItemsByVersionRequest) Field100DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListDatasetItemsByVersionRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListDatasetItemsByVersionRequest) Field102DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDatasetItemsByVersionRequest) Field103DeepEqual(src []*dataset.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListDatasetItemsByVersionRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListDatasetItemsByVersionResponse struct {
	Items []*dataset.DatasetItem `thrift:"items,1,optional" frugal:"1,optional,list<dataset.DatasetItem>" form:"items" json:"items,omitempty" query:"items"`
	/* pagination */
	NextPageToken *string        `thrift:"next_page_token,100,optional" frugal:"100,optional,string" json:"next_page_token" form:"next_page_token" query:"next_page_token"`
	Total         *int64         `thrift:"total,101,optional" frugal:"101,optional,i64" json:"total" form:"total" query:"total"`
	BaseResp      *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListDatasetItemsByVersionResponse() *ListDatasetItemsByVersionResponse {
	return &ListDatasetItemsByVersionResponse{}
}

func (p *ListDatasetItemsByVersionResponse) InitDefault() {
}

var ListDatasetItemsByVersionResponse_Items_DEFAULT []*dataset.DatasetItem

func (p *ListDatasetItemsByVersionResponse) GetItems() (v []*dataset.DatasetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return ListDatasetItemsByVersionResponse_Items_DEFAULT
	}
	return p.Items
}

var ListDatasetItemsByVersionResponse_NextPageToken_DEFAULT string

func (p *ListDatasetItemsByVersionResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListDatasetItemsByVersionResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListDatasetItemsByVersionResponse_Total_DEFAULT int64

func (p *ListDatasetItemsByVersionResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListDatasetItemsByVersionResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListDatasetItemsByVersionResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListDatasetItemsByVersionResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListDatasetItemsByVersionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListDatasetItemsByVersionResponse) SetItems(val []*dataset.DatasetItem) {
	p.Items = val
}
func (p *ListDatasetItemsByVersionResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListDatasetItemsByVersionResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *ListDatasetItemsByVersionResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListDatasetItemsByVersionResponse = map[int16]string{
	1:   "items",
	100: "next_page_token",
	101: "total",
	255: "BaseResp",
}

func (p *ListDatasetItemsByVersionResponse) IsSetItems() bool {
	return p.Items != nil
}

func (p *ListDatasetItemsByVersionResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListDatasetItemsByVersionResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListDatasetItemsByVersionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListDatasetItemsByVersionResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDatasetItemsByVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListDatasetItemsByVersionResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.DatasetItem, 0, size)
	values := make([]dataset.DatasetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *ListDatasetItemsByVersionResponse) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListDatasetItemsByVersionResponse) ReadField101(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListDatasetItemsByVersionResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListDatasetItemsByVersionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetItemsByVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDatasetItemsByVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDatasetItemsByVersionResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListDatasetItemsByVersionResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListDatasetItemsByVersionResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDatasetItemsByVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDatasetItemsByVersionResponse(%+v)", *p)

}

func (p *ListDatasetItemsByVersionResponse) DeepEqual(ano *ListDatasetItemsByVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field100DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListDatasetItemsByVersionResponse) Field1DeepEqual(src []*dataset.DatasetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListDatasetItemsByVersionResponse) Field100DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDatasetItemsByVersionResponse) Field101DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListDatasetItemsByVersionResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetDatasetItemRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	DatasetID   int64      `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	ItemID      int64      `thrift:"item_id,3,required" frugal:"3,required,i64" json:"item_id" path:"item_id,required" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetDatasetItemRequest() *GetDatasetItemRequest {
	return &GetDatasetItemRequest{}
}

func (p *GetDatasetItemRequest) InitDefault() {
}

var GetDatasetItemRequest_WorkspaceID_DEFAULT int64

func (p *GetDatasetItemRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetDatasetItemRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *GetDatasetItemRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

func (p *GetDatasetItemRequest) GetItemID() (v int64) {
	if p != nil {
		return p.ItemID
	}
	return
}

var GetDatasetItemRequest_Base_DEFAULT *base.Base

func (p *GetDatasetItemRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetDatasetItemRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetDatasetItemRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetDatasetItemRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *GetDatasetItemRequest) SetItemID(val int64) {
	p.ItemID = val
}
func (p *GetDatasetItemRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetDatasetItemRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "item_id",
	255: "Base",
}

func (p *GetDatasetItemRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetDatasetItemRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDatasetItemRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false
	var issetItemID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetItemID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetItemID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDatasetItemRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetDatasetItemRequest[fieldId]))
}

func (p *GetDatasetItemRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetDatasetItemRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *GetDatasetItemRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ItemID = _field
	return nil
}
func (p *GetDatasetItemRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetDatasetItemRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetItemRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDatasetItemRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDatasetItemRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetDatasetItemRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("item_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ItemID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetDatasetItemRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDatasetItemRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatasetItemRequest(%+v)", *p)

}

func (p *GetDatasetItemRequest) DeepEqual(ano *GetDatasetItemRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetDatasetItemRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetDatasetItemRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *GetDatasetItemRequest) Field3DeepEqual(src int64) bool {

	if p.ItemID != src {
		return false
	}
	return true
}
func (p *GetDatasetItemRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetDatasetItemResponse struct {
	Item     *dataset.DatasetItem `thrift:"item,1,optional" frugal:"1,optional,dataset.DatasetItem" form:"item" json:"item,omitempty" query:"item"`
	BaseResp *base.BaseResp       `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetDatasetItemResponse() *GetDatasetItemResponse {
	return &GetDatasetItemResponse{}
}

func (p *GetDatasetItemResponse) InitDefault() {
}

var GetDatasetItemResponse_Item_DEFAULT *dataset.DatasetItem

func (p *GetDatasetItemResponse) GetItem() (v *dataset.DatasetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItem() {
		return GetDatasetItemResponse_Item_DEFAULT
	}
	return p.Item
}

var GetDatasetItemResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetDatasetItemResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetDatasetItemResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetDatasetItemResponse) SetItem(val *dataset.DatasetItem) {
	p.Item = val
}
func (p *GetDatasetItemResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetDatasetItemResponse = map[int16]string{
	1:   "item",
	255: "BaseResp",
}

func (p *GetDatasetItemResponse) IsSetItem() bool {
	return p.Item != nil
}

func (p *GetDatasetItemResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetDatasetItemResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDatasetItemResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDatasetItemResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewDatasetItem()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Item = _field
	return nil
}
func (p *GetDatasetItemResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetDatasetItemResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetItemResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDatasetItemResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItem() {
		if err = oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Item.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDatasetItemResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDatasetItemResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatasetItemResponse(%+v)", *p)

}

func (p *GetDatasetItemResponse) DeepEqual(ano *GetDatasetItemResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Item) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetDatasetItemResponse) Field1DeepEqual(src *dataset.DatasetItem) bool {

	if !p.Item.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDatasetItemResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetDatasetItemsRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64      `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	ItemIds     []int64    `thrift:"item_ids,3,required" frugal:"3,required,list<i64>" json:"item_ids" form:"item_ids,required" query:"item_ids,required"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetDatasetItemsRequest() *BatchGetDatasetItemsRequest {
	return &BatchGetDatasetItemsRequest{}
}

func (p *BatchGetDatasetItemsRequest) InitDefault() {
}

var BatchGetDatasetItemsRequest_WorkspaceID_DEFAULT int64

func (p *BatchGetDatasetItemsRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchGetDatasetItemsRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *BatchGetDatasetItemsRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

func (p *BatchGetDatasetItemsRequest) GetItemIds() (v []int64) {
	if p != nil {
		return p.ItemIds
	}
	return
}

var BatchGetDatasetItemsRequest_Base_DEFAULT *base.Base

func (p *BatchGetDatasetItemsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetDatasetItemsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetDatasetItemsRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchGetDatasetItemsRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *BatchGetDatasetItemsRequest) SetItemIds(val []int64) {
	p.ItemIds = val
}
func (p *BatchGetDatasetItemsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetDatasetItemsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "item_ids",
	255: "Base",
}

func (p *BatchGetDatasetItemsRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchGetDatasetItemsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetDatasetItemsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false
	var issetItemIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetItemIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetItemIds {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetDatasetItemsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetDatasetItemsRequest[fieldId]))
}

func (p *BatchGetDatasetItemsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetDatasetItemsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *BatchGetDatasetItemsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemIds = _field
	return nil
}
func (p *BatchGetDatasetItemsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetDatasetItemsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetItemsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetDatasetItemsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetDatasetItemsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetDatasetItemsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("item_ids", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ItemIds)); err != nil {
		return err
	}
	for _, v := range p.ItemIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetDatasetItemsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetDatasetItemsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetDatasetItemsRequest(%+v)", *p)

}

func (p *BatchGetDatasetItemsRequest) DeepEqual(ano *BatchGetDatasetItemsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetDatasetItemsRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchGetDatasetItemsRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *BatchGetDatasetItemsRequest) Field3DeepEqual(src []int64) bool {

	if len(p.ItemIds) != len(src) {
		return false
	}
	for i, v := range p.ItemIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetDatasetItemsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetDatasetItemsResponse struct {
	Items    []*dataset.DatasetItem `thrift:"items,1,optional" frugal:"1,optional,list<dataset.DatasetItem>" form:"items" json:"items,omitempty" query:"items"`
	BaseResp *base.BaseResp         `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetDatasetItemsResponse() *BatchGetDatasetItemsResponse {
	return &BatchGetDatasetItemsResponse{}
}

func (p *BatchGetDatasetItemsResponse) InitDefault() {
}

var BatchGetDatasetItemsResponse_Items_DEFAULT []*dataset.DatasetItem

func (p *BatchGetDatasetItemsResponse) GetItems() (v []*dataset.DatasetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return BatchGetDatasetItemsResponse_Items_DEFAULT
	}
	return p.Items
}

var BatchGetDatasetItemsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetDatasetItemsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetDatasetItemsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetDatasetItemsResponse) SetItems(val []*dataset.DatasetItem) {
	p.Items = val
}
func (p *BatchGetDatasetItemsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetDatasetItemsResponse = map[int16]string{
	1:   "items",
	255: "BaseResp",
}

func (p *BatchGetDatasetItemsResponse) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchGetDatasetItemsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetDatasetItemsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetDatasetItemsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetDatasetItemsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.DatasetItem, 0, size)
	values := make([]dataset.DatasetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *BatchGetDatasetItemsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetDatasetItemsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetItemsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetDatasetItemsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetDatasetItemsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetDatasetItemsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetDatasetItemsResponse(%+v)", *p)

}

func (p *BatchGetDatasetItemsResponse) DeepEqual(ano *BatchGetDatasetItemsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetDatasetItemsResponse) Field1DeepEqual(src []*dataset.DatasetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetDatasetItemsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetDatasetItemsByVersionRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64      `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	VersionID   int64      `thrift:"version_id,3,required" frugal:"3,required,i64" json:"version_id" path:"version_id,required" `
	ItemIds     []int64    `thrift:"item_ids,4,required" frugal:"4,required,list<i64>" json:"item_ids" form:"item_ids,required" query:"item_ids,required"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetDatasetItemsByVersionRequest() *BatchGetDatasetItemsByVersionRequest {
	return &BatchGetDatasetItemsByVersionRequest{}
}

func (p *BatchGetDatasetItemsByVersionRequest) InitDefault() {
}

var BatchGetDatasetItemsByVersionRequest_WorkspaceID_DEFAULT int64

func (p *BatchGetDatasetItemsByVersionRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchGetDatasetItemsByVersionRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *BatchGetDatasetItemsByVersionRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

func (p *BatchGetDatasetItemsByVersionRequest) GetVersionID() (v int64) {
	if p != nil {
		return p.VersionID
	}
	return
}

func (p *BatchGetDatasetItemsByVersionRequest) GetItemIds() (v []int64) {
	if p != nil {
		return p.ItemIds
	}
	return
}

var BatchGetDatasetItemsByVersionRequest_Base_DEFAULT *base.Base

func (p *BatchGetDatasetItemsByVersionRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetDatasetItemsByVersionRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetDatasetItemsByVersionRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchGetDatasetItemsByVersionRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *BatchGetDatasetItemsByVersionRequest) SetVersionID(val int64) {
	p.VersionID = val
}
func (p *BatchGetDatasetItemsByVersionRequest) SetItemIds(val []int64) {
	p.ItemIds = val
}
func (p *BatchGetDatasetItemsByVersionRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetDatasetItemsByVersionRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	3:   "version_id",
	4:   "item_ids",
	255: "Base",
}

func (p *BatchGetDatasetItemsByVersionRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchGetDatasetItemsByVersionRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetDatasetItemsByVersionRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false
	var issetVersionID bool = false
	var issetItemIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetItemIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersionID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetItemIds {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetDatasetItemsByVersionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetDatasetItemsByVersionRequest[fieldId]))
}

func (p *BatchGetDatasetItemsByVersionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetDatasetItemsByVersionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *BatchGetDatasetItemsByVersionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionID = _field
	return nil
}
func (p *BatchGetDatasetItemsByVersionRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemIds = _field
	return nil
}
func (p *BatchGetDatasetItemsByVersionRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetDatasetItemsByVersionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetItemsByVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetDatasetItemsByVersionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetDatasetItemsByVersionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetDatasetItemsByVersionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetDatasetItemsByVersionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("item_ids", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ItemIds)); err != nil {
		return err
	}
	for _, v := range p.ItemIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchGetDatasetItemsByVersionRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetDatasetItemsByVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetDatasetItemsByVersionRequest(%+v)", *p)

}

func (p *BatchGetDatasetItemsByVersionRequest) DeepEqual(ano *BatchGetDatasetItemsByVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionID) {
		return false
	}
	if !p.Field4DeepEqual(ano.ItemIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetDatasetItemsByVersionRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchGetDatasetItemsByVersionRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *BatchGetDatasetItemsByVersionRequest) Field3DeepEqual(src int64) bool {

	if p.VersionID != src {
		return false
	}
	return true
}
func (p *BatchGetDatasetItemsByVersionRequest) Field4DeepEqual(src []int64) bool {

	if len(p.ItemIds) != len(src) {
		return false
	}
	for i, v := range p.ItemIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetDatasetItemsByVersionRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetDatasetItemsByVersionResponse struct {
	Items    []*dataset.DatasetItem `thrift:"items,1,optional" frugal:"1,optional,list<dataset.DatasetItem>" form:"items" json:"items,omitempty" query:"items"`
	BaseResp *base.BaseResp         `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetDatasetItemsByVersionResponse() *BatchGetDatasetItemsByVersionResponse {
	return &BatchGetDatasetItemsByVersionResponse{}
}

func (p *BatchGetDatasetItemsByVersionResponse) InitDefault() {
}

var BatchGetDatasetItemsByVersionResponse_Items_DEFAULT []*dataset.DatasetItem

func (p *BatchGetDatasetItemsByVersionResponse) GetItems() (v []*dataset.DatasetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return BatchGetDatasetItemsByVersionResponse_Items_DEFAULT
	}
	return p.Items
}

var BatchGetDatasetItemsByVersionResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetDatasetItemsByVersionResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetDatasetItemsByVersionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetDatasetItemsByVersionResponse) SetItems(val []*dataset.DatasetItem) {
	p.Items = val
}
func (p *BatchGetDatasetItemsByVersionResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetDatasetItemsByVersionResponse = map[int16]string{
	1:   "items",
	255: "BaseResp",
}

func (p *BatchGetDatasetItemsByVersionResponse) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchGetDatasetItemsByVersionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetDatasetItemsByVersionResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetDatasetItemsByVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetDatasetItemsByVersionResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.DatasetItem, 0, size)
	values := make([]dataset.DatasetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *BatchGetDatasetItemsByVersionResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetDatasetItemsByVersionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetItemsByVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetDatasetItemsByVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetDatasetItemsByVersionResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetDatasetItemsByVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetDatasetItemsByVersionResponse(%+v)", *p)

}

func (p *BatchGetDatasetItemsByVersionResponse) DeepEqual(ano *BatchGetDatasetItemsByVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetDatasetItemsByVersionResponse) Field1DeepEqual(src []*dataset.DatasetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetDatasetItemsByVersionResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ClearDatasetItemRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DatasetID   int64      `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" path:"dataset_id,required" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewClearDatasetItemRequest() *ClearDatasetItemRequest {
	return &ClearDatasetItemRequest{}
}

func (p *ClearDatasetItemRequest) InitDefault() {
}

var ClearDatasetItemRequest_WorkspaceID_DEFAULT int64

func (p *ClearDatasetItemRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ClearDatasetItemRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *ClearDatasetItemRequest) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var ClearDatasetItemRequest_Base_DEFAULT *base.Base

func (p *ClearDatasetItemRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ClearDatasetItemRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ClearDatasetItemRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ClearDatasetItemRequest) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *ClearDatasetItemRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ClearDatasetItemRequest = map[int16]string{
	1:   "workspace_id",
	2:   "dataset_id",
	255: "Base",
}

func (p *ClearDatasetItemRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ClearDatasetItemRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ClearDatasetItemRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClearDatasetItemRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ClearDatasetItemRequest[fieldId]))
}

func (p *ClearDatasetItemRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ClearDatasetItemRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *ClearDatasetItemRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ClearDatasetItemRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearDatasetItemRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClearDatasetItemRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ClearDatasetItemRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ClearDatasetItemRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ClearDatasetItemRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearDatasetItemRequest(%+v)", *p)

}

func (p *ClearDatasetItemRequest) DeepEqual(ano *ClearDatasetItemRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ClearDatasetItemRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ClearDatasetItemRequest) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *ClearDatasetItemRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ClearDatasetItemResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewClearDatasetItemResponse() *ClearDatasetItemResponse {
	return &ClearDatasetItemResponse{}
}

func (p *ClearDatasetItemResponse) InitDefault() {
}

var ClearDatasetItemResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ClearDatasetItemResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ClearDatasetItemResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ClearDatasetItemResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ClearDatasetItemResponse = map[int16]string{
	255: "BaseResp",
}

func (p *ClearDatasetItemResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ClearDatasetItemResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClearDatasetItemResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClearDatasetItemResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ClearDatasetItemResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearDatasetItemResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClearDatasetItemResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ClearDatasetItemResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearDatasetItemResponse(%+v)", *p)

}

func (p *ClearDatasetItemResponse) DeepEqual(ano *ClearDatasetItemResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ClearDatasetItemResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetService interface {
	/* Dataset */
	// 新增数据集
	CreateDataset(ctx context.Context, req *CreateDatasetRequest) (r *CreateDatasetResponse, err error)
	// 修改数据集
	UpdateDataset(ctx context.Context, req *UpdateDatasetRequest) (r *UpdateDatasetResponse, err error)
	// 删除数据集
	DeleteDataset(ctx context.Context, req *DeleteDatasetRequest) (r *DeleteDatasetResponse, err error)
	// 获取数据集列表
	ListDatasets(ctx context.Context, req *ListDatasetsRequest) (r *ListDatasetsResponse, err error)
	// 数据集当前信息（不包括数据）
	GetDataset(ctx context.Context, req *GetDatasetRequest) (r *GetDatasetResponse, err error)
	// 批量获取数据集
	BatchGetDatasets(ctx context.Context, req *BatchGetDatasetsRequest) (r *BatchGetDatasetsResponse, err error)
	// 导入数据
	ImportDataset(ctx context.Context, req *ImportDatasetRequest) (r *ImportDatasetResponse, err error)
	// 任务(导入、导出、转换)详情
	GetDatasetIOJob(ctx context.Context, req *GetDatasetIOJobRequest) (r *GetDatasetIOJobResponse, err error)
	// 数据集任务列表
	ListDatasetIOJobs(ctx context.Context, req *ListDatasetIOJobsRequest) (r *ListDatasetIOJobsResponse, err error)
	/* Dataset Version */
	// 生成一个新版本
	CreateDatasetVersion(ctx context.Context, req *CreateDatasetVersionRequest) (r *CreateDatasetVersionResponse, err error)
	// 版本列表
	ListDatasetVersions(ctx context.Context, req *ListDatasetVersionsRequest) (r *ListDatasetVersionsResponse, err error)
	// 获取指定版本的数据集详情
	GetDatasetVersion(ctx context.Context, req *GetDatasetVersionRequest) (r *GetDatasetVersionResponse, err error)
	// 批量获取指定版本的数据集详情
	BatchGetDatasetVersions(ctx context.Context, req *BatchGetDatasetVersionsRequest) (r *BatchGetDatasetVersionsResponse, err error)
	/* Dataset Schema */
	// 获取数据集当前的 schema
	GetDatasetSchema(ctx context.Context, req *GetDatasetSchemaRequest) (r *GetDatasetSchemaResponse, err error)
	// 覆盖更新 schema
	UpdateDatasetSchema(ctx context.Context, req *UpdateDatasetSchemaRequest) (r *UpdateDatasetSchemaResponse, err error)
	/* Dataset Item */
	// 批量新增数据
	BatchCreateDatasetItems(ctx context.Context, req *BatchCreateDatasetItemsRequest) (r *BatchCreateDatasetItemsResponse, err error)
	// 更新数据
	UpdateDatasetItem(ctx context.Context, req *UpdateDatasetItemRequest) (r *UpdateDatasetItemResponse, err error)
	// 删除数据
	DeleteDatasetItem(ctx context.Context, req *DeleteDatasetItemRequest) (r *DeleteDatasetItemResponse, err error)
	// 批量删除数据
	BatchDeleteDatasetItems(ctx context.Context, req *BatchDeleteDatasetItemsRequest) (r *BatchDeleteDatasetItemsResponse, err error)
	// 分页查询当前数据
	ListDatasetItems(ctx context.Context, req *ListDatasetItemsRequest) (r *ListDatasetItemsResponse, err error)
	// 分页查询指定版本的数据
	ListDatasetItemsByVersion(ctx context.Context, req *ListDatasetItemsByVersionRequest) (r *ListDatasetItemsByVersionResponse, err error)
	// 获取一行数据
	GetDatasetItem(ctx context.Context, req *GetDatasetItemRequest) (r *GetDatasetItemResponse, err error)
	// 批量获取数据
	BatchGetDatasetItems(ctx context.Context, req *BatchGetDatasetItemsRequest) (r *BatchGetDatasetItemsResponse, err error)
	// 批量获取指定版本的数据
	BatchGetDatasetItemsByVersion(ctx context.Context, req *BatchGetDatasetItemsByVersionRequest) (r *BatchGetDatasetItemsByVersionResponse, err error)
	// 清除(草稿)数据项
	ClearDatasetItem(ctx context.Context, req *ClearDatasetItemRequest) (r *ClearDatasetItemResponse, err error)
}

type DatasetServiceClient struct {
	c thrift.TClient
}

func NewDatasetServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DatasetServiceClient {
	return &DatasetServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDatasetServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DatasetServiceClient {
	return &DatasetServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDatasetServiceClient(c thrift.TClient) *DatasetServiceClient {
	return &DatasetServiceClient{
		c: c,
	}
}

func (p *DatasetServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *DatasetServiceClient) CreateDataset(ctx context.Context, req *CreateDatasetRequest) (r *CreateDatasetResponse, err error) {
	var _args DatasetServiceCreateDatasetArgs
	_args.Req = req
	var _result DatasetServiceCreateDatasetResult
	if err = p.Client_().Call(ctx, "CreateDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) UpdateDataset(ctx context.Context, req *UpdateDatasetRequest) (r *UpdateDatasetResponse, err error) {
	var _args DatasetServiceUpdateDatasetArgs
	_args.Req = req
	var _result DatasetServiceUpdateDatasetResult
	if err = p.Client_().Call(ctx, "UpdateDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) DeleteDataset(ctx context.Context, req *DeleteDatasetRequest) (r *DeleteDatasetResponse, err error) {
	var _args DatasetServiceDeleteDatasetArgs
	_args.Req = req
	var _result DatasetServiceDeleteDatasetResult
	if err = p.Client_().Call(ctx, "DeleteDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) ListDatasets(ctx context.Context, req *ListDatasetsRequest) (r *ListDatasetsResponse, err error) {
	var _args DatasetServiceListDatasetsArgs
	_args.Req = req
	var _result DatasetServiceListDatasetsResult
	if err = p.Client_().Call(ctx, "ListDatasets", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) GetDataset(ctx context.Context, req *GetDatasetRequest) (r *GetDatasetResponse, err error) {
	var _args DatasetServiceGetDatasetArgs
	_args.Req = req
	var _result DatasetServiceGetDatasetResult
	if err = p.Client_().Call(ctx, "GetDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) BatchGetDatasets(ctx context.Context, req *BatchGetDatasetsRequest) (r *BatchGetDatasetsResponse, err error) {
	var _args DatasetServiceBatchGetDatasetsArgs
	_args.Req = req
	var _result DatasetServiceBatchGetDatasetsResult
	if err = p.Client_().Call(ctx, "BatchGetDatasets", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) ImportDataset(ctx context.Context, req *ImportDatasetRequest) (r *ImportDatasetResponse, err error) {
	var _args DatasetServiceImportDatasetArgs
	_args.Req = req
	var _result DatasetServiceImportDatasetResult
	if err = p.Client_().Call(ctx, "ImportDataset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) GetDatasetIOJob(ctx context.Context, req *GetDatasetIOJobRequest) (r *GetDatasetIOJobResponse, err error) {
	var _args DatasetServiceGetDatasetIOJobArgs
	_args.Req = req
	var _result DatasetServiceGetDatasetIOJobResult
	if err = p.Client_().Call(ctx, "GetDatasetIOJob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) ListDatasetIOJobs(ctx context.Context, req *ListDatasetIOJobsRequest) (r *ListDatasetIOJobsResponse, err error) {
	var _args DatasetServiceListDatasetIOJobsArgs
	_args.Req = req
	var _result DatasetServiceListDatasetIOJobsResult
	if err = p.Client_().Call(ctx, "ListDatasetIOJobs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) CreateDatasetVersion(ctx context.Context, req *CreateDatasetVersionRequest) (r *CreateDatasetVersionResponse, err error) {
	var _args DatasetServiceCreateDatasetVersionArgs
	_args.Req = req
	var _result DatasetServiceCreateDatasetVersionResult
	if err = p.Client_().Call(ctx, "CreateDatasetVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) ListDatasetVersions(ctx context.Context, req *ListDatasetVersionsRequest) (r *ListDatasetVersionsResponse, err error) {
	var _args DatasetServiceListDatasetVersionsArgs
	_args.Req = req
	var _result DatasetServiceListDatasetVersionsResult
	if err = p.Client_().Call(ctx, "ListDatasetVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) GetDatasetVersion(ctx context.Context, req *GetDatasetVersionRequest) (r *GetDatasetVersionResponse, err error) {
	var _args DatasetServiceGetDatasetVersionArgs
	_args.Req = req
	var _result DatasetServiceGetDatasetVersionResult
	if err = p.Client_().Call(ctx, "GetDatasetVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) BatchGetDatasetVersions(ctx context.Context, req *BatchGetDatasetVersionsRequest) (r *BatchGetDatasetVersionsResponse, err error) {
	var _args DatasetServiceBatchGetDatasetVersionsArgs
	_args.Req = req
	var _result DatasetServiceBatchGetDatasetVersionsResult
	if err = p.Client_().Call(ctx, "BatchGetDatasetVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) GetDatasetSchema(ctx context.Context, req *GetDatasetSchemaRequest) (r *GetDatasetSchemaResponse, err error) {
	var _args DatasetServiceGetDatasetSchemaArgs
	_args.Req = req
	var _result DatasetServiceGetDatasetSchemaResult
	if err = p.Client_().Call(ctx, "GetDatasetSchema", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) UpdateDatasetSchema(ctx context.Context, req *UpdateDatasetSchemaRequest) (r *UpdateDatasetSchemaResponse, err error) {
	var _args DatasetServiceUpdateDatasetSchemaArgs
	_args.Req = req
	var _result DatasetServiceUpdateDatasetSchemaResult
	if err = p.Client_().Call(ctx, "UpdateDatasetSchema", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) BatchCreateDatasetItems(ctx context.Context, req *BatchCreateDatasetItemsRequest) (r *BatchCreateDatasetItemsResponse, err error) {
	var _args DatasetServiceBatchCreateDatasetItemsArgs
	_args.Req = req
	var _result DatasetServiceBatchCreateDatasetItemsResult
	if err = p.Client_().Call(ctx, "BatchCreateDatasetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) UpdateDatasetItem(ctx context.Context, req *UpdateDatasetItemRequest) (r *UpdateDatasetItemResponse, err error) {
	var _args DatasetServiceUpdateDatasetItemArgs
	_args.Req = req
	var _result DatasetServiceUpdateDatasetItemResult
	if err = p.Client_().Call(ctx, "UpdateDatasetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) DeleteDatasetItem(ctx context.Context, req *DeleteDatasetItemRequest) (r *DeleteDatasetItemResponse, err error) {
	var _args DatasetServiceDeleteDatasetItemArgs
	_args.Req = req
	var _result DatasetServiceDeleteDatasetItemResult
	if err = p.Client_().Call(ctx, "DeleteDatasetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) BatchDeleteDatasetItems(ctx context.Context, req *BatchDeleteDatasetItemsRequest) (r *BatchDeleteDatasetItemsResponse, err error) {
	var _args DatasetServiceBatchDeleteDatasetItemsArgs
	_args.Req = req
	var _result DatasetServiceBatchDeleteDatasetItemsResult
	if err = p.Client_().Call(ctx, "BatchDeleteDatasetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) ListDatasetItems(ctx context.Context, req *ListDatasetItemsRequest) (r *ListDatasetItemsResponse, err error) {
	var _args DatasetServiceListDatasetItemsArgs
	_args.Req = req
	var _result DatasetServiceListDatasetItemsResult
	if err = p.Client_().Call(ctx, "ListDatasetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) ListDatasetItemsByVersion(ctx context.Context, req *ListDatasetItemsByVersionRequest) (r *ListDatasetItemsByVersionResponse, err error) {
	var _args DatasetServiceListDatasetItemsByVersionArgs
	_args.Req = req
	var _result DatasetServiceListDatasetItemsByVersionResult
	if err = p.Client_().Call(ctx, "ListDatasetItemsByVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) GetDatasetItem(ctx context.Context, req *GetDatasetItemRequest) (r *GetDatasetItemResponse, err error) {
	var _args DatasetServiceGetDatasetItemArgs
	_args.Req = req
	var _result DatasetServiceGetDatasetItemResult
	if err = p.Client_().Call(ctx, "GetDatasetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) BatchGetDatasetItems(ctx context.Context, req *BatchGetDatasetItemsRequest) (r *BatchGetDatasetItemsResponse, err error) {
	var _args DatasetServiceBatchGetDatasetItemsArgs
	_args.Req = req
	var _result DatasetServiceBatchGetDatasetItemsResult
	if err = p.Client_().Call(ctx, "BatchGetDatasetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) BatchGetDatasetItemsByVersion(ctx context.Context, req *BatchGetDatasetItemsByVersionRequest) (r *BatchGetDatasetItemsByVersionResponse, err error) {
	var _args DatasetServiceBatchGetDatasetItemsByVersionArgs
	_args.Req = req
	var _result DatasetServiceBatchGetDatasetItemsByVersionResult
	if err = p.Client_().Call(ctx, "BatchGetDatasetItemsByVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DatasetServiceClient) ClearDatasetItem(ctx context.Context, req *ClearDatasetItemRequest) (r *ClearDatasetItemResponse, err error) {
	var _args DatasetServiceClearDatasetItemArgs
	_args.Req = req
	var _result DatasetServiceClearDatasetItemResult
	if err = p.Client_().Call(ctx, "ClearDatasetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type DatasetServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DatasetService
}

func (p *DatasetServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DatasetServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DatasetServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDatasetServiceProcessor(handler DatasetService) *DatasetServiceProcessor {
	self := &DatasetServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateDataset", &datasetServiceProcessorCreateDataset{handler: handler})
	self.AddToProcessorMap("UpdateDataset", &datasetServiceProcessorUpdateDataset{handler: handler})
	self.AddToProcessorMap("DeleteDataset", &datasetServiceProcessorDeleteDataset{handler: handler})
	self.AddToProcessorMap("ListDatasets", &datasetServiceProcessorListDatasets{handler: handler})
	self.AddToProcessorMap("GetDataset", &datasetServiceProcessorGetDataset{handler: handler})
	self.AddToProcessorMap("BatchGetDatasets", &datasetServiceProcessorBatchGetDatasets{handler: handler})
	self.AddToProcessorMap("ImportDataset", &datasetServiceProcessorImportDataset{handler: handler})
	self.AddToProcessorMap("GetDatasetIOJob", &datasetServiceProcessorGetDatasetIOJob{handler: handler})
	self.AddToProcessorMap("ListDatasetIOJobs", &datasetServiceProcessorListDatasetIOJobs{handler: handler})
	self.AddToProcessorMap("CreateDatasetVersion", &datasetServiceProcessorCreateDatasetVersion{handler: handler})
	self.AddToProcessorMap("ListDatasetVersions", &datasetServiceProcessorListDatasetVersions{handler: handler})
	self.AddToProcessorMap("GetDatasetVersion", &datasetServiceProcessorGetDatasetVersion{handler: handler})
	self.AddToProcessorMap("BatchGetDatasetVersions", &datasetServiceProcessorBatchGetDatasetVersions{handler: handler})
	self.AddToProcessorMap("GetDatasetSchema", &datasetServiceProcessorGetDatasetSchema{handler: handler})
	self.AddToProcessorMap("UpdateDatasetSchema", &datasetServiceProcessorUpdateDatasetSchema{handler: handler})
	self.AddToProcessorMap("BatchCreateDatasetItems", &datasetServiceProcessorBatchCreateDatasetItems{handler: handler})
	self.AddToProcessorMap("UpdateDatasetItem", &datasetServiceProcessorUpdateDatasetItem{handler: handler})
	self.AddToProcessorMap("DeleteDatasetItem", &datasetServiceProcessorDeleteDatasetItem{handler: handler})
	self.AddToProcessorMap("BatchDeleteDatasetItems", &datasetServiceProcessorBatchDeleteDatasetItems{handler: handler})
	self.AddToProcessorMap("ListDatasetItems", &datasetServiceProcessorListDatasetItems{handler: handler})
	self.AddToProcessorMap("ListDatasetItemsByVersion", &datasetServiceProcessorListDatasetItemsByVersion{handler: handler})
	self.AddToProcessorMap("GetDatasetItem", &datasetServiceProcessorGetDatasetItem{handler: handler})
	self.AddToProcessorMap("BatchGetDatasetItems", &datasetServiceProcessorBatchGetDatasetItems{handler: handler})
	self.AddToProcessorMap("BatchGetDatasetItemsByVersion", &datasetServiceProcessorBatchGetDatasetItemsByVersion{handler: handler})
	self.AddToProcessorMap("ClearDatasetItem", &datasetServiceProcessorClearDatasetItem{handler: handler})
	return self
}
func (p *DatasetServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type datasetServiceProcessorCreateDataset struct {
	handler DatasetService
}

func (p *datasetServiceProcessorCreateDataset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceCreateDatasetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceCreateDatasetResult{}
	var retval *CreateDatasetResponse
	if retval, err2 = p.handler.CreateDataset(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateDataset: "+err2.Error())
		oprot.WriteMessageBegin("CreateDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateDataset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorUpdateDataset struct {
	handler DatasetService
}

func (p *datasetServiceProcessorUpdateDataset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceUpdateDatasetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceUpdateDatasetResult{}
	var retval *UpdateDatasetResponse
	if retval, err2 = p.handler.UpdateDataset(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDataset: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDataset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorDeleteDataset struct {
	handler DatasetService
}

func (p *datasetServiceProcessorDeleteDataset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceDeleteDatasetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceDeleteDatasetResult{}
	var retval *DeleteDatasetResponse
	if retval, err2 = p.handler.DeleteDataset(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteDataset: "+err2.Error())
		oprot.WriteMessageBegin("DeleteDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteDataset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorListDatasets struct {
	handler DatasetService
}

func (p *datasetServiceProcessorListDatasets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceListDatasetsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListDatasets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceListDatasetsResult{}
	var retval *ListDatasetsResponse
	if retval, err2 = p.handler.ListDatasets(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListDatasets: "+err2.Error())
		oprot.WriteMessageBegin("ListDatasets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListDatasets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorGetDataset struct {
	handler DatasetService
}

func (p *datasetServiceProcessorGetDataset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceGetDatasetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceGetDatasetResult{}
	var retval *GetDatasetResponse
	if retval, err2 = p.handler.GetDataset(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDataset: "+err2.Error())
		oprot.WriteMessageBegin("GetDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDataset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorBatchGetDatasets struct {
	handler DatasetService
}

func (p *datasetServiceProcessorBatchGetDatasets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceBatchGetDatasetsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetDatasets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceBatchGetDatasetsResult{}
	var retval *BatchGetDatasetsResponse
	if retval, err2 = p.handler.BatchGetDatasets(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetDatasets: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetDatasets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetDatasets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorImportDataset struct {
	handler DatasetService
}

func (p *datasetServiceProcessorImportDataset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceImportDatasetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ImportDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceImportDatasetResult{}
	var retval *ImportDatasetResponse
	if retval, err2 = p.handler.ImportDataset(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ImportDataset: "+err2.Error())
		oprot.WriteMessageBegin("ImportDataset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ImportDataset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorGetDatasetIOJob struct {
	handler DatasetService
}

func (p *datasetServiceProcessorGetDatasetIOJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceGetDatasetIOJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDatasetIOJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceGetDatasetIOJobResult{}
	var retval *GetDatasetIOJobResponse
	if retval, err2 = p.handler.GetDatasetIOJob(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDatasetIOJob: "+err2.Error())
		oprot.WriteMessageBegin("GetDatasetIOJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDatasetIOJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorListDatasetIOJobs struct {
	handler DatasetService
}

func (p *datasetServiceProcessorListDatasetIOJobs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceListDatasetIOJobsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListDatasetIOJobs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceListDatasetIOJobsResult{}
	var retval *ListDatasetIOJobsResponse
	if retval, err2 = p.handler.ListDatasetIOJobs(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListDatasetIOJobs: "+err2.Error())
		oprot.WriteMessageBegin("ListDatasetIOJobs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListDatasetIOJobs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorCreateDatasetVersion struct {
	handler DatasetService
}

func (p *datasetServiceProcessorCreateDatasetVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceCreateDatasetVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateDatasetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceCreateDatasetVersionResult{}
	var retval *CreateDatasetVersionResponse
	if retval, err2 = p.handler.CreateDatasetVersion(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateDatasetVersion: "+err2.Error())
		oprot.WriteMessageBegin("CreateDatasetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateDatasetVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorListDatasetVersions struct {
	handler DatasetService
}

func (p *datasetServiceProcessorListDatasetVersions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceListDatasetVersionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListDatasetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceListDatasetVersionsResult{}
	var retval *ListDatasetVersionsResponse
	if retval, err2 = p.handler.ListDatasetVersions(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListDatasetVersions: "+err2.Error())
		oprot.WriteMessageBegin("ListDatasetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListDatasetVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorGetDatasetVersion struct {
	handler DatasetService
}

func (p *datasetServiceProcessorGetDatasetVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceGetDatasetVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDatasetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceGetDatasetVersionResult{}
	var retval *GetDatasetVersionResponse
	if retval, err2 = p.handler.GetDatasetVersion(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDatasetVersion: "+err2.Error())
		oprot.WriteMessageBegin("GetDatasetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDatasetVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorBatchGetDatasetVersions struct {
	handler DatasetService
}

func (p *datasetServiceProcessorBatchGetDatasetVersions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceBatchGetDatasetVersionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetDatasetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceBatchGetDatasetVersionsResult{}
	var retval *BatchGetDatasetVersionsResponse
	if retval, err2 = p.handler.BatchGetDatasetVersions(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetDatasetVersions: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetDatasetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetDatasetVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorGetDatasetSchema struct {
	handler DatasetService
}

func (p *datasetServiceProcessorGetDatasetSchema) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceGetDatasetSchemaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDatasetSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceGetDatasetSchemaResult{}
	var retval *GetDatasetSchemaResponse
	if retval, err2 = p.handler.GetDatasetSchema(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDatasetSchema: "+err2.Error())
		oprot.WriteMessageBegin("GetDatasetSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDatasetSchema", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorUpdateDatasetSchema struct {
	handler DatasetService
}

func (p *datasetServiceProcessorUpdateDatasetSchema) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceUpdateDatasetSchemaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDatasetSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceUpdateDatasetSchemaResult{}
	var retval *UpdateDatasetSchemaResponse
	if retval, err2 = p.handler.UpdateDatasetSchema(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDatasetSchema: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDatasetSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDatasetSchema", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorBatchCreateDatasetItems struct {
	handler DatasetService
}

func (p *datasetServiceProcessorBatchCreateDatasetItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceBatchCreateDatasetItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchCreateDatasetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceBatchCreateDatasetItemsResult{}
	var retval *BatchCreateDatasetItemsResponse
	if retval, err2 = p.handler.BatchCreateDatasetItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchCreateDatasetItems: "+err2.Error())
		oprot.WriteMessageBegin("BatchCreateDatasetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchCreateDatasetItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorUpdateDatasetItem struct {
	handler DatasetService
}

func (p *datasetServiceProcessorUpdateDatasetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceUpdateDatasetItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDatasetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceUpdateDatasetItemResult{}
	var retval *UpdateDatasetItemResponse
	if retval, err2 = p.handler.UpdateDatasetItem(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDatasetItem: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDatasetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDatasetItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorDeleteDatasetItem struct {
	handler DatasetService
}

func (p *datasetServiceProcessorDeleteDatasetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceDeleteDatasetItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteDatasetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceDeleteDatasetItemResult{}
	var retval *DeleteDatasetItemResponse
	if retval, err2 = p.handler.DeleteDatasetItem(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteDatasetItem: "+err2.Error())
		oprot.WriteMessageBegin("DeleteDatasetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteDatasetItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorBatchDeleteDatasetItems struct {
	handler DatasetService
}

func (p *datasetServiceProcessorBatchDeleteDatasetItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceBatchDeleteDatasetItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchDeleteDatasetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceBatchDeleteDatasetItemsResult{}
	var retval *BatchDeleteDatasetItemsResponse
	if retval, err2 = p.handler.BatchDeleteDatasetItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchDeleteDatasetItems: "+err2.Error())
		oprot.WriteMessageBegin("BatchDeleteDatasetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchDeleteDatasetItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorListDatasetItems struct {
	handler DatasetService
}

func (p *datasetServiceProcessorListDatasetItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceListDatasetItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListDatasetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceListDatasetItemsResult{}
	var retval *ListDatasetItemsResponse
	if retval, err2 = p.handler.ListDatasetItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListDatasetItems: "+err2.Error())
		oprot.WriteMessageBegin("ListDatasetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListDatasetItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorListDatasetItemsByVersion struct {
	handler DatasetService
}

func (p *datasetServiceProcessorListDatasetItemsByVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceListDatasetItemsByVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListDatasetItemsByVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceListDatasetItemsByVersionResult{}
	var retval *ListDatasetItemsByVersionResponse
	if retval, err2 = p.handler.ListDatasetItemsByVersion(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListDatasetItemsByVersion: "+err2.Error())
		oprot.WriteMessageBegin("ListDatasetItemsByVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListDatasetItemsByVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorGetDatasetItem struct {
	handler DatasetService
}

func (p *datasetServiceProcessorGetDatasetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceGetDatasetItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDatasetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceGetDatasetItemResult{}
	var retval *GetDatasetItemResponse
	if retval, err2 = p.handler.GetDatasetItem(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDatasetItem: "+err2.Error())
		oprot.WriteMessageBegin("GetDatasetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDatasetItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorBatchGetDatasetItems struct {
	handler DatasetService
}

func (p *datasetServiceProcessorBatchGetDatasetItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceBatchGetDatasetItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetDatasetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceBatchGetDatasetItemsResult{}
	var retval *BatchGetDatasetItemsResponse
	if retval, err2 = p.handler.BatchGetDatasetItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetDatasetItems: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetDatasetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetDatasetItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorBatchGetDatasetItemsByVersion struct {
	handler DatasetService
}

func (p *datasetServiceProcessorBatchGetDatasetItemsByVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceBatchGetDatasetItemsByVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetDatasetItemsByVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceBatchGetDatasetItemsByVersionResult{}
	var retval *BatchGetDatasetItemsByVersionResponse
	if retval, err2 = p.handler.BatchGetDatasetItemsByVersion(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetDatasetItemsByVersion: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetDatasetItemsByVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetDatasetItemsByVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datasetServiceProcessorClearDatasetItem struct {
	handler DatasetService
}

func (p *datasetServiceProcessorClearDatasetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatasetServiceClearDatasetItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ClearDatasetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DatasetServiceClearDatasetItemResult{}
	var retval *ClearDatasetItemResponse
	if retval, err2 = p.handler.ClearDatasetItem(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearDatasetItem: "+err2.Error())
		oprot.WriteMessageBegin("ClearDatasetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ClearDatasetItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type DatasetServiceCreateDatasetArgs struct {
	Req *CreateDatasetRequest `thrift:"req,1" frugal:"1,default,CreateDatasetRequest"`
}

func NewDatasetServiceCreateDatasetArgs() *DatasetServiceCreateDatasetArgs {
	return &DatasetServiceCreateDatasetArgs{}
}

func (p *DatasetServiceCreateDatasetArgs) InitDefault() {
}

var DatasetServiceCreateDatasetArgs_Req_DEFAULT *CreateDatasetRequest

func (p *DatasetServiceCreateDatasetArgs) GetReq() (v *CreateDatasetRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceCreateDatasetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceCreateDatasetArgs) SetReq(val *CreateDatasetRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceCreateDatasetArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceCreateDatasetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceCreateDatasetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceCreateDatasetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateDatasetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceCreateDatasetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDataset_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceCreateDatasetArgs(%+v)", *p)

}

func (p *DatasetServiceCreateDatasetArgs) DeepEqual(ano *DatasetServiceCreateDatasetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceCreateDatasetArgs) Field1DeepEqual(src *CreateDatasetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceCreateDatasetResult struct {
	Success *CreateDatasetResponse `thrift:"success,0,optional" frugal:"0,optional,CreateDatasetResponse"`
}

func NewDatasetServiceCreateDatasetResult() *DatasetServiceCreateDatasetResult {
	return &DatasetServiceCreateDatasetResult{}
}

func (p *DatasetServiceCreateDatasetResult) InitDefault() {
}

var DatasetServiceCreateDatasetResult_Success_DEFAULT *CreateDatasetResponse

func (p *DatasetServiceCreateDatasetResult) GetSuccess() (v *CreateDatasetResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceCreateDatasetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceCreateDatasetResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateDatasetResponse)
}

var fieldIDToName_DatasetServiceCreateDatasetResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceCreateDatasetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceCreateDatasetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceCreateDatasetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateDatasetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceCreateDatasetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDataset_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceCreateDatasetResult(%+v)", *p)

}

func (p *DatasetServiceCreateDatasetResult) DeepEqual(ano *DatasetServiceCreateDatasetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceCreateDatasetResult) Field0DeepEqual(src *CreateDatasetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceUpdateDatasetArgs struct {
	Req *UpdateDatasetRequest `thrift:"req,1" frugal:"1,default,UpdateDatasetRequest"`
}

func NewDatasetServiceUpdateDatasetArgs() *DatasetServiceUpdateDatasetArgs {
	return &DatasetServiceUpdateDatasetArgs{}
}

func (p *DatasetServiceUpdateDatasetArgs) InitDefault() {
}

var DatasetServiceUpdateDatasetArgs_Req_DEFAULT *UpdateDatasetRequest

func (p *DatasetServiceUpdateDatasetArgs) GetReq() (v *UpdateDatasetRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceUpdateDatasetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceUpdateDatasetArgs) SetReq(val *UpdateDatasetRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceUpdateDatasetArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceUpdateDatasetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceUpdateDatasetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceUpdateDatasetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateDatasetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceUpdateDatasetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDataset_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceUpdateDatasetArgs(%+v)", *p)

}

func (p *DatasetServiceUpdateDatasetArgs) DeepEqual(ano *DatasetServiceUpdateDatasetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceUpdateDatasetArgs) Field1DeepEqual(src *UpdateDatasetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceUpdateDatasetResult struct {
	Success *UpdateDatasetResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateDatasetResponse"`
}

func NewDatasetServiceUpdateDatasetResult() *DatasetServiceUpdateDatasetResult {
	return &DatasetServiceUpdateDatasetResult{}
}

func (p *DatasetServiceUpdateDatasetResult) InitDefault() {
}

var DatasetServiceUpdateDatasetResult_Success_DEFAULT *UpdateDatasetResponse

func (p *DatasetServiceUpdateDatasetResult) GetSuccess() (v *UpdateDatasetResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceUpdateDatasetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceUpdateDatasetResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateDatasetResponse)
}

var fieldIDToName_DatasetServiceUpdateDatasetResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceUpdateDatasetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceUpdateDatasetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceUpdateDatasetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateDatasetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceUpdateDatasetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDataset_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceUpdateDatasetResult(%+v)", *p)

}

func (p *DatasetServiceUpdateDatasetResult) DeepEqual(ano *DatasetServiceUpdateDatasetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceUpdateDatasetResult) Field0DeepEqual(src *UpdateDatasetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceDeleteDatasetArgs struct {
	Req *DeleteDatasetRequest `thrift:"req,1" frugal:"1,default,DeleteDatasetRequest"`
}

func NewDatasetServiceDeleteDatasetArgs() *DatasetServiceDeleteDatasetArgs {
	return &DatasetServiceDeleteDatasetArgs{}
}

func (p *DatasetServiceDeleteDatasetArgs) InitDefault() {
}

var DatasetServiceDeleteDatasetArgs_Req_DEFAULT *DeleteDatasetRequest

func (p *DatasetServiceDeleteDatasetArgs) GetReq() (v *DeleteDatasetRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceDeleteDatasetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceDeleteDatasetArgs) SetReq(val *DeleteDatasetRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceDeleteDatasetArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceDeleteDatasetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceDeleteDatasetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceDeleteDatasetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteDatasetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceDeleteDatasetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDataset_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceDeleteDatasetArgs(%+v)", *p)

}

func (p *DatasetServiceDeleteDatasetArgs) DeepEqual(ano *DatasetServiceDeleteDatasetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceDeleteDatasetArgs) Field1DeepEqual(src *DeleteDatasetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceDeleteDatasetResult struct {
	Success *DeleteDatasetResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteDatasetResponse"`
}

func NewDatasetServiceDeleteDatasetResult() *DatasetServiceDeleteDatasetResult {
	return &DatasetServiceDeleteDatasetResult{}
}

func (p *DatasetServiceDeleteDatasetResult) InitDefault() {
}

var DatasetServiceDeleteDatasetResult_Success_DEFAULT *DeleteDatasetResponse

func (p *DatasetServiceDeleteDatasetResult) GetSuccess() (v *DeleteDatasetResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceDeleteDatasetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceDeleteDatasetResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteDatasetResponse)
}

var fieldIDToName_DatasetServiceDeleteDatasetResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceDeleteDatasetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceDeleteDatasetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceDeleteDatasetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteDatasetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceDeleteDatasetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDataset_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceDeleteDatasetResult(%+v)", *p)

}

func (p *DatasetServiceDeleteDatasetResult) DeepEqual(ano *DatasetServiceDeleteDatasetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceDeleteDatasetResult) Field0DeepEqual(src *DeleteDatasetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceListDatasetsArgs struct {
	Req *ListDatasetsRequest `thrift:"req,1" frugal:"1,default,ListDatasetsRequest"`
}

func NewDatasetServiceListDatasetsArgs() *DatasetServiceListDatasetsArgs {
	return &DatasetServiceListDatasetsArgs{}
}

func (p *DatasetServiceListDatasetsArgs) InitDefault() {
}

var DatasetServiceListDatasetsArgs_Req_DEFAULT *ListDatasetsRequest

func (p *DatasetServiceListDatasetsArgs) GetReq() (v *ListDatasetsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceListDatasetsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceListDatasetsArgs) SetReq(val *ListDatasetsRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceListDatasetsArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceListDatasetsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceListDatasetsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceListDatasetsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListDatasetsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceListDatasetsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasets_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceListDatasetsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceListDatasetsArgs(%+v)", *p)

}

func (p *DatasetServiceListDatasetsArgs) DeepEqual(ano *DatasetServiceListDatasetsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceListDatasetsArgs) Field1DeepEqual(src *ListDatasetsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceListDatasetsResult struct {
	Success *ListDatasetsResponse `thrift:"success,0,optional" frugal:"0,optional,ListDatasetsResponse"`
}

func NewDatasetServiceListDatasetsResult() *DatasetServiceListDatasetsResult {
	return &DatasetServiceListDatasetsResult{}
}

func (p *DatasetServiceListDatasetsResult) InitDefault() {
}

var DatasetServiceListDatasetsResult_Success_DEFAULT *ListDatasetsResponse

func (p *DatasetServiceListDatasetsResult) GetSuccess() (v *ListDatasetsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceListDatasetsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceListDatasetsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListDatasetsResponse)
}

var fieldIDToName_DatasetServiceListDatasetsResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceListDatasetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceListDatasetsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceListDatasetsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListDatasetsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceListDatasetsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasets_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceListDatasetsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceListDatasetsResult(%+v)", *p)

}

func (p *DatasetServiceListDatasetsResult) DeepEqual(ano *DatasetServiceListDatasetsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceListDatasetsResult) Field0DeepEqual(src *ListDatasetsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceGetDatasetArgs struct {
	Req *GetDatasetRequest `thrift:"req,1" frugal:"1,default,GetDatasetRequest"`
}

func NewDatasetServiceGetDatasetArgs() *DatasetServiceGetDatasetArgs {
	return &DatasetServiceGetDatasetArgs{}
}

func (p *DatasetServiceGetDatasetArgs) InitDefault() {
}

var DatasetServiceGetDatasetArgs_Req_DEFAULT *GetDatasetRequest

func (p *DatasetServiceGetDatasetArgs) GetReq() (v *GetDatasetRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceGetDatasetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceGetDatasetArgs) SetReq(val *GetDatasetRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceGetDatasetArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceGetDatasetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceGetDatasetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceGetDatasetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDatasetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceGetDatasetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDataset_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceGetDatasetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceGetDatasetArgs(%+v)", *p)

}

func (p *DatasetServiceGetDatasetArgs) DeepEqual(ano *DatasetServiceGetDatasetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceGetDatasetArgs) Field1DeepEqual(src *GetDatasetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceGetDatasetResult struct {
	Success *GetDatasetResponse `thrift:"success,0,optional" frugal:"0,optional,GetDatasetResponse"`
}

func NewDatasetServiceGetDatasetResult() *DatasetServiceGetDatasetResult {
	return &DatasetServiceGetDatasetResult{}
}

func (p *DatasetServiceGetDatasetResult) InitDefault() {
}

var DatasetServiceGetDatasetResult_Success_DEFAULT *GetDatasetResponse

func (p *DatasetServiceGetDatasetResult) GetSuccess() (v *GetDatasetResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceGetDatasetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceGetDatasetResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDatasetResponse)
}

var fieldIDToName_DatasetServiceGetDatasetResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceGetDatasetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceGetDatasetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceGetDatasetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDatasetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceGetDatasetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDataset_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceGetDatasetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceGetDatasetResult(%+v)", *p)

}

func (p *DatasetServiceGetDatasetResult) DeepEqual(ano *DatasetServiceGetDatasetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceGetDatasetResult) Field0DeepEqual(src *GetDatasetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchGetDatasetsArgs struct {
	Req *BatchGetDatasetsRequest `thrift:"req,1" frugal:"1,default,BatchGetDatasetsRequest"`
}

func NewDatasetServiceBatchGetDatasetsArgs() *DatasetServiceBatchGetDatasetsArgs {
	return &DatasetServiceBatchGetDatasetsArgs{}
}

func (p *DatasetServiceBatchGetDatasetsArgs) InitDefault() {
}

var DatasetServiceBatchGetDatasetsArgs_Req_DEFAULT *BatchGetDatasetsRequest

func (p *DatasetServiceBatchGetDatasetsArgs) GetReq() (v *BatchGetDatasetsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceBatchGetDatasetsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceBatchGetDatasetsArgs) SetReq(val *BatchGetDatasetsRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceBatchGetDatasetsArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceBatchGetDatasetsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceBatchGetDatasetsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchGetDatasetsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetDatasetsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceBatchGetDatasetsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasets_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchGetDatasetsArgs(%+v)", *p)

}

func (p *DatasetServiceBatchGetDatasetsArgs) DeepEqual(ano *DatasetServiceBatchGetDatasetsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchGetDatasetsArgs) Field1DeepEqual(src *BatchGetDatasetsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchGetDatasetsResult struct {
	Success *BatchGetDatasetsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetDatasetsResponse"`
}

func NewDatasetServiceBatchGetDatasetsResult() *DatasetServiceBatchGetDatasetsResult {
	return &DatasetServiceBatchGetDatasetsResult{}
}

func (p *DatasetServiceBatchGetDatasetsResult) InitDefault() {
}

var DatasetServiceBatchGetDatasetsResult_Success_DEFAULT *BatchGetDatasetsResponse

func (p *DatasetServiceBatchGetDatasetsResult) GetSuccess() (v *BatchGetDatasetsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceBatchGetDatasetsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceBatchGetDatasetsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetDatasetsResponse)
}

var fieldIDToName_DatasetServiceBatchGetDatasetsResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceBatchGetDatasetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceBatchGetDatasetsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchGetDatasetsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetDatasetsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceBatchGetDatasetsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasets_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchGetDatasetsResult(%+v)", *p)

}

func (p *DatasetServiceBatchGetDatasetsResult) DeepEqual(ano *DatasetServiceBatchGetDatasetsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchGetDatasetsResult) Field0DeepEqual(src *BatchGetDatasetsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceImportDatasetArgs struct {
	Req *ImportDatasetRequest `thrift:"req,1" frugal:"1,default,ImportDatasetRequest"`
}

func NewDatasetServiceImportDatasetArgs() *DatasetServiceImportDatasetArgs {
	return &DatasetServiceImportDatasetArgs{}
}

func (p *DatasetServiceImportDatasetArgs) InitDefault() {
}

var DatasetServiceImportDatasetArgs_Req_DEFAULT *ImportDatasetRequest

func (p *DatasetServiceImportDatasetArgs) GetReq() (v *ImportDatasetRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceImportDatasetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceImportDatasetArgs) SetReq(val *ImportDatasetRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceImportDatasetArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceImportDatasetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceImportDatasetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceImportDatasetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceImportDatasetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewImportDatasetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceImportDatasetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportDataset_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceImportDatasetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceImportDatasetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceImportDatasetArgs(%+v)", *p)

}

func (p *DatasetServiceImportDatasetArgs) DeepEqual(ano *DatasetServiceImportDatasetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceImportDatasetArgs) Field1DeepEqual(src *ImportDatasetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceImportDatasetResult struct {
	Success *ImportDatasetResponse `thrift:"success,0,optional" frugal:"0,optional,ImportDatasetResponse"`
}

func NewDatasetServiceImportDatasetResult() *DatasetServiceImportDatasetResult {
	return &DatasetServiceImportDatasetResult{}
}

func (p *DatasetServiceImportDatasetResult) InitDefault() {
}

var DatasetServiceImportDatasetResult_Success_DEFAULT *ImportDatasetResponse

func (p *DatasetServiceImportDatasetResult) GetSuccess() (v *ImportDatasetResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceImportDatasetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceImportDatasetResult) SetSuccess(x interface{}) {
	p.Success = x.(*ImportDatasetResponse)
}

var fieldIDToName_DatasetServiceImportDatasetResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceImportDatasetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceImportDatasetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceImportDatasetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceImportDatasetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewImportDatasetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceImportDatasetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportDataset_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceImportDatasetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceImportDatasetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceImportDatasetResult(%+v)", *p)

}

func (p *DatasetServiceImportDatasetResult) DeepEqual(ano *DatasetServiceImportDatasetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceImportDatasetResult) Field0DeepEqual(src *ImportDatasetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceGetDatasetIOJobArgs struct {
	Req *GetDatasetIOJobRequest `thrift:"req,1" frugal:"1,default,GetDatasetIOJobRequest"`
}

func NewDatasetServiceGetDatasetIOJobArgs() *DatasetServiceGetDatasetIOJobArgs {
	return &DatasetServiceGetDatasetIOJobArgs{}
}

func (p *DatasetServiceGetDatasetIOJobArgs) InitDefault() {
}

var DatasetServiceGetDatasetIOJobArgs_Req_DEFAULT *GetDatasetIOJobRequest

func (p *DatasetServiceGetDatasetIOJobArgs) GetReq() (v *GetDatasetIOJobRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceGetDatasetIOJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceGetDatasetIOJobArgs) SetReq(val *GetDatasetIOJobRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceGetDatasetIOJobArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceGetDatasetIOJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceGetDatasetIOJobArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceGetDatasetIOJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetIOJobArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDatasetIOJobRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceGetDatasetIOJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetIOJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetIOJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceGetDatasetIOJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceGetDatasetIOJobArgs(%+v)", *p)

}

func (p *DatasetServiceGetDatasetIOJobArgs) DeepEqual(ano *DatasetServiceGetDatasetIOJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceGetDatasetIOJobArgs) Field1DeepEqual(src *GetDatasetIOJobRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceGetDatasetIOJobResult struct {
	Success *GetDatasetIOJobResponse `thrift:"success,0,optional" frugal:"0,optional,GetDatasetIOJobResponse"`
}

func NewDatasetServiceGetDatasetIOJobResult() *DatasetServiceGetDatasetIOJobResult {
	return &DatasetServiceGetDatasetIOJobResult{}
}

func (p *DatasetServiceGetDatasetIOJobResult) InitDefault() {
}

var DatasetServiceGetDatasetIOJobResult_Success_DEFAULT *GetDatasetIOJobResponse

func (p *DatasetServiceGetDatasetIOJobResult) GetSuccess() (v *GetDatasetIOJobResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceGetDatasetIOJobResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceGetDatasetIOJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDatasetIOJobResponse)
}

var fieldIDToName_DatasetServiceGetDatasetIOJobResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceGetDatasetIOJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceGetDatasetIOJobResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceGetDatasetIOJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetIOJobResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDatasetIOJobResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceGetDatasetIOJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetIOJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetIOJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceGetDatasetIOJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceGetDatasetIOJobResult(%+v)", *p)

}

func (p *DatasetServiceGetDatasetIOJobResult) DeepEqual(ano *DatasetServiceGetDatasetIOJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceGetDatasetIOJobResult) Field0DeepEqual(src *GetDatasetIOJobResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceListDatasetIOJobsArgs struct {
	Req *ListDatasetIOJobsRequest `thrift:"req,1" frugal:"1,default,ListDatasetIOJobsRequest"`
}

func NewDatasetServiceListDatasetIOJobsArgs() *DatasetServiceListDatasetIOJobsArgs {
	return &DatasetServiceListDatasetIOJobsArgs{}
}

func (p *DatasetServiceListDatasetIOJobsArgs) InitDefault() {
}

var DatasetServiceListDatasetIOJobsArgs_Req_DEFAULT *ListDatasetIOJobsRequest

func (p *DatasetServiceListDatasetIOJobsArgs) GetReq() (v *ListDatasetIOJobsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceListDatasetIOJobsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceListDatasetIOJobsArgs) SetReq(val *ListDatasetIOJobsRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceListDatasetIOJobsArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceListDatasetIOJobsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceListDatasetIOJobsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceListDatasetIOJobsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetIOJobsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListDatasetIOJobsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceListDatasetIOJobsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetIOJobs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetIOJobsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceListDatasetIOJobsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceListDatasetIOJobsArgs(%+v)", *p)

}

func (p *DatasetServiceListDatasetIOJobsArgs) DeepEqual(ano *DatasetServiceListDatasetIOJobsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceListDatasetIOJobsArgs) Field1DeepEqual(src *ListDatasetIOJobsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceListDatasetIOJobsResult struct {
	Success *ListDatasetIOJobsResponse `thrift:"success,0,optional" frugal:"0,optional,ListDatasetIOJobsResponse"`
}

func NewDatasetServiceListDatasetIOJobsResult() *DatasetServiceListDatasetIOJobsResult {
	return &DatasetServiceListDatasetIOJobsResult{}
}

func (p *DatasetServiceListDatasetIOJobsResult) InitDefault() {
}

var DatasetServiceListDatasetIOJobsResult_Success_DEFAULT *ListDatasetIOJobsResponse

func (p *DatasetServiceListDatasetIOJobsResult) GetSuccess() (v *ListDatasetIOJobsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceListDatasetIOJobsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceListDatasetIOJobsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListDatasetIOJobsResponse)
}

var fieldIDToName_DatasetServiceListDatasetIOJobsResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceListDatasetIOJobsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceListDatasetIOJobsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceListDatasetIOJobsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetIOJobsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListDatasetIOJobsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceListDatasetIOJobsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetIOJobs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetIOJobsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceListDatasetIOJobsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceListDatasetIOJobsResult(%+v)", *p)

}

func (p *DatasetServiceListDatasetIOJobsResult) DeepEqual(ano *DatasetServiceListDatasetIOJobsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceListDatasetIOJobsResult) Field0DeepEqual(src *ListDatasetIOJobsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceCreateDatasetVersionArgs struct {
	Req *CreateDatasetVersionRequest `thrift:"req,1" frugal:"1,default,CreateDatasetVersionRequest"`
}

func NewDatasetServiceCreateDatasetVersionArgs() *DatasetServiceCreateDatasetVersionArgs {
	return &DatasetServiceCreateDatasetVersionArgs{}
}

func (p *DatasetServiceCreateDatasetVersionArgs) InitDefault() {
}

var DatasetServiceCreateDatasetVersionArgs_Req_DEFAULT *CreateDatasetVersionRequest

func (p *DatasetServiceCreateDatasetVersionArgs) GetReq() (v *CreateDatasetVersionRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceCreateDatasetVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceCreateDatasetVersionArgs) SetReq(val *CreateDatasetVersionRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceCreateDatasetVersionArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceCreateDatasetVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceCreateDatasetVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceCreateDatasetVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateDatasetVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceCreateDatasetVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDatasetVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceCreateDatasetVersionArgs(%+v)", *p)

}

func (p *DatasetServiceCreateDatasetVersionArgs) DeepEqual(ano *DatasetServiceCreateDatasetVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceCreateDatasetVersionArgs) Field1DeepEqual(src *CreateDatasetVersionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceCreateDatasetVersionResult struct {
	Success *CreateDatasetVersionResponse `thrift:"success,0,optional" frugal:"0,optional,CreateDatasetVersionResponse"`
}

func NewDatasetServiceCreateDatasetVersionResult() *DatasetServiceCreateDatasetVersionResult {
	return &DatasetServiceCreateDatasetVersionResult{}
}

func (p *DatasetServiceCreateDatasetVersionResult) InitDefault() {
}

var DatasetServiceCreateDatasetVersionResult_Success_DEFAULT *CreateDatasetVersionResponse

func (p *DatasetServiceCreateDatasetVersionResult) GetSuccess() (v *CreateDatasetVersionResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceCreateDatasetVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceCreateDatasetVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateDatasetVersionResponse)
}

var fieldIDToName_DatasetServiceCreateDatasetVersionResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceCreateDatasetVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceCreateDatasetVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceCreateDatasetVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateDatasetVersionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceCreateDatasetVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDatasetVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceCreateDatasetVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceCreateDatasetVersionResult(%+v)", *p)

}

func (p *DatasetServiceCreateDatasetVersionResult) DeepEqual(ano *DatasetServiceCreateDatasetVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceCreateDatasetVersionResult) Field0DeepEqual(src *CreateDatasetVersionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceListDatasetVersionsArgs struct {
	Req *ListDatasetVersionsRequest `thrift:"req,1" frugal:"1,default,ListDatasetVersionsRequest"`
}

func NewDatasetServiceListDatasetVersionsArgs() *DatasetServiceListDatasetVersionsArgs {
	return &DatasetServiceListDatasetVersionsArgs{}
}

func (p *DatasetServiceListDatasetVersionsArgs) InitDefault() {
}

var DatasetServiceListDatasetVersionsArgs_Req_DEFAULT *ListDatasetVersionsRequest

func (p *DatasetServiceListDatasetVersionsArgs) GetReq() (v *ListDatasetVersionsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceListDatasetVersionsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceListDatasetVersionsArgs) SetReq(val *ListDatasetVersionsRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceListDatasetVersionsArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceListDatasetVersionsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceListDatasetVersionsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceListDatasetVersionsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetVersionsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListDatasetVersionsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceListDatasetVersionsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetVersions_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceListDatasetVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceListDatasetVersionsArgs(%+v)", *p)

}

func (p *DatasetServiceListDatasetVersionsArgs) DeepEqual(ano *DatasetServiceListDatasetVersionsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceListDatasetVersionsArgs) Field1DeepEqual(src *ListDatasetVersionsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceListDatasetVersionsResult struct {
	Success *ListDatasetVersionsResponse `thrift:"success,0,optional" frugal:"0,optional,ListDatasetVersionsResponse"`
}

func NewDatasetServiceListDatasetVersionsResult() *DatasetServiceListDatasetVersionsResult {
	return &DatasetServiceListDatasetVersionsResult{}
}

func (p *DatasetServiceListDatasetVersionsResult) InitDefault() {
}

var DatasetServiceListDatasetVersionsResult_Success_DEFAULT *ListDatasetVersionsResponse

func (p *DatasetServiceListDatasetVersionsResult) GetSuccess() (v *ListDatasetVersionsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceListDatasetVersionsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceListDatasetVersionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListDatasetVersionsResponse)
}

var fieldIDToName_DatasetServiceListDatasetVersionsResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceListDatasetVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceListDatasetVersionsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceListDatasetVersionsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetVersionsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListDatasetVersionsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceListDatasetVersionsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetVersions_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceListDatasetVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceListDatasetVersionsResult(%+v)", *p)

}

func (p *DatasetServiceListDatasetVersionsResult) DeepEqual(ano *DatasetServiceListDatasetVersionsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceListDatasetVersionsResult) Field0DeepEqual(src *ListDatasetVersionsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceGetDatasetVersionArgs struct {
	Req *GetDatasetVersionRequest `thrift:"req,1" frugal:"1,default,GetDatasetVersionRequest"`
}

func NewDatasetServiceGetDatasetVersionArgs() *DatasetServiceGetDatasetVersionArgs {
	return &DatasetServiceGetDatasetVersionArgs{}
}

func (p *DatasetServiceGetDatasetVersionArgs) InitDefault() {
}

var DatasetServiceGetDatasetVersionArgs_Req_DEFAULT *GetDatasetVersionRequest

func (p *DatasetServiceGetDatasetVersionArgs) GetReq() (v *GetDatasetVersionRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceGetDatasetVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceGetDatasetVersionArgs) SetReq(val *GetDatasetVersionRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceGetDatasetVersionArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceGetDatasetVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceGetDatasetVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceGetDatasetVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDatasetVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceGetDatasetVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceGetDatasetVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceGetDatasetVersionArgs(%+v)", *p)

}

func (p *DatasetServiceGetDatasetVersionArgs) DeepEqual(ano *DatasetServiceGetDatasetVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceGetDatasetVersionArgs) Field1DeepEqual(src *GetDatasetVersionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceGetDatasetVersionResult struct {
	Success *GetDatasetVersionResponse `thrift:"success,0,optional" frugal:"0,optional,GetDatasetVersionResponse"`
}

func NewDatasetServiceGetDatasetVersionResult() *DatasetServiceGetDatasetVersionResult {
	return &DatasetServiceGetDatasetVersionResult{}
}

func (p *DatasetServiceGetDatasetVersionResult) InitDefault() {
}

var DatasetServiceGetDatasetVersionResult_Success_DEFAULT *GetDatasetVersionResponse

func (p *DatasetServiceGetDatasetVersionResult) GetSuccess() (v *GetDatasetVersionResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceGetDatasetVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceGetDatasetVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDatasetVersionResponse)
}

var fieldIDToName_DatasetServiceGetDatasetVersionResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceGetDatasetVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceGetDatasetVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceGetDatasetVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDatasetVersionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceGetDatasetVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceGetDatasetVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceGetDatasetVersionResult(%+v)", *p)

}

func (p *DatasetServiceGetDatasetVersionResult) DeepEqual(ano *DatasetServiceGetDatasetVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceGetDatasetVersionResult) Field0DeepEqual(src *GetDatasetVersionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchGetDatasetVersionsArgs struct {
	Req *BatchGetDatasetVersionsRequest `thrift:"req,1" frugal:"1,default,BatchGetDatasetVersionsRequest"`
}

func NewDatasetServiceBatchGetDatasetVersionsArgs() *DatasetServiceBatchGetDatasetVersionsArgs {
	return &DatasetServiceBatchGetDatasetVersionsArgs{}
}

func (p *DatasetServiceBatchGetDatasetVersionsArgs) InitDefault() {
}

var DatasetServiceBatchGetDatasetVersionsArgs_Req_DEFAULT *BatchGetDatasetVersionsRequest

func (p *DatasetServiceBatchGetDatasetVersionsArgs) GetReq() (v *BatchGetDatasetVersionsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceBatchGetDatasetVersionsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceBatchGetDatasetVersionsArgs) SetReq(val *BatchGetDatasetVersionsRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceBatchGetDatasetVersionsArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceBatchGetDatasetVersionsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceBatchGetDatasetVersionsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchGetDatasetVersionsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetVersionsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetDatasetVersionsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceBatchGetDatasetVersionsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetVersions_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchGetDatasetVersionsArgs(%+v)", *p)

}

func (p *DatasetServiceBatchGetDatasetVersionsArgs) DeepEqual(ano *DatasetServiceBatchGetDatasetVersionsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchGetDatasetVersionsArgs) Field1DeepEqual(src *BatchGetDatasetVersionsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchGetDatasetVersionsResult struct {
	Success *BatchGetDatasetVersionsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetDatasetVersionsResponse"`
}

func NewDatasetServiceBatchGetDatasetVersionsResult() *DatasetServiceBatchGetDatasetVersionsResult {
	return &DatasetServiceBatchGetDatasetVersionsResult{}
}

func (p *DatasetServiceBatchGetDatasetVersionsResult) InitDefault() {
}

var DatasetServiceBatchGetDatasetVersionsResult_Success_DEFAULT *BatchGetDatasetVersionsResponse

func (p *DatasetServiceBatchGetDatasetVersionsResult) GetSuccess() (v *BatchGetDatasetVersionsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceBatchGetDatasetVersionsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceBatchGetDatasetVersionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetDatasetVersionsResponse)
}

var fieldIDToName_DatasetServiceBatchGetDatasetVersionsResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceBatchGetDatasetVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceBatchGetDatasetVersionsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchGetDatasetVersionsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetVersionsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetDatasetVersionsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceBatchGetDatasetVersionsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetVersions_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchGetDatasetVersionsResult(%+v)", *p)

}

func (p *DatasetServiceBatchGetDatasetVersionsResult) DeepEqual(ano *DatasetServiceBatchGetDatasetVersionsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchGetDatasetVersionsResult) Field0DeepEqual(src *BatchGetDatasetVersionsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceGetDatasetSchemaArgs struct {
	Req *GetDatasetSchemaRequest `thrift:"req,1" frugal:"1,default,GetDatasetSchemaRequest"`
}

func NewDatasetServiceGetDatasetSchemaArgs() *DatasetServiceGetDatasetSchemaArgs {
	return &DatasetServiceGetDatasetSchemaArgs{}
}

func (p *DatasetServiceGetDatasetSchemaArgs) InitDefault() {
}

var DatasetServiceGetDatasetSchemaArgs_Req_DEFAULT *GetDatasetSchemaRequest

func (p *DatasetServiceGetDatasetSchemaArgs) GetReq() (v *GetDatasetSchemaRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceGetDatasetSchemaArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceGetDatasetSchemaArgs) SetReq(val *GetDatasetSchemaRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceGetDatasetSchemaArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceGetDatasetSchemaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceGetDatasetSchemaArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceGetDatasetSchemaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetSchemaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDatasetSchemaRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceGetDatasetSchemaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetSchema_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceGetDatasetSchemaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceGetDatasetSchemaArgs(%+v)", *p)

}

func (p *DatasetServiceGetDatasetSchemaArgs) DeepEqual(ano *DatasetServiceGetDatasetSchemaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceGetDatasetSchemaArgs) Field1DeepEqual(src *GetDatasetSchemaRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceGetDatasetSchemaResult struct {
	Success *GetDatasetSchemaResponse `thrift:"success,0,optional" frugal:"0,optional,GetDatasetSchemaResponse"`
}

func NewDatasetServiceGetDatasetSchemaResult() *DatasetServiceGetDatasetSchemaResult {
	return &DatasetServiceGetDatasetSchemaResult{}
}

func (p *DatasetServiceGetDatasetSchemaResult) InitDefault() {
}

var DatasetServiceGetDatasetSchemaResult_Success_DEFAULT *GetDatasetSchemaResponse

func (p *DatasetServiceGetDatasetSchemaResult) GetSuccess() (v *GetDatasetSchemaResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceGetDatasetSchemaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceGetDatasetSchemaResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDatasetSchemaResponse)
}

var fieldIDToName_DatasetServiceGetDatasetSchemaResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceGetDatasetSchemaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceGetDatasetSchemaResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceGetDatasetSchemaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetSchemaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDatasetSchemaResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceGetDatasetSchemaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetSchema_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceGetDatasetSchemaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceGetDatasetSchemaResult(%+v)", *p)

}

func (p *DatasetServiceGetDatasetSchemaResult) DeepEqual(ano *DatasetServiceGetDatasetSchemaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceGetDatasetSchemaResult) Field0DeepEqual(src *GetDatasetSchemaResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceUpdateDatasetSchemaArgs struct {
	Req *UpdateDatasetSchemaRequest `thrift:"req,1" frugal:"1,default,UpdateDatasetSchemaRequest"`
}

func NewDatasetServiceUpdateDatasetSchemaArgs() *DatasetServiceUpdateDatasetSchemaArgs {
	return &DatasetServiceUpdateDatasetSchemaArgs{}
}

func (p *DatasetServiceUpdateDatasetSchemaArgs) InitDefault() {
}

var DatasetServiceUpdateDatasetSchemaArgs_Req_DEFAULT *UpdateDatasetSchemaRequest

func (p *DatasetServiceUpdateDatasetSchemaArgs) GetReq() (v *UpdateDatasetSchemaRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceUpdateDatasetSchemaArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceUpdateDatasetSchemaArgs) SetReq(val *UpdateDatasetSchemaRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceUpdateDatasetSchemaArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceUpdateDatasetSchemaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceUpdateDatasetSchemaArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceUpdateDatasetSchemaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetSchemaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateDatasetSchemaRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceUpdateDatasetSchemaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDatasetSchema_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetSchemaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceUpdateDatasetSchemaArgs(%+v)", *p)

}

func (p *DatasetServiceUpdateDatasetSchemaArgs) DeepEqual(ano *DatasetServiceUpdateDatasetSchemaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceUpdateDatasetSchemaArgs) Field1DeepEqual(src *UpdateDatasetSchemaRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceUpdateDatasetSchemaResult struct {
	Success *UpdateDatasetSchemaResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateDatasetSchemaResponse"`
}

func NewDatasetServiceUpdateDatasetSchemaResult() *DatasetServiceUpdateDatasetSchemaResult {
	return &DatasetServiceUpdateDatasetSchemaResult{}
}

func (p *DatasetServiceUpdateDatasetSchemaResult) InitDefault() {
}

var DatasetServiceUpdateDatasetSchemaResult_Success_DEFAULT *UpdateDatasetSchemaResponse

func (p *DatasetServiceUpdateDatasetSchemaResult) GetSuccess() (v *UpdateDatasetSchemaResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceUpdateDatasetSchemaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceUpdateDatasetSchemaResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateDatasetSchemaResponse)
}

var fieldIDToName_DatasetServiceUpdateDatasetSchemaResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceUpdateDatasetSchemaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceUpdateDatasetSchemaResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceUpdateDatasetSchemaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetSchemaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateDatasetSchemaResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceUpdateDatasetSchemaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDatasetSchema_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetSchemaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceUpdateDatasetSchemaResult(%+v)", *p)

}

func (p *DatasetServiceUpdateDatasetSchemaResult) DeepEqual(ano *DatasetServiceUpdateDatasetSchemaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceUpdateDatasetSchemaResult) Field0DeepEqual(src *UpdateDatasetSchemaResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchCreateDatasetItemsArgs struct {
	Req *BatchCreateDatasetItemsRequest `thrift:"req,1" frugal:"1,default,BatchCreateDatasetItemsRequest"`
}

func NewDatasetServiceBatchCreateDatasetItemsArgs() *DatasetServiceBatchCreateDatasetItemsArgs {
	return &DatasetServiceBatchCreateDatasetItemsArgs{}
}

func (p *DatasetServiceBatchCreateDatasetItemsArgs) InitDefault() {
}

var DatasetServiceBatchCreateDatasetItemsArgs_Req_DEFAULT *BatchCreateDatasetItemsRequest

func (p *DatasetServiceBatchCreateDatasetItemsArgs) GetReq() (v *BatchCreateDatasetItemsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceBatchCreateDatasetItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceBatchCreateDatasetItemsArgs) SetReq(val *BatchCreateDatasetItemsRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceBatchCreateDatasetItemsArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceBatchCreateDatasetItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceBatchCreateDatasetItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchCreateDatasetItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchCreateDatasetItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchCreateDatasetItemsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceBatchCreateDatasetItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateDatasetItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchCreateDatasetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceBatchCreateDatasetItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchCreateDatasetItemsArgs(%+v)", *p)

}

func (p *DatasetServiceBatchCreateDatasetItemsArgs) DeepEqual(ano *DatasetServiceBatchCreateDatasetItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchCreateDatasetItemsArgs) Field1DeepEqual(src *BatchCreateDatasetItemsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchCreateDatasetItemsResult struct {
	Success *BatchCreateDatasetItemsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchCreateDatasetItemsResponse"`
}

func NewDatasetServiceBatchCreateDatasetItemsResult() *DatasetServiceBatchCreateDatasetItemsResult {
	return &DatasetServiceBatchCreateDatasetItemsResult{}
}

func (p *DatasetServiceBatchCreateDatasetItemsResult) InitDefault() {
}

var DatasetServiceBatchCreateDatasetItemsResult_Success_DEFAULT *BatchCreateDatasetItemsResponse

func (p *DatasetServiceBatchCreateDatasetItemsResult) GetSuccess() (v *BatchCreateDatasetItemsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceBatchCreateDatasetItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceBatchCreateDatasetItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchCreateDatasetItemsResponse)
}

var fieldIDToName_DatasetServiceBatchCreateDatasetItemsResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceBatchCreateDatasetItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceBatchCreateDatasetItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchCreateDatasetItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchCreateDatasetItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchCreateDatasetItemsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceBatchCreateDatasetItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateDatasetItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchCreateDatasetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceBatchCreateDatasetItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchCreateDatasetItemsResult(%+v)", *p)

}

func (p *DatasetServiceBatchCreateDatasetItemsResult) DeepEqual(ano *DatasetServiceBatchCreateDatasetItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchCreateDatasetItemsResult) Field0DeepEqual(src *BatchCreateDatasetItemsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceUpdateDatasetItemArgs struct {
	Req *UpdateDatasetItemRequest `thrift:"req,1" frugal:"1,default,UpdateDatasetItemRequest"`
}

func NewDatasetServiceUpdateDatasetItemArgs() *DatasetServiceUpdateDatasetItemArgs {
	return &DatasetServiceUpdateDatasetItemArgs{}
}

func (p *DatasetServiceUpdateDatasetItemArgs) InitDefault() {
}

var DatasetServiceUpdateDatasetItemArgs_Req_DEFAULT *UpdateDatasetItemRequest

func (p *DatasetServiceUpdateDatasetItemArgs) GetReq() (v *UpdateDatasetItemRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceUpdateDatasetItemArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceUpdateDatasetItemArgs) SetReq(val *UpdateDatasetItemRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceUpdateDatasetItemArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceUpdateDatasetItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceUpdateDatasetItemArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceUpdateDatasetItemArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetItemArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateDatasetItemRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceUpdateDatasetItemArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDatasetItem_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceUpdateDatasetItemArgs(%+v)", *p)

}

func (p *DatasetServiceUpdateDatasetItemArgs) DeepEqual(ano *DatasetServiceUpdateDatasetItemArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceUpdateDatasetItemArgs) Field1DeepEqual(src *UpdateDatasetItemRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceUpdateDatasetItemResult struct {
	Success *UpdateDatasetItemResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateDatasetItemResponse"`
}

func NewDatasetServiceUpdateDatasetItemResult() *DatasetServiceUpdateDatasetItemResult {
	return &DatasetServiceUpdateDatasetItemResult{}
}

func (p *DatasetServiceUpdateDatasetItemResult) InitDefault() {
}

var DatasetServiceUpdateDatasetItemResult_Success_DEFAULT *UpdateDatasetItemResponse

func (p *DatasetServiceUpdateDatasetItemResult) GetSuccess() (v *UpdateDatasetItemResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceUpdateDatasetItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceUpdateDatasetItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateDatasetItemResponse)
}

var fieldIDToName_DatasetServiceUpdateDatasetItemResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceUpdateDatasetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceUpdateDatasetItemResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceUpdateDatasetItemResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetItemResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateDatasetItemResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceUpdateDatasetItemResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDatasetItem_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceUpdateDatasetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceUpdateDatasetItemResult(%+v)", *p)

}

func (p *DatasetServiceUpdateDatasetItemResult) DeepEqual(ano *DatasetServiceUpdateDatasetItemResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceUpdateDatasetItemResult) Field0DeepEqual(src *UpdateDatasetItemResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceDeleteDatasetItemArgs struct {
	Req *DeleteDatasetItemRequest `thrift:"req,1" frugal:"1,default,DeleteDatasetItemRequest"`
}

func NewDatasetServiceDeleteDatasetItemArgs() *DatasetServiceDeleteDatasetItemArgs {
	return &DatasetServiceDeleteDatasetItemArgs{}
}

func (p *DatasetServiceDeleteDatasetItemArgs) InitDefault() {
}

var DatasetServiceDeleteDatasetItemArgs_Req_DEFAULT *DeleteDatasetItemRequest

func (p *DatasetServiceDeleteDatasetItemArgs) GetReq() (v *DeleteDatasetItemRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceDeleteDatasetItemArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceDeleteDatasetItemArgs) SetReq(val *DeleteDatasetItemRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceDeleteDatasetItemArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceDeleteDatasetItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceDeleteDatasetItemArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceDeleteDatasetItemArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetItemArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteDatasetItemRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceDeleteDatasetItemArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDatasetItem_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceDeleteDatasetItemArgs(%+v)", *p)

}

func (p *DatasetServiceDeleteDatasetItemArgs) DeepEqual(ano *DatasetServiceDeleteDatasetItemArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceDeleteDatasetItemArgs) Field1DeepEqual(src *DeleteDatasetItemRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceDeleteDatasetItemResult struct {
	Success *DeleteDatasetItemResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteDatasetItemResponse"`
}

func NewDatasetServiceDeleteDatasetItemResult() *DatasetServiceDeleteDatasetItemResult {
	return &DatasetServiceDeleteDatasetItemResult{}
}

func (p *DatasetServiceDeleteDatasetItemResult) InitDefault() {
}

var DatasetServiceDeleteDatasetItemResult_Success_DEFAULT *DeleteDatasetItemResponse

func (p *DatasetServiceDeleteDatasetItemResult) GetSuccess() (v *DeleteDatasetItemResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceDeleteDatasetItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceDeleteDatasetItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteDatasetItemResponse)
}

var fieldIDToName_DatasetServiceDeleteDatasetItemResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceDeleteDatasetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceDeleteDatasetItemResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceDeleteDatasetItemResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetItemResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteDatasetItemResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceDeleteDatasetItemResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDatasetItem_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceDeleteDatasetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceDeleteDatasetItemResult(%+v)", *p)

}

func (p *DatasetServiceDeleteDatasetItemResult) DeepEqual(ano *DatasetServiceDeleteDatasetItemResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceDeleteDatasetItemResult) Field0DeepEqual(src *DeleteDatasetItemResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchDeleteDatasetItemsArgs struct {
	Req *BatchDeleteDatasetItemsRequest `thrift:"req,1" frugal:"1,default,BatchDeleteDatasetItemsRequest"`
}

func NewDatasetServiceBatchDeleteDatasetItemsArgs() *DatasetServiceBatchDeleteDatasetItemsArgs {
	return &DatasetServiceBatchDeleteDatasetItemsArgs{}
}

func (p *DatasetServiceBatchDeleteDatasetItemsArgs) InitDefault() {
}

var DatasetServiceBatchDeleteDatasetItemsArgs_Req_DEFAULT *BatchDeleteDatasetItemsRequest

func (p *DatasetServiceBatchDeleteDatasetItemsArgs) GetReq() (v *BatchDeleteDatasetItemsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceBatchDeleteDatasetItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceBatchDeleteDatasetItemsArgs) SetReq(val *BatchDeleteDatasetItemsRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceBatchDeleteDatasetItemsArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceBatchDeleteDatasetItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceBatchDeleteDatasetItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchDeleteDatasetItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchDeleteDatasetItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteDatasetItemsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceBatchDeleteDatasetItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteDatasetItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchDeleteDatasetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceBatchDeleteDatasetItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchDeleteDatasetItemsArgs(%+v)", *p)

}

func (p *DatasetServiceBatchDeleteDatasetItemsArgs) DeepEqual(ano *DatasetServiceBatchDeleteDatasetItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchDeleteDatasetItemsArgs) Field1DeepEqual(src *BatchDeleteDatasetItemsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchDeleteDatasetItemsResult struct {
	Success *BatchDeleteDatasetItemsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchDeleteDatasetItemsResponse"`
}

func NewDatasetServiceBatchDeleteDatasetItemsResult() *DatasetServiceBatchDeleteDatasetItemsResult {
	return &DatasetServiceBatchDeleteDatasetItemsResult{}
}

func (p *DatasetServiceBatchDeleteDatasetItemsResult) InitDefault() {
}

var DatasetServiceBatchDeleteDatasetItemsResult_Success_DEFAULT *BatchDeleteDatasetItemsResponse

func (p *DatasetServiceBatchDeleteDatasetItemsResult) GetSuccess() (v *BatchDeleteDatasetItemsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceBatchDeleteDatasetItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceBatchDeleteDatasetItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchDeleteDatasetItemsResponse)
}

var fieldIDToName_DatasetServiceBatchDeleteDatasetItemsResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceBatchDeleteDatasetItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceBatchDeleteDatasetItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchDeleteDatasetItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchDeleteDatasetItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteDatasetItemsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceBatchDeleteDatasetItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteDatasetItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchDeleteDatasetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceBatchDeleteDatasetItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchDeleteDatasetItemsResult(%+v)", *p)

}

func (p *DatasetServiceBatchDeleteDatasetItemsResult) DeepEqual(ano *DatasetServiceBatchDeleteDatasetItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchDeleteDatasetItemsResult) Field0DeepEqual(src *BatchDeleteDatasetItemsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceListDatasetItemsArgs struct {
	Req *ListDatasetItemsRequest `thrift:"req,1" frugal:"1,default,ListDatasetItemsRequest"`
}

func NewDatasetServiceListDatasetItemsArgs() *DatasetServiceListDatasetItemsArgs {
	return &DatasetServiceListDatasetItemsArgs{}
}

func (p *DatasetServiceListDatasetItemsArgs) InitDefault() {
}

var DatasetServiceListDatasetItemsArgs_Req_DEFAULT *ListDatasetItemsRequest

func (p *DatasetServiceListDatasetItemsArgs) GetReq() (v *ListDatasetItemsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceListDatasetItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceListDatasetItemsArgs) SetReq(val *ListDatasetItemsRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceListDatasetItemsArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceListDatasetItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceListDatasetItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceListDatasetItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListDatasetItemsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceListDatasetItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceListDatasetItemsArgs(%+v)", *p)

}

func (p *DatasetServiceListDatasetItemsArgs) DeepEqual(ano *DatasetServiceListDatasetItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceListDatasetItemsArgs) Field1DeepEqual(src *ListDatasetItemsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceListDatasetItemsResult struct {
	Success *ListDatasetItemsResponse `thrift:"success,0,optional" frugal:"0,optional,ListDatasetItemsResponse"`
}

func NewDatasetServiceListDatasetItemsResult() *DatasetServiceListDatasetItemsResult {
	return &DatasetServiceListDatasetItemsResult{}
}

func (p *DatasetServiceListDatasetItemsResult) InitDefault() {
}

var DatasetServiceListDatasetItemsResult_Success_DEFAULT *ListDatasetItemsResponse

func (p *DatasetServiceListDatasetItemsResult) GetSuccess() (v *ListDatasetItemsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceListDatasetItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceListDatasetItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListDatasetItemsResponse)
}

var fieldIDToName_DatasetServiceListDatasetItemsResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceListDatasetItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceListDatasetItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceListDatasetItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListDatasetItemsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceListDatasetItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceListDatasetItemsResult(%+v)", *p)

}

func (p *DatasetServiceListDatasetItemsResult) DeepEqual(ano *DatasetServiceListDatasetItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceListDatasetItemsResult) Field0DeepEqual(src *ListDatasetItemsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceListDatasetItemsByVersionArgs struct {
	Req *ListDatasetItemsByVersionRequest `thrift:"req,1" frugal:"1,default,ListDatasetItemsByVersionRequest"`
}

func NewDatasetServiceListDatasetItemsByVersionArgs() *DatasetServiceListDatasetItemsByVersionArgs {
	return &DatasetServiceListDatasetItemsByVersionArgs{}
}

func (p *DatasetServiceListDatasetItemsByVersionArgs) InitDefault() {
}

var DatasetServiceListDatasetItemsByVersionArgs_Req_DEFAULT *ListDatasetItemsByVersionRequest

func (p *DatasetServiceListDatasetItemsByVersionArgs) GetReq() (v *ListDatasetItemsByVersionRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceListDatasetItemsByVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceListDatasetItemsByVersionArgs) SetReq(val *ListDatasetItemsByVersionRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceListDatasetItemsByVersionArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceListDatasetItemsByVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceListDatasetItemsByVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceListDatasetItemsByVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsByVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListDatasetItemsByVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceListDatasetItemsByVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetItemsByVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsByVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsByVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceListDatasetItemsByVersionArgs(%+v)", *p)

}

func (p *DatasetServiceListDatasetItemsByVersionArgs) DeepEqual(ano *DatasetServiceListDatasetItemsByVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceListDatasetItemsByVersionArgs) Field1DeepEqual(src *ListDatasetItemsByVersionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceListDatasetItemsByVersionResult struct {
	Success *ListDatasetItemsByVersionResponse `thrift:"success,0,optional" frugal:"0,optional,ListDatasetItemsByVersionResponse"`
}

func NewDatasetServiceListDatasetItemsByVersionResult() *DatasetServiceListDatasetItemsByVersionResult {
	return &DatasetServiceListDatasetItemsByVersionResult{}
}

func (p *DatasetServiceListDatasetItemsByVersionResult) InitDefault() {
}

var DatasetServiceListDatasetItemsByVersionResult_Success_DEFAULT *ListDatasetItemsByVersionResponse

func (p *DatasetServiceListDatasetItemsByVersionResult) GetSuccess() (v *ListDatasetItemsByVersionResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceListDatasetItemsByVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceListDatasetItemsByVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListDatasetItemsByVersionResponse)
}

var fieldIDToName_DatasetServiceListDatasetItemsByVersionResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceListDatasetItemsByVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceListDatasetItemsByVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceListDatasetItemsByVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsByVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListDatasetItemsByVersionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceListDatasetItemsByVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDatasetItemsByVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsByVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceListDatasetItemsByVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceListDatasetItemsByVersionResult(%+v)", *p)

}

func (p *DatasetServiceListDatasetItemsByVersionResult) DeepEqual(ano *DatasetServiceListDatasetItemsByVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceListDatasetItemsByVersionResult) Field0DeepEqual(src *ListDatasetItemsByVersionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceGetDatasetItemArgs struct {
	Req *GetDatasetItemRequest `thrift:"req,1" frugal:"1,default,GetDatasetItemRequest"`
}

func NewDatasetServiceGetDatasetItemArgs() *DatasetServiceGetDatasetItemArgs {
	return &DatasetServiceGetDatasetItemArgs{}
}

func (p *DatasetServiceGetDatasetItemArgs) InitDefault() {
}

var DatasetServiceGetDatasetItemArgs_Req_DEFAULT *GetDatasetItemRequest

func (p *DatasetServiceGetDatasetItemArgs) GetReq() (v *GetDatasetItemRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceGetDatasetItemArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceGetDatasetItemArgs) SetReq(val *GetDatasetItemRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceGetDatasetItemArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceGetDatasetItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceGetDatasetItemArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceGetDatasetItemArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetItemArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDatasetItemRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceGetDatasetItemArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetItem_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceGetDatasetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceGetDatasetItemArgs(%+v)", *p)

}

func (p *DatasetServiceGetDatasetItemArgs) DeepEqual(ano *DatasetServiceGetDatasetItemArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceGetDatasetItemArgs) Field1DeepEqual(src *GetDatasetItemRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceGetDatasetItemResult struct {
	Success *GetDatasetItemResponse `thrift:"success,0,optional" frugal:"0,optional,GetDatasetItemResponse"`
}

func NewDatasetServiceGetDatasetItemResult() *DatasetServiceGetDatasetItemResult {
	return &DatasetServiceGetDatasetItemResult{}
}

func (p *DatasetServiceGetDatasetItemResult) InitDefault() {
}

var DatasetServiceGetDatasetItemResult_Success_DEFAULT *GetDatasetItemResponse

func (p *DatasetServiceGetDatasetItemResult) GetSuccess() (v *GetDatasetItemResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceGetDatasetItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceGetDatasetItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDatasetItemResponse)
}

var fieldIDToName_DatasetServiceGetDatasetItemResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceGetDatasetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceGetDatasetItemResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceGetDatasetItemResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetItemResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDatasetItemResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceGetDatasetItemResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDatasetItem_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceGetDatasetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceGetDatasetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceGetDatasetItemResult(%+v)", *p)

}

func (p *DatasetServiceGetDatasetItemResult) DeepEqual(ano *DatasetServiceGetDatasetItemResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceGetDatasetItemResult) Field0DeepEqual(src *GetDatasetItemResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchGetDatasetItemsArgs struct {
	Req *BatchGetDatasetItemsRequest `thrift:"req,1" frugal:"1,default,BatchGetDatasetItemsRequest"`
}

func NewDatasetServiceBatchGetDatasetItemsArgs() *DatasetServiceBatchGetDatasetItemsArgs {
	return &DatasetServiceBatchGetDatasetItemsArgs{}
}

func (p *DatasetServiceBatchGetDatasetItemsArgs) InitDefault() {
}

var DatasetServiceBatchGetDatasetItemsArgs_Req_DEFAULT *BatchGetDatasetItemsRequest

func (p *DatasetServiceBatchGetDatasetItemsArgs) GetReq() (v *BatchGetDatasetItemsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceBatchGetDatasetItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceBatchGetDatasetItemsArgs) SetReq(val *BatchGetDatasetItemsRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceBatchGetDatasetItemsArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceBatchGetDatasetItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceBatchGetDatasetItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchGetDatasetItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetDatasetItemsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceBatchGetDatasetItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchGetDatasetItemsArgs(%+v)", *p)

}

func (p *DatasetServiceBatchGetDatasetItemsArgs) DeepEqual(ano *DatasetServiceBatchGetDatasetItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchGetDatasetItemsArgs) Field1DeepEqual(src *BatchGetDatasetItemsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchGetDatasetItemsResult struct {
	Success *BatchGetDatasetItemsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetDatasetItemsResponse"`
}

func NewDatasetServiceBatchGetDatasetItemsResult() *DatasetServiceBatchGetDatasetItemsResult {
	return &DatasetServiceBatchGetDatasetItemsResult{}
}

func (p *DatasetServiceBatchGetDatasetItemsResult) InitDefault() {
}

var DatasetServiceBatchGetDatasetItemsResult_Success_DEFAULT *BatchGetDatasetItemsResponse

func (p *DatasetServiceBatchGetDatasetItemsResult) GetSuccess() (v *BatchGetDatasetItemsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceBatchGetDatasetItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceBatchGetDatasetItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetDatasetItemsResponse)
}

var fieldIDToName_DatasetServiceBatchGetDatasetItemsResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceBatchGetDatasetItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceBatchGetDatasetItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchGetDatasetItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetDatasetItemsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceBatchGetDatasetItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchGetDatasetItemsResult(%+v)", *p)

}

func (p *DatasetServiceBatchGetDatasetItemsResult) DeepEqual(ano *DatasetServiceBatchGetDatasetItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchGetDatasetItemsResult) Field0DeepEqual(src *BatchGetDatasetItemsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchGetDatasetItemsByVersionArgs struct {
	Req *BatchGetDatasetItemsByVersionRequest `thrift:"req,1" frugal:"1,default,BatchGetDatasetItemsByVersionRequest"`
}

func NewDatasetServiceBatchGetDatasetItemsByVersionArgs() *DatasetServiceBatchGetDatasetItemsByVersionArgs {
	return &DatasetServiceBatchGetDatasetItemsByVersionArgs{}
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionArgs) InitDefault() {
}

var DatasetServiceBatchGetDatasetItemsByVersionArgs_Req_DEFAULT *BatchGetDatasetItemsByVersionRequest

func (p *DatasetServiceBatchGetDatasetItemsByVersionArgs) GetReq() (v *BatchGetDatasetItemsByVersionRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceBatchGetDatasetItemsByVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceBatchGetDatasetItemsByVersionArgs) SetReq(val *BatchGetDatasetItemsByVersionRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceBatchGetDatasetItemsByVersionArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchGetDatasetItemsByVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetDatasetItemsByVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetItemsByVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchGetDatasetItemsByVersionArgs(%+v)", *p)

}

func (p *DatasetServiceBatchGetDatasetItemsByVersionArgs) DeepEqual(ano *DatasetServiceBatchGetDatasetItemsByVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionArgs) Field1DeepEqual(src *BatchGetDatasetItemsByVersionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceBatchGetDatasetItemsByVersionResult struct {
	Success *BatchGetDatasetItemsByVersionResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetDatasetItemsByVersionResponse"`
}

func NewDatasetServiceBatchGetDatasetItemsByVersionResult() *DatasetServiceBatchGetDatasetItemsByVersionResult {
	return &DatasetServiceBatchGetDatasetItemsByVersionResult{}
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionResult) InitDefault() {
}

var DatasetServiceBatchGetDatasetItemsByVersionResult_Success_DEFAULT *BatchGetDatasetItemsByVersionResponse

func (p *DatasetServiceBatchGetDatasetItemsByVersionResult) GetSuccess() (v *BatchGetDatasetItemsByVersionResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceBatchGetDatasetItemsByVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceBatchGetDatasetItemsByVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetDatasetItemsByVersionResponse)
}

var fieldIDToName_DatasetServiceBatchGetDatasetItemsByVersionResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceBatchGetDatasetItemsByVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetDatasetItemsByVersionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetDatasetItemsByVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceBatchGetDatasetItemsByVersionResult(%+v)", *p)

}

func (p *DatasetServiceBatchGetDatasetItemsByVersionResult) DeepEqual(ano *DatasetServiceBatchGetDatasetItemsByVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceBatchGetDatasetItemsByVersionResult) Field0DeepEqual(src *BatchGetDatasetItemsByVersionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceClearDatasetItemArgs struct {
	Req *ClearDatasetItemRequest `thrift:"req,1" frugal:"1,default,ClearDatasetItemRequest"`
}

func NewDatasetServiceClearDatasetItemArgs() *DatasetServiceClearDatasetItemArgs {
	return &DatasetServiceClearDatasetItemArgs{}
}

func (p *DatasetServiceClearDatasetItemArgs) InitDefault() {
}

var DatasetServiceClearDatasetItemArgs_Req_DEFAULT *ClearDatasetItemRequest

func (p *DatasetServiceClearDatasetItemArgs) GetReq() (v *ClearDatasetItemRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return DatasetServiceClearDatasetItemArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *DatasetServiceClearDatasetItemArgs) SetReq(val *ClearDatasetItemRequest) {
	p.Req = val
}

var fieldIDToName_DatasetServiceClearDatasetItemArgs = map[int16]string{
	1: "req",
}

func (p *DatasetServiceClearDatasetItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DatasetServiceClearDatasetItemArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceClearDatasetItemArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceClearDatasetItemArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewClearDatasetItemRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *DatasetServiceClearDatasetItemArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearDatasetItem_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceClearDatasetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetServiceClearDatasetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceClearDatasetItemArgs(%+v)", *p)

}

func (p *DatasetServiceClearDatasetItemArgs) DeepEqual(ano *DatasetServiceClearDatasetItemArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *DatasetServiceClearDatasetItemArgs) Field1DeepEqual(src *ClearDatasetItemRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type DatasetServiceClearDatasetItemResult struct {
	Success *ClearDatasetItemResponse `thrift:"success,0,optional" frugal:"0,optional,ClearDatasetItemResponse"`
}

func NewDatasetServiceClearDatasetItemResult() *DatasetServiceClearDatasetItemResult {
	return &DatasetServiceClearDatasetItemResult{}
}

func (p *DatasetServiceClearDatasetItemResult) InitDefault() {
}

var DatasetServiceClearDatasetItemResult_Success_DEFAULT *ClearDatasetItemResponse

func (p *DatasetServiceClearDatasetItemResult) GetSuccess() (v *ClearDatasetItemResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return DatasetServiceClearDatasetItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DatasetServiceClearDatasetItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*ClearDatasetItemResponse)
}

var fieldIDToName_DatasetServiceClearDatasetItemResult = map[int16]string{
	0: "success",
}

func (p *DatasetServiceClearDatasetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatasetServiceClearDatasetItemResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetServiceClearDatasetItemResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetServiceClearDatasetItemResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewClearDatasetItemResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *DatasetServiceClearDatasetItemResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearDatasetItem_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetServiceClearDatasetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DatasetServiceClearDatasetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetServiceClearDatasetItemResult(%+v)", *p)

}

func (p *DatasetServiceClearDatasetItemResult) DeepEqual(ano *DatasetServiceClearDatasetItemResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DatasetServiceClearDatasetItemResult) Field0DeepEqual(src *ClearDatasetItemResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
