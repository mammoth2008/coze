// Code generated by Validator v0.2.6. DO NOT EDIT.

package dataset

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *CreateDatasetRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if len(p.Name) < int(1) {
		return fmt.Errorf("field Name min_len rule failed, current value: %d", len(p.Name))
	}
	if len(p.Name) > int(255) {
		return fmt.Errorf("field Name max_len rule failed, current value: %d", len(p.Name))
	}
	if p.Description != nil {
		if len(*p.Description) > int(2048) {
			return fmt.Errorf("field Description max_len rule failed, current value: %d", len(*p.Description))
		}
	}
	if p.Category != nil {
		if p.Category.String() == "<UNSET>" {
			return fmt.Errorf("field Category defined_only rule failed")
		}
	}
	if p.BizCategory != nil {
		if len(*p.BizCategory) > int(128) {
			return fmt.Errorf("field BizCategory max_len rule failed, current value: %d", len(*p.BizCategory))
		}
	}
	if len(p.Fields) < int(1) {
		return fmt.Errorf("field Fields MinLen rule failed, current value: %v", p.Fields)
	}
	for i := 0; i < len(p.Fields); i++ {
		_elem := p.Fields[i]
		if _elem != nil {
			if err := _elem.IsValid(); err != nil {
				return fmt.Errorf("field _elem not valid, %w", err)
			}
		}
	}
	if p.SecurityLevel != nil {
		if p.SecurityLevel.String() == "<UNSET>" {
			return fmt.Errorf("field SecurityLevel defined_only rule failed")
		}
	}
	if p.Visibility != nil {
		if p.Visibility.String() == "<UNSET>" {
			return fmt.Errorf("field Visibility defined_only rule failed")
		}
	}
	if p.Spec != nil {
		if err := p.Spec.IsValid(); err != nil {
			return fmt.Errorf("field Spec not valid, %w", err)
		}
	}
	if p.Features != nil {
		if err := p.Features.IsValid(); err != nil {
			return fmt.Errorf("field Features not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateDatasetResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateDatasetRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.Name != nil {
		if len(*p.Name) > int(255) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	if p.Description != nil {
		if len(*p.Description) > int(2048) {
			return fmt.Errorf("field Description max_len rule failed, current value: %d", len(*p.Description))
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateDatasetResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteDatasetRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteDatasetResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDatasetRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDatasetResponse) IsValid() error {
	if p.Dataset != nil {
		if err := p.Dataset.IsValid(); err != nil {
			return fmt.Errorf("field Dataset not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetDatasetsRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if len(p.DatasetIds) > int(100) {
		return fmt.Errorf("field DatasetIds MaxLen rule failed, current value: %v", p.DatasetIds)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetDatasetsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDatasetsRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.Name != nil {
		if len(*p.Name) > int(255) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	if p.PageNumber != nil {
		if *p.PageNumber <= int32(0) {
			return fmt.Errorf("field PageNumber gt rule failed, current value: %v", *p.PageNumber)
		}
	}
	if p.PageSize != nil {
		if *p.PageSize <= int32(0) {
			return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
		}
		if *p.PageSize > int32(200) {
			return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDatasetsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *SignUploadFileTokenRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.Storage == nil {
		return fmt.Errorf("field Storage not_nil rule failed")
	}
	if p.Storage.String() == "<UNSET>" {
		return fmt.Errorf("field Storage defined_only rule failed")
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *SignUploadFileTokenResponse) IsValid() error {
	if p.Token != nil {
		if err := p.Token.IsValid(); err != nil {
			return fmt.Errorf("field Token not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ImportDatasetRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.File == nil {
		return fmt.Errorf("field File not_nil rule failed")
	}
	if err := p.File.IsValid(); err != nil {
		return fmt.Errorf("field File not valid, %w", err)
	}
	if len(p.FieldMappings) < int(1) {
		return fmt.Errorf("field FieldMappings MinLen rule failed, current value: %v", p.FieldMappings)
	}
	if p.Option != nil {
		if err := p.Option.IsValid(); err != nil {
			return fmt.Errorf("field Option not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ImportDatasetResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDatasetIOJobRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.JobID <= int64(0) {
		return fmt.Errorf("field JobID gt rule failed, current value: %v", p.JobID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDatasetIOJobResponse) IsValid() error {
	if p.Job != nil {
		if err := p.Job.IsValid(); err != nil {
			return fmt.Errorf("field Job not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDatasetIOJobsRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDatasetIOJobsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDatasetVersionsRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.PageNumber != nil {
		if *p.PageNumber <= int32(0) {
			return fmt.Errorf("field PageNumber gt rule failed, current value: %v", *p.PageNumber)
		}
	}
	if p.PageSize != nil {
		if *p.PageSize <= int32(0) {
			return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
		}
		if *p.PageSize > int32(200) {
			return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDatasetVersionsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDatasetVersionRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.VersionID <= int64(0) {
		return fmt.Errorf("field VersionID gt rule failed, current value: %v", p.VersionID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDatasetVersionResponse) IsValid() error {
	if p.Version != nil {
		if err := p.Version.IsValid(); err != nil {
			return fmt.Errorf("field Version not valid, %w", err)
		}
	}
	if p.Dataset != nil {
		if err := p.Dataset.IsValid(); err != nil {
			return fmt.Errorf("field Dataset not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *VersionedDataset) IsValid() error {
	if p.Version != nil {
		if err := p.Version.IsValid(); err != nil {
			return fmt.Errorf("field Version not valid, %w", err)
		}
	}
	if p.Dataset != nil {
		if err := p.Dataset.IsValid(); err != nil {
			return fmt.Errorf("field Dataset not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetDatasetVersionsRequest) IsValid() error {
	if p.WorkspaceID != nil {
		if *p.WorkspaceID <= int64(0) {
			return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
		}
	}
	if len(p.VersionIds) > int(100) {
		return fmt.Errorf("field VersionIds MaxLen rule failed, current value: %v", p.VersionIds)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetDatasetVersionsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateDatasetVersionRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if len(p.Version) < int(1) {
		return fmt.Errorf("field Version min_len rule failed, current value: %d", len(p.Version))
	}
	if len(p.Version) > int(128) {
		return fmt.Errorf("field Version max_len rule failed, current value: %d", len(p.Version))
	}
	if p.Desc != nil {
		if len(*p.Desc) > int(2048) {
			return fmt.Errorf("field Desc max_len rule failed, current value: %d", len(*p.Desc))
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateDatasetVersionResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateDatasetSchemaRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if len(p.Fields) < int(1) {
		return fmt.Errorf("field Fields MinLen rule failed, current value: %v", p.Fields)
	}
	for i := 0; i < len(p.Fields); i++ {
		_elem := p.Fields[i]
		if _elem != nil {
			if err := _elem.IsValid(); err != nil {
				return fmt.Errorf("field _elem not valid, %w", err)
			}
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateDatasetSchemaResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDatasetSchemaRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDatasetSchemaResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchCreateDatasetItemsRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if len(p.Items) < int(1) {
		return fmt.Errorf("field Items MinLen rule failed, current value: %v", p.Items)
	}
	if len(p.Items) > int(100) {
		return fmt.Errorf("field Items MaxLen rule failed, current value: %v", p.Items)
	}
	for i := 0; i < len(p.Items); i++ {
		_elem := p.Items[i]
		if _elem != nil {
			if err := _elem.IsValid(); err != nil {
				return fmt.Errorf("field _elem not valid, %w", err)
			}
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchCreateDatasetItemsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateDatasetItemRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.ItemID <= int64(0) {
		return fmt.Errorf("field ItemID gt rule failed, current value: %v", p.ItemID)
	}
	for i := 0; i < len(p.Data); i++ {
		_elem := p.Data[i]
		if _elem != nil {
			if err := _elem.IsValid(); err != nil {
				return fmt.Errorf("field _elem not valid, %w", err)
			}
		}
	}
	for i := 0; i < len(p.RepeatedData); i++ {
		_elem1 := p.RepeatedData[i]
		if _elem1 != nil {
			if err := _elem1.IsValid(); err != nil {
				return fmt.Errorf("field _elem1 not valid, %w", err)
			}
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateDatasetItemResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteDatasetItemRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.ItemID <= int64(0) {
		return fmt.Errorf("field ItemID gt rule failed, current value: %v", p.ItemID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteDatasetItemResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchDeleteDatasetItemsRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if len(p.ItemIds) < int(1) {
		return fmt.Errorf("field ItemIds MinLen rule failed, current value: %v", p.ItemIds)
	}
	if len(p.ItemIds) > int(100) {
		return fmt.Errorf("field ItemIds MaxLen rule failed, current value: %v", p.ItemIds)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchDeleteDatasetItemsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDatasetItemsRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.PageNumber != nil {
		if *p.PageNumber <= int32(0) {
			return fmt.Errorf("field PageNumber gt rule failed, current value: %v", *p.PageNumber)
		}
	}
	if p.PageSize != nil {
		if *p.PageSize <= int32(0) {
			return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
		}
		if *p.PageSize > int32(200) {
			return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDatasetItemsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDatasetItemsByVersionRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.VersionID <= int64(0) {
		return fmt.Errorf("field VersionID gt rule failed, current value: %v", p.VersionID)
	}
	if p.PageNumber != nil {
		if *p.PageNumber <= int32(0) {
			return fmt.Errorf("field PageNumber gt rule failed, current value: %v", *p.PageNumber)
		}
	}
	if p.PageSize != nil {
		if *p.PageSize <= int32(0) {
			return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
		}
		if *p.PageSize > int32(200) {
			return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDatasetItemsByVersionResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDatasetItemRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.ItemID <= int64(0) {
		return fmt.Errorf("field ItemID gt rule failed, current value: %v", p.ItemID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDatasetItemResponse) IsValid() error {
	if p.Item != nil {
		if err := p.Item.IsValid(); err != nil {
			return fmt.Errorf("field Item not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetDatasetItemsRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if len(p.ItemIds) > int(100) {
		return fmt.Errorf("field ItemIds MaxLen rule failed, current value: %v", p.ItemIds)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetDatasetItemsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetDatasetItemsByVersionRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.VersionID <= int64(0) {
		return fmt.Errorf("field VersionID gt rule failed, current value: %v", p.VersionID)
	}
	if len(p.ItemIds) > int(100) {
		return fmt.Errorf("field ItemIds MaxLen rule failed, current value: %v", p.ItemIds)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetDatasetItemsByVersionResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ClearDatasetItemRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DatasetID <= int64(0) {
		return fmt.Errorf("field DatasetID gt rule failed, current value: %v", p.DatasetID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ClearDatasetItemResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
