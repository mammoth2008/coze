// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package dataset_job

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/domain/dataset"
	"strings"
)

const (
	LogLevelInfo = "info"

	LogLevelError = "error"

	LogLevelWarning = "warning"
)

// 通用任务类型
type JobType int64

const (
	JobType_ImportFromFile  JobType = 1
	JobType_ExportToFile    JobType = 2
	JobType_ExportToDataset JobType = 3
)

func (p JobType) String() string {
	switch p {
	case JobType_ImportFromFile:
		return "ImportFromFile"
	case JobType_ExportToFile:
		return "ExportToFile"
	case JobType_ExportToDataset:
		return "ExportToDataset"
	}
	return "<UNSET>"
}

func JobTypeFromString(s string) (JobType, error) {
	switch s {
	case "ImportFromFile":
		return JobType_ImportFromFile, nil
	case "ExportToFile":
		return JobType_ExportToFile, nil
	case "ExportToDataset":
		return JobType_ExportToDataset, nil
	}
	return JobType(0), fmt.Errorf("not a valid JobType string")
}

func JobTypePtr(v JobType) *JobType { return &v }
func (p *JobType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = JobType(result.Int64)
	return
}

func (p *JobType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 通用任务状态
type JobStatus int64

const (
	JobStatus_Undefined JobStatus = 0
	// 待处理
	JobStatus_Pending JobStatus = 1
	// 处理中
	JobStatus_Running JobStatus = 2
	// 已完成
	JobStatus_Completed JobStatus = 3
	// 失败
	JobStatus_Failed JobStatus = 4
	// 已取消
	JobStatus_Cancelled JobStatus = 5
)

func (p JobStatus) String() string {
	switch p {
	case JobStatus_Undefined:
		return "Undefined"
	case JobStatus_Pending:
		return "Pending"
	case JobStatus_Running:
		return "Running"
	case JobStatus_Completed:
		return "Completed"
	case JobStatus_Failed:
		return "Failed"
	case JobStatus_Cancelled:
		return "Cancelled"
	}
	return "<UNSET>"
}

func JobStatusFromString(s string) (JobStatus, error) {
	switch s {
	case "Undefined":
		return JobStatus_Undefined, nil
	case "Pending":
		return JobStatus_Pending, nil
	case "Running":
		return JobStatus_Running, nil
	case "Completed":
		return JobStatus_Completed, nil
	case "Failed":
		return JobStatus_Failed, nil
	case "Cancelled":
		return JobStatus_Cancelled, nil
	}
	return JobStatus(0), fmt.Errorf("not a valid JobStatus string")
}

func JobStatusPtr(v JobStatus) *JobStatus { return &v }
func (p *JobStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = JobStatus(result.Int64)
	return
}

func (p *JobStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FileFormat int64

const (
	FileFormat_JSONL   FileFormat = 1
	FileFormat_Parquet FileFormat = 2
	FileFormat_CSV     FileFormat = 3
	/*[100, 200) 压缩格式*/
	FileFormat_ZIP FileFormat = 100
)

func (p FileFormat) String() string {
	switch p {
	case FileFormat_JSONL:
		return "JSONL"
	case FileFormat_Parquet:
		return "Parquet"
	case FileFormat_CSV:
		return "CSV"
	case FileFormat_ZIP:
		return "ZIP"
	}
	return "<UNSET>"
}

func FileFormatFromString(s string) (FileFormat, error) {
	switch s {
	case "JSONL":
		return FileFormat_JSONL, nil
	case "Parquet":
		return FileFormat_Parquet, nil
	case "CSV":
		return FileFormat_CSV, nil
	case "ZIP":
		return FileFormat_ZIP, nil
	}
	return FileFormat(0), fmt.Errorf("not a valid FileFormat string")
}

func FileFormatPtr(v FileFormat) *FileFormat { return &v }
func (p *FileFormat) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FileFormat(result.Int64)
	return
}

func (p *FileFormat) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 通用任务日志
type JobLog struct {
	Content   string `thrift:"content,1,required" frugal:"1,required,string" form:"content,required" json:"content,required" query:"content,required"`
	Level     string `thrift:"level,2,required" frugal:"2,required,string" form:"level,required" json:"level,required" query:"level,required"`
	Timestamp int64  `thrift:"timestamp,3,required" frugal:"3,required,i64" json:"timestamp" form:"timestamp,required" query:"timestamp,required"`
	Hidden    bool   `thrift:"hidden,10,required" frugal:"10,required,bool" form:"hidden,required" json:"hidden,required" query:"hidden,required"`
}

func NewJobLog() *JobLog {
	return &JobLog{}
}

func (p *JobLog) InitDefault() {
}

func (p *JobLog) GetContent() (v string) {
	if p != nil {
		return p.Content
	}
	return
}

func (p *JobLog) GetLevel() (v string) {
	if p != nil {
		return p.Level
	}
	return
}

func (p *JobLog) GetTimestamp() (v int64) {
	if p != nil {
		return p.Timestamp
	}
	return
}

func (p *JobLog) GetHidden() (v bool) {
	if p != nil {
		return p.Hidden
	}
	return
}
func (p *JobLog) SetContent(val string) {
	p.Content = val
}
func (p *JobLog) SetLevel(val string) {
	p.Level = val
}
func (p *JobLog) SetTimestamp(val int64) {
	p.Timestamp = val
}
func (p *JobLog) SetHidden(val bool) {
	p.Hidden = val
}

var fieldIDToName_JobLog = map[int16]string{
	1:  "content",
	2:  "level",
	3:  "timestamp",
	10: "hidden",
}

func (p *JobLog) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetContent bool = false
	var issetLevel bool = false
	var issetTimestamp bool = false
	var issetHidden bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetContent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetLevel = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTimestamp = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetHidden = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetContent {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLevel {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTimestamp {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetHidden {
		fieldId = 10
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JobLog[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_JobLog[fieldId]))
}

func (p *JobLog) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Content = _field
	return nil
}
func (p *JobLog) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Level = _field
	return nil
}
func (p *JobLog) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Timestamp = _field
	return nil
}
func (p *JobLog) ReadField10(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Hidden = _field
	return nil
}

func (p *JobLog) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JobLog"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JobLog) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("content", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *JobLog) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("level", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Level); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *JobLog) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Timestamp); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *JobLog) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hidden", thrift.BOOL, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Hidden); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *JobLog) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JobLog(%+v)", *p)

}

func (p *JobLog) DeepEqual(ano *JobLog) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Content) {
		return false
	}
	if !p.Field2DeepEqual(ano.Level) {
		return false
	}
	if !p.Field3DeepEqual(ano.Timestamp) {
		return false
	}
	if !p.Field10DeepEqual(ano.Hidden) {
		return false
	}
	return true
}

func (p *JobLog) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *JobLog) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Level, src) != 0 {
		return false
	}
	return true
}
func (p *JobLog) Field3DeepEqual(src int64) bool {

	if p.Timestamp != src {
		return false
	}
	return true
}
func (p *JobLog) Field10DeepEqual(src bool) bool {

	if p.Hidden != src {
		return false
	}
	return true
}

type DatasetIOFile struct {
	Provider dataset.StorageProvider `thrift:"provider,1,required" frugal:"1,required,StorageProvider" form:"provider,required" json:"provider,required" query:"provider,required"`
	Path     string                  `thrift:"path,2,required" frugal:"2,required,string" form:"path,required" json:"path,required" query:"path,required"`
	// 数据文件的格式
	Format *FileFormat `thrift:"format,3,optional" frugal:"3,optional,FileFormat" form:"format" json:"format,omitempty" query:"format"`
	// 压缩包格式
	CompressFormat *FileFormat `thrift:"compress_format,4,optional" frugal:"4,optional,FileFormat" form:"compress_format" json:"compress_format,omitempty" query:"compress_format"`
	// path 为文件夹或压缩包时，数据文件列表, 服务端设置
	Files []string `thrift:"files,5,optional" frugal:"5,optional,list<string>" form:"files" json:"files,omitempty" query:"files"`
}

func NewDatasetIOFile() *DatasetIOFile {
	return &DatasetIOFile{}
}

func (p *DatasetIOFile) InitDefault() {
}

func (p *DatasetIOFile) GetProvider() (v dataset.StorageProvider) {
	if p != nil {
		return p.Provider
	}
	return
}

func (p *DatasetIOFile) GetPath() (v string) {
	if p != nil {
		return p.Path
	}
	return
}

var DatasetIOFile_Format_DEFAULT FileFormat

func (p *DatasetIOFile) GetFormat() (v FileFormat) {
	if p == nil {
		return
	}
	if !p.IsSetFormat() {
		return DatasetIOFile_Format_DEFAULT
	}
	return *p.Format
}

var DatasetIOFile_CompressFormat_DEFAULT FileFormat

func (p *DatasetIOFile) GetCompressFormat() (v FileFormat) {
	if p == nil {
		return
	}
	if !p.IsSetCompressFormat() {
		return DatasetIOFile_CompressFormat_DEFAULT
	}
	return *p.CompressFormat
}

var DatasetIOFile_Files_DEFAULT []string

func (p *DatasetIOFile) GetFiles() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetFiles() {
		return DatasetIOFile_Files_DEFAULT
	}
	return p.Files
}
func (p *DatasetIOFile) SetProvider(val dataset.StorageProvider) {
	p.Provider = val
}
func (p *DatasetIOFile) SetPath(val string) {
	p.Path = val
}
func (p *DatasetIOFile) SetFormat(val *FileFormat) {
	p.Format = val
}
func (p *DatasetIOFile) SetCompressFormat(val *FileFormat) {
	p.CompressFormat = val
}
func (p *DatasetIOFile) SetFiles(val []string) {
	p.Files = val
}

var fieldIDToName_DatasetIOFile = map[int16]string{
	1: "provider",
	2: "path",
	3: "format",
	4: "compress_format",
	5: "files",
}

func (p *DatasetIOFile) IsSetFormat() bool {
	return p.Format != nil
}

func (p *DatasetIOFile) IsSetCompressFormat() bool {
	return p.CompressFormat != nil
}

func (p *DatasetIOFile) IsSetFiles() bool {
	return p.Files != nil
}

func (p *DatasetIOFile) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProvider bool = false
	var issetPath bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProvider = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPath = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProvider {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPath {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetIOFile[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DatasetIOFile[fieldId]))
}

func (p *DatasetIOFile) ReadField1(iprot thrift.TProtocol) error {

	var _field dataset.StorageProvider
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = dataset.StorageProvider(v)
	}
	p.Provider = _field
	return nil
}
func (p *DatasetIOFile) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Path = _field
	return nil
}
func (p *DatasetIOFile) ReadField3(iprot thrift.TProtocol) error {

	var _field *FileFormat
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := FileFormat(v)
		_field = &tmp
	}
	p.Format = _field
	return nil
}
func (p *DatasetIOFile) ReadField4(iprot thrift.TProtocol) error {

	var _field *FileFormat
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := FileFormat(v)
		_field = &tmp
	}
	p.CompressFormat = _field
	return nil
}
func (p *DatasetIOFile) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Files = _field
	return nil
}

func (p *DatasetIOFile) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetIOFile"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetIOFile) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("provider", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Provider)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DatasetIOFile) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Path); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DatasetIOFile) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormat() {
		if err = oprot.WriteFieldBegin("format", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Format)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DatasetIOFile) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompressFormat() {
		if err = oprot.WriteFieldBegin("compress_format", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.CompressFormat)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DatasetIOFile) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFiles() {
		if err = oprot.WriteFieldBegin("files", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Files)); err != nil {
			return err
		}
		for _, v := range p.Files {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *DatasetIOFile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetIOFile(%+v)", *p)

}

func (p *DatasetIOFile) DeepEqual(ano *DatasetIOFile) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Provider) {
		return false
	}
	if !p.Field2DeepEqual(ano.Path) {
		return false
	}
	if !p.Field3DeepEqual(ano.Format) {
		return false
	}
	if !p.Field4DeepEqual(ano.CompressFormat) {
		return false
	}
	if !p.Field5DeepEqual(ano.Files) {
		return false
	}
	return true
}

func (p *DatasetIOFile) Field1DeepEqual(src dataset.StorageProvider) bool {

	if p.Provider != src {
		return false
	}
	return true
}
func (p *DatasetIOFile) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Path, src) != 0 {
		return false
	}
	return true
}
func (p *DatasetIOFile) Field3DeepEqual(src *FileFormat) bool {

	if p.Format == src {
		return true
	} else if p.Format == nil || src == nil {
		return false
	}
	if *p.Format != *src {
		return false
	}
	return true
}
func (p *DatasetIOFile) Field4DeepEqual(src *FileFormat) bool {

	if p.CompressFormat == src {
		return true
	} else if p.CompressFormat == nil || src == nil {
		return false
	}
	if *p.CompressFormat != *src {
		return false
	}
	return true
}
func (p *DatasetIOFile) Field5DeepEqual(src []string) bool {

	if len(p.Files) != len(src) {
		return false
	}
	for i, v := range p.Files {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type DatasetIODataset struct {
	SpaceID   *int64 `thrift:"space_id,1,optional" frugal:"1,optional,i64" json:"space_id" form:"space_id" query:"space_id"`
	DatasetID int64  `thrift:"dataset_id,2,required" frugal:"2,required,i64" json:"dataset_id" form:"dataset_id,required" query:"dataset_id,required"`
	VersionID *int64 `thrift:"version_id,3,optional" frugal:"3,optional,i64" json:"version_id" form:"version_id" query:"version_id"`
}

func NewDatasetIODataset() *DatasetIODataset {
	return &DatasetIODataset{}
}

func (p *DatasetIODataset) InitDefault() {
}

var DatasetIODataset_SpaceID_DEFAULT int64

func (p *DatasetIODataset) GetSpaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetSpaceID() {
		return DatasetIODataset_SpaceID_DEFAULT
	}
	return *p.SpaceID
}

func (p *DatasetIODataset) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

var DatasetIODataset_VersionID_DEFAULT int64

func (p *DatasetIODataset) GetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetVersionID() {
		return DatasetIODataset_VersionID_DEFAULT
	}
	return *p.VersionID
}
func (p *DatasetIODataset) SetSpaceID(val *int64) {
	p.SpaceID = val
}
func (p *DatasetIODataset) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *DatasetIODataset) SetVersionID(val *int64) {
	p.VersionID = val
}

var fieldIDToName_DatasetIODataset = map[int16]string{
	1: "space_id",
	2: "dataset_id",
	3: "version_id",
}

func (p *DatasetIODataset) IsSetSpaceID() bool {
	return p.SpaceID != nil
}

func (p *DatasetIODataset) IsSetVersionID() bool {
	return p.VersionID != nil
}

func (p *DatasetIODataset) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDatasetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDatasetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetIODataset[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DatasetIODataset[fieldId]))
}

func (p *DatasetIODataset) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SpaceID = _field
	return nil
}
func (p *DatasetIODataset) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *DatasetIODataset) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionID = _field
	return nil
}

func (p *DatasetIODataset) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetIODataset"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetIODataset) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpaceID() {
		if err = oprot.WriteFieldBegin("space_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SpaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DatasetIODataset) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DatasetIODataset) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionID() {
		if err = oprot.WriteFieldBegin("version_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DatasetIODataset) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetIODataset(%+v)", *p)

}

func (p *DatasetIODataset) DeepEqual(ano *DatasetIODataset) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SpaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionID) {
		return false
	}
	return true
}

func (p *DatasetIODataset) Field1DeepEqual(src *int64) bool {

	if p.SpaceID == src {
		return true
	} else if p.SpaceID == nil || src == nil {
		return false
	}
	if *p.SpaceID != *src {
		return false
	}
	return true
}
func (p *DatasetIODataset) Field2DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *DatasetIODataset) Field3DeepEqual(src *int64) bool {

	if p.VersionID == src {
		return true
	} else if p.VersionID == nil || src == nil {
		return false
	}
	if *p.VersionID != *src {
		return false
	}
	return true
}

type DatasetIOEndpoint struct {
	File    *DatasetIOFile    `thrift:"file,1,optional" frugal:"1,optional,DatasetIOFile" form:"file" json:"file,omitempty" query:"file"`
	Dataset *DatasetIODataset `thrift:"dataset,2,optional" frugal:"2,optional,DatasetIODataset" form:"dataset" json:"dataset,omitempty" query:"dataset"`
}

func NewDatasetIOEndpoint() *DatasetIOEndpoint {
	return &DatasetIOEndpoint{}
}

func (p *DatasetIOEndpoint) InitDefault() {
}

var DatasetIOEndpoint_File_DEFAULT *DatasetIOFile

func (p *DatasetIOEndpoint) GetFile() (v *DatasetIOFile) {
	if p == nil {
		return
	}
	if !p.IsSetFile() {
		return DatasetIOEndpoint_File_DEFAULT
	}
	return p.File
}

var DatasetIOEndpoint_Dataset_DEFAULT *DatasetIODataset

func (p *DatasetIOEndpoint) GetDataset() (v *DatasetIODataset) {
	if p == nil {
		return
	}
	if !p.IsSetDataset() {
		return DatasetIOEndpoint_Dataset_DEFAULT
	}
	return p.Dataset
}
func (p *DatasetIOEndpoint) SetFile(val *DatasetIOFile) {
	p.File = val
}
func (p *DatasetIOEndpoint) SetDataset(val *DatasetIODataset) {
	p.Dataset = val
}

var fieldIDToName_DatasetIOEndpoint = map[int16]string{
	1: "file",
	2: "dataset",
}

func (p *DatasetIOEndpoint) IsSetFile() bool {
	return p.File != nil
}

func (p *DatasetIOEndpoint) IsSetDataset() bool {
	return p.Dataset != nil
}

func (p *DatasetIOEndpoint) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetIOEndpoint[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetIOEndpoint) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDatasetIOFile()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.File = _field
	return nil
}
func (p *DatasetIOEndpoint) ReadField2(iprot thrift.TProtocol) error {
	_field := NewDatasetIODataset()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Dataset = _field
	return nil
}

func (p *DatasetIOEndpoint) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetIOEndpoint"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetIOEndpoint) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFile() {
		if err = oprot.WriteFieldBegin("file", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.File.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DatasetIOEndpoint) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataset() {
		if err = oprot.WriteFieldBegin("dataset", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Dataset.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DatasetIOEndpoint) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetIOEndpoint(%+v)", *p)

}

func (p *DatasetIOEndpoint) DeepEqual(ano *DatasetIOEndpoint) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.File) {
		return false
	}
	if !p.Field2DeepEqual(ano.Dataset) {
		return false
	}
	return true
}

func (p *DatasetIOEndpoint) Field1DeepEqual(src *DatasetIOFile) bool {

	if !p.File.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DatasetIOEndpoint) Field2DeepEqual(src *DatasetIODataset) bool {

	if !p.Dataset.DeepEqual(src) {
		return false
	}
	return true
}

// DatasetIOJob 数据集导入导出任务
type DatasetIOJob struct {
	ID      int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id" form:"id,required" query:"id,required"`
	AppID   *int32 `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,omitempty" query:"app_id"`
	SpaceID int64  `thrift:"space_id,3,required" frugal:"3,required,i64" json:"space_id" form:"space_id,required" query:"space_id,required"`
	// 导入导出到文件时，为数据集 ID；数据集间转移时，为目标数据集 ID
	DatasetID int64              `thrift:"dataset_id,4,required" frugal:"4,required,i64" json:"dataset_id" form:"dataset_id,required" query:"dataset_id,required"`
	JobType   JobType            `thrift:"job_type,5,required" frugal:"5,required,JobType" form:"job_type,required" json:"job_type,required" query:"job_type,required"`
	Source    *DatasetIOEndpoint `thrift:"source,6,required" frugal:"6,required,DatasetIOEndpoint" form:"source,required" json:"source,required" query:"source,required"`
	Target    *DatasetIOEndpoint `thrift:"target,7,required" frugal:"7,required,DatasetIOEndpoint" form:"target,required" json:"target,required" query:"target,required"`
	// 字段映射
	FieldMappings []*FieldMapping     `thrift:"field_mappings,8,optional" frugal:"8,optional,list<FieldMapping>" form:"field_mappings" json:"field_mappings,omitempty" query:"field_mappings"`
	Option        *DatasetIOJobOption `thrift:"option,9,optional" frugal:"9,optional,DatasetIOJobOption" form:"option" json:"option,omitempty" query:"option"`
	/* 运行数据, [20, 100) */
	Status   *JobStatus                `thrift:"status,20,optional" frugal:"20,optional,JobStatus" form:"status" json:"status,omitempty" query:"status"`
	Progress *DatasetIOJobProgress     `thrift:"progress,21,optional" frugal:"21,optional,DatasetIOJobProgress" form:"progress" json:"progress,omitempty" query:"progress"`
	Errors   []*dataset.ItemErrorGroup `thrift:"errors,22,optional" frugal:"22,optional,list<dataset.ItemErrorGroup>" form:"errors" json:"errors,omitempty" query:"errors"`
	/* 通用信息 */
	CreatedBy *string `thrift:"created_by,100,optional" frugal:"100,optional,string" form:"created_by" json:"created_by,omitempty" query:"created_by"`
	CreatedAt *int64  `thrift:"created_at,101,optional" frugal:"101,optional,i64" json:"created_at" form:"created_at" query:"created_at"`
	UpdatedBy *string `thrift:"updated_by,102,optional" frugal:"102,optional,string" form:"updated_by" json:"updated_by,omitempty" query:"updated_by"`
	UpdatedAt *int64  `thrift:"updated_at,103,optional" frugal:"103,optional,i64" json:"updated_at" form:"updated_at" query:"updated_at"`
	StartedAt *int64  `thrift:"started_at,104,optional" frugal:"104,optional,i64" json:"started_at" form:"started_at" query:"started_at"`
	EndedAt   *int64  `thrift:"ended_at,105,optional" frugal:"105,optional,i64" json:"ended_at" form:"ended_at" query:"ended_at"`
}

func NewDatasetIOJob() *DatasetIOJob {
	return &DatasetIOJob{}
}

func (p *DatasetIOJob) InitDefault() {
}

func (p *DatasetIOJob) GetID() (v int64) {
	if p != nil {
		return p.ID
	}
	return
}

var DatasetIOJob_AppID_DEFAULT int32

func (p *DatasetIOJob) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return DatasetIOJob_AppID_DEFAULT
	}
	return *p.AppID
}

func (p *DatasetIOJob) GetSpaceID() (v int64) {
	if p != nil {
		return p.SpaceID
	}
	return
}

func (p *DatasetIOJob) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

func (p *DatasetIOJob) GetJobType() (v JobType) {
	if p != nil {
		return p.JobType
	}
	return
}

var DatasetIOJob_Source_DEFAULT *DatasetIOEndpoint

func (p *DatasetIOJob) GetSource() (v *DatasetIOEndpoint) {
	if p == nil {
		return
	}
	if !p.IsSetSource() {
		return DatasetIOJob_Source_DEFAULT
	}
	return p.Source
}

var DatasetIOJob_Target_DEFAULT *DatasetIOEndpoint

func (p *DatasetIOJob) GetTarget() (v *DatasetIOEndpoint) {
	if p == nil {
		return
	}
	if !p.IsSetTarget() {
		return DatasetIOJob_Target_DEFAULT
	}
	return p.Target
}

var DatasetIOJob_FieldMappings_DEFAULT []*FieldMapping

func (p *DatasetIOJob) GetFieldMappings() (v []*FieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetFieldMappings() {
		return DatasetIOJob_FieldMappings_DEFAULT
	}
	return p.FieldMappings
}

var DatasetIOJob_Option_DEFAULT *DatasetIOJobOption

func (p *DatasetIOJob) GetOption() (v *DatasetIOJobOption) {
	if p == nil {
		return
	}
	if !p.IsSetOption() {
		return DatasetIOJob_Option_DEFAULT
	}
	return p.Option
}

var DatasetIOJob_Status_DEFAULT JobStatus

func (p *DatasetIOJob) GetStatus() (v JobStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return DatasetIOJob_Status_DEFAULT
	}
	return *p.Status
}

var DatasetIOJob_Progress_DEFAULT *DatasetIOJobProgress

func (p *DatasetIOJob) GetProgress() (v *DatasetIOJobProgress) {
	if p == nil {
		return
	}
	if !p.IsSetProgress() {
		return DatasetIOJob_Progress_DEFAULT
	}
	return p.Progress
}

var DatasetIOJob_Errors_DEFAULT []*dataset.ItemErrorGroup

func (p *DatasetIOJob) GetErrors() (v []*dataset.ItemErrorGroup) {
	if p == nil {
		return
	}
	if !p.IsSetErrors() {
		return DatasetIOJob_Errors_DEFAULT
	}
	return p.Errors
}

var DatasetIOJob_CreatedBy_DEFAULT string

func (p *DatasetIOJob) GetCreatedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedBy() {
		return DatasetIOJob_CreatedBy_DEFAULT
	}
	return *p.CreatedBy
}

var DatasetIOJob_CreatedAt_DEFAULT int64

func (p *DatasetIOJob) GetCreatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedAt() {
		return DatasetIOJob_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var DatasetIOJob_UpdatedBy_DEFAULT string

func (p *DatasetIOJob) GetUpdatedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedBy() {
		return DatasetIOJob_UpdatedBy_DEFAULT
	}
	return *p.UpdatedBy
}

var DatasetIOJob_UpdatedAt_DEFAULT int64

func (p *DatasetIOJob) GetUpdatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedAt() {
		return DatasetIOJob_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

var DatasetIOJob_StartedAt_DEFAULT int64

func (p *DatasetIOJob) GetStartedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetStartedAt() {
		return DatasetIOJob_StartedAt_DEFAULT
	}
	return *p.StartedAt
}

var DatasetIOJob_EndedAt_DEFAULT int64

func (p *DatasetIOJob) GetEndedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEndedAt() {
		return DatasetIOJob_EndedAt_DEFAULT
	}
	return *p.EndedAt
}
func (p *DatasetIOJob) SetID(val int64) {
	p.ID = val
}
func (p *DatasetIOJob) SetAppID(val *int32) {
	p.AppID = val
}
func (p *DatasetIOJob) SetSpaceID(val int64) {
	p.SpaceID = val
}
func (p *DatasetIOJob) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *DatasetIOJob) SetJobType(val JobType) {
	p.JobType = val
}
func (p *DatasetIOJob) SetSource(val *DatasetIOEndpoint) {
	p.Source = val
}
func (p *DatasetIOJob) SetTarget(val *DatasetIOEndpoint) {
	p.Target = val
}
func (p *DatasetIOJob) SetFieldMappings(val []*FieldMapping) {
	p.FieldMappings = val
}
func (p *DatasetIOJob) SetOption(val *DatasetIOJobOption) {
	p.Option = val
}
func (p *DatasetIOJob) SetStatus(val *JobStatus) {
	p.Status = val
}
func (p *DatasetIOJob) SetProgress(val *DatasetIOJobProgress) {
	p.Progress = val
}
func (p *DatasetIOJob) SetErrors(val []*dataset.ItemErrorGroup) {
	p.Errors = val
}
func (p *DatasetIOJob) SetCreatedBy(val *string) {
	p.CreatedBy = val
}
func (p *DatasetIOJob) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *DatasetIOJob) SetUpdatedBy(val *string) {
	p.UpdatedBy = val
}
func (p *DatasetIOJob) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *DatasetIOJob) SetStartedAt(val *int64) {
	p.StartedAt = val
}
func (p *DatasetIOJob) SetEndedAt(val *int64) {
	p.EndedAt = val
}

var fieldIDToName_DatasetIOJob = map[int16]string{
	1:   "id",
	2:   "app_id",
	3:   "space_id",
	4:   "dataset_id",
	5:   "job_type",
	6:   "source",
	7:   "target",
	8:   "field_mappings",
	9:   "option",
	20:  "status",
	21:  "progress",
	22:  "errors",
	100: "created_by",
	101: "created_at",
	102: "updated_by",
	103: "updated_at",
	104: "started_at",
	105: "ended_at",
}

func (p *DatasetIOJob) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *DatasetIOJob) IsSetSource() bool {
	return p.Source != nil
}

func (p *DatasetIOJob) IsSetTarget() bool {
	return p.Target != nil
}

func (p *DatasetIOJob) IsSetFieldMappings() bool {
	return p.FieldMappings != nil
}

func (p *DatasetIOJob) IsSetOption() bool {
	return p.Option != nil
}

func (p *DatasetIOJob) IsSetStatus() bool {
	return p.Status != nil
}

func (p *DatasetIOJob) IsSetProgress() bool {
	return p.Progress != nil
}

func (p *DatasetIOJob) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *DatasetIOJob) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *DatasetIOJob) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *DatasetIOJob) IsSetUpdatedBy() bool {
	return p.UpdatedBy != nil
}

func (p *DatasetIOJob) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *DatasetIOJob) IsSetStartedAt() bool {
	return p.StartedAt != nil
}

func (p *DatasetIOJob) IsSetEndedAt() bool {
	return p.EndedAt != nil
}

func (p *DatasetIOJob) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetID bool = false
	var issetSpaceID bool = false
	var issetDatasetID bool = false
	var issetJobType bool = false
	var issetSource bool = false
	var issetTarget bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetJobType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetSource = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetTarget = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 104:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField104(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 105:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField105(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSpaceID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDatasetID {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetJobType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetSource {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetTarget {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetIOJob[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DatasetIOJob[fieldId]))
}

func (p *DatasetIOJob) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *DatasetIOJob) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *DatasetIOJob) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpaceID = _field
	return nil
}
func (p *DatasetIOJob) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *DatasetIOJob) ReadField5(iprot thrift.TProtocol) error {

	var _field JobType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = JobType(v)
	}
	p.JobType = _field
	return nil
}
func (p *DatasetIOJob) ReadField6(iprot thrift.TProtocol) error {
	_field := NewDatasetIOEndpoint()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Source = _field
	return nil
}
func (p *DatasetIOJob) ReadField7(iprot thrift.TProtocol) error {
	_field := NewDatasetIOEndpoint()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Target = _field
	return nil
}
func (p *DatasetIOJob) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldMapping, 0, size)
	values := make([]FieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldMappings = _field
	return nil
}
func (p *DatasetIOJob) ReadField9(iprot thrift.TProtocol) error {
	_field := NewDatasetIOJobOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Option = _field
	return nil
}
func (p *DatasetIOJob) ReadField20(iprot thrift.TProtocol) error {

	var _field *JobStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := JobStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *DatasetIOJob) ReadField21(iprot thrift.TProtocol) error {
	_field := NewDatasetIOJobProgress()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Progress = _field
	return nil
}
func (p *DatasetIOJob) ReadField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.ItemErrorGroup, 0, size)
	values := make([]dataset.ItemErrorGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Errors = _field
	return nil
}
func (p *DatasetIOJob) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedBy = _field
	return nil
}
func (p *DatasetIOJob) ReadField101(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *DatasetIOJob) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedBy = _field
	return nil
}
func (p *DatasetIOJob) ReadField103(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *DatasetIOJob) ReadField104(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartedAt = _field
	return nil
}
func (p *DatasetIOJob) ReadField105(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EndedAt = _field
	return nil
}

func (p *DatasetIOJob) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetIOJob"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField104(oprot); err != nil {
			fieldId = 104
			goto WriteFieldError
		}
		if err = p.writeField105(oprot); err != nil {
			fieldId = 105
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetIOJob) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DatasetIOJob) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DatasetIOJob) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("space_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SpaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DatasetIOJob) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DatasetIOJob) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("job_type", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.JobType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *DatasetIOJob) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("source", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Source.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *DatasetIOJob) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("target", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Target.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *DatasetIOJob) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldMappings() {
		if err = oprot.WriteFieldBegin("field_mappings", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldMappings)); err != nil {
			return err
		}
		for _, v := range p.FieldMappings {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *DatasetIOJob) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOption() {
		if err = oprot.WriteFieldBegin("option", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Option.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *DatasetIOJob) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *DatasetIOJob) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetProgress() {
		if err = oprot.WriteFieldBegin("progress", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Progress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *DatasetIOJob) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err = oprot.WriteFieldBegin("errors", thrift.LIST, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return err
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}
func (p *DatasetIOJob) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBy() {
		if err = oprot.WriteFieldBegin("created_by", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *DatasetIOJob) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("created_at", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *DatasetIOJob) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedBy() {
		if err = oprot.WriteFieldBegin("updated_by", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UpdatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *DatasetIOJob) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updated_at", thrift.I64, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *DatasetIOJob) writeField104(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartedAt() {
		if err = oprot.WriteFieldBegin("started_at", thrift.I64, 104); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.StartedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 end error: ", p), err)
}
func (p *DatasetIOJob) writeField105(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndedAt() {
		if err = oprot.WriteFieldBegin("ended_at", thrift.I64, 105); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EndedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 105 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 105 end error: ", p), err)
}

func (p *DatasetIOJob) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetIOJob(%+v)", *p)

}

func (p *DatasetIOJob) DeepEqual(ano *DatasetIOJob) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.SpaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field5DeepEqual(ano.JobType) {
		return false
	}
	if !p.Field6DeepEqual(ano.Source) {
		return false
	}
	if !p.Field7DeepEqual(ano.Target) {
		return false
	}
	if !p.Field8DeepEqual(ano.FieldMappings) {
		return false
	}
	if !p.Field9DeepEqual(ano.Option) {
		return false
	}
	if !p.Field20DeepEqual(ano.Status) {
		return false
	}
	if !p.Field21DeepEqual(ano.Progress) {
		return false
	}
	if !p.Field22DeepEqual(ano.Errors) {
		return false
	}
	if !p.Field100DeepEqual(ano.CreatedBy) {
		return false
	}
	if !p.Field101DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field102DeepEqual(ano.UpdatedBy) {
		return false
	}
	if !p.Field103DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field104DeepEqual(ano.StartedAt) {
		return false
	}
	if !p.Field105DeepEqual(ano.EndedAt) {
		return false
	}
	return true
}

func (p *DatasetIOJob) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field3DeepEqual(src int64) bool {

	if p.SpaceID != src {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field4DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field5DeepEqual(src JobType) bool {

	if p.JobType != src {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field6DeepEqual(src *DatasetIOEndpoint) bool {

	if !p.Source.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field7DeepEqual(src *DatasetIOEndpoint) bool {

	if !p.Target.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field8DeepEqual(src []*FieldMapping) bool {

	if len(p.FieldMappings) != len(src) {
		return false
	}
	for i, v := range p.FieldMappings {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DatasetIOJob) Field9DeepEqual(src *DatasetIOJobOption) bool {

	if !p.Option.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field20DeepEqual(src *JobStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field21DeepEqual(src *DatasetIOJobProgress) bool {

	if !p.Progress.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field22DeepEqual(src []*dataset.ItemErrorGroup) bool {

	if len(p.Errors) != len(src) {
		return false
	}
	for i, v := range p.Errors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DatasetIOJob) Field100DeepEqual(src *string) bool {

	if p.CreatedBy == src {
		return true
	} else if p.CreatedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreatedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field101DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field102DeepEqual(src *string) bool {

	if p.UpdatedBy == src {
		return true
	} else if p.UpdatedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UpdatedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field103DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field104DeepEqual(src *int64) bool {

	if p.StartedAt == src {
		return true
	} else if p.StartedAt == nil || src == nil {
		return false
	}
	if *p.StartedAt != *src {
		return false
	}
	return true
}
func (p *DatasetIOJob) Field105DeepEqual(src *int64) bool {

	if p.EndedAt == src {
		return true
	} else if p.EndedAt == nil || src == nil {
		return false
	}
	if *p.EndedAt != *src {
		return false
	}
	return true
}

type DatasetIOJobOption struct {
	// 覆盖数据集
	OverwriteDataset *bool `thrift:"overwrite_dataset,1,optional" frugal:"1,optional,bool" form:"overwrite_dataset" json:"overwrite_dataset,omitempty" query:"overwrite_dataset"`
}

func NewDatasetIOJobOption() *DatasetIOJobOption {
	return &DatasetIOJobOption{}
}

func (p *DatasetIOJobOption) InitDefault() {
}

var DatasetIOJobOption_OverwriteDataset_DEFAULT bool

func (p *DatasetIOJobOption) GetOverwriteDataset() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetOverwriteDataset() {
		return DatasetIOJobOption_OverwriteDataset_DEFAULT
	}
	return *p.OverwriteDataset
}
func (p *DatasetIOJobOption) SetOverwriteDataset(val *bool) {
	p.OverwriteDataset = val
}

var fieldIDToName_DatasetIOJobOption = map[int16]string{
	1: "overwrite_dataset",
}

func (p *DatasetIOJobOption) IsSetOverwriteDataset() bool {
	return p.OverwriteDataset != nil
}

func (p *DatasetIOJobOption) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetIOJobOption[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetIOJobOption) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OverwriteDataset = _field
	return nil
}

func (p *DatasetIOJobOption) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetIOJobOption"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetIOJobOption) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOverwriteDataset() {
		if err = oprot.WriteFieldBegin("overwrite_dataset", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.OverwriteDataset); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DatasetIOJobOption) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetIOJobOption(%+v)", *p)

}

func (p *DatasetIOJobOption) DeepEqual(ano *DatasetIOJobOption) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OverwriteDataset) {
		return false
	}
	return true
}

func (p *DatasetIOJobOption) Field1DeepEqual(src *bool) bool {

	if p.OverwriteDataset == src {
		return true
	} else if p.OverwriteDataset == nil || src == nil {
		return false
	}
	if *p.OverwriteDataset != *src {
		return false
	}
	return true
}

type DatasetIOJobProgress struct {
	// 总量
	Total *int64 `thrift:"total,2,optional" frugal:"2,optional,i64" json:"total" form:"total" query:"total"`
	// 已处理数量
	Processed *int64 `thrift:"processed,3,optional" frugal:"3,optional,i64" json:"processed" form:"processed" query:"processed"`
	// 已成功处理的数量
	Added *int64 `thrift:"added,4,optional" frugal:"4,optional,i64" json:"added" form:"added" query:"added"`
	/*子任务*/
	Name *string `thrift:"name,10,optional" frugal:"10,optional,string" form:"name" json:"name,omitempty" query:"name"`
	// 子任务的进度
	SubProgresses []*DatasetIOJobProgress `thrift:"sub_progresses,11,optional" frugal:"11,optional,list<DatasetIOJobProgress>" form:"sub_progresses" json:"sub_progresses,omitempty" query:"sub_progresses"`
}

func NewDatasetIOJobProgress() *DatasetIOJobProgress {
	return &DatasetIOJobProgress{}
}

func (p *DatasetIOJobProgress) InitDefault() {
}

var DatasetIOJobProgress_Total_DEFAULT int64

func (p *DatasetIOJobProgress) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return DatasetIOJobProgress_Total_DEFAULT
	}
	return *p.Total
}

var DatasetIOJobProgress_Processed_DEFAULT int64

func (p *DatasetIOJobProgress) GetProcessed() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetProcessed() {
		return DatasetIOJobProgress_Processed_DEFAULT
	}
	return *p.Processed
}

var DatasetIOJobProgress_Added_DEFAULT int64

func (p *DatasetIOJobProgress) GetAdded() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetAdded() {
		return DatasetIOJobProgress_Added_DEFAULT
	}
	return *p.Added
}

var DatasetIOJobProgress_Name_DEFAULT string

func (p *DatasetIOJobProgress) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return DatasetIOJobProgress_Name_DEFAULT
	}
	return *p.Name
}

var DatasetIOJobProgress_SubProgresses_DEFAULT []*DatasetIOJobProgress

func (p *DatasetIOJobProgress) GetSubProgresses() (v []*DatasetIOJobProgress) {
	if p == nil {
		return
	}
	if !p.IsSetSubProgresses() {
		return DatasetIOJobProgress_SubProgresses_DEFAULT
	}
	return p.SubProgresses
}
func (p *DatasetIOJobProgress) SetTotal(val *int64) {
	p.Total = val
}
func (p *DatasetIOJobProgress) SetProcessed(val *int64) {
	p.Processed = val
}
func (p *DatasetIOJobProgress) SetAdded(val *int64) {
	p.Added = val
}
func (p *DatasetIOJobProgress) SetName(val *string) {
	p.Name = val
}
func (p *DatasetIOJobProgress) SetSubProgresses(val []*DatasetIOJobProgress) {
	p.SubProgresses = val
}

var fieldIDToName_DatasetIOJobProgress = map[int16]string{
	2:  "total",
	3:  "processed",
	4:  "added",
	10: "name",
	11: "sub_progresses",
}

func (p *DatasetIOJobProgress) IsSetTotal() bool {
	return p.Total != nil
}

func (p *DatasetIOJobProgress) IsSetProcessed() bool {
	return p.Processed != nil
}

func (p *DatasetIOJobProgress) IsSetAdded() bool {
	return p.Added != nil
}

func (p *DatasetIOJobProgress) IsSetName() bool {
	return p.Name != nil
}

func (p *DatasetIOJobProgress) IsSetSubProgresses() bool {
	return p.SubProgresses != nil
}

func (p *DatasetIOJobProgress) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetIOJobProgress[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetIOJobProgress) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *DatasetIOJobProgress) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Processed = _field
	return nil
}
func (p *DatasetIOJobProgress) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Added = _field
	return nil
}
func (p *DatasetIOJobProgress) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *DatasetIOJobProgress) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*DatasetIOJobProgress, 0, size)
	values := make([]DatasetIOJobProgress, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SubProgresses = _field
	return nil
}

func (p *DatasetIOJobProgress) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetIOJobProgress"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetIOJobProgress) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DatasetIOJobProgress) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessed() {
		if err = oprot.WriteFieldBegin("processed", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Processed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DatasetIOJobProgress) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdded() {
		if err = oprot.WriteFieldBegin("added", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Added); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DatasetIOJobProgress) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *DatasetIOJobProgress) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubProgresses() {
		if err = oprot.WriteFieldBegin("sub_progresses", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SubProgresses)); err != nil {
			return err
		}
		for _, v := range p.SubProgresses {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *DatasetIOJobProgress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetIOJobProgress(%+v)", *p)

}

func (p *DatasetIOJobProgress) DeepEqual(ano *DatasetIOJobProgress) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field3DeepEqual(ano.Processed) {
		return false
	}
	if !p.Field4DeepEqual(ano.Added) {
		return false
	}
	if !p.Field10DeepEqual(ano.Name) {
		return false
	}
	if !p.Field11DeepEqual(ano.SubProgresses) {
		return false
	}
	return true
}

func (p *DatasetIOJobProgress) Field2DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *DatasetIOJobProgress) Field3DeepEqual(src *int64) bool {

	if p.Processed == src {
		return true
	} else if p.Processed == nil || src == nil {
		return false
	}
	if *p.Processed != *src {
		return false
	}
	return true
}
func (p *DatasetIOJobProgress) Field4DeepEqual(src *int64) bool {

	if p.Added == src {
		return true
	} else if p.Added == nil || src == nil {
		return false
	}
	if *p.Added != *src {
		return false
	}
	return true
}
func (p *DatasetIOJobProgress) Field10DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetIOJobProgress) Field11DeepEqual(src []*DatasetIOJobProgress) bool {

	if len(p.SubProgresses) != len(src) {
		return false
	}
	for i, v := range p.SubProgresses {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type FieldMapping struct {
	Source string `thrift:"source,1,required" frugal:"1,required,string" form:"source,required" json:"source,required" query:"source,required"`
	Target string `thrift:"target,2,required" frugal:"2,required,string" form:"target,required" json:"target,required" query:"target,required"`
}

func NewFieldMapping() *FieldMapping {
	return &FieldMapping{}
}

func (p *FieldMapping) InitDefault() {
}

func (p *FieldMapping) GetSource() (v string) {
	if p != nil {
		return p.Source
	}
	return
}

func (p *FieldMapping) GetTarget() (v string) {
	if p != nil {
		return p.Target
	}
	return
}
func (p *FieldMapping) SetSource(val string) {
	p.Source = val
}
func (p *FieldMapping) SetTarget(val string) {
	p.Target = val
}

var fieldIDToName_FieldMapping = map[int16]string{
	1: "source",
	2: "target",
}

func (p *FieldMapping) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSource bool = false
	var issetTarget bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSource = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTarget = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSource {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTarget {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldMapping[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FieldMapping[fieldId]))
}

func (p *FieldMapping) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Source = _field
	return nil
}
func (p *FieldMapping) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Target = _field
	return nil
}

func (p *FieldMapping) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldMapping"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldMapping) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("source", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Source); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldMapping) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("target", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Target); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FieldMapping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldMapping(%+v)", *p)

}

func (p *FieldMapping) DeepEqual(ano *FieldMapping) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Source) {
		return false
	}
	if !p.Field2DeepEqual(ano.Target) {
		return false
	}
	return true
}

func (p *FieldMapping) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Source, src) != 0 {
		return false
	}
	return true
}
func (p *FieldMapping) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Target, src) != 0 {
		return false
	}
	return true
}
