// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package authn

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/domain/authn"
	"strings"
)

const (
	DurationDayDay1 = "1"

	DurationDayDay30 = "30"

	DurationDayDay60 = "60"

	DurationDayDay90 = "90"

	DurationDayDay180 = "180"

	DurationDayDay365 = "365"

	DurationDayPermanent = "permanent"
)

type DurationDay = string

type CreatePersonalAccessTokenRequest struct {
	// PAT名称
	Name string `thrift:"name,1,required" frugal:"1,required,string" form:"name,required" json:"name,required" query:"name,required"`
	// PAT自定义过期时间unix，秒
	ExpireAt *int64 `thrift:"expire_at,2,optional" frugal:"2,optional,i64" form:"expire_at" json:"expire_at,omitempty" query:"expire_at"`
	// PAT用户枚举过期时间 1、30、60、90、180、365、permanent
	DurationDay *DurationDay `thrift:"duration_day,3,optional" frugal:"3,optional,string" form:"duration_day" json:"duration_day,omitempty" query:"duration_day"`
	Base        *base.Base   `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreatePersonalAccessTokenRequest() *CreatePersonalAccessTokenRequest {
	return &CreatePersonalAccessTokenRequest{}
}

func (p *CreatePersonalAccessTokenRequest) InitDefault() {
}

func (p *CreatePersonalAccessTokenRequest) GetName() (v string) {
	if p != nil {
		return p.Name
	}
	return
}

var CreatePersonalAccessTokenRequest_ExpireAt_DEFAULT int64

func (p *CreatePersonalAccessTokenRequest) GetExpireAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExpireAt() {
		return CreatePersonalAccessTokenRequest_ExpireAt_DEFAULT
	}
	return *p.ExpireAt
}

var CreatePersonalAccessTokenRequest_DurationDay_DEFAULT DurationDay

func (p *CreatePersonalAccessTokenRequest) GetDurationDay() (v DurationDay) {
	if p == nil {
		return
	}
	if !p.IsSetDurationDay() {
		return CreatePersonalAccessTokenRequest_DurationDay_DEFAULT
	}
	return *p.DurationDay
}

var CreatePersonalAccessTokenRequest_Base_DEFAULT *base.Base

func (p *CreatePersonalAccessTokenRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreatePersonalAccessTokenRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreatePersonalAccessTokenRequest) SetName(val string) {
	p.Name = val
}
func (p *CreatePersonalAccessTokenRequest) SetExpireAt(val *int64) {
	p.ExpireAt = val
}
func (p *CreatePersonalAccessTokenRequest) SetDurationDay(val *DurationDay) {
	p.DurationDay = val
}
func (p *CreatePersonalAccessTokenRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreatePersonalAccessTokenRequest = map[int16]string{
	1:   "name",
	2:   "expire_at",
	3:   "duration_day",
	255: "Base",
}

func (p *CreatePersonalAccessTokenRequest) IsSetExpireAt() bool {
	return p.ExpireAt != nil
}

func (p *CreatePersonalAccessTokenRequest) IsSetDurationDay() bool {
	return p.DurationDay != nil
}

func (p *CreatePersonalAccessTokenRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreatePersonalAccessTokenRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreatePersonalAccessTokenRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreatePersonalAccessTokenRequest[fieldId]))
}

func (p *CreatePersonalAccessTokenRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreatePersonalAccessTokenRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExpireAt = _field
	return nil
}
func (p *CreatePersonalAccessTokenRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *DurationDay
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DurationDay = _field
	return nil
}
func (p *CreatePersonalAccessTokenRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreatePersonalAccessTokenRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePersonalAccessTokenRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePersonalAccessTokenRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreatePersonalAccessTokenRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpireAt() {
		if err = oprot.WriteFieldBegin("expire_at", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExpireAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreatePersonalAccessTokenRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurationDay() {
		if err = oprot.WriteFieldBegin("duration_day", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DurationDay); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreatePersonalAccessTokenRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreatePersonalAccessTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePersonalAccessTokenRequest(%+v)", *p)

}

func (p *CreatePersonalAccessTokenRequest) DeepEqual(ano *CreatePersonalAccessTokenRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExpireAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.DurationDay) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreatePersonalAccessTokenRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreatePersonalAccessTokenRequest) Field2DeepEqual(src *int64) bool {

	if p.ExpireAt == src {
		return true
	} else if p.ExpireAt == nil || src == nil {
		return false
	}
	if *p.ExpireAt != *src {
		return false
	}
	return true
}
func (p *CreatePersonalAccessTokenRequest) Field3DeepEqual(src *DurationDay) bool {

	if p.DurationDay == src {
		return true
	} else if p.DurationDay == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DurationDay, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePersonalAccessTokenRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreatePersonalAccessTokenResponse struct {
	PersonalAccessToken *authn.PersonalAccessToken `thrift:"personal_access_token,1,optional" frugal:"1,optional,authn.PersonalAccessToken" form:"personal_access_token" json:"personal_access_token,omitempty" query:"personal_access_token"`
	// PAT token 明文
	Token    *string        `thrift:"token,2,optional" frugal:"2,optional,string" form:"token" json:"token,omitempty" query:"token"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewCreatePersonalAccessTokenResponse() *CreatePersonalAccessTokenResponse {
	return &CreatePersonalAccessTokenResponse{}
}

func (p *CreatePersonalAccessTokenResponse) InitDefault() {
}

var CreatePersonalAccessTokenResponse_PersonalAccessToken_DEFAULT *authn.PersonalAccessToken

func (p *CreatePersonalAccessTokenResponse) GetPersonalAccessToken() (v *authn.PersonalAccessToken) {
	if p == nil {
		return
	}
	if !p.IsSetPersonalAccessToken() {
		return CreatePersonalAccessTokenResponse_PersonalAccessToken_DEFAULT
	}
	return p.PersonalAccessToken
}

var CreatePersonalAccessTokenResponse_Token_DEFAULT string

func (p *CreatePersonalAccessTokenResponse) GetToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetToken() {
		return CreatePersonalAccessTokenResponse_Token_DEFAULT
	}
	return *p.Token
}

var CreatePersonalAccessTokenResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreatePersonalAccessTokenResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreatePersonalAccessTokenResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreatePersonalAccessTokenResponse) SetPersonalAccessToken(val *authn.PersonalAccessToken) {
	p.PersonalAccessToken = val
}
func (p *CreatePersonalAccessTokenResponse) SetToken(val *string) {
	p.Token = val
}
func (p *CreatePersonalAccessTokenResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreatePersonalAccessTokenResponse = map[int16]string{
	1:   "personal_access_token",
	2:   "token",
	255: "BaseResp",
}

func (p *CreatePersonalAccessTokenResponse) IsSetPersonalAccessToken() bool {
	return p.PersonalAccessToken != nil
}

func (p *CreatePersonalAccessTokenResponse) IsSetToken() bool {
	return p.Token != nil
}

func (p *CreatePersonalAccessTokenResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreatePersonalAccessTokenResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreatePersonalAccessTokenResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreatePersonalAccessTokenResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := authn.NewPersonalAccessToken()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PersonalAccessToken = _field
	return nil
}
func (p *CreatePersonalAccessTokenResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Token = _field
	return nil
}
func (p *CreatePersonalAccessTokenResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreatePersonalAccessTokenResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePersonalAccessTokenResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePersonalAccessTokenResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPersonalAccessToken() {
		if err = oprot.WriteFieldBegin("personal_access_token", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PersonalAccessToken.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreatePersonalAccessTokenResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreatePersonalAccessTokenResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreatePersonalAccessTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePersonalAccessTokenResponse(%+v)", *p)

}

func (p *CreatePersonalAccessTokenResponse) DeepEqual(ano *CreatePersonalAccessTokenResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PersonalAccessToken) {
		return false
	}
	if !p.Field2DeepEqual(ano.Token) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreatePersonalAccessTokenResponse) Field1DeepEqual(src *authn.PersonalAccessToken) bool {

	if !p.PersonalAccessToken.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreatePersonalAccessTokenResponse) Field2DeepEqual(src *string) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Token, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePersonalAccessTokenResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeletePersonalAccessTokenRequest struct {
	// PAT id
	ID   int64      `thrift:"id,1,required" frugal:"1,required,i64" json:"id,string,required" path:"id,required"`
	Base *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDeletePersonalAccessTokenRequest() *DeletePersonalAccessTokenRequest {
	return &DeletePersonalAccessTokenRequest{}
}

func (p *DeletePersonalAccessTokenRequest) InitDefault() {
}

func (p *DeletePersonalAccessTokenRequest) GetID() (v int64) {
	if p != nil {
		return p.ID
	}
	return
}

var DeletePersonalAccessTokenRequest_Base_DEFAULT *base.Base

func (p *DeletePersonalAccessTokenRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DeletePersonalAccessTokenRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeletePersonalAccessTokenRequest) SetID(val int64) {
	p.ID = val
}
func (p *DeletePersonalAccessTokenRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeletePersonalAccessTokenRequest = map[int16]string{
	1:   "id",
	255: "Base",
}

func (p *DeletePersonalAccessTokenRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeletePersonalAccessTokenRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeletePersonalAccessTokenRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeletePersonalAccessTokenRequest[fieldId]))
}

func (p *DeletePersonalAccessTokenRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *DeletePersonalAccessTokenRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeletePersonalAccessTokenRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePersonalAccessTokenRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeletePersonalAccessTokenRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeletePersonalAccessTokenRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeletePersonalAccessTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePersonalAccessTokenRequest(%+v)", *p)

}

func (p *DeletePersonalAccessTokenRequest) DeepEqual(ano *DeletePersonalAccessTokenRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeletePersonalAccessTokenRequest) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *DeletePersonalAccessTokenRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeletePersonalAccessTokenResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewDeletePersonalAccessTokenResponse() *DeletePersonalAccessTokenResponse {
	return &DeletePersonalAccessTokenResponse{}
}

func (p *DeletePersonalAccessTokenResponse) InitDefault() {
}

var DeletePersonalAccessTokenResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DeletePersonalAccessTokenResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DeletePersonalAccessTokenResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeletePersonalAccessTokenResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeletePersonalAccessTokenResponse = map[int16]string{
	255: "BaseResp",
}

func (p *DeletePersonalAccessTokenResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeletePersonalAccessTokenResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeletePersonalAccessTokenResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeletePersonalAccessTokenResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeletePersonalAccessTokenResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePersonalAccessTokenResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeletePersonalAccessTokenResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeletePersonalAccessTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePersonalAccessTokenResponse(%+v)", *p)

}

func (p *DeletePersonalAccessTokenResponse) DeepEqual(ano *DeletePersonalAccessTokenResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeletePersonalAccessTokenResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetPersonalAccessTokenRequest struct {
	// PAT Id
	ID   int64      `thrift:"id,1,required" frugal:"1,required,i64" json:"id,string,required" path:"id,required"`
	Base *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetPersonalAccessTokenRequest() *GetPersonalAccessTokenRequest {
	return &GetPersonalAccessTokenRequest{}
}

func (p *GetPersonalAccessTokenRequest) InitDefault() {
}

func (p *GetPersonalAccessTokenRequest) GetID() (v int64) {
	if p != nil {
		return p.ID
	}
	return
}

var GetPersonalAccessTokenRequest_Base_DEFAULT *base.Base

func (p *GetPersonalAccessTokenRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetPersonalAccessTokenRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetPersonalAccessTokenRequest) SetID(val int64) {
	p.ID = val
}
func (p *GetPersonalAccessTokenRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetPersonalAccessTokenRequest = map[int16]string{
	1:   "id",
	255: "Base",
}

func (p *GetPersonalAccessTokenRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPersonalAccessTokenRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPersonalAccessTokenRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetPersonalAccessTokenRequest[fieldId]))
}

func (p *GetPersonalAccessTokenRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *GetPersonalAccessTokenRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetPersonalAccessTokenRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPersonalAccessTokenRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPersonalAccessTokenRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetPersonalAccessTokenRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetPersonalAccessTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPersonalAccessTokenRequest(%+v)", *p)

}

func (p *GetPersonalAccessTokenRequest) DeepEqual(ano *GetPersonalAccessTokenRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetPersonalAccessTokenRequest) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *GetPersonalAccessTokenRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetPersonalAccessTokenResponse struct {
	PersonalAccessToken *authn.PersonalAccessToken `thrift:"personal_access_token,1,optional" frugal:"1,optional,authn.PersonalAccessToken" form:"personal_access_token" json:"personal_access_token,omitempty" query:"personal_access_token"`
	BaseResp            *base.BaseResp             `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewGetPersonalAccessTokenResponse() *GetPersonalAccessTokenResponse {
	return &GetPersonalAccessTokenResponse{}
}

func (p *GetPersonalAccessTokenResponse) InitDefault() {
}

var GetPersonalAccessTokenResponse_PersonalAccessToken_DEFAULT *authn.PersonalAccessToken

func (p *GetPersonalAccessTokenResponse) GetPersonalAccessToken() (v *authn.PersonalAccessToken) {
	if p == nil {
		return
	}
	if !p.IsSetPersonalAccessToken() {
		return GetPersonalAccessTokenResponse_PersonalAccessToken_DEFAULT
	}
	return p.PersonalAccessToken
}

var GetPersonalAccessTokenResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetPersonalAccessTokenResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetPersonalAccessTokenResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetPersonalAccessTokenResponse) SetPersonalAccessToken(val *authn.PersonalAccessToken) {
	p.PersonalAccessToken = val
}
func (p *GetPersonalAccessTokenResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetPersonalAccessTokenResponse = map[int16]string{
	1:   "personal_access_token",
	255: "BaseResp",
}

func (p *GetPersonalAccessTokenResponse) IsSetPersonalAccessToken() bool {
	return p.PersonalAccessToken != nil
}

func (p *GetPersonalAccessTokenResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetPersonalAccessTokenResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPersonalAccessTokenResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetPersonalAccessTokenResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := authn.NewPersonalAccessToken()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PersonalAccessToken = _field
	return nil
}
func (p *GetPersonalAccessTokenResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetPersonalAccessTokenResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPersonalAccessTokenResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPersonalAccessTokenResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPersonalAccessToken() {
		if err = oprot.WriteFieldBegin("personal_access_token", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PersonalAccessToken.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetPersonalAccessTokenResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetPersonalAccessTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPersonalAccessTokenResponse(%+v)", *p)

}

func (p *GetPersonalAccessTokenResponse) DeepEqual(ano *GetPersonalAccessTokenResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PersonalAccessToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetPersonalAccessTokenResponse) Field1DeepEqual(src *authn.PersonalAccessToken) bool {

	if !p.PersonalAccessToken.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetPersonalAccessTokenResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListPersonalAccessTokenRequest struct {
	// per page size
	PageSize *int32 `thrift:"page_size,1,optional" frugal:"1,optional,i32" json:"page_size,omitempty" query:"page_size"`
	// page number
	PageNumber *int32     `thrift:"page_number,2,optional" frugal:"2,optional,i32" json:"page_number,omitempty" query:"page_number"`
	Base       *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListPersonalAccessTokenRequest() *ListPersonalAccessTokenRequest {
	return &ListPersonalAccessTokenRequest{}
}

func (p *ListPersonalAccessTokenRequest) InitDefault() {
}

var ListPersonalAccessTokenRequest_PageSize_DEFAULT int32

func (p *ListPersonalAccessTokenRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListPersonalAccessTokenRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListPersonalAccessTokenRequest_PageNumber_DEFAULT int32

func (p *ListPersonalAccessTokenRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListPersonalAccessTokenRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListPersonalAccessTokenRequest_Base_DEFAULT *base.Base

func (p *ListPersonalAccessTokenRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListPersonalAccessTokenRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListPersonalAccessTokenRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListPersonalAccessTokenRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListPersonalAccessTokenRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListPersonalAccessTokenRequest = map[int16]string{
	1:   "page_size",
	2:   "page_number",
	255: "Base",
}

func (p *ListPersonalAccessTokenRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListPersonalAccessTokenRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListPersonalAccessTokenRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListPersonalAccessTokenRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPersonalAccessTokenRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListPersonalAccessTokenRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListPersonalAccessTokenRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListPersonalAccessTokenRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListPersonalAccessTokenRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPersonalAccessTokenRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPersonalAccessTokenRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListPersonalAccessTokenRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListPersonalAccessTokenRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListPersonalAccessTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPersonalAccessTokenRequest(%+v)", *p)

}

func (p *ListPersonalAccessTokenRequest) DeepEqual(ano *ListPersonalAccessTokenRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListPersonalAccessTokenRequest) Field1DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListPersonalAccessTokenRequest) Field2DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListPersonalAccessTokenRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListPersonalAccessTokenResponse struct {
	PersonalAccessTokens []*authn.PersonalAccessToken `thrift:"personal_access_tokens,1,optional" frugal:"1,optional,list<authn.PersonalAccessToken>" form:"personal_access_tokens" json:"personal_access_tokens,omitempty" query:"personal_access_tokens"`
	BaseResp             *base.BaseResp               `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewListPersonalAccessTokenResponse() *ListPersonalAccessTokenResponse {
	return &ListPersonalAccessTokenResponse{}
}

func (p *ListPersonalAccessTokenResponse) InitDefault() {
}

var ListPersonalAccessTokenResponse_PersonalAccessTokens_DEFAULT []*authn.PersonalAccessToken

func (p *ListPersonalAccessTokenResponse) GetPersonalAccessTokens() (v []*authn.PersonalAccessToken) {
	if p == nil {
		return
	}
	if !p.IsSetPersonalAccessTokens() {
		return ListPersonalAccessTokenResponse_PersonalAccessTokens_DEFAULT
	}
	return p.PersonalAccessTokens
}

var ListPersonalAccessTokenResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListPersonalAccessTokenResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListPersonalAccessTokenResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListPersonalAccessTokenResponse) SetPersonalAccessTokens(val []*authn.PersonalAccessToken) {
	p.PersonalAccessTokens = val
}
func (p *ListPersonalAccessTokenResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListPersonalAccessTokenResponse = map[int16]string{
	1:   "personal_access_tokens",
	255: "BaseResp",
}

func (p *ListPersonalAccessTokenResponse) IsSetPersonalAccessTokens() bool {
	return p.PersonalAccessTokens != nil
}

func (p *ListPersonalAccessTokenResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListPersonalAccessTokenResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPersonalAccessTokenResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListPersonalAccessTokenResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*authn.PersonalAccessToken, 0, size)
	values := make([]authn.PersonalAccessToken, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PersonalAccessTokens = _field
	return nil
}
func (p *ListPersonalAccessTokenResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListPersonalAccessTokenResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPersonalAccessTokenResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPersonalAccessTokenResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPersonalAccessTokens() {
		if err = oprot.WriteFieldBegin("personal_access_tokens", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PersonalAccessTokens)); err != nil {
			return err
		}
		for _, v := range p.PersonalAccessTokens {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListPersonalAccessTokenResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListPersonalAccessTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPersonalAccessTokenResponse(%+v)", *p)

}

func (p *ListPersonalAccessTokenResponse) DeepEqual(ano *ListPersonalAccessTokenResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PersonalAccessTokens) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListPersonalAccessTokenResponse) Field1DeepEqual(src []*authn.PersonalAccessToken) bool {

	if len(p.PersonalAccessTokens) != len(src) {
		return false
	}
	for i, v := range p.PersonalAccessTokens {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListPersonalAccessTokenResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdatePersonalAccessTokenRequest struct {
	// PAT Id
	ID int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id,string,required" path:"id,required"`
	// PAT 名称
	Name string     `thrift:"name,2" frugal:"2,default,string" form:"name" json:"name" query:"name"`
	Base *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdatePersonalAccessTokenRequest() *UpdatePersonalAccessTokenRequest {
	return &UpdatePersonalAccessTokenRequest{}
}

func (p *UpdatePersonalAccessTokenRequest) InitDefault() {
}

func (p *UpdatePersonalAccessTokenRequest) GetID() (v int64) {
	if p != nil {
		return p.ID
	}
	return
}

func (p *UpdatePersonalAccessTokenRequest) GetName() (v string) {
	if p != nil {
		return p.Name
	}
	return
}

var UpdatePersonalAccessTokenRequest_Base_DEFAULT *base.Base

func (p *UpdatePersonalAccessTokenRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdatePersonalAccessTokenRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdatePersonalAccessTokenRequest) SetID(val int64) {
	p.ID = val
}
func (p *UpdatePersonalAccessTokenRequest) SetName(val string) {
	p.Name = val
}
func (p *UpdatePersonalAccessTokenRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdatePersonalAccessTokenRequest = map[int16]string{
	1:   "id",
	2:   "name",
	255: "Base",
}

func (p *UpdatePersonalAccessTokenRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdatePersonalAccessTokenRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePersonalAccessTokenRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdatePersonalAccessTokenRequest[fieldId]))
}

func (p *UpdatePersonalAccessTokenRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *UpdatePersonalAccessTokenRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *UpdatePersonalAccessTokenRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdatePersonalAccessTokenRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePersonalAccessTokenRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePersonalAccessTokenRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdatePersonalAccessTokenRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdatePersonalAccessTokenRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdatePersonalAccessTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePersonalAccessTokenRequest(%+v)", *p)

}

func (p *UpdatePersonalAccessTokenRequest) DeepEqual(ano *UpdatePersonalAccessTokenRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdatePersonalAccessTokenRequest) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *UpdatePersonalAccessTokenRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePersonalAccessTokenRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdatePersonalAccessTokenResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewUpdatePersonalAccessTokenResponse() *UpdatePersonalAccessTokenResponse {
	return &UpdatePersonalAccessTokenResponse{}
}

func (p *UpdatePersonalAccessTokenResponse) InitDefault() {
}

var UpdatePersonalAccessTokenResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdatePersonalAccessTokenResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdatePersonalAccessTokenResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdatePersonalAccessTokenResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdatePersonalAccessTokenResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdatePersonalAccessTokenResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdatePersonalAccessTokenResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePersonalAccessTokenResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdatePersonalAccessTokenResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdatePersonalAccessTokenResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePersonalAccessTokenResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePersonalAccessTokenResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdatePersonalAccessTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePersonalAccessTokenResponse(%+v)", *p)

}

func (p *UpdatePersonalAccessTokenResponse) DeepEqual(ano *UpdatePersonalAccessTokenResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdatePersonalAccessTokenResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type VerifyTokenRequest struct {
	Token string     `thrift:"token,1,required" frugal:"1,required,string" form:"token,required" json:"token,required" query:"token,required"`
	Base  *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewVerifyTokenRequest() *VerifyTokenRequest {
	return &VerifyTokenRequest{}
}

func (p *VerifyTokenRequest) InitDefault() {
}

func (p *VerifyTokenRequest) GetToken() (v string) {
	if p != nil {
		return p.Token
	}
	return
}

var VerifyTokenRequest_Base_DEFAULT *base.Base

func (p *VerifyTokenRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return VerifyTokenRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *VerifyTokenRequest) SetToken(val string) {
	p.Token = val
}
func (p *VerifyTokenRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_VerifyTokenRequest = map[int16]string{
	1:   "token",
	255: "Base",
}

func (p *VerifyTokenRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *VerifyTokenRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VerifyTokenRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_VerifyTokenRequest[fieldId]))
}

func (p *VerifyTokenRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *VerifyTokenRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *VerifyTokenRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VerifyTokenRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VerifyTokenRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *VerifyTokenRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *VerifyTokenRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyTokenRequest(%+v)", *p)

}

func (p *VerifyTokenRequest) DeepEqual(ano *VerifyTokenRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *VerifyTokenRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *VerifyTokenRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type VerifyTokenResponse struct {
	Valid    *bool          `thrift:"valid,1,optional" frugal:"1,optional,bool" form:"valid" json:"valid,omitempty" query:"valid"`
	UserID   *string        `thrift:"user_id,2,optional" frugal:"2,optional,string" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewVerifyTokenResponse() *VerifyTokenResponse {
	return &VerifyTokenResponse{}
}

func (p *VerifyTokenResponse) InitDefault() {
}

var VerifyTokenResponse_Valid_DEFAULT bool

func (p *VerifyTokenResponse) GetValid() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetValid() {
		return VerifyTokenResponse_Valid_DEFAULT
	}
	return *p.Valid
}

var VerifyTokenResponse_UserID_DEFAULT string

func (p *VerifyTokenResponse) GetUserID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUserID() {
		return VerifyTokenResponse_UserID_DEFAULT
	}
	return *p.UserID
}

var VerifyTokenResponse_BaseResp_DEFAULT *base.BaseResp

func (p *VerifyTokenResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return VerifyTokenResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *VerifyTokenResponse) SetValid(val *bool) {
	p.Valid = val
}
func (p *VerifyTokenResponse) SetUserID(val *string) {
	p.UserID = val
}
func (p *VerifyTokenResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_VerifyTokenResponse = map[int16]string{
	1:   "valid",
	2:   "user_id",
	255: "BaseResp",
}

func (p *VerifyTokenResponse) IsSetValid() bool {
	return p.Valid != nil
}

func (p *VerifyTokenResponse) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *VerifyTokenResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *VerifyTokenResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VerifyTokenResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VerifyTokenResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Valid = _field
	return nil
}
func (p *VerifyTokenResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *VerifyTokenResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *VerifyTokenResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VerifyTokenResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VerifyTokenResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetValid() {
		if err = oprot.WriteFieldBegin("valid", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Valid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *VerifyTokenResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *VerifyTokenResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *VerifyTokenResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerifyTokenResponse(%+v)", *p)

}

func (p *VerifyTokenResponse) DeepEqual(ano *VerifyTokenResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Valid) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *VerifyTokenResponse) Field1DeepEqual(src *bool) bool {

	if p.Valid == src {
		return true
	} else if p.Valid == nil || src == nil {
		return false
	}
	if *p.Valid != *src {
		return false
	}
	return true
}
func (p *VerifyTokenResponse) Field2DeepEqual(src *string) bool {

	if p.UserID == src {
		return true
	} else if p.UserID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserID, *src) != 0 {
		return false
	}
	return true
}
func (p *VerifyTokenResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNService interface {
	// OpenAPI PAT管理
	CreatePersonalAccessToken(ctx context.Context, req *CreatePersonalAccessTokenRequest) (r *CreatePersonalAccessTokenResponse, err error)

	DeletePersonalAccessToken(ctx context.Context, req *DeletePersonalAccessTokenRequest) (r *DeletePersonalAccessTokenResponse, err error)

	UpdatePersonalAccessToken(ctx context.Context, req *UpdatePersonalAccessTokenRequest) (r *UpdatePersonalAccessTokenResponse, err error)

	GetPersonalAccessToken(ctx context.Context, req *GetPersonalAccessTokenRequest) (r *GetPersonalAccessTokenResponse, err error)

	ListPersonalAccessToken(ctx context.Context, req *ListPersonalAccessTokenRequest) (r *ListPersonalAccessTokenResponse, err error)
	// 验证token是否有效
	VerifyToken(ctx context.Context, req *VerifyTokenRequest) (r *VerifyTokenResponse, err error)
}

type AuthNServiceClient struct {
	c thrift.TClient
}

func NewAuthNServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AuthNServiceClient {
	return &AuthNServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewAuthNServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AuthNServiceClient {
	return &AuthNServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewAuthNServiceClient(c thrift.TClient) *AuthNServiceClient {
	return &AuthNServiceClient{
		c: c,
	}
}

func (p *AuthNServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *AuthNServiceClient) CreatePersonalAccessToken(ctx context.Context, req *CreatePersonalAccessTokenRequest) (r *CreatePersonalAccessTokenResponse, err error) {
	var _args AuthNServiceCreatePersonalAccessTokenArgs
	_args.Req = req
	var _result AuthNServiceCreatePersonalAccessTokenResult
	if err = p.Client_().Call(ctx, "CreatePersonalAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AuthNServiceClient) DeletePersonalAccessToken(ctx context.Context, req *DeletePersonalAccessTokenRequest) (r *DeletePersonalAccessTokenResponse, err error) {
	var _args AuthNServiceDeletePersonalAccessTokenArgs
	_args.Req = req
	var _result AuthNServiceDeletePersonalAccessTokenResult
	if err = p.Client_().Call(ctx, "DeletePersonalAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AuthNServiceClient) UpdatePersonalAccessToken(ctx context.Context, req *UpdatePersonalAccessTokenRequest) (r *UpdatePersonalAccessTokenResponse, err error) {
	var _args AuthNServiceUpdatePersonalAccessTokenArgs
	_args.Req = req
	var _result AuthNServiceUpdatePersonalAccessTokenResult
	if err = p.Client_().Call(ctx, "UpdatePersonalAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AuthNServiceClient) GetPersonalAccessToken(ctx context.Context, req *GetPersonalAccessTokenRequest) (r *GetPersonalAccessTokenResponse, err error) {
	var _args AuthNServiceGetPersonalAccessTokenArgs
	_args.Req = req
	var _result AuthNServiceGetPersonalAccessTokenResult
	if err = p.Client_().Call(ctx, "GetPersonalAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AuthNServiceClient) ListPersonalAccessToken(ctx context.Context, req *ListPersonalAccessTokenRequest) (r *ListPersonalAccessTokenResponse, err error) {
	var _args AuthNServiceListPersonalAccessTokenArgs
	_args.Req = req
	var _result AuthNServiceListPersonalAccessTokenResult
	if err = p.Client_().Call(ctx, "ListPersonalAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *AuthNServiceClient) VerifyToken(ctx context.Context, req *VerifyTokenRequest) (r *VerifyTokenResponse, err error) {
	var _args AuthNServiceVerifyTokenArgs
	_args.Req = req
	var _result AuthNServiceVerifyTokenResult
	if err = p.Client_().Call(ctx, "VerifyToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type AuthNServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AuthNService
}

func (p *AuthNServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AuthNServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AuthNServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAuthNServiceProcessor(handler AuthNService) *AuthNServiceProcessor {
	self := &AuthNServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreatePersonalAccessToken", &authNServiceProcessorCreatePersonalAccessToken{handler: handler})
	self.AddToProcessorMap("DeletePersonalAccessToken", &authNServiceProcessorDeletePersonalAccessToken{handler: handler})
	self.AddToProcessorMap("UpdatePersonalAccessToken", &authNServiceProcessorUpdatePersonalAccessToken{handler: handler})
	self.AddToProcessorMap("GetPersonalAccessToken", &authNServiceProcessorGetPersonalAccessToken{handler: handler})
	self.AddToProcessorMap("ListPersonalAccessToken", &authNServiceProcessorListPersonalAccessToken{handler: handler})
	self.AddToProcessorMap("VerifyToken", &authNServiceProcessorVerifyToken{handler: handler})
	return self
}
func (p *AuthNServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type authNServiceProcessorCreatePersonalAccessToken struct {
	handler AuthNService
}

func (p *authNServiceProcessorCreatePersonalAccessToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuthNServiceCreatePersonalAccessTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreatePersonalAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AuthNServiceCreatePersonalAccessTokenResult{}
	var retval *CreatePersonalAccessTokenResponse
	if retval, err2 = p.handler.CreatePersonalAccessToken(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreatePersonalAccessToken: "+err2.Error())
		oprot.WriteMessageBegin("CreatePersonalAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreatePersonalAccessToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type authNServiceProcessorDeletePersonalAccessToken struct {
	handler AuthNService
}

func (p *authNServiceProcessorDeletePersonalAccessToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuthNServiceDeletePersonalAccessTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeletePersonalAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AuthNServiceDeletePersonalAccessTokenResult{}
	var retval *DeletePersonalAccessTokenResponse
	if retval, err2 = p.handler.DeletePersonalAccessToken(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePersonalAccessToken: "+err2.Error())
		oprot.WriteMessageBegin("DeletePersonalAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeletePersonalAccessToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type authNServiceProcessorUpdatePersonalAccessToken struct {
	handler AuthNService
}

func (p *authNServiceProcessorUpdatePersonalAccessToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuthNServiceUpdatePersonalAccessTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdatePersonalAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AuthNServiceUpdatePersonalAccessTokenResult{}
	var retval *UpdatePersonalAccessTokenResponse
	if retval, err2 = p.handler.UpdatePersonalAccessToken(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePersonalAccessToken: "+err2.Error())
		oprot.WriteMessageBegin("UpdatePersonalAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdatePersonalAccessToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type authNServiceProcessorGetPersonalAccessToken struct {
	handler AuthNService
}

func (p *authNServiceProcessorGetPersonalAccessToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuthNServiceGetPersonalAccessTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPersonalAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AuthNServiceGetPersonalAccessTokenResult{}
	var retval *GetPersonalAccessTokenResponse
	if retval, err2 = p.handler.GetPersonalAccessToken(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPersonalAccessToken: "+err2.Error())
		oprot.WriteMessageBegin("GetPersonalAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPersonalAccessToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type authNServiceProcessorListPersonalAccessToken struct {
	handler AuthNService
}

func (p *authNServiceProcessorListPersonalAccessToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuthNServiceListPersonalAccessTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListPersonalAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AuthNServiceListPersonalAccessTokenResult{}
	var retval *ListPersonalAccessTokenResponse
	if retval, err2 = p.handler.ListPersonalAccessToken(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListPersonalAccessToken: "+err2.Error())
		oprot.WriteMessageBegin("ListPersonalAccessToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListPersonalAccessToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type authNServiceProcessorVerifyToken struct {
	handler AuthNService
}

func (p *authNServiceProcessorVerifyToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuthNServiceVerifyTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("VerifyToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AuthNServiceVerifyTokenResult{}
	var retval *VerifyTokenResponse
	if retval, err2 = p.handler.VerifyToken(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VerifyToken: "+err2.Error())
		oprot.WriteMessageBegin("VerifyToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("VerifyToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type AuthNServiceCreatePersonalAccessTokenArgs struct {
	Req *CreatePersonalAccessTokenRequest `thrift:"req,1" frugal:"1,default,CreatePersonalAccessTokenRequest"`
}

func NewAuthNServiceCreatePersonalAccessTokenArgs() *AuthNServiceCreatePersonalAccessTokenArgs {
	return &AuthNServiceCreatePersonalAccessTokenArgs{}
}

func (p *AuthNServiceCreatePersonalAccessTokenArgs) InitDefault() {
}

var AuthNServiceCreatePersonalAccessTokenArgs_Req_DEFAULT *CreatePersonalAccessTokenRequest

func (p *AuthNServiceCreatePersonalAccessTokenArgs) GetReq() (v *CreatePersonalAccessTokenRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return AuthNServiceCreatePersonalAccessTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AuthNServiceCreatePersonalAccessTokenArgs) SetReq(val *CreatePersonalAccessTokenRequest) {
	p.Req = val
}

var fieldIDToName_AuthNServiceCreatePersonalAccessTokenArgs = map[int16]string{
	1: "req",
}

func (p *AuthNServiceCreatePersonalAccessTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AuthNServiceCreatePersonalAccessTokenArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceCreatePersonalAccessTokenArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceCreatePersonalAccessTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreatePersonalAccessTokenRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AuthNServiceCreatePersonalAccessTokenArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePersonalAccessToken_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceCreatePersonalAccessTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthNServiceCreatePersonalAccessTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceCreatePersonalAccessTokenArgs(%+v)", *p)

}

func (p *AuthNServiceCreatePersonalAccessTokenArgs) DeepEqual(ano *AuthNServiceCreatePersonalAccessTokenArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AuthNServiceCreatePersonalAccessTokenArgs) Field1DeepEqual(src *CreatePersonalAccessTokenRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNServiceCreatePersonalAccessTokenResult struct {
	Success *CreatePersonalAccessTokenResponse `thrift:"success,0,optional" frugal:"0,optional,CreatePersonalAccessTokenResponse"`
}

func NewAuthNServiceCreatePersonalAccessTokenResult() *AuthNServiceCreatePersonalAccessTokenResult {
	return &AuthNServiceCreatePersonalAccessTokenResult{}
}

func (p *AuthNServiceCreatePersonalAccessTokenResult) InitDefault() {
}

var AuthNServiceCreatePersonalAccessTokenResult_Success_DEFAULT *CreatePersonalAccessTokenResponse

func (p *AuthNServiceCreatePersonalAccessTokenResult) GetSuccess() (v *CreatePersonalAccessTokenResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return AuthNServiceCreatePersonalAccessTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AuthNServiceCreatePersonalAccessTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreatePersonalAccessTokenResponse)
}

var fieldIDToName_AuthNServiceCreatePersonalAccessTokenResult = map[int16]string{
	0: "success",
}

func (p *AuthNServiceCreatePersonalAccessTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthNServiceCreatePersonalAccessTokenResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceCreatePersonalAccessTokenResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceCreatePersonalAccessTokenResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreatePersonalAccessTokenResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AuthNServiceCreatePersonalAccessTokenResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePersonalAccessToken_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceCreatePersonalAccessTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AuthNServiceCreatePersonalAccessTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceCreatePersonalAccessTokenResult(%+v)", *p)

}

func (p *AuthNServiceCreatePersonalAccessTokenResult) DeepEqual(ano *AuthNServiceCreatePersonalAccessTokenResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AuthNServiceCreatePersonalAccessTokenResult) Field0DeepEqual(src *CreatePersonalAccessTokenResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNServiceDeletePersonalAccessTokenArgs struct {
	Req *DeletePersonalAccessTokenRequest `thrift:"req,1" frugal:"1,default,DeletePersonalAccessTokenRequest"`
}

func NewAuthNServiceDeletePersonalAccessTokenArgs() *AuthNServiceDeletePersonalAccessTokenArgs {
	return &AuthNServiceDeletePersonalAccessTokenArgs{}
}

func (p *AuthNServiceDeletePersonalAccessTokenArgs) InitDefault() {
}

var AuthNServiceDeletePersonalAccessTokenArgs_Req_DEFAULT *DeletePersonalAccessTokenRequest

func (p *AuthNServiceDeletePersonalAccessTokenArgs) GetReq() (v *DeletePersonalAccessTokenRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return AuthNServiceDeletePersonalAccessTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AuthNServiceDeletePersonalAccessTokenArgs) SetReq(val *DeletePersonalAccessTokenRequest) {
	p.Req = val
}

var fieldIDToName_AuthNServiceDeletePersonalAccessTokenArgs = map[int16]string{
	1: "req",
}

func (p *AuthNServiceDeletePersonalAccessTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AuthNServiceDeletePersonalAccessTokenArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceDeletePersonalAccessTokenArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceDeletePersonalAccessTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeletePersonalAccessTokenRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AuthNServiceDeletePersonalAccessTokenArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePersonalAccessToken_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceDeletePersonalAccessTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthNServiceDeletePersonalAccessTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceDeletePersonalAccessTokenArgs(%+v)", *p)

}

func (p *AuthNServiceDeletePersonalAccessTokenArgs) DeepEqual(ano *AuthNServiceDeletePersonalAccessTokenArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AuthNServiceDeletePersonalAccessTokenArgs) Field1DeepEqual(src *DeletePersonalAccessTokenRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNServiceDeletePersonalAccessTokenResult struct {
	Success *DeletePersonalAccessTokenResponse `thrift:"success,0,optional" frugal:"0,optional,DeletePersonalAccessTokenResponse"`
}

func NewAuthNServiceDeletePersonalAccessTokenResult() *AuthNServiceDeletePersonalAccessTokenResult {
	return &AuthNServiceDeletePersonalAccessTokenResult{}
}

func (p *AuthNServiceDeletePersonalAccessTokenResult) InitDefault() {
}

var AuthNServiceDeletePersonalAccessTokenResult_Success_DEFAULT *DeletePersonalAccessTokenResponse

func (p *AuthNServiceDeletePersonalAccessTokenResult) GetSuccess() (v *DeletePersonalAccessTokenResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return AuthNServiceDeletePersonalAccessTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AuthNServiceDeletePersonalAccessTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeletePersonalAccessTokenResponse)
}

var fieldIDToName_AuthNServiceDeletePersonalAccessTokenResult = map[int16]string{
	0: "success",
}

func (p *AuthNServiceDeletePersonalAccessTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthNServiceDeletePersonalAccessTokenResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceDeletePersonalAccessTokenResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceDeletePersonalAccessTokenResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeletePersonalAccessTokenResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AuthNServiceDeletePersonalAccessTokenResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePersonalAccessToken_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceDeletePersonalAccessTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AuthNServiceDeletePersonalAccessTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceDeletePersonalAccessTokenResult(%+v)", *p)

}

func (p *AuthNServiceDeletePersonalAccessTokenResult) DeepEqual(ano *AuthNServiceDeletePersonalAccessTokenResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AuthNServiceDeletePersonalAccessTokenResult) Field0DeepEqual(src *DeletePersonalAccessTokenResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNServiceUpdatePersonalAccessTokenArgs struct {
	Req *UpdatePersonalAccessTokenRequest `thrift:"req,1" frugal:"1,default,UpdatePersonalAccessTokenRequest"`
}

func NewAuthNServiceUpdatePersonalAccessTokenArgs() *AuthNServiceUpdatePersonalAccessTokenArgs {
	return &AuthNServiceUpdatePersonalAccessTokenArgs{}
}

func (p *AuthNServiceUpdatePersonalAccessTokenArgs) InitDefault() {
}

var AuthNServiceUpdatePersonalAccessTokenArgs_Req_DEFAULT *UpdatePersonalAccessTokenRequest

func (p *AuthNServiceUpdatePersonalAccessTokenArgs) GetReq() (v *UpdatePersonalAccessTokenRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return AuthNServiceUpdatePersonalAccessTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AuthNServiceUpdatePersonalAccessTokenArgs) SetReq(val *UpdatePersonalAccessTokenRequest) {
	p.Req = val
}

var fieldIDToName_AuthNServiceUpdatePersonalAccessTokenArgs = map[int16]string{
	1: "req",
}

func (p *AuthNServiceUpdatePersonalAccessTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AuthNServiceUpdatePersonalAccessTokenArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceUpdatePersonalAccessTokenArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceUpdatePersonalAccessTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdatePersonalAccessTokenRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AuthNServiceUpdatePersonalAccessTokenArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePersonalAccessToken_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceUpdatePersonalAccessTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthNServiceUpdatePersonalAccessTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceUpdatePersonalAccessTokenArgs(%+v)", *p)

}

func (p *AuthNServiceUpdatePersonalAccessTokenArgs) DeepEqual(ano *AuthNServiceUpdatePersonalAccessTokenArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AuthNServiceUpdatePersonalAccessTokenArgs) Field1DeepEqual(src *UpdatePersonalAccessTokenRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNServiceUpdatePersonalAccessTokenResult struct {
	Success *UpdatePersonalAccessTokenResponse `thrift:"success,0,optional" frugal:"0,optional,UpdatePersonalAccessTokenResponse"`
}

func NewAuthNServiceUpdatePersonalAccessTokenResult() *AuthNServiceUpdatePersonalAccessTokenResult {
	return &AuthNServiceUpdatePersonalAccessTokenResult{}
}

func (p *AuthNServiceUpdatePersonalAccessTokenResult) InitDefault() {
}

var AuthNServiceUpdatePersonalAccessTokenResult_Success_DEFAULT *UpdatePersonalAccessTokenResponse

func (p *AuthNServiceUpdatePersonalAccessTokenResult) GetSuccess() (v *UpdatePersonalAccessTokenResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return AuthNServiceUpdatePersonalAccessTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AuthNServiceUpdatePersonalAccessTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdatePersonalAccessTokenResponse)
}

var fieldIDToName_AuthNServiceUpdatePersonalAccessTokenResult = map[int16]string{
	0: "success",
}

func (p *AuthNServiceUpdatePersonalAccessTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthNServiceUpdatePersonalAccessTokenResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceUpdatePersonalAccessTokenResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceUpdatePersonalAccessTokenResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdatePersonalAccessTokenResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AuthNServiceUpdatePersonalAccessTokenResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePersonalAccessToken_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceUpdatePersonalAccessTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AuthNServiceUpdatePersonalAccessTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceUpdatePersonalAccessTokenResult(%+v)", *p)

}

func (p *AuthNServiceUpdatePersonalAccessTokenResult) DeepEqual(ano *AuthNServiceUpdatePersonalAccessTokenResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AuthNServiceUpdatePersonalAccessTokenResult) Field0DeepEqual(src *UpdatePersonalAccessTokenResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNServiceGetPersonalAccessTokenArgs struct {
	Req *GetPersonalAccessTokenRequest `thrift:"req,1" frugal:"1,default,GetPersonalAccessTokenRequest"`
}

func NewAuthNServiceGetPersonalAccessTokenArgs() *AuthNServiceGetPersonalAccessTokenArgs {
	return &AuthNServiceGetPersonalAccessTokenArgs{}
}

func (p *AuthNServiceGetPersonalAccessTokenArgs) InitDefault() {
}

var AuthNServiceGetPersonalAccessTokenArgs_Req_DEFAULT *GetPersonalAccessTokenRequest

func (p *AuthNServiceGetPersonalAccessTokenArgs) GetReq() (v *GetPersonalAccessTokenRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return AuthNServiceGetPersonalAccessTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AuthNServiceGetPersonalAccessTokenArgs) SetReq(val *GetPersonalAccessTokenRequest) {
	p.Req = val
}

var fieldIDToName_AuthNServiceGetPersonalAccessTokenArgs = map[int16]string{
	1: "req",
}

func (p *AuthNServiceGetPersonalAccessTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AuthNServiceGetPersonalAccessTokenArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceGetPersonalAccessTokenArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceGetPersonalAccessTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetPersonalAccessTokenRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AuthNServiceGetPersonalAccessTokenArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPersonalAccessToken_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceGetPersonalAccessTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthNServiceGetPersonalAccessTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceGetPersonalAccessTokenArgs(%+v)", *p)

}

func (p *AuthNServiceGetPersonalAccessTokenArgs) DeepEqual(ano *AuthNServiceGetPersonalAccessTokenArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AuthNServiceGetPersonalAccessTokenArgs) Field1DeepEqual(src *GetPersonalAccessTokenRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNServiceGetPersonalAccessTokenResult struct {
	Success *GetPersonalAccessTokenResponse `thrift:"success,0,optional" frugal:"0,optional,GetPersonalAccessTokenResponse"`
}

func NewAuthNServiceGetPersonalAccessTokenResult() *AuthNServiceGetPersonalAccessTokenResult {
	return &AuthNServiceGetPersonalAccessTokenResult{}
}

func (p *AuthNServiceGetPersonalAccessTokenResult) InitDefault() {
}

var AuthNServiceGetPersonalAccessTokenResult_Success_DEFAULT *GetPersonalAccessTokenResponse

func (p *AuthNServiceGetPersonalAccessTokenResult) GetSuccess() (v *GetPersonalAccessTokenResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return AuthNServiceGetPersonalAccessTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AuthNServiceGetPersonalAccessTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPersonalAccessTokenResponse)
}

var fieldIDToName_AuthNServiceGetPersonalAccessTokenResult = map[int16]string{
	0: "success",
}

func (p *AuthNServiceGetPersonalAccessTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthNServiceGetPersonalAccessTokenResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceGetPersonalAccessTokenResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceGetPersonalAccessTokenResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetPersonalAccessTokenResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AuthNServiceGetPersonalAccessTokenResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPersonalAccessToken_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceGetPersonalAccessTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AuthNServiceGetPersonalAccessTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceGetPersonalAccessTokenResult(%+v)", *p)

}

func (p *AuthNServiceGetPersonalAccessTokenResult) DeepEqual(ano *AuthNServiceGetPersonalAccessTokenResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AuthNServiceGetPersonalAccessTokenResult) Field0DeepEqual(src *GetPersonalAccessTokenResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNServiceListPersonalAccessTokenArgs struct {
	Req *ListPersonalAccessTokenRequest `thrift:"req,1" frugal:"1,default,ListPersonalAccessTokenRequest"`
}

func NewAuthNServiceListPersonalAccessTokenArgs() *AuthNServiceListPersonalAccessTokenArgs {
	return &AuthNServiceListPersonalAccessTokenArgs{}
}

func (p *AuthNServiceListPersonalAccessTokenArgs) InitDefault() {
}

var AuthNServiceListPersonalAccessTokenArgs_Req_DEFAULT *ListPersonalAccessTokenRequest

func (p *AuthNServiceListPersonalAccessTokenArgs) GetReq() (v *ListPersonalAccessTokenRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return AuthNServiceListPersonalAccessTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AuthNServiceListPersonalAccessTokenArgs) SetReq(val *ListPersonalAccessTokenRequest) {
	p.Req = val
}

var fieldIDToName_AuthNServiceListPersonalAccessTokenArgs = map[int16]string{
	1: "req",
}

func (p *AuthNServiceListPersonalAccessTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AuthNServiceListPersonalAccessTokenArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceListPersonalAccessTokenArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceListPersonalAccessTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListPersonalAccessTokenRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AuthNServiceListPersonalAccessTokenArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPersonalAccessToken_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceListPersonalAccessTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthNServiceListPersonalAccessTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceListPersonalAccessTokenArgs(%+v)", *p)

}

func (p *AuthNServiceListPersonalAccessTokenArgs) DeepEqual(ano *AuthNServiceListPersonalAccessTokenArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AuthNServiceListPersonalAccessTokenArgs) Field1DeepEqual(src *ListPersonalAccessTokenRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNServiceListPersonalAccessTokenResult struct {
	Success *ListPersonalAccessTokenResponse `thrift:"success,0,optional" frugal:"0,optional,ListPersonalAccessTokenResponse"`
}

func NewAuthNServiceListPersonalAccessTokenResult() *AuthNServiceListPersonalAccessTokenResult {
	return &AuthNServiceListPersonalAccessTokenResult{}
}

func (p *AuthNServiceListPersonalAccessTokenResult) InitDefault() {
}

var AuthNServiceListPersonalAccessTokenResult_Success_DEFAULT *ListPersonalAccessTokenResponse

func (p *AuthNServiceListPersonalAccessTokenResult) GetSuccess() (v *ListPersonalAccessTokenResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return AuthNServiceListPersonalAccessTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AuthNServiceListPersonalAccessTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListPersonalAccessTokenResponse)
}

var fieldIDToName_AuthNServiceListPersonalAccessTokenResult = map[int16]string{
	0: "success",
}

func (p *AuthNServiceListPersonalAccessTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthNServiceListPersonalAccessTokenResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceListPersonalAccessTokenResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceListPersonalAccessTokenResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListPersonalAccessTokenResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AuthNServiceListPersonalAccessTokenResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPersonalAccessToken_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceListPersonalAccessTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AuthNServiceListPersonalAccessTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceListPersonalAccessTokenResult(%+v)", *p)

}

func (p *AuthNServiceListPersonalAccessTokenResult) DeepEqual(ano *AuthNServiceListPersonalAccessTokenResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AuthNServiceListPersonalAccessTokenResult) Field0DeepEqual(src *ListPersonalAccessTokenResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNServiceVerifyTokenArgs struct {
	Req *VerifyTokenRequest `thrift:"req,1" frugal:"1,default,VerifyTokenRequest"`
}

func NewAuthNServiceVerifyTokenArgs() *AuthNServiceVerifyTokenArgs {
	return &AuthNServiceVerifyTokenArgs{}
}

func (p *AuthNServiceVerifyTokenArgs) InitDefault() {
}

var AuthNServiceVerifyTokenArgs_Req_DEFAULT *VerifyTokenRequest

func (p *AuthNServiceVerifyTokenArgs) GetReq() (v *VerifyTokenRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return AuthNServiceVerifyTokenArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AuthNServiceVerifyTokenArgs) SetReq(val *VerifyTokenRequest) {
	p.Req = val
}

var fieldIDToName_AuthNServiceVerifyTokenArgs = map[int16]string{
	1: "req",
}

func (p *AuthNServiceVerifyTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AuthNServiceVerifyTokenArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceVerifyTokenArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceVerifyTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewVerifyTokenRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *AuthNServiceVerifyTokenArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VerifyToken_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceVerifyTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthNServiceVerifyTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceVerifyTokenArgs(%+v)", *p)

}

func (p *AuthNServiceVerifyTokenArgs) DeepEqual(ano *AuthNServiceVerifyTokenArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AuthNServiceVerifyTokenArgs) Field1DeepEqual(src *VerifyTokenRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AuthNServiceVerifyTokenResult struct {
	Success *VerifyTokenResponse `thrift:"success,0,optional" frugal:"0,optional,VerifyTokenResponse"`
}

func NewAuthNServiceVerifyTokenResult() *AuthNServiceVerifyTokenResult {
	return &AuthNServiceVerifyTokenResult{}
}

func (p *AuthNServiceVerifyTokenResult) InitDefault() {
}

var AuthNServiceVerifyTokenResult_Success_DEFAULT *VerifyTokenResponse

func (p *AuthNServiceVerifyTokenResult) GetSuccess() (v *VerifyTokenResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return AuthNServiceVerifyTokenResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AuthNServiceVerifyTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*VerifyTokenResponse)
}

var fieldIDToName_AuthNServiceVerifyTokenResult = map[int16]string{
	0: "success",
}

func (p *AuthNServiceVerifyTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuthNServiceVerifyTokenResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthNServiceVerifyTokenResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthNServiceVerifyTokenResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewVerifyTokenResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AuthNServiceVerifyTokenResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VerifyToken_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthNServiceVerifyTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AuthNServiceVerifyTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthNServiceVerifyTokenResult(%+v)", *p)

}

func (p *AuthNServiceVerifyTokenResult) DeepEqual(ano *AuthNServiceVerifyTokenResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AuthNServiceVerifyTokenResult) Field0DeepEqual(src *VerifyTokenResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
