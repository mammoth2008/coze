// Code generated by Kitex v0.13.1. DO NOT EDIT.

package authnservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	authn "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/authn"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreatePersonalAccessToken": kitex.NewMethodInfo(
		createPersonalAccessTokenHandler,
		newAuthNServiceCreatePersonalAccessTokenArgs,
		newAuthNServiceCreatePersonalAccessTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeletePersonalAccessToken": kitex.NewMethodInfo(
		deletePersonalAccessTokenHandler,
		newAuthNServiceDeletePersonalAccessTokenArgs,
		newAuthNServiceDeletePersonalAccessTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdatePersonalAccessToken": kitex.NewMethodInfo(
		updatePersonalAccessTokenHandler,
		newAuthNServiceUpdatePersonalAccessTokenArgs,
		newAuthNServiceUpdatePersonalAccessTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPersonalAccessToken": kitex.NewMethodInfo(
		getPersonalAccessTokenHandler,
		newAuthNServiceGetPersonalAccessTokenArgs,
		newAuthNServiceGetPersonalAccessTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListPersonalAccessToken": kitex.NewMethodInfo(
		listPersonalAccessTokenHandler,
		newAuthNServiceListPersonalAccessTokenArgs,
		newAuthNServiceListPersonalAccessTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VerifyToken": kitex.NewMethodInfo(
		verifyTokenHandler,
		newAuthNServiceVerifyTokenArgs,
		newAuthNServiceVerifyTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	authNServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return authNServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "AuthNService"
	handlerType := (*authn.AuthNService)(nil)
	extra := map[string]interface{}{
		"PackageName": "authn",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func createPersonalAccessTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*authn.AuthNServiceCreatePersonalAccessTokenArgs)
	realResult := result.(*authn.AuthNServiceCreatePersonalAccessTokenResult)
	success, err := handler.(authn.AuthNService).CreatePersonalAccessToken(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newAuthNServiceCreatePersonalAccessTokenArgs() interface{} {
	return authn.NewAuthNServiceCreatePersonalAccessTokenArgs()
}

func newAuthNServiceCreatePersonalAccessTokenResult() interface{} {
	return authn.NewAuthNServiceCreatePersonalAccessTokenResult()
}

func deletePersonalAccessTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*authn.AuthNServiceDeletePersonalAccessTokenArgs)
	realResult := result.(*authn.AuthNServiceDeletePersonalAccessTokenResult)
	success, err := handler.(authn.AuthNService).DeletePersonalAccessToken(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newAuthNServiceDeletePersonalAccessTokenArgs() interface{} {
	return authn.NewAuthNServiceDeletePersonalAccessTokenArgs()
}

func newAuthNServiceDeletePersonalAccessTokenResult() interface{} {
	return authn.NewAuthNServiceDeletePersonalAccessTokenResult()
}

func updatePersonalAccessTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*authn.AuthNServiceUpdatePersonalAccessTokenArgs)
	realResult := result.(*authn.AuthNServiceUpdatePersonalAccessTokenResult)
	success, err := handler.(authn.AuthNService).UpdatePersonalAccessToken(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newAuthNServiceUpdatePersonalAccessTokenArgs() interface{} {
	return authn.NewAuthNServiceUpdatePersonalAccessTokenArgs()
}

func newAuthNServiceUpdatePersonalAccessTokenResult() interface{} {
	return authn.NewAuthNServiceUpdatePersonalAccessTokenResult()
}

func getPersonalAccessTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*authn.AuthNServiceGetPersonalAccessTokenArgs)
	realResult := result.(*authn.AuthNServiceGetPersonalAccessTokenResult)
	success, err := handler.(authn.AuthNService).GetPersonalAccessToken(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newAuthNServiceGetPersonalAccessTokenArgs() interface{} {
	return authn.NewAuthNServiceGetPersonalAccessTokenArgs()
}

func newAuthNServiceGetPersonalAccessTokenResult() interface{} {
	return authn.NewAuthNServiceGetPersonalAccessTokenResult()
}

func listPersonalAccessTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*authn.AuthNServiceListPersonalAccessTokenArgs)
	realResult := result.(*authn.AuthNServiceListPersonalAccessTokenResult)
	success, err := handler.(authn.AuthNService).ListPersonalAccessToken(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newAuthNServiceListPersonalAccessTokenArgs() interface{} {
	return authn.NewAuthNServiceListPersonalAccessTokenArgs()
}

func newAuthNServiceListPersonalAccessTokenResult() interface{} {
	return authn.NewAuthNServiceListPersonalAccessTokenResult()
}

func verifyTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*authn.AuthNServiceVerifyTokenArgs)
	realResult := result.(*authn.AuthNServiceVerifyTokenResult)
	success, err := handler.(authn.AuthNService).VerifyToken(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newAuthNServiceVerifyTokenArgs() interface{} {
	return authn.NewAuthNServiceVerifyTokenArgs()
}

func newAuthNServiceVerifyTokenResult() interface{} {
	return authn.NewAuthNServiceVerifyTokenResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) CreatePersonalAccessToken(ctx context.Context, req *authn.CreatePersonalAccessTokenRequest) (r *authn.CreatePersonalAccessTokenResponse, err error) {
	var _args authn.AuthNServiceCreatePersonalAccessTokenArgs
	_args.Req = req
	var _result authn.AuthNServiceCreatePersonalAccessTokenResult
	if err = p.c.Call(ctx, "CreatePersonalAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePersonalAccessToken(ctx context.Context, req *authn.DeletePersonalAccessTokenRequest) (r *authn.DeletePersonalAccessTokenResponse, err error) {
	var _args authn.AuthNServiceDeletePersonalAccessTokenArgs
	_args.Req = req
	var _result authn.AuthNServiceDeletePersonalAccessTokenResult
	if err = p.c.Call(ctx, "DeletePersonalAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePersonalAccessToken(ctx context.Context, req *authn.UpdatePersonalAccessTokenRequest) (r *authn.UpdatePersonalAccessTokenResponse, err error) {
	var _args authn.AuthNServiceUpdatePersonalAccessTokenArgs
	_args.Req = req
	var _result authn.AuthNServiceUpdatePersonalAccessTokenResult
	if err = p.c.Call(ctx, "UpdatePersonalAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPersonalAccessToken(ctx context.Context, req *authn.GetPersonalAccessTokenRequest) (r *authn.GetPersonalAccessTokenResponse, err error) {
	var _args authn.AuthNServiceGetPersonalAccessTokenArgs
	_args.Req = req
	var _result authn.AuthNServiceGetPersonalAccessTokenResult
	if err = p.c.Call(ctx, "GetPersonalAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListPersonalAccessToken(ctx context.Context, req *authn.ListPersonalAccessTokenRequest) (r *authn.ListPersonalAccessTokenResponse, err error) {
	var _args authn.AuthNServiceListPersonalAccessTokenArgs
	_args.Req = req
	var _result authn.AuthNServiceListPersonalAccessTokenResult
	if err = p.c.Call(ctx, "ListPersonalAccessToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VerifyToken(ctx context.Context, req *authn.VerifyTokenRequest) (r *authn.VerifyTokenResponse, err error) {
	var _args authn.AuthNServiceVerifyTokenArgs
	_args.Req = req
	var _result authn.AuthNServiceVerifyTokenResult
	if err = p.c.Call(ctx, "VerifyToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
