// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package authn

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type PersonalAccessToken struct {
	ID   string `thrift:"id,1,required" frugal:"1,required,string" form:"id,required" json:"id,required" query:"id,required"`
	Name string `thrift:"name,2,required" frugal:"2,required,string" form:"name,required" json:"name,required" query:"name,required"`
	// unix，秒
	CreatedAt int64 `thrift:"created_at,3,required" frugal:"3,required,i64" json:"created_at" form:"created_at,required" query:"created_at,required"`
	// unix，秒
	UpdatedAt int64 `thrift:"updated_at,4,required" frugal:"4,required,i64" json:"updated_at" form:"updated_at,required" query:"updated_at,required"`
	// unix，秒，-1 表示未使用
	LastUsedAt int64 `thrift:"last_used_at,5,required" frugal:"5,required,i64" json:"last_used_at" form:"last_used_at,required" query:"last_used_at,required"`
	// unix，秒
	ExpireAt int64 `thrift:"expire_at,6,required" frugal:"6,required,i64" json:"expire_at" form:"expire_at,required" query:"expire_at,required"`
}

func NewPersonalAccessToken() *PersonalAccessToken {
	return &PersonalAccessToken{}
}

func (p *PersonalAccessToken) InitDefault() {
}

func (p *PersonalAccessToken) GetID() (v string) {
	if p != nil {
		return p.ID
	}
	return
}

func (p *PersonalAccessToken) GetName() (v string) {
	if p != nil {
		return p.Name
	}
	return
}

func (p *PersonalAccessToken) GetCreatedAt() (v int64) {
	if p != nil {
		return p.CreatedAt
	}
	return
}

func (p *PersonalAccessToken) GetUpdatedAt() (v int64) {
	if p != nil {
		return p.UpdatedAt
	}
	return
}

func (p *PersonalAccessToken) GetLastUsedAt() (v int64) {
	if p != nil {
		return p.LastUsedAt
	}
	return
}

func (p *PersonalAccessToken) GetExpireAt() (v int64) {
	if p != nil {
		return p.ExpireAt
	}
	return
}
func (p *PersonalAccessToken) SetID(val string) {
	p.ID = val
}
func (p *PersonalAccessToken) SetName(val string) {
	p.Name = val
}
func (p *PersonalAccessToken) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *PersonalAccessToken) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *PersonalAccessToken) SetLastUsedAt(val int64) {
	p.LastUsedAt = val
}
func (p *PersonalAccessToken) SetExpireAt(val int64) {
	p.ExpireAt = val
}

var fieldIDToName_PersonalAccessToken = map[int16]string{
	1: "id",
	2: "name",
	3: "created_at",
	4: "updated_at",
	5: "last_used_at",
	6: "expire_at",
}

func (p *PersonalAccessToken) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetID bool = false
	var issetName bool = false
	var issetCreatedAt bool = false
	var issetUpdatedAt bool = false
	var issetLastUsedAt bool = false
	var issetExpireAt bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreatedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdatedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetLastUsedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetExpireAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCreatedAt {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUpdatedAt {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetLastUsedAt {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetExpireAt {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PersonalAccessToken[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PersonalAccessToken[fieldId]))
}

func (p *PersonalAccessToken) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *PersonalAccessToken) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *PersonalAccessToken) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *PersonalAccessToken) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *PersonalAccessToken) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LastUsedAt = _field
	return nil
}
func (p *PersonalAccessToken) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExpireAt = _field
	return nil
}

func (p *PersonalAccessToken) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PersonalAccessToken"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PersonalAccessToken) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PersonalAccessToken) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *PersonalAccessToken) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *PersonalAccessToken) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *PersonalAccessToken) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("last_used_at", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LastUsedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *PersonalAccessToken) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("expire_at", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ExpireAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *PersonalAccessToken) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonalAccessToken(%+v)", *p)

}

func (p *PersonalAccessToken) DeepEqual(ano *PersonalAccessToken) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.LastUsedAt) {
		return false
	}
	if !p.Field6DeepEqual(ano.ExpireAt) {
		return false
	}
	return true
}

func (p *PersonalAccessToken) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ID, src) != 0 {
		return false
	}
	return true
}
func (p *PersonalAccessToken) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *PersonalAccessToken) Field3DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *PersonalAccessToken) Field4DeepEqual(src int64) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *PersonalAccessToken) Field5DeepEqual(src int64) bool {

	if p.LastUsedAt != src {
		return false
	}
	return true
}
func (p *PersonalAccessToken) Field6DeepEqual(src int64) bool {

	if p.ExpireAt != src {
		return false
	}
	return true
}
