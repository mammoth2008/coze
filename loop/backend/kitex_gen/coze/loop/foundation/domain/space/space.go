// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package space

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

// 空间类型
type SpaceType int64

const (
	SpaceType_Undefined SpaceType = 0
	// 个人空间
	SpaceType_Personal SpaceType = 1
	// 团队空间
	SpaceType_Team SpaceType = 2
	// 官方空间
	SpaceType_Official SpaceType = 3
)

func (p SpaceType) String() string {
	switch p {
	case SpaceType_Undefined:
		return "Undefined"
	case SpaceType_Personal:
		return "Personal"
	case SpaceType_Team:
		return "Team"
	case SpaceType_Official:
		return "Official"
	}
	return "<UNSET>"
}

func SpaceTypeFromString(s string) (SpaceType, error) {
	switch s {
	case "Undefined":
		return SpaceType_Undefined, nil
	case "Personal":
		return SpaceType_Personal, nil
	case "Team":
		return SpaceType_Team, nil
	case "Official":
		return SpaceType_Official, nil
	}
	return SpaceType(0), fmt.Errorf("not a valid SpaceType string")
}

func SpaceTypePtr(v SpaceType) *SpaceType { return &v }
func (p *SpaceType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = SpaceType(result.Int64)
	return
}

func (p *SpaceType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 空间
type Space struct {
	// 空间ID
	ID int64 `thrift:"id,1" frugal:"1,default,i64" json:"id" form:"id" query:"id"`
	// 空间名称
	Name string `thrift:"name,2" frugal:"2,default,string" form:"name" json:"name" query:"name"`
	// 空间描述
	Description string `thrift:"description,3" frugal:"3,default,string" form:"description" json:"description" query:"description"`
	// 空间类型
	SpaceType SpaceType `thrift:"space_type,4" frugal:"4,default,SpaceType" form:"space_type" json:"space_type" query:"space_type"`
	// 空间所有者
	OwnerUserID string `thrift:"owner_user_id,5" frugal:"5,default,string" form:"owner_user_id" json:"owner_user_id" query:"owner_user_id"`
	// 创建时间
	CreateAt *int64 `thrift:"create_at,6,optional" frugal:"6,optional,i64" json:"create_at" form:"create_at" query:"create_at"`
	// 更新时间
	UpdateAt *int64 `thrift:"update_at,7,optional" frugal:"7,optional,i64" json:"update_at" form:"update_at" query:"update_at"`
	/* 8-10 保留位 */
	EnterpriseID *string `thrift:"enterprise_id,15,optional" frugal:"15,optional,string" form:"enterprise_id" json:"enterprise_id,omitempty" query:"enterprise_id"`
	// 组织ID
	OrganizationID *string `thrift:"organization_id,16,optional" frugal:"16,optional,string" form:"organization_id" json:"organization_id,omitempty" query:"organization_id"`
}

func NewSpace() *Space {
	return &Space{}
}

func (p *Space) InitDefault() {
}

func (p *Space) GetID() (v int64) {
	if p != nil {
		return p.ID
	}
	return
}

func (p *Space) GetName() (v string) {
	if p != nil {
		return p.Name
	}
	return
}

func (p *Space) GetDescription() (v string) {
	if p != nil {
		return p.Description
	}
	return
}

func (p *Space) GetSpaceType() (v SpaceType) {
	if p != nil {
		return p.SpaceType
	}
	return
}

func (p *Space) GetOwnerUserID() (v string) {
	if p != nil {
		return p.OwnerUserID
	}
	return
}

var Space_CreateAt_DEFAULT int64

func (p *Space) GetCreateAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCreateAt() {
		return Space_CreateAt_DEFAULT
	}
	return *p.CreateAt
}

var Space_UpdateAt_DEFAULT int64

func (p *Space) GetUpdateAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetUpdateAt() {
		return Space_UpdateAt_DEFAULT
	}
	return *p.UpdateAt
}

var Space_EnterpriseID_DEFAULT string

func (p *Space) GetEnterpriseID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEnterpriseID() {
		return Space_EnterpriseID_DEFAULT
	}
	return *p.EnterpriseID
}

var Space_OrganizationID_DEFAULT string

func (p *Space) GetOrganizationID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetOrganizationID() {
		return Space_OrganizationID_DEFAULT
	}
	return *p.OrganizationID
}
func (p *Space) SetID(val int64) {
	p.ID = val
}
func (p *Space) SetName(val string) {
	p.Name = val
}
func (p *Space) SetDescription(val string) {
	p.Description = val
}
func (p *Space) SetSpaceType(val SpaceType) {
	p.SpaceType = val
}
func (p *Space) SetOwnerUserID(val string) {
	p.OwnerUserID = val
}
func (p *Space) SetCreateAt(val *int64) {
	p.CreateAt = val
}
func (p *Space) SetUpdateAt(val *int64) {
	p.UpdateAt = val
}
func (p *Space) SetEnterpriseID(val *string) {
	p.EnterpriseID = val
}
func (p *Space) SetOrganizationID(val *string) {
	p.OrganizationID = val
}

var fieldIDToName_Space = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "description",
	4:  "space_type",
	5:  "owner_user_id",
	6:  "create_at",
	7:  "update_at",
	15: "enterprise_id",
	16: "organization_id",
}

func (p *Space) IsSetCreateAt() bool {
	return p.CreateAt != nil
}

func (p *Space) IsSetUpdateAt() bool {
	return p.UpdateAt != nil
}

func (p *Space) IsSetEnterpriseID() bool {
	return p.EnterpriseID != nil
}

func (p *Space) IsSetOrganizationID() bool {
	return p.OrganizationID != nil
}

func (p *Space) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Space[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Space) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *Space) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *Space) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Description = _field
	return nil
}
func (p *Space) ReadField4(iprot thrift.TProtocol) error {

	var _field SpaceType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = SpaceType(v)
	}
	p.SpaceType = _field
	return nil
}
func (p *Space) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OwnerUserID = _field
	return nil
}
func (p *Space) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreateAt = _field
	return nil
}
func (p *Space) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdateAt = _field
	return nil
}
func (p *Space) ReadField15(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnterpriseID = _field
	return nil
}
func (p *Space) ReadField16(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OrganizationID = _field
	return nil
}

func (p *Space) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Space"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Space) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Space) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Space) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Space) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("space_type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.SpaceType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Space) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("owner_user_id", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OwnerUserID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Space) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateAt() {
		if err = oprot.WriteFieldBegin("create_at", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreateAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *Space) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateAt() {
		if err = oprot.WriteFieldBegin("update_at", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdateAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *Space) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnterpriseID() {
		if err = oprot.WriteFieldBegin("enterprise_id", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EnterpriseID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}
func (p *Space) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrganizationID() {
		if err = oprot.WriteFieldBegin("organization_id", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OrganizationID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *Space) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Space(%+v)", *p)

}

func (p *Space) DeepEqual(ano *Space) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.SpaceType) {
		return false
	}
	if !p.Field5DeepEqual(ano.OwnerUserID) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreateAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.UpdateAt) {
		return false
	}
	if !p.Field15DeepEqual(ano.EnterpriseID) {
		return false
	}
	if !p.Field16DeepEqual(ano.OrganizationID) {
		return false
	}
	return true
}

func (p *Space) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *Space) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Space) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *Space) Field4DeepEqual(src SpaceType) bool {

	if p.SpaceType != src {
		return false
	}
	return true
}
func (p *Space) Field5DeepEqual(src string) bool {

	if strings.Compare(p.OwnerUserID, src) != 0 {
		return false
	}
	return true
}
func (p *Space) Field6DeepEqual(src *int64) bool {

	if p.CreateAt == src {
		return true
	} else if p.CreateAt == nil || src == nil {
		return false
	}
	if *p.CreateAt != *src {
		return false
	}
	return true
}
func (p *Space) Field7DeepEqual(src *int64) bool {

	if p.UpdateAt == src {
		return true
	} else if p.UpdateAt == nil || src == nil {
		return false
	}
	if *p.UpdateAt != *src {
		return false
	}
	return true
}
func (p *Space) Field15DeepEqual(src *string) bool {

	if p.EnterpriseID == src {
		return true
	} else if p.EnterpriseID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EnterpriseID, *src) != 0 {
		return false
	}
	return true
}
func (p *Space) Field16DeepEqual(src *string) bool {

	if p.OrganizationID == src {
		return true
	} else if p.OrganizationID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OrganizationID, *src) != 0 {
		return false
	}
	return true
}
