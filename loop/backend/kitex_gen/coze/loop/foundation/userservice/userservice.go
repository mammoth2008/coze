// Code generated by Kitex v0.13.1. DO NOT EDIT.

package userservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	foundation "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation"
	user "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newUserServiceRegisterArgs,
		newUserServiceRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ResetPassword": kitex.NewMethodInfo(
		resetPasswordHandler,
		newUserServiceResetPasswordArgs,
		newUserServiceResetPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"LoginByPassword": kitex.NewMethodInfo(
		loginByPasswordHandler,
		newUserServiceLoginByPasswordArgs,
		newUserServiceLoginByPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Logout": kitex.NewMethodInfo(
		logoutHandler,
		newUserServiceLogoutArgs,
		newUserServiceLogoutResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ModifyUserProfile": kitex.NewMethodInfo(
		modifyUserProfileHandler,
		newUserServiceModifyUserProfileArgs,
		newUserServiceModifyUserProfileResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserInfoByToken": kitex.NewMethodInfo(
		getUserInfoByTokenHandler,
		newUserServiceGetUserInfoByTokenArgs,
		newUserServiceGetUserInfoByTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newUserServiceGetUserInfoArgs,
		newUserServiceGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MGetUserInfo": kitex.NewMethodInfo(
		mGetUserInfoHandler,
		newUserServiceMGetUserInfoArgs,
		newUserServiceMGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	userServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*foundation.UserService)(nil)
	extra := map[string]interface{}{
		"PackageName": "foundation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRegisterArgs)
	realResult := result.(*user.UserServiceRegisterResult)
	success, err := handler.(user.UserService).Register(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newUserServiceRegisterArgs() interface{} {
	return user.NewUserServiceRegisterArgs()
}

func newUserServiceRegisterResult() interface{} {
	return user.NewUserServiceRegisterResult()
}

func resetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceResetPasswordArgs)
	realResult := result.(*user.UserServiceResetPasswordResult)
	success, err := handler.(user.UserService).ResetPassword(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newUserServiceResetPasswordArgs() interface{} {
	return user.NewUserServiceResetPasswordArgs()
}

func newUserServiceResetPasswordResult() interface{} {
	return user.NewUserServiceResetPasswordResult()
}

func loginByPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginByPasswordArgs)
	realResult := result.(*user.UserServiceLoginByPasswordResult)
	success, err := handler.(user.UserService).LoginByPassword(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newUserServiceLoginByPasswordArgs() interface{} {
	return user.NewUserServiceLoginByPasswordArgs()
}

func newUserServiceLoginByPasswordResult() interface{} {
	return user.NewUserServiceLoginByPasswordResult()
}

func logoutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLogoutArgs)
	realResult := result.(*user.UserServiceLogoutResult)
	success, err := handler.(user.UserService).Logout(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newUserServiceLogoutArgs() interface{} {
	return user.NewUserServiceLogoutArgs()
}

func newUserServiceLogoutResult() interface{} {
	return user.NewUserServiceLogoutResult()
}

func modifyUserProfileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceModifyUserProfileArgs)
	realResult := result.(*user.UserServiceModifyUserProfileResult)
	success, err := handler.(user.UserService).ModifyUserProfile(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newUserServiceModifyUserProfileArgs() interface{} {
	return user.NewUserServiceModifyUserProfileArgs()
}

func newUserServiceModifyUserProfileResult() interface{} {
	return user.NewUserServiceModifyUserProfileResult()
}

func getUserInfoByTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetUserInfoByTokenArgs)
	realResult := result.(*user.UserServiceGetUserInfoByTokenResult)
	success, err := handler.(user.UserService).GetUserInfoByToken(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newUserServiceGetUserInfoByTokenArgs() interface{} {
	return user.NewUserServiceGetUserInfoByTokenArgs()
}

func newUserServiceGetUserInfoByTokenResult() interface{} {
	return user.NewUserServiceGetUserInfoByTokenResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetUserInfoArgs)
	realResult := result.(*user.UserServiceGetUserInfoResult)
	success, err := handler.(user.UserService).GetUserInfo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newUserServiceGetUserInfoArgs() interface{} {
	return user.NewUserServiceGetUserInfoArgs()
}

func newUserServiceGetUserInfoResult() interface{} {
	return user.NewUserServiceGetUserInfoResult()
}

func mGetUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceMGetUserInfoArgs)
	realResult := result.(*user.UserServiceMGetUserInfoResult)
	success, err := handler.(user.UserService).MGetUserInfo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newUserServiceMGetUserInfoArgs() interface{} {
	return user.NewUserServiceMGetUserInfoArgs()
}

func newUserServiceMGetUserInfoResult() interface{} {
	return user.NewUserServiceMGetUserInfoResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) Register(ctx context.Context, request *user.UserRegisterRequest) (r *user.UserRegisterResponse, err error) {
	var _args user.UserServiceRegisterArgs
	_args.Request = request
	var _result user.UserServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResetPassword(ctx context.Context, request *user.ResetPasswordRequest) (r *user.ResetPasswordResponse, err error) {
	var _args user.UserServiceResetPasswordArgs
	_args.Request = request
	var _result user.UserServiceResetPasswordResult
	if err = p.c.Call(ctx, "ResetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginByPassword(ctx context.Context, request *user.LoginByPasswordRequest) (r *user.LoginByPasswordResponse, err error) {
	var _args user.UserServiceLoginByPasswordArgs
	_args.Request = request
	var _result user.UserServiceLoginByPasswordResult
	if err = p.c.Call(ctx, "LoginByPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Logout(ctx context.Context, request *user.LogoutRequest) (r *user.LogoutResponse, err error) {
	var _args user.UserServiceLogoutArgs
	_args.Request = request
	var _result user.UserServiceLogoutResult
	if err = p.c.Call(ctx, "Logout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ModifyUserProfile(ctx context.Context, request *user.ModifyUserProfileRequest) (r *user.ModifyUserProfileResponse, err error) {
	var _args user.UserServiceModifyUserProfileArgs
	_args.Request = request
	var _result user.UserServiceModifyUserProfileResult
	if err = p.c.Call(ctx, "ModifyUserProfile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfoByToken(ctx context.Context, request *user.GetUserInfoByTokenRequest) (r *user.GetUserInfoByTokenResponse, err error) {
	var _args user.UserServiceGetUserInfoByTokenArgs
	_args.Request = request
	var _result user.UserServiceGetUserInfoByTokenResult
	if err = p.c.Call(ctx, "GetUserInfoByToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, request *user.GetUserInfoRequest) (r *user.GetUserInfoResponse, err error) {
	var _args user.UserServiceGetUserInfoArgs
	_args.Request = request
	var _result user.UserServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetUserInfo(ctx context.Context, request *user.MGetUserInfoRequest) (r *user.MGetUserInfoResponse, err error) {
	var _args user.UserServiceMGetUserInfoArgs
	_args.Request = request
	var _result user.UserServiceMGetUserInfoResult
	if err = p.c.Call(ctx, "MGetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
