// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package foundation

import (
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/authn"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/openapi"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/space"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user"
)

type AuthService interface {
	auth.AuthService
}

type AuthServiceClient struct {
	*auth.AuthServiceClient
}

func NewAuthServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AuthServiceClient {
	return &AuthServiceClient{
		AuthServiceClient: auth.NewAuthServiceClientFactory(t, f),
	}
}

func NewAuthServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AuthServiceClient {
	return &AuthServiceClient{
		AuthServiceClient: auth.NewAuthServiceClientProtocol(t, iprot, oprot),
	}
}

func NewAuthServiceClient(c thrift.TClient) *AuthServiceClient {
	return &AuthServiceClient{
		AuthServiceClient: auth.NewAuthServiceClient(c),
	}
}

type AuthNService interface {
	authn.AuthNService
}

type AuthNServiceClient struct {
	*authn.AuthNServiceClient
}

func NewAuthNServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AuthNServiceClient {
	return &AuthNServiceClient{
		AuthNServiceClient: authn.NewAuthNServiceClientFactory(t, f),
	}
}

func NewAuthNServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AuthNServiceClient {
	return &AuthNServiceClient{
		AuthNServiceClient: authn.NewAuthNServiceClientProtocol(t, iprot, oprot),
	}
}

func NewAuthNServiceClient(c thrift.TClient) *AuthNServiceClient {
	return &AuthNServiceClient{
		AuthNServiceClient: authn.NewAuthNServiceClient(c),
	}
}

type UserService interface {
	user.UserService
}

type UserServiceClient struct {
	*user.UserServiceClient
}

func NewUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserServiceClient {
	return &UserServiceClient{
		UserServiceClient: user.NewUserServiceClientFactory(t, f),
	}
}

func NewUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserServiceClient {
	return &UserServiceClient{
		UserServiceClient: user.NewUserServiceClientProtocol(t, iprot, oprot),
	}
}

func NewUserServiceClient(c thrift.TClient) *UserServiceClient {
	return &UserServiceClient{
		UserServiceClient: user.NewUserServiceClient(c),
	}
}

type SpaceService interface {
	space.SpaceService
}

type SpaceServiceClient struct {
	*space.SpaceServiceClient
}

func NewSpaceServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SpaceServiceClient {
	return &SpaceServiceClient{
		SpaceServiceClient: space.NewSpaceServiceClientFactory(t, f),
	}
}

func NewSpaceServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SpaceServiceClient {
	return &SpaceServiceClient{
		SpaceServiceClient: space.NewSpaceServiceClientProtocol(t, iprot, oprot),
	}
}

func NewSpaceServiceClient(c thrift.TClient) *SpaceServiceClient {
	return &SpaceServiceClient{
		SpaceServiceClient: space.NewSpaceServiceClient(c),
	}
}

type FileService interface {
	file.FileService
}

type FileServiceClient struct {
	*file.FileServiceClient
}

func NewFileServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FileServiceClient {
	return &FileServiceClient{
		FileServiceClient: file.NewFileServiceClientFactory(t, f),
	}
}

func NewFileServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FileServiceClient {
	return &FileServiceClient{
		FileServiceClient: file.NewFileServiceClientProtocol(t, iprot, oprot),
	}
}

func NewFileServiceClient(c thrift.TClient) *FileServiceClient {
	return &FileServiceClient{
		FileServiceClient: file.NewFileServiceClient(c),
	}
}

type FoundationOpenAPIService interface {
	openapi.FoundationOpenAPIService
}

type FoundationOpenAPIServiceClient struct {
	*openapi.FoundationOpenAPIServiceClient
}

func NewFoundationOpenAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FoundationOpenAPIServiceClient {
	return &FoundationOpenAPIServiceClient{
		FoundationOpenAPIServiceClient: openapi.NewFoundationOpenAPIServiceClientFactory(t, f),
	}
}

func NewFoundationOpenAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FoundationOpenAPIServiceClient {
	return &FoundationOpenAPIServiceClient{
		FoundationOpenAPIServiceClient: openapi.NewFoundationOpenAPIServiceClientProtocol(t, iprot, oprot),
	}
}

func NewFoundationOpenAPIServiceClient(c thrift.TClient) *FoundationOpenAPIServiceClient {
	return &FoundationOpenAPIServiceClient{
		FoundationOpenAPIServiceClient: openapi.NewFoundationOpenAPIServiceClient(c),
	}
}

type AuthServiceProcessor struct {
	*auth.AuthServiceProcessor
}

func NewAuthServiceProcessor(handler AuthService) *AuthServiceProcessor {
	self := &AuthServiceProcessor{auth.NewAuthServiceProcessor(handler)}
	return self
}

type AuthNServiceProcessor struct {
	*authn.AuthNServiceProcessor
}

func NewAuthNServiceProcessor(handler AuthNService) *AuthNServiceProcessor {
	self := &AuthNServiceProcessor{authn.NewAuthNServiceProcessor(handler)}
	return self
}

type UserServiceProcessor struct {
	*user.UserServiceProcessor
}

func NewUserServiceProcessor(handler UserService) *UserServiceProcessor {
	self := &UserServiceProcessor{user.NewUserServiceProcessor(handler)}
	return self
}

type SpaceServiceProcessor struct {
	*space.SpaceServiceProcessor
}

func NewSpaceServiceProcessor(handler SpaceService) *SpaceServiceProcessor {
	self := &SpaceServiceProcessor{space.NewSpaceServiceProcessor(handler)}
	return self
}

type FileServiceProcessor struct {
	*file.FileServiceProcessor
}

func NewFileServiceProcessor(handler FileService) *FileServiceProcessor {
	self := &FileServiceProcessor{file.NewFileServiceProcessor(handler)}
	return self
}

type FoundationOpenAPIServiceProcessor struct {
	*openapi.FoundationOpenAPIServiceProcessor
}

func NewFoundationOpenAPIServiceProcessor(handler FoundationOpenAPIService) *FoundationOpenAPIServiceProcessor {
	self := &FoundationOpenAPIServiceProcessor{openapi.NewFoundationOpenAPIServiceProcessor(handler)}
	return self
}
