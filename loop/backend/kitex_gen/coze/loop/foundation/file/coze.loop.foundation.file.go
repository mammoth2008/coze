// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package file

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"strings"
)

const (
	BusinessTypePrompt = "prompt"

	BusinessTypeEvaluation = "evaluation"

	BusinessTypeObservability = "observability"
)

type BusinessType = string

type FileData struct {
	Bytes    *int64  `thrift:"bytes,1,optional" frugal:"1,optional,i64" json:"bytes" form:"bytes" query:"bytes"`
	FileName *string `thrift:"file_name,2,optional" frugal:"2,optional,string" form:"file_name" json:"file_name,omitempty" query:"file_name"`
}

func NewFileData() *FileData {
	return &FileData{}
}

func (p *FileData) InitDefault() {
}

var FileData_Bytes_DEFAULT int64

func (p *FileData) GetBytes() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetBytes() {
		return FileData_Bytes_DEFAULT
	}
	return *p.Bytes
}

var FileData_FileName_DEFAULT string

func (p *FileData) GetFileName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFileName() {
		return FileData_FileName_DEFAULT
	}
	return *p.FileName
}
func (p *FileData) SetBytes(val *int64) {
	p.Bytes = val
}
func (p *FileData) SetFileName(val *string) {
	p.FileName = val
}

var fieldIDToName_FileData = map[int16]string{
	1: "bytes",
	2: "file_name",
}

func (p *FileData) IsSetBytes() bool {
	return p.Bytes != nil
}

func (p *FileData) IsSetFileName() bool {
	return p.FileName != nil
}

func (p *FileData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FileData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FileData) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Bytes = _field
	return nil
}
func (p *FileData) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FileName = _field
	return nil
}

func (p *FileData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FileData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FileData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBytes() {
		if err = oprot.WriteFieldBegin("bytes", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Bytes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FileData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileName() {
		if err = oprot.WriteFieldBegin("file_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FileName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FileData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileData(%+v)", *p)

}

func (p *FileData) DeepEqual(ano *FileData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Bytes) {
		return false
	}
	if !p.Field2DeepEqual(ano.FileName) {
		return false
	}
	return true
}

func (p *FileData) Field1DeepEqual(src *int64) bool {

	if p.Bytes == src {
		return true
	} else if p.Bytes == nil || src == nil {
		return false
	}
	if *p.Bytes != *src {
		return false
	}
	return true
}
func (p *FileData) Field2DeepEqual(src *string) bool {

	if p.FileName == src {
		return true
	} else if p.FileName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FileName, *src) != 0 {
		return false
	}
	return true
}

type UploadFileRequest struct {
	// file type
	ContentType string `thrift:"content_type,1,required" frugal:"1,required,string" form:"content_type,required" json:"content_type,required" query:"content_type,required"`
	// binary data
	Body []byte `thrift:"body,2,required" frugal:"2,required,binary" form:"body,required" json:"body,required" query:"body,required"`
	// binary data
	BusinessType *BusinessType `thrift:"business_type,3,optional" frugal:"3,optional,string" form:"business_type" json:"business_type,omitempty" query:"business_type"`
	Base         *base.Base    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUploadFileRequest() *UploadFileRequest {
	return &UploadFileRequest{}
}

func (p *UploadFileRequest) InitDefault() {
}

func (p *UploadFileRequest) GetContentType() (v string) {
	if p != nil {
		return p.ContentType
	}
	return
}

func (p *UploadFileRequest) GetBody() (v []byte) {
	if p != nil {
		return p.Body
	}
	return
}

var UploadFileRequest_BusinessType_DEFAULT BusinessType

func (p *UploadFileRequest) GetBusinessType() (v BusinessType) {
	if p == nil {
		return
	}
	if !p.IsSetBusinessType() {
		return UploadFileRequest_BusinessType_DEFAULT
	}
	return *p.BusinessType
}

var UploadFileRequest_Base_DEFAULT *base.Base

func (p *UploadFileRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UploadFileRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UploadFileRequest) SetContentType(val string) {
	p.ContentType = val
}
func (p *UploadFileRequest) SetBody(val []byte) {
	p.Body = val
}
func (p *UploadFileRequest) SetBusinessType(val *BusinessType) {
	p.BusinessType = val
}
func (p *UploadFileRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UploadFileRequest = map[int16]string{
	1:   "content_type",
	2:   "body",
	3:   "business_type",
	255: "Base",
}

func (p *UploadFileRequest) IsSetBusinessType() bool {
	return p.BusinessType != nil
}

func (p *UploadFileRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadFileRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetContentType bool = false
	var issetBody bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetContentType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetBody = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetContentType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBody {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadFileRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UploadFileRequest[fieldId]))
}

func (p *UploadFileRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ContentType = _field
	return nil
}
func (p *UploadFileRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Body = _field
	return nil
}
func (p *UploadFileRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *BusinessType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BusinessType = _field
	return nil
}
func (p *UploadFileRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UploadFileRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadFileRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadFileRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("content_type", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ContentType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UploadFileRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("body", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Body)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UploadFileRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessType() {
		if err = oprot.WriteFieldBegin("business_type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BusinessType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UploadFileRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UploadFileRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadFileRequest(%+v)", *p)

}

func (p *UploadFileRequest) DeepEqual(ano *UploadFileRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ContentType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Body) {
		return false
	}
	if !p.Field3DeepEqual(ano.BusinessType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UploadFileRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ContentType, src) != 0 {
		return false
	}
	return true
}
func (p *UploadFileRequest) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Body, src) != 0 {
		return false
	}
	return true
}
func (p *UploadFileRequest) Field3DeepEqual(src *BusinessType) bool {

	if p.BusinessType == src {
		return true
	} else if p.BusinessType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BusinessType, *src) != 0 {
		return false
	}
	return true
}
func (p *UploadFileRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UploadFileResponse struct {
	Code     *int32         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *FileData      `thrift:"data,3,optional" frugal:"3,optional,FileData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUploadFileResponse() *UploadFileResponse {
	return &UploadFileResponse{}
}

func (p *UploadFileResponse) InitDefault() {
}

var UploadFileResponse_Code_DEFAULT int32

func (p *UploadFileResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return UploadFileResponse_Code_DEFAULT
	}
	return *p.Code
}

var UploadFileResponse_Msg_DEFAULT string

func (p *UploadFileResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return UploadFileResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var UploadFileResponse_Data_DEFAULT *FileData

func (p *UploadFileResponse) GetData() (v *FileData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return UploadFileResponse_Data_DEFAULT
	}
	return p.Data
}

var UploadFileResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UploadFileResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UploadFileResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UploadFileResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *UploadFileResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *UploadFileResponse) SetData(val *FileData) {
	p.Data = val
}
func (p *UploadFileResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UploadFileResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *UploadFileResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *UploadFileResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *UploadFileResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *UploadFileResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UploadFileResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadFileResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UploadFileResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *UploadFileResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *UploadFileResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewFileData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *UploadFileResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UploadFileResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadFileResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadFileResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UploadFileResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UploadFileResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UploadFileResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UploadFileResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadFileResponse(%+v)", *p)

}

func (p *UploadFileResponse) DeepEqual(ano *UploadFileResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UploadFileResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *UploadFileResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *UploadFileResponse) Field3DeepEqual(src *FileData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UploadFileResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UploadLoopFileInnerRequest struct {
	// file type
	ContentType string `thrift:"content_type,1,required" frugal:"1,required,string" form:"content_type,required" json:"content_type,required" query:"content_type,required"`
	// binary data
	Body []byte     `thrift:"body,2,required" frugal:"2,required,binary" form:"body,required" json:"body,required" query:"body,required"`
	Base *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUploadLoopFileInnerRequest() *UploadLoopFileInnerRequest {
	return &UploadLoopFileInnerRequest{}
}

func (p *UploadLoopFileInnerRequest) InitDefault() {
}

func (p *UploadLoopFileInnerRequest) GetContentType() (v string) {
	if p != nil {
		return p.ContentType
	}
	return
}

func (p *UploadLoopFileInnerRequest) GetBody() (v []byte) {
	if p != nil {
		return p.Body
	}
	return
}

var UploadLoopFileInnerRequest_Base_DEFAULT *base.Base

func (p *UploadLoopFileInnerRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UploadLoopFileInnerRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UploadLoopFileInnerRequest) SetContentType(val string) {
	p.ContentType = val
}
func (p *UploadLoopFileInnerRequest) SetBody(val []byte) {
	p.Body = val
}
func (p *UploadLoopFileInnerRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UploadLoopFileInnerRequest = map[int16]string{
	1:   "content_type",
	2:   "body",
	255: "Base",
}

func (p *UploadLoopFileInnerRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadLoopFileInnerRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetContentType bool = false
	var issetBody bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetContentType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetBody = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetContentType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBody {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadLoopFileInnerRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UploadLoopFileInnerRequest[fieldId]))
}

func (p *UploadLoopFileInnerRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ContentType = _field
	return nil
}
func (p *UploadLoopFileInnerRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Body = _field
	return nil
}
func (p *UploadLoopFileInnerRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UploadLoopFileInnerRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadLoopFileInnerRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadLoopFileInnerRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("content_type", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ContentType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UploadLoopFileInnerRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("body", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Body)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UploadLoopFileInnerRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UploadLoopFileInnerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadLoopFileInnerRequest(%+v)", *p)

}

func (p *UploadLoopFileInnerRequest) DeepEqual(ano *UploadLoopFileInnerRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ContentType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Body) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UploadLoopFileInnerRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ContentType, src) != 0 {
		return false
	}
	return true
}
func (p *UploadLoopFileInnerRequest) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Body, src) != 0 {
		return false
	}
	return true
}
func (p *UploadLoopFileInnerRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UploadLoopFileInnerResponse struct {
	Code     *int32         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *FileData      `thrift:"data,3,optional" frugal:"3,optional,FileData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUploadLoopFileInnerResponse() *UploadLoopFileInnerResponse {
	return &UploadLoopFileInnerResponse{}
}

func (p *UploadLoopFileInnerResponse) InitDefault() {
}

var UploadLoopFileInnerResponse_Code_DEFAULT int32

func (p *UploadLoopFileInnerResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return UploadLoopFileInnerResponse_Code_DEFAULT
	}
	return *p.Code
}

var UploadLoopFileInnerResponse_Msg_DEFAULT string

func (p *UploadLoopFileInnerResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return UploadLoopFileInnerResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var UploadLoopFileInnerResponse_Data_DEFAULT *FileData

func (p *UploadLoopFileInnerResponse) GetData() (v *FileData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return UploadLoopFileInnerResponse_Data_DEFAULT
	}
	return p.Data
}

var UploadLoopFileInnerResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UploadLoopFileInnerResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UploadLoopFileInnerResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UploadLoopFileInnerResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *UploadLoopFileInnerResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *UploadLoopFileInnerResponse) SetData(val *FileData) {
	p.Data = val
}
func (p *UploadLoopFileInnerResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UploadLoopFileInnerResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *UploadLoopFileInnerResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *UploadLoopFileInnerResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *UploadLoopFileInnerResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *UploadLoopFileInnerResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UploadLoopFileInnerResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadLoopFileInnerResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UploadLoopFileInnerResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *UploadLoopFileInnerResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *UploadLoopFileInnerResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewFileData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *UploadLoopFileInnerResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UploadLoopFileInnerResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadLoopFileInnerResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadLoopFileInnerResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UploadLoopFileInnerResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UploadLoopFileInnerResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UploadLoopFileInnerResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UploadLoopFileInnerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadLoopFileInnerResponse(%+v)", *p)

}

func (p *UploadLoopFileInnerResponse) DeepEqual(ano *UploadLoopFileInnerResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UploadLoopFileInnerResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *UploadLoopFileInnerResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *UploadLoopFileInnerResponse) Field3DeepEqual(src *FileData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UploadLoopFileInnerResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type SignUploadFileRequest struct {
	// file key
	Keys   []string        `thrift:"keys,1,required" frugal:"1,required,list<string>" form:"keys,required" json:"keys,required" query:"keys,required"`
	Option *SignFileOption `thrift:"option,2,optional" frugal:"2,optional,SignFileOption" form:"option" json:"option,omitempty" query:"option"`
	// binary data
	BusinessType *BusinessType `thrift:"business_type,3,optional" frugal:"3,optional,string" form:"business_type" json:"business_type,omitempty" query:"business_type"`
	// workspace id
	WorkspaceID *int64     `thrift:"workspace_id,4,optional" frugal:"4,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewSignUploadFileRequest() *SignUploadFileRequest {
	return &SignUploadFileRequest{}
}

func (p *SignUploadFileRequest) InitDefault() {
}

func (p *SignUploadFileRequest) GetKeys() (v []string) {
	if p != nil {
		return p.Keys
	}
	return
}

var SignUploadFileRequest_Option_DEFAULT *SignFileOption

func (p *SignUploadFileRequest) GetOption() (v *SignFileOption) {
	if p == nil {
		return
	}
	if !p.IsSetOption() {
		return SignUploadFileRequest_Option_DEFAULT
	}
	return p.Option
}

var SignUploadFileRequest_BusinessType_DEFAULT BusinessType

func (p *SignUploadFileRequest) GetBusinessType() (v BusinessType) {
	if p == nil {
		return
	}
	if !p.IsSetBusinessType() {
		return SignUploadFileRequest_BusinessType_DEFAULT
	}
	return *p.BusinessType
}

var SignUploadFileRequest_WorkspaceID_DEFAULT int64

func (p *SignUploadFileRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return SignUploadFileRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var SignUploadFileRequest_Base_DEFAULT *base.Base

func (p *SignUploadFileRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return SignUploadFileRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SignUploadFileRequest) SetKeys(val []string) {
	p.Keys = val
}
func (p *SignUploadFileRequest) SetOption(val *SignFileOption) {
	p.Option = val
}
func (p *SignUploadFileRequest) SetBusinessType(val *BusinessType) {
	p.BusinessType = val
}
func (p *SignUploadFileRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *SignUploadFileRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_SignUploadFileRequest = map[int16]string{
	1:   "keys",
	2:   "option",
	3:   "business_type",
	4:   "workspace_id",
	255: "Base",
}

func (p *SignUploadFileRequest) IsSetOption() bool {
	return p.Option != nil
}

func (p *SignUploadFileRequest) IsSetBusinessType() bool {
	return p.BusinessType != nil
}

func (p *SignUploadFileRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *SignUploadFileRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SignUploadFileRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKeys bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKeys = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKeys {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SignUploadFileRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SignUploadFileRequest[fieldId]))
}

func (p *SignUploadFileRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Keys = _field
	return nil
}
func (p *SignUploadFileRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := NewSignFileOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Option = _field
	return nil
}
func (p *SignUploadFileRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *BusinessType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BusinessType = _field
	return nil
}
func (p *SignUploadFileRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *SignUploadFileRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SignUploadFileRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignUploadFileRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SignUploadFileRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("keys", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
		return err
	}
	for _, v := range p.Keys {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SignUploadFileRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOption() {
		if err = oprot.WriteFieldBegin("option", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Option.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SignUploadFileRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessType() {
		if err = oprot.WriteFieldBegin("business_type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BusinessType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SignUploadFileRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *SignUploadFileRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SignUploadFileRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignUploadFileRequest(%+v)", *p)

}

func (p *SignUploadFileRequest) DeepEqual(ano *SignUploadFileRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Keys) {
		return false
	}
	if !p.Field2DeepEqual(ano.Option) {
		return false
	}
	if !p.Field3DeepEqual(ano.BusinessType) {
		return false
	}
	if !p.Field4DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SignUploadFileRequest) Field1DeepEqual(src []string) bool {

	if len(p.Keys) != len(src) {
		return false
	}
	for i, v := range p.Keys {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SignUploadFileRequest) Field2DeepEqual(src *SignFileOption) bool {

	if !p.Option.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SignUploadFileRequest) Field3DeepEqual(src *BusinessType) bool {

	if p.BusinessType == src {
		return true
	} else if p.BusinessType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BusinessType, *src) != 0 {
		return false
	}
	return true
}
func (p *SignUploadFileRequest) Field4DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *SignUploadFileRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SignFileOption struct {
	// TTL(second), default 24h
	TTL *int64 `thrift:"ttl,1,optional" frugal:"1,optional,i64" json:"ttl" form:"ttl" query:"ttl"`
}

func NewSignFileOption() *SignFileOption {
	return &SignFileOption{}
}

func (p *SignFileOption) InitDefault() {
}

var SignFileOption_TTL_DEFAULT int64

func (p *SignFileOption) GetTTL() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTTL() {
		return SignFileOption_TTL_DEFAULT
	}
	return *p.TTL
}
func (p *SignFileOption) SetTTL(val *int64) {
	p.TTL = val
}

var fieldIDToName_SignFileOption = map[int16]string{
	1: "ttl",
}

func (p *SignFileOption) IsSetTTL() bool {
	return p.TTL != nil
}

func (p *SignFileOption) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SignFileOption[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SignFileOption) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TTL = _field
	return nil
}

func (p *SignFileOption) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignFileOption"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SignFileOption) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTTL() {
		if err = oprot.WriteFieldBegin("ttl", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TTL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SignFileOption) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignFileOption(%+v)", *p)

}

func (p *SignFileOption) DeepEqual(ano *SignFileOption) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TTL) {
		return false
	}
	return true
}

func (p *SignFileOption) Field1DeepEqual(src *int64) bool {

	if p.TTL == src {
		return true
	} else if p.TTL == nil || src == nil {
		return false
	}
	if *p.TTL != *src {
		return false
	}
	return true
}

type SignUploadFileResponse struct {
	// the index corresponding to the keys of request
	Uris []string `thrift:"uris,1,optional" frugal:"1,optional,list<string>" form:"uris" json:"uris,omitempty" query:"uris"`
	// the index corresponding to the keys of request
	SignHeads []*SignHead    `thrift:"sign_heads,2,optional" frugal:"2,optional,list<SignHead>" form:"sign_heads" json:"sign_heads,omitempty" query:"sign_heads"`
	BaseResp  *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewSignUploadFileResponse() *SignUploadFileResponse {
	return &SignUploadFileResponse{}
}

func (p *SignUploadFileResponse) InitDefault() {
}

var SignUploadFileResponse_Uris_DEFAULT []string

func (p *SignUploadFileResponse) GetUris() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetUris() {
		return SignUploadFileResponse_Uris_DEFAULT
	}
	return p.Uris
}

var SignUploadFileResponse_SignHeads_DEFAULT []*SignHead

func (p *SignUploadFileResponse) GetSignHeads() (v []*SignHead) {
	if p == nil {
		return
	}
	if !p.IsSetSignHeads() {
		return SignUploadFileResponse_SignHeads_DEFAULT
	}
	return p.SignHeads
}

var SignUploadFileResponse_BaseResp_DEFAULT *base.BaseResp

func (p *SignUploadFileResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return SignUploadFileResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SignUploadFileResponse) SetUris(val []string) {
	p.Uris = val
}
func (p *SignUploadFileResponse) SetSignHeads(val []*SignHead) {
	p.SignHeads = val
}
func (p *SignUploadFileResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SignUploadFileResponse = map[int16]string{
	1:   "uris",
	2:   "sign_heads",
	255: "BaseResp",
}

func (p *SignUploadFileResponse) IsSetUris() bool {
	return p.Uris != nil
}

func (p *SignUploadFileResponse) IsSetSignHeads() bool {
	return p.SignHeads != nil
}

func (p *SignUploadFileResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SignUploadFileResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SignUploadFileResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SignUploadFileResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Uris = _field
	return nil
}
func (p *SignUploadFileResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SignHead, 0, size)
	values := make([]SignHead, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SignHeads = _field
	return nil
}
func (p *SignUploadFileResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SignUploadFileResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignUploadFileResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SignUploadFileResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUris() {
		if err = oprot.WriteFieldBegin("uris", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Uris)); err != nil {
			return err
		}
		for _, v := range p.Uris {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SignUploadFileResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSignHeads() {
		if err = oprot.WriteFieldBegin("sign_heads", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SignHeads)); err != nil {
			return err
		}
		for _, v := range p.SignHeads {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SignUploadFileResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SignUploadFileResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignUploadFileResponse(%+v)", *p)

}

func (p *SignUploadFileResponse) DeepEqual(ano *SignUploadFileResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uris) {
		return false
	}
	if !p.Field2DeepEqual(ano.SignHeads) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SignUploadFileResponse) Field1DeepEqual(src []string) bool {

	if len(p.Uris) != len(src) {
		return false
	}
	for i, v := range p.Uris {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SignUploadFileResponse) Field2DeepEqual(src []*SignHead) bool {

	if len(p.SignHeads) != len(src) {
		return false
	}
	for i, v := range p.SignHeads {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *SignUploadFileResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type SignHead struct {
	CurrentTime     *string `thrift:"current_time,1,optional" frugal:"1,optional,string" form:"current_time" json:"current_time,omitempty" query:"current_time"`
	ExpiredTime     *string `thrift:"expired_time,2,optional" frugal:"2,optional,string" form:"expired_time" json:"expired_time,omitempty" query:"expired_time"`
	SessionToken    *string `thrift:"session_token,3,optional" frugal:"3,optional,string" form:"session_token" json:"session_token,omitempty" query:"session_token"`
	AccessKeyID     *string `thrift:"access_key_id,4,optional" frugal:"4,optional,string" form:"access_key_id" json:"access_key_id,omitempty" query:"access_key_id"`
	SecretAccessKey *string `thrift:"secret_access_key,5,optional" frugal:"5,optional,string" form:"secret_access_key" json:"secret_access_key,omitempty" query:"secret_access_key"`
}

func NewSignHead() *SignHead {
	return &SignHead{}
}

func (p *SignHead) InitDefault() {
}

var SignHead_CurrentTime_DEFAULT string

func (p *SignHead) GetCurrentTime() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCurrentTime() {
		return SignHead_CurrentTime_DEFAULT
	}
	return *p.CurrentTime
}

var SignHead_ExpiredTime_DEFAULT string

func (p *SignHead) GetExpiredTime() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetExpiredTime() {
		return SignHead_ExpiredTime_DEFAULT
	}
	return *p.ExpiredTime
}

var SignHead_SessionToken_DEFAULT string

func (p *SignHead) GetSessionToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSessionToken() {
		return SignHead_SessionToken_DEFAULT
	}
	return *p.SessionToken
}

var SignHead_AccessKeyID_DEFAULT string

func (p *SignHead) GetAccessKeyID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAccessKeyID() {
		return SignHead_AccessKeyID_DEFAULT
	}
	return *p.AccessKeyID
}

var SignHead_SecretAccessKey_DEFAULT string

func (p *SignHead) GetSecretAccessKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSecretAccessKey() {
		return SignHead_SecretAccessKey_DEFAULT
	}
	return *p.SecretAccessKey
}
func (p *SignHead) SetCurrentTime(val *string) {
	p.CurrentTime = val
}
func (p *SignHead) SetExpiredTime(val *string) {
	p.ExpiredTime = val
}
func (p *SignHead) SetSessionToken(val *string) {
	p.SessionToken = val
}
func (p *SignHead) SetAccessKeyID(val *string) {
	p.AccessKeyID = val
}
func (p *SignHead) SetSecretAccessKey(val *string) {
	p.SecretAccessKey = val
}

var fieldIDToName_SignHead = map[int16]string{
	1: "current_time",
	2: "expired_time",
	3: "session_token",
	4: "access_key_id",
	5: "secret_access_key",
}

func (p *SignHead) IsSetCurrentTime() bool {
	return p.CurrentTime != nil
}

func (p *SignHead) IsSetExpiredTime() bool {
	return p.ExpiredTime != nil
}

func (p *SignHead) IsSetSessionToken() bool {
	return p.SessionToken != nil
}

func (p *SignHead) IsSetAccessKeyID() bool {
	return p.AccessKeyID != nil
}

func (p *SignHead) IsSetSecretAccessKey() bool {
	return p.SecretAccessKey != nil
}

func (p *SignHead) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SignHead[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SignHead) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CurrentTime = _field
	return nil
}
func (p *SignHead) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExpiredTime = _field
	return nil
}
func (p *SignHead) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SessionToken = _field
	return nil
}
func (p *SignHead) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AccessKeyID = _field
	return nil
}
func (p *SignHead) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SecretAccessKey = _field
	return nil
}

func (p *SignHead) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignHead"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SignHead) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentTime() {
		if err = oprot.WriteFieldBegin("current_time", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CurrentTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SignHead) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpiredTime() {
		if err = oprot.WriteFieldBegin("expired_time", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ExpiredTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SignHead) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionToken() {
		if err = oprot.WriteFieldBegin("session_token", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SessionToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SignHead) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccessKeyID() {
		if err = oprot.WriteFieldBegin("access_key_id", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AccessKeyID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *SignHead) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecretAccessKey() {
		if err = oprot.WriteFieldBegin("secret_access_key", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SecretAccessKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SignHead) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignHead(%+v)", *p)

}

func (p *SignHead) DeepEqual(ano *SignHead) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CurrentTime) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExpiredTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.SessionToken) {
		return false
	}
	if !p.Field4DeepEqual(ano.AccessKeyID) {
		return false
	}
	if !p.Field5DeepEqual(ano.SecretAccessKey) {
		return false
	}
	return true
}

func (p *SignHead) Field1DeepEqual(src *string) bool {

	if p.CurrentTime == src {
		return true
	} else if p.CurrentTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CurrentTime, *src) != 0 {
		return false
	}
	return true
}
func (p *SignHead) Field2DeepEqual(src *string) bool {

	if p.ExpiredTime == src {
		return true
	} else if p.ExpiredTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ExpiredTime, *src) != 0 {
		return false
	}
	return true
}
func (p *SignHead) Field3DeepEqual(src *string) bool {

	if p.SessionToken == src {
		return true
	} else if p.SessionToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SessionToken, *src) != 0 {
		return false
	}
	return true
}
func (p *SignHead) Field4DeepEqual(src *string) bool {

	if p.AccessKeyID == src {
		return true
	} else if p.AccessKeyID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AccessKeyID, *src) != 0 {
		return false
	}
	return true
}
func (p *SignHead) Field5DeepEqual(src *string) bool {

	if p.SecretAccessKey == src {
		return true
	} else if p.SecretAccessKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SecretAccessKey, *src) != 0 {
		return false
	}
	return true
}

type SignDownloadFileRequest struct {
	// file key
	Keys   []string        `thrift:"keys,1,required" frugal:"1,required,list<string>" form:"keys,required" json:"keys,required" query:"keys,required"`
	Option *SignFileOption `thrift:"option,2,optional" frugal:"2,optional,SignFileOption" form:"option" json:"option,omitempty" query:"option"`
	// binary data
	BusinessType *BusinessType `thrift:"business_type,3,optional" frugal:"3,optional,string" form:"business_type" json:"business_type,omitempty" query:"business_type"`
	Base         *base.Base    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewSignDownloadFileRequest() *SignDownloadFileRequest {
	return &SignDownloadFileRequest{}
}

func (p *SignDownloadFileRequest) InitDefault() {
}

func (p *SignDownloadFileRequest) GetKeys() (v []string) {
	if p != nil {
		return p.Keys
	}
	return
}

var SignDownloadFileRequest_Option_DEFAULT *SignFileOption

func (p *SignDownloadFileRequest) GetOption() (v *SignFileOption) {
	if p == nil {
		return
	}
	if !p.IsSetOption() {
		return SignDownloadFileRequest_Option_DEFAULT
	}
	return p.Option
}

var SignDownloadFileRequest_BusinessType_DEFAULT BusinessType

func (p *SignDownloadFileRequest) GetBusinessType() (v BusinessType) {
	if p == nil {
		return
	}
	if !p.IsSetBusinessType() {
		return SignDownloadFileRequest_BusinessType_DEFAULT
	}
	return *p.BusinessType
}

var SignDownloadFileRequest_Base_DEFAULT *base.Base

func (p *SignDownloadFileRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return SignDownloadFileRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SignDownloadFileRequest) SetKeys(val []string) {
	p.Keys = val
}
func (p *SignDownloadFileRequest) SetOption(val *SignFileOption) {
	p.Option = val
}
func (p *SignDownloadFileRequest) SetBusinessType(val *BusinessType) {
	p.BusinessType = val
}
func (p *SignDownloadFileRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_SignDownloadFileRequest = map[int16]string{
	1:   "keys",
	2:   "option",
	3:   "business_type",
	255: "Base",
}

func (p *SignDownloadFileRequest) IsSetOption() bool {
	return p.Option != nil
}

func (p *SignDownloadFileRequest) IsSetBusinessType() bool {
	return p.BusinessType != nil
}

func (p *SignDownloadFileRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SignDownloadFileRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKeys bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKeys = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKeys {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SignDownloadFileRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SignDownloadFileRequest[fieldId]))
}

func (p *SignDownloadFileRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Keys = _field
	return nil
}
func (p *SignDownloadFileRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := NewSignFileOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Option = _field
	return nil
}
func (p *SignDownloadFileRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *BusinessType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BusinessType = _field
	return nil
}
func (p *SignDownloadFileRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SignDownloadFileRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignDownloadFileRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SignDownloadFileRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("keys", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
		return err
	}
	for _, v := range p.Keys {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SignDownloadFileRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOption() {
		if err = oprot.WriteFieldBegin("option", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Option.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SignDownloadFileRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessType() {
		if err = oprot.WriteFieldBegin("business_type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BusinessType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SignDownloadFileRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SignDownloadFileRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignDownloadFileRequest(%+v)", *p)

}

func (p *SignDownloadFileRequest) DeepEqual(ano *SignDownloadFileRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Keys) {
		return false
	}
	if !p.Field2DeepEqual(ano.Option) {
		return false
	}
	if !p.Field3DeepEqual(ano.BusinessType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SignDownloadFileRequest) Field1DeepEqual(src []string) bool {

	if len(p.Keys) != len(src) {
		return false
	}
	for i, v := range p.Keys {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SignDownloadFileRequest) Field2DeepEqual(src *SignFileOption) bool {

	if !p.Option.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SignDownloadFileRequest) Field3DeepEqual(src *BusinessType) bool {

	if p.BusinessType == src {
		return true
	} else if p.BusinessType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BusinessType, *src) != 0 {
		return false
	}
	return true
}
func (p *SignDownloadFileRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SignDownloadFileResponse struct {
	// the index corresponding to the keys of request
	Uris     []string       `thrift:"uris,1,optional" frugal:"1,optional,list<string>" form:"uris" json:"uris,omitempty" query:"uris"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewSignDownloadFileResponse() *SignDownloadFileResponse {
	return &SignDownloadFileResponse{}
}

func (p *SignDownloadFileResponse) InitDefault() {
}

var SignDownloadFileResponse_Uris_DEFAULT []string

func (p *SignDownloadFileResponse) GetUris() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetUris() {
		return SignDownloadFileResponse_Uris_DEFAULT
	}
	return p.Uris
}

var SignDownloadFileResponse_BaseResp_DEFAULT *base.BaseResp

func (p *SignDownloadFileResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return SignDownloadFileResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SignDownloadFileResponse) SetUris(val []string) {
	p.Uris = val
}
func (p *SignDownloadFileResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SignDownloadFileResponse = map[int16]string{
	1:   "uris",
	255: "BaseResp",
}

func (p *SignDownloadFileResponse) IsSetUris() bool {
	return p.Uris != nil
}

func (p *SignDownloadFileResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SignDownloadFileResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SignDownloadFileResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SignDownloadFileResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Uris = _field
	return nil
}
func (p *SignDownloadFileResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SignDownloadFileResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignDownloadFileResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SignDownloadFileResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUris() {
		if err = oprot.WriteFieldBegin("uris", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Uris)); err != nil {
			return err
		}
		for _, v := range p.Uris {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SignDownloadFileResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SignDownloadFileResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignDownloadFileResponse(%+v)", *p)

}

func (p *SignDownloadFileResponse) DeepEqual(ano *SignDownloadFileResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uris) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SignDownloadFileResponse) Field1DeepEqual(src []string) bool {

	if len(p.Uris) != len(src) {
		return false
	}
	for i, v := range p.Uris {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SignDownloadFileResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type FileService interface {
	UploadLoopFileInner(ctx context.Context, req *UploadLoopFileInnerRequest) (r *UploadLoopFileInnerResponse, err error)

	SignUploadFile(ctx context.Context, req *SignUploadFileRequest) (r *SignUploadFileResponse, err error)

	SignDownloadFile(ctx context.Context, req *SignDownloadFileRequest) (r *SignDownloadFileResponse, err error)
}

type FileServiceClient struct {
	c thrift.TClient
}

func NewFileServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FileServiceClient {
	return &FileServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewFileServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FileServiceClient {
	return &FileServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewFileServiceClient(c thrift.TClient) *FileServiceClient {
	return &FileServiceClient{
		c: c,
	}
}

func (p *FileServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *FileServiceClient) UploadLoopFileInner(ctx context.Context, req *UploadLoopFileInnerRequest) (r *UploadLoopFileInnerResponse, err error) {
	var _args FileServiceUploadLoopFileInnerArgs
	_args.Req = req
	var _result FileServiceUploadLoopFileInnerResult
	if err = p.Client_().Call(ctx, "UploadLoopFileInner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FileServiceClient) SignUploadFile(ctx context.Context, req *SignUploadFileRequest) (r *SignUploadFileResponse, err error) {
	var _args FileServiceSignUploadFileArgs
	_args.Req = req
	var _result FileServiceSignUploadFileResult
	if err = p.Client_().Call(ctx, "SignUploadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *FileServiceClient) SignDownloadFile(ctx context.Context, req *SignDownloadFileRequest) (r *SignDownloadFileResponse, err error) {
	var _args FileServiceSignDownloadFileArgs
	_args.Req = req
	var _result FileServiceSignDownloadFileResult
	if err = p.Client_().Call(ctx, "SignDownloadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type FileServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      FileService
}

func (p *FileServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *FileServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *FileServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewFileServiceProcessor(handler FileService) *FileServiceProcessor {
	self := &FileServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("UploadLoopFileInner", &fileServiceProcessorUploadLoopFileInner{handler: handler})
	self.AddToProcessorMap("SignUploadFile", &fileServiceProcessorSignUploadFile{handler: handler})
	self.AddToProcessorMap("SignDownloadFile", &fileServiceProcessorSignDownloadFile{handler: handler})
	return self
}
func (p *FileServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type fileServiceProcessorUploadLoopFileInner struct {
	handler FileService
}

func (p *fileServiceProcessorUploadLoopFileInner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileServiceUploadLoopFileInnerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UploadLoopFileInner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FileServiceUploadLoopFileInnerResult{}
	var retval *UploadLoopFileInnerResponse
	if retval, err2 = p.handler.UploadLoopFileInner(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadLoopFileInner: "+err2.Error())
		oprot.WriteMessageBegin("UploadLoopFileInner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UploadLoopFileInner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileServiceProcessorSignUploadFile struct {
	handler FileService
}

func (p *fileServiceProcessorSignUploadFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileServiceSignUploadFileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SignUploadFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FileServiceSignUploadFileResult{}
	var retval *SignUploadFileResponse
	if retval, err2 = p.handler.SignUploadFile(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SignUploadFile: "+err2.Error())
		oprot.WriteMessageBegin("SignUploadFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SignUploadFile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileServiceProcessorSignDownloadFile struct {
	handler FileService
}

func (p *fileServiceProcessorSignDownloadFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileServiceSignDownloadFileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SignDownloadFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := FileServiceSignDownloadFileResult{}
	var retval *SignDownloadFileResponse
	if retval, err2 = p.handler.SignDownloadFile(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SignDownloadFile: "+err2.Error())
		oprot.WriteMessageBegin("SignDownloadFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SignDownloadFile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type FileServiceUploadLoopFileInnerArgs struct {
	Req *UploadLoopFileInnerRequest `thrift:"req,1" frugal:"1,default,UploadLoopFileInnerRequest"`
}

func NewFileServiceUploadLoopFileInnerArgs() *FileServiceUploadLoopFileInnerArgs {
	return &FileServiceUploadLoopFileInnerArgs{}
}

func (p *FileServiceUploadLoopFileInnerArgs) InitDefault() {
}

var FileServiceUploadLoopFileInnerArgs_Req_DEFAULT *UploadLoopFileInnerRequest

func (p *FileServiceUploadLoopFileInnerArgs) GetReq() (v *UploadLoopFileInnerRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return FileServiceUploadLoopFileInnerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FileServiceUploadLoopFileInnerArgs) SetReq(val *UploadLoopFileInnerRequest) {
	p.Req = val
}

var fieldIDToName_FileServiceUploadLoopFileInnerArgs = map[int16]string{
	1: "req",
}

func (p *FileServiceUploadLoopFileInnerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FileServiceUploadLoopFileInnerArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FileServiceUploadLoopFileInnerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FileServiceUploadLoopFileInnerArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUploadLoopFileInnerRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FileServiceUploadLoopFileInnerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadLoopFileInner_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FileServiceUploadLoopFileInnerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FileServiceUploadLoopFileInnerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileServiceUploadLoopFileInnerArgs(%+v)", *p)

}

func (p *FileServiceUploadLoopFileInnerArgs) DeepEqual(ano *FileServiceUploadLoopFileInnerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FileServiceUploadLoopFileInnerArgs) Field1DeepEqual(src *UploadLoopFileInnerRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FileServiceUploadLoopFileInnerResult struct {
	Success *UploadLoopFileInnerResponse `thrift:"success,0,optional" frugal:"0,optional,UploadLoopFileInnerResponse"`
}

func NewFileServiceUploadLoopFileInnerResult() *FileServiceUploadLoopFileInnerResult {
	return &FileServiceUploadLoopFileInnerResult{}
}

func (p *FileServiceUploadLoopFileInnerResult) InitDefault() {
}

var FileServiceUploadLoopFileInnerResult_Success_DEFAULT *UploadLoopFileInnerResponse

func (p *FileServiceUploadLoopFileInnerResult) GetSuccess() (v *UploadLoopFileInnerResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return FileServiceUploadLoopFileInnerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FileServiceUploadLoopFileInnerResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadLoopFileInnerResponse)
}

var fieldIDToName_FileServiceUploadLoopFileInnerResult = map[int16]string{
	0: "success",
}

func (p *FileServiceUploadLoopFileInnerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FileServiceUploadLoopFileInnerResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FileServiceUploadLoopFileInnerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FileServiceUploadLoopFileInnerResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUploadLoopFileInnerResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FileServiceUploadLoopFileInnerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadLoopFileInner_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FileServiceUploadLoopFileInnerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FileServiceUploadLoopFileInnerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileServiceUploadLoopFileInnerResult(%+v)", *p)

}

func (p *FileServiceUploadLoopFileInnerResult) DeepEqual(ano *FileServiceUploadLoopFileInnerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FileServiceUploadLoopFileInnerResult) Field0DeepEqual(src *UploadLoopFileInnerResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FileServiceSignUploadFileArgs struct {
	Req *SignUploadFileRequest `thrift:"req,1" frugal:"1,default,SignUploadFileRequest"`
}

func NewFileServiceSignUploadFileArgs() *FileServiceSignUploadFileArgs {
	return &FileServiceSignUploadFileArgs{}
}

func (p *FileServiceSignUploadFileArgs) InitDefault() {
}

var FileServiceSignUploadFileArgs_Req_DEFAULT *SignUploadFileRequest

func (p *FileServiceSignUploadFileArgs) GetReq() (v *SignUploadFileRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return FileServiceSignUploadFileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FileServiceSignUploadFileArgs) SetReq(val *SignUploadFileRequest) {
	p.Req = val
}

var fieldIDToName_FileServiceSignUploadFileArgs = map[int16]string{
	1: "req",
}

func (p *FileServiceSignUploadFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FileServiceSignUploadFileArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FileServiceSignUploadFileArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FileServiceSignUploadFileArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSignUploadFileRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FileServiceSignUploadFileArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignUploadFile_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FileServiceSignUploadFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FileServiceSignUploadFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileServiceSignUploadFileArgs(%+v)", *p)

}

func (p *FileServiceSignUploadFileArgs) DeepEqual(ano *FileServiceSignUploadFileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FileServiceSignUploadFileArgs) Field1DeepEqual(src *SignUploadFileRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FileServiceSignUploadFileResult struct {
	Success *SignUploadFileResponse `thrift:"success,0,optional" frugal:"0,optional,SignUploadFileResponse"`
}

func NewFileServiceSignUploadFileResult() *FileServiceSignUploadFileResult {
	return &FileServiceSignUploadFileResult{}
}

func (p *FileServiceSignUploadFileResult) InitDefault() {
}

var FileServiceSignUploadFileResult_Success_DEFAULT *SignUploadFileResponse

func (p *FileServiceSignUploadFileResult) GetSuccess() (v *SignUploadFileResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return FileServiceSignUploadFileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FileServiceSignUploadFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*SignUploadFileResponse)
}

var fieldIDToName_FileServiceSignUploadFileResult = map[int16]string{
	0: "success",
}

func (p *FileServiceSignUploadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FileServiceSignUploadFileResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FileServiceSignUploadFileResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FileServiceSignUploadFileResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSignUploadFileResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FileServiceSignUploadFileResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignUploadFile_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FileServiceSignUploadFileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FileServiceSignUploadFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileServiceSignUploadFileResult(%+v)", *p)

}

func (p *FileServiceSignUploadFileResult) DeepEqual(ano *FileServiceSignUploadFileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FileServiceSignUploadFileResult) Field0DeepEqual(src *SignUploadFileResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type FileServiceSignDownloadFileArgs struct {
	Req *SignDownloadFileRequest `thrift:"req,1" frugal:"1,default,SignDownloadFileRequest"`
}

func NewFileServiceSignDownloadFileArgs() *FileServiceSignDownloadFileArgs {
	return &FileServiceSignDownloadFileArgs{}
}

func (p *FileServiceSignDownloadFileArgs) InitDefault() {
}

var FileServiceSignDownloadFileArgs_Req_DEFAULT *SignDownloadFileRequest

func (p *FileServiceSignDownloadFileArgs) GetReq() (v *SignDownloadFileRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return FileServiceSignDownloadFileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FileServiceSignDownloadFileArgs) SetReq(val *SignDownloadFileRequest) {
	p.Req = val
}

var fieldIDToName_FileServiceSignDownloadFileArgs = map[int16]string{
	1: "req",
}

func (p *FileServiceSignDownloadFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FileServiceSignDownloadFileArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FileServiceSignDownloadFileArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FileServiceSignDownloadFileArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSignDownloadFileRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *FileServiceSignDownloadFileArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignDownloadFile_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FileServiceSignDownloadFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FileServiceSignDownloadFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileServiceSignDownloadFileArgs(%+v)", *p)

}

func (p *FileServiceSignDownloadFileArgs) DeepEqual(ano *FileServiceSignDownloadFileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FileServiceSignDownloadFileArgs) Field1DeepEqual(src *SignDownloadFileRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type FileServiceSignDownloadFileResult struct {
	Success *SignDownloadFileResponse `thrift:"success,0,optional" frugal:"0,optional,SignDownloadFileResponse"`
}

func NewFileServiceSignDownloadFileResult() *FileServiceSignDownloadFileResult {
	return &FileServiceSignDownloadFileResult{}
}

func (p *FileServiceSignDownloadFileResult) InitDefault() {
}

var FileServiceSignDownloadFileResult_Success_DEFAULT *SignDownloadFileResponse

func (p *FileServiceSignDownloadFileResult) GetSuccess() (v *SignDownloadFileResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return FileServiceSignDownloadFileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FileServiceSignDownloadFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*SignDownloadFileResponse)
}

var fieldIDToName_FileServiceSignDownloadFileResult = map[int16]string{
	0: "success",
}

func (p *FileServiceSignDownloadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FileServiceSignDownloadFileResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FileServiceSignDownloadFileResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FileServiceSignDownloadFileResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSignDownloadFileResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *FileServiceSignDownloadFileResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SignDownloadFile_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FileServiceSignDownloadFileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *FileServiceSignDownloadFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileServiceSignDownloadFileResult(%+v)", *p)

}

func (p *FileServiceSignDownloadFileResult) DeepEqual(ano *FileServiceSignDownloadFileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FileServiceSignDownloadFileResult) Field0DeepEqual(src *SignDownloadFileResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
