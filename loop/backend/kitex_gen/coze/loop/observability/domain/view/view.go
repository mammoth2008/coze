// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package view

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/common"
	"strings"
)

type View struct {
	ID           int64                `thrift:"id,1,required" frugal:"1,required,i64" json:"id" form:"id,required" query:"id,required"`
	EnterpriseID *string              `thrift:"enterprise_id,2,optional" frugal:"2,optional,string" form:"enterprise_id" json:"enterprise_id,omitempty" query:"enterprise_id"`
	WorkspaceID  *int64               `thrift:"workspace_id,3,optional" frugal:"3,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	ViewName     string               `thrift:"view_name,4,required" frugal:"4,required,string" form:"view_name,required" json:"view_name,required" query:"view_name,required"`
	PlatformType *common.PlatformType `thrift:"platform_type,5,optional" frugal:"5,optional,string" form:"platform_type" json:"platform_type,omitempty" query:"platform_type"`
	SpanListType *common.SpanListType `thrift:"spanList_type,6,optional" frugal:"6,optional,string" form:"spanList_type" json:"spanList_type,omitempty" query:"spanList_type"`
	Filters      string               `thrift:"filters,7,required" frugal:"7,required,string" form:"filters,required" json:"filters,required" query:"filters,required"`
	IsSystem     bool                 `thrift:"is_system,8,required" frugal:"8,required,bool" form:"is_system,required" json:"is_system,required" query:"is_system,required"`
}

func NewView() *View {
	return &View{}
}

func (p *View) InitDefault() {
}

func (p *View) GetID() (v int64) {
	if p != nil {
		return p.ID
	}
	return
}

var View_EnterpriseID_DEFAULT string

func (p *View) GetEnterpriseID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEnterpriseID() {
		return View_EnterpriseID_DEFAULT
	}
	return *p.EnterpriseID
}

var View_WorkspaceID_DEFAULT int64

func (p *View) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return View_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *View) GetViewName() (v string) {
	if p != nil {
		return p.ViewName
	}
	return
}

var View_PlatformType_DEFAULT common.PlatformType

func (p *View) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return View_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

var View_SpanListType_DEFAULT common.SpanListType

func (p *View) GetSpanListType() (v common.SpanListType) {
	if p == nil {
		return
	}
	if !p.IsSetSpanListType() {
		return View_SpanListType_DEFAULT
	}
	return *p.SpanListType
}

func (p *View) GetFilters() (v string) {
	if p != nil {
		return p.Filters
	}
	return
}

func (p *View) GetIsSystem() (v bool) {
	if p != nil {
		return p.IsSystem
	}
	return
}
func (p *View) SetID(val int64) {
	p.ID = val
}
func (p *View) SetEnterpriseID(val *string) {
	p.EnterpriseID = val
}
func (p *View) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *View) SetViewName(val string) {
	p.ViewName = val
}
func (p *View) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *View) SetSpanListType(val *common.SpanListType) {
	p.SpanListType = val
}
func (p *View) SetFilters(val string) {
	p.Filters = val
}
func (p *View) SetIsSystem(val bool) {
	p.IsSystem = val
}

var fieldIDToName_View = map[int16]string{
	1: "id",
	2: "enterprise_id",
	3: "workspace_id",
	4: "view_name",
	5: "platform_type",
	6: "spanList_type",
	7: "filters",
	8: "is_system",
}

func (p *View) IsSetEnterpriseID() bool {
	return p.EnterpriseID != nil
}

func (p *View) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *View) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *View) IsSetSpanListType() bool {
	return p.SpanListType != nil
}

func (p *View) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetID bool = false
	var issetViewName bool = false
	var issetFilters bool = false
	var issetIsSystem bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetViewName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilters = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsSystem = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetViewName {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetFilters {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetIsSystem {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_View[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_View[fieldId]))
}

func (p *View) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *View) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnterpriseID = _field
	return nil
}
func (p *View) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *View) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ViewName = _field
	return nil
}
func (p *View) ReadField5(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *View) ReadField6(iprot thrift.TProtocol) error {

	var _field *common.SpanListType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SpanListType = _field
	return nil
}
func (p *View) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Filters = _field
	return nil
}
func (p *View) ReadField8(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsSystem = _field
	return nil
}

func (p *View) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("View"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *View) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *View) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnterpriseID() {
		if err = oprot.WriteFieldBegin("enterprise_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EnterpriseID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *View) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *View) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("view_name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ViewName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *View) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *View) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanListType() {
		if err = oprot.WriteFieldBegin("spanList_type", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SpanListType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *View) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filters", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filters); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *View) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_system", thrift.BOOL, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsSystem); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *View) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("View(%+v)", *p)

}

func (p *View) DeepEqual(ano *View) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EnterpriseID) {
		return false
	}
	if !p.Field3DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.ViewName) {
		return false
	}
	if !p.Field5DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field6DeepEqual(ano.SpanListType) {
		return false
	}
	if !p.Field7DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field8DeepEqual(ano.IsSystem) {
		return false
	}
	return true
}

func (p *View) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *View) Field2DeepEqual(src *string) bool {

	if p.EnterpriseID == src {
		return true
	} else if p.EnterpriseID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EnterpriseID, *src) != 0 {
		return false
	}
	return true
}
func (p *View) Field3DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *View) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ViewName, src) != 0 {
		return false
	}
	return true
}
func (p *View) Field5DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *View) Field6DeepEqual(src *common.SpanListType) bool {

	if p.SpanListType == src {
		return true
	} else if p.SpanListType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SpanListType, *src) != 0 {
		return false
	}
	return true
}
func (p *View) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Filters, src) != 0 {
		return false
	}
	return true
}
func (p *View) Field8DeepEqual(src bool) bool {

	if p.IsSystem != src {
		return false
	}
	return true
}
