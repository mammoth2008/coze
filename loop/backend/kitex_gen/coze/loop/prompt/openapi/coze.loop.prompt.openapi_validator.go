// Code generated by Validator v0.2.6. DO NOT EDIT.

package openapi

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *BatchGetPromptByPromptKeyRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetPromptByPromptKeyResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *PromptResultData) IsValid() error {
	return nil
}
func (p *PromptQuery) IsValid() error {
	return nil
}
func (p *PromptResult_) IsValid() error {
	if p.Query != nil {
		if err := p.Query.IsValid(); err != nil {
			return fmt.Errorf("field Query not valid, %w", err)
		}
	}
	if p.Prompt != nil {
		if err := p.Prompt.IsValid(); err != nil {
			return fmt.Errorf("field Prompt not valid, %w", err)
		}
	}
	return nil
}
func (p *Prompt) IsValid() error {
	if p.PromptTemplate != nil {
		if err := p.PromptTemplate.IsValid(); err != nil {
			return fmt.Errorf("field PromptTemplate not valid, %w", err)
		}
	}
	if p.ToolCallConfig != nil {
		if err := p.ToolCallConfig.IsValid(); err != nil {
			return fmt.Errorf("field ToolCallConfig not valid, %w", err)
		}
	}
	if p.LlmConfig != nil {
		if err := p.LlmConfig.IsValid(); err != nil {
			return fmt.Errorf("field LlmConfig not valid, %w", err)
		}
	}
	return nil
}
func (p *PromptTemplate) IsValid() error {
	return nil
}
func (p *ToolCallConfig) IsValid() error {
	return nil
}
func (p *Message) IsValid() error {
	return nil
}
func (p *VariableDef) IsValid() error {
	return nil
}
func (p *Tool) IsValid() error {
	if p.Function != nil {
		if err := p.Function.IsValid(); err != nil {
			return fmt.Errorf("field Function not valid, %w", err)
		}
	}
	return nil
}
func (p *Function) IsValid() error {
	return nil
}
func (p *LLMConfig) IsValid() error {
	return nil
}
