// Code generated by Kitex v0.13.1. DO NOT EDIT.

package llmruntimeservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	runtime "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/runtime"
	prompt "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Chat": kitex.NewMethodInfo(
		chatHandler,
		newLLMRuntimeServiceChatArgs,
		newLLMRuntimeServiceChatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ChatStream": kitex.NewMethodInfo(
		chatStreamHandler,
		newLLMRuntimeServiceChatStreamArgs,
		newLLMRuntimeServiceChatStreamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
}

var (
	lLMRuntimeServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return lLMRuntimeServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "LLMRuntimeService"
	handlerType := (*prompt.LLMRuntimeService)(nil)
	extra := map[string]interface{}{
		"PackageName": "prompt",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func chatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*runtime.LLMRuntimeServiceChatArgs)
	realResult := result.(*runtime.LLMRuntimeServiceChatResult)
	success, err := handler.(runtime.LLMRuntimeService).Chat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newLLMRuntimeServiceChatArgs() interface{} {
	return runtime.NewLLMRuntimeServiceChatArgs()
}

func newLLMRuntimeServiceChatResult() interface{} {
	return runtime.NewLLMRuntimeServiceChatResult()
}

func chatStreamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, err := streaming.GetServerStreamFromArg(arg)
	if err != nil {
		return err
	}
	stream := streaming.NewServerStreamingServer[runtime.ChatResponse](st)
	req := new(runtime.ChatRequest)
	if err := stream.RecvMsg(ctx, req); err != nil {
		return err
	}
	return handler.(runtime.LLMRuntimeService).ChatStream(ctx, req, stream)
}

func newLLMRuntimeServiceChatStreamArgs() interface{} {
	return runtime.NewLLMRuntimeServiceChatStreamArgs()
}

func newLLMRuntimeServiceChatStreamResult() interface{} {
	return runtime.NewLLMRuntimeServiceChatStreamResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) Chat(ctx context.Context, req *runtime.ChatRequest) (r *runtime.ChatResponse, err error) {
	var _args runtime.LLMRuntimeServiceChatArgs
	_args.Req = req
	var _result runtime.LLMRuntimeServiceChatResult
	if err = p.c.Call(ctx, "Chat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChatStream(ctx context.Context, req *runtime.ChatRequest) (LLMRuntimeService_ChatStreamClient, error) {
	st, err := p.sc.StreamX(ctx, "ChatStream")
	if err != nil {
		return nil, err
	}
	stream := streaming.NewServerStreamingClient[runtime.ChatResponse](st)
	if err := stream.SendMsg(ctx, req); err != nil {
		return nil, err
	}
	if err := stream.CloseSend(ctx); err != nil {
		return nil, err
	}
	return stream, nil
}
