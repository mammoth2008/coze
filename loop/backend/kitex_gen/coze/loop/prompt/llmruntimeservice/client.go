// Code generated by Kitex v0.13.1. DO NOT EDIT.

package llmruntimeservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	streamcall "github.com/cloudwego/kitex/client/callopt/streamcall"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
	runtime "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/runtime"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Chat(ctx context.Context, req *runtime.ChatRequest, callOptions ...callopt.Option) (r *runtime.ChatResponse, err error)
	ChatStream(ctx context.Context, req *runtime.ChatRequest, callOptions ...streamcall.Option) (stream LLMRuntimeService_ChatStreamClient, err error)
}

type LLMRuntimeService_ChatStreamClient streaming.ServerStreamingClient[runtime.ChatResponse]

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.TTHeaderStreaming))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kLLMRuntimeServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kLLMRuntimeServiceClient struct {
	*kClient
}

func (p *kLLMRuntimeServiceClient) Chat(ctx context.Context, req *runtime.ChatRequest, callOptions ...callopt.Option) (r *runtime.ChatResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Chat(ctx, req)
}

func (p *kLLMRuntimeServiceClient) ChatStream(ctx context.Context, req *runtime.ChatRequest, callOptions ...streamcall.Option) (stream LLMRuntimeService_ChatStreamClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.ChatStream(ctx, req)
}
