// Code generated by Validator v0.2.6. DO NOT EDIT.

package manage

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *CreatePromptRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.PromptName == nil {
		return fmt.Errorf("field PromptName not_nil rule failed")
	}
	if len(*p.PromptName) < int(1) {
		return fmt.Errorf("field PromptName min_len rule failed, current value: %d", len(*p.PromptName))
	}
	if p.PromptKey == nil {
		return fmt.Errorf("field PromptKey not_nil rule failed")
	}
	if len(*p.PromptKey) < int(1) {
		return fmt.Errorf("field PromptKey min_len rule failed, current value: %d", len(*p.PromptKey))
	}
	if p.DraftDetail != nil {
		if err := p.DraftDetail.IsValid(); err != nil {
			return fmt.Errorf("field DraftDetail not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreatePromptResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ClonePromptRequest) IsValid() error {
	if p.PromptID == nil {
		return fmt.Errorf("field PromptID not_nil rule failed")
	}
	if *p.PromptID <= int64(0) {
		return fmt.Errorf("field PromptID gt rule failed, current value: %v", *p.PromptID)
	}
	if p.CommitVersion == nil {
		return fmt.Errorf("field CommitVersion not_nil rule failed")
	}
	if len(*p.CommitVersion) < int(1) {
		return fmt.Errorf("field CommitVersion min_len rule failed, current value: %d", len(*p.CommitVersion))
	}
	if p.ClonedPromptName == nil {
		return fmt.Errorf("field ClonedPromptName not_nil rule failed")
	}
	if len(*p.ClonedPromptName) < int(1) {
		return fmt.Errorf("field ClonedPromptName min_len rule failed, current value: %d", len(*p.ClonedPromptName))
	}
	if p.ClonedPromptKey == nil {
		return fmt.Errorf("field ClonedPromptKey not_nil rule failed")
	}
	if len(*p.ClonedPromptKey) < int(1) {
		return fmt.Errorf("field ClonedPromptKey min_len rule failed, current value: %d", len(*p.ClonedPromptKey))
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ClonePromptResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *DeletePromptRequest) IsValid() error {
	if p.PromptID == nil {
		return fmt.Errorf("field PromptID not_nil rule failed")
	}
	if *p.PromptID <= int64(0) {
		return fmt.Errorf("field PromptID gt rule failed, current value: %v", *p.PromptID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *DeletePromptResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetPromptRequest) IsValid() error {
	if p.PromptID == nil {
		return fmt.Errorf("field PromptID not_nil rule failed")
	}
	if *p.PromptID <= int64(0) {
		return fmt.Errorf("field PromptID gt rule failed, current value: %v", *p.PromptID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetPromptResponse) IsValid() error {
	if p.Prompt != nil {
		if err := p.Prompt.IsValid(); err != nil {
			return fmt.Errorf("field Prompt not valid, %w", err)
		}
	}
	if p.DefaultConfig != nil {
		if err := p.DefaultConfig.IsValid(); err != nil {
			return fmt.Errorf("field DefaultConfig not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *PromptQuery) IsValid() error {
	if p.PromptID == nil {
		return fmt.Errorf("field PromptID not_nil rule failed")
	}
	if *p.PromptID <= int64(0) {
		return fmt.Errorf("field PromptID gt rule failed, current value: %v", *p.PromptID)
	}
	return nil
}
func (p *BatchGetPromptRequest) IsValid() error {
	if len(p.Queries) < int(1) {
		return fmt.Errorf("field Queries MinLen rule failed, current value: %v", p.Queries)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetPromptResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *PromptResult_) IsValid() error {
	if p.Query != nil {
		if err := p.Query.IsValid(); err != nil {
			return fmt.Errorf("field Query not valid, %w", err)
		}
	}
	if p.Prompt != nil {
		if err := p.Prompt.IsValid(); err != nil {
			return fmt.Errorf("field Prompt not valid, %w", err)
		}
	}
	return nil
}
func (p *ListPromptRequest) IsValid() error {
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.PageNum == nil {
		return fmt.Errorf("field PageNum not_nil rule failed")
	}
	if *p.PageNum <= int32(0) {
		return fmt.Errorf("field PageNum gt rule failed, current value: %v", *p.PageNum)
	}
	if p.PageSize == nil {
		return fmt.Errorf("field PageSize not_nil rule failed")
	}
	if *p.PageSize <= int32(0) {
		return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
	}
	if *p.PageSize > int32(100) {
		return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListPromptResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdatePromptRequest) IsValid() error {
	if p.PromptName == nil {
		return fmt.Errorf("field PromptName not_nil rule failed")
	}
	if len(*p.PromptName) < int(1) {
		return fmt.Errorf("field PromptName min_len rule failed, current value: %d", len(*p.PromptName))
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdatePromptResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *SaveDraftRequest) IsValid() error {
	if p.PromptID == nil {
		return fmt.Errorf("field PromptID not_nil rule failed")
	}
	if *p.PromptID <= int64(0) {
		return fmt.Errorf("field PromptID gt rule failed, current value: %v", *p.PromptID)
	}
	if p.PromptDraft == nil {
		return fmt.Errorf("field PromptDraft not_nil rule failed")
	}
	if err := p.PromptDraft.IsValid(); err != nil {
		return fmt.Errorf("field PromptDraft not valid, %w", err)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *SaveDraftResponse) IsValid() error {
	if p.DraftInfo != nil {
		if err := p.DraftInfo.IsValid(); err != nil {
			return fmt.Errorf("field DraftInfo not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CommitDraftRequest) IsValid() error {
	if p.PromptID == nil {
		return fmt.Errorf("field PromptID not_nil rule failed")
	}
	if *p.PromptID <= int64(0) {
		return fmt.Errorf("field PromptID gt rule failed, current value: %v", *p.PromptID)
	}
	if p.CommitVersion == nil {
		return fmt.Errorf("field CommitVersion not_nil rule failed")
	}
	if len(*p.CommitVersion) < int(1) {
		return fmt.Errorf("field CommitVersion min_len rule failed, current value: %d", len(*p.CommitVersion))
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CommitDraftResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListCommitRequest) IsValid() error {
	if p.PromptID == nil {
		return fmt.Errorf("field PromptID not_nil rule failed")
	}
	if *p.PromptID <= int64(0) {
		return fmt.Errorf("field PromptID gt rule failed, current value: %v", *p.PromptID)
	}
	if p.PageSize == nil {
		return fmt.Errorf("field PageSize not_nil rule failed")
	}
	if *p.PageSize <= int32(0) {
		return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListCommitResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *RevertDraftFromCommitRequest) IsValid() error {
	if p.PromptID == nil {
		return fmt.Errorf("field PromptID not_nil rule failed")
	}
	if *p.PromptID <= int64(0) {
		return fmt.Errorf("field PromptID gt rule failed, current value: %v", *p.PromptID)
	}
	if p.CommitVersionRevertingFrom == nil {
		return fmt.Errorf("field CommitVersionRevertingFrom not_nil rule failed")
	}
	if len(*p.CommitVersionRevertingFrom) < int(1) {
		return fmt.Errorf("field CommitVersionRevertingFrom min_len rule failed, current value: %d", len(*p.CommitVersionRevertingFrom))
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *RevertDraftFromCommitResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
