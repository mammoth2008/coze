// Code generated by Kitex v0.13.1. DO NOT EDIT.

package promptopenapiservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	prompt "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt"
	openapi "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/openapi"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"BatchGetPromptByPromptKey": kitex.NewMethodInfo(
		batchGetPromptByPromptKeyHandler,
		newPromptOpenAPIServiceBatchGetPromptByPromptKeyArgs,
		newPromptOpenAPIServiceBatchGetPromptByPromptKeyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	promptOpenAPIServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return promptOpenAPIServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "PromptOpenAPIService"
	handlerType := (*prompt.PromptOpenAPIService)(nil)
	extra := map[string]interface{}{
		"PackageName": "prompt",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func batchGetPromptByPromptKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs)
	realResult := result.(*openapi.PromptOpenAPIServiceBatchGetPromptByPromptKeyResult)
	success, err := handler.(openapi.PromptOpenAPIService).BatchGetPromptByPromptKey(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptOpenAPIServiceBatchGetPromptByPromptKeyArgs() interface{} {
	return openapi.NewPromptOpenAPIServiceBatchGetPromptByPromptKeyArgs()
}

func newPromptOpenAPIServiceBatchGetPromptByPromptKeyResult() interface{} {
	return openapi.NewPromptOpenAPIServiceBatchGetPromptByPromptKeyResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) BatchGetPromptByPromptKey(ctx context.Context, req *openapi.BatchGetPromptByPromptKeyRequest) (r *openapi.BatchGetPromptByPromptKeyResponse, err error) {
	var _args openapi.PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs
	_args.Req = req
	var _result openapi.PromptOpenAPIServiceBatchGetPromptByPromptKeyResult
	if err = p.c.Call(ctx, "BatchGetPromptByPromptKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
