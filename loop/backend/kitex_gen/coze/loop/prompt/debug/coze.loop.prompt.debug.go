// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package debug

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/domain/prompt"
	"strings"
)

type DebugStreamingRequest struct {
	Prompt          *prompt.Prompt        `thrift:"prompt,1,optional" frugal:"1,optional,prompt.Prompt" form:"prompt" json:"prompt,omitempty" query:"prompt"`
	Messages        []*prompt.Message     `thrift:"messages,2,optional" frugal:"2,optional,list<prompt.Message>" form:"messages" json:"messages,omitempty" query:"messages"`
	VariableVals    []*prompt.VariableVal `thrift:"variable_vals,3,optional" frugal:"3,optional,list<prompt.VariableVal>" form:"variable_vals" json:"variable_vals,omitempty" query:"variable_vals"`
	MockTools       []*prompt.MockTool    `thrift:"mock_tools,4,optional" frugal:"4,optional,list<prompt.MockTool>" form:"mock_tools" json:"mock_tools,omitempty" query:"mock_tools"`
	SingleStepDebug *bool                 `thrift:"single_step_debug,101,optional" frugal:"101,optional,bool" form:"single_step_debug" json:"single_step_debug,omitempty" query:"single_step_debug"`
	DebugTraceKey   *string               `thrift:"debug_trace_key,102,optional" frugal:"102,optional,string" form:"debug_trace_key" json:"debug_trace_key,omitempty" query:"debug_trace_key"`
	Base            *base.Base            `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDebugStreamingRequest() *DebugStreamingRequest {
	return &DebugStreamingRequest{}
}

func (p *DebugStreamingRequest) InitDefault() {
}

var DebugStreamingRequest_Prompt_DEFAULT *prompt.Prompt

func (p *DebugStreamingRequest) GetPrompt() (v *prompt.Prompt) {
	if p == nil {
		return
	}
	if !p.IsSetPrompt() {
		return DebugStreamingRequest_Prompt_DEFAULT
	}
	return p.Prompt
}

var DebugStreamingRequest_Messages_DEFAULT []*prompt.Message

func (p *DebugStreamingRequest) GetMessages() (v []*prompt.Message) {
	if p == nil {
		return
	}
	if !p.IsSetMessages() {
		return DebugStreamingRequest_Messages_DEFAULT
	}
	return p.Messages
}

var DebugStreamingRequest_VariableVals_DEFAULT []*prompt.VariableVal

func (p *DebugStreamingRequest) GetVariableVals() (v []*prompt.VariableVal) {
	if p == nil {
		return
	}
	if !p.IsSetVariableVals() {
		return DebugStreamingRequest_VariableVals_DEFAULT
	}
	return p.VariableVals
}

var DebugStreamingRequest_MockTools_DEFAULT []*prompt.MockTool

func (p *DebugStreamingRequest) GetMockTools() (v []*prompt.MockTool) {
	if p == nil {
		return
	}
	if !p.IsSetMockTools() {
		return DebugStreamingRequest_MockTools_DEFAULT
	}
	return p.MockTools
}

var DebugStreamingRequest_SingleStepDebug_DEFAULT bool

func (p *DebugStreamingRequest) GetSingleStepDebug() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetSingleStepDebug() {
		return DebugStreamingRequest_SingleStepDebug_DEFAULT
	}
	return *p.SingleStepDebug
}

var DebugStreamingRequest_DebugTraceKey_DEFAULT string

func (p *DebugStreamingRequest) GetDebugTraceKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDebugTraceKey() {
		return DebugStreamingRequest_DebugTraceKey_DEFAULT
	}
	return *p.DebugTraceKey
}

var DebugStreamingRequest_Base_DEFAULT *base.Base

func (p *DebugStreamingRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DebugStreamingRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DebugStreamingRequest) SetPrompt(val *prompt.Prompt) {
	p.Prompt = val
}
func (p *DebugStreamingRequest) SetMessages(val []*prompt.Message) {
	p.Messages = val
}
func (p *DebugStreamingRequest) SetVariableVals(val []*prompt.VariableVal) {
	p.VariableVals = val
}
func (p *DebugStreamingRequest) SetMockTools(val []*prompt.MockTool) {
	p.MockTools = val
}
func (p *DebugStreamingRequest) SetSingleStepDebug(val *bool) {
	p.SingleStepDebug = val
}
func (p *DebugStreamingRequest) SetDebugTraceKey(val *string) {
	p.DebugTraceKey = val
}
func (p *DebugStreamingRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DebugStreamingRequest = map[int16]string{
	1:   "prompt",
	2:   "messages",
	3:   "variable_vals",
	4:   "mock_tools",
	101: "single_step_debug",
	102: "debug_trace_key",
	255: "Base",
}

func (p *DebugStreamingRequest) IsSetPrompt() bool {
	return p.Prompt != nil
}

func (p *DebugStreamingRequest) IsSetMessages() bool {
	return p.Messages != nil
}

func (p *DebugStreamingRequest) IsSetVariableVals() bool {
	return p.VariableVals != nil
}

func (p *DebugStreamingRequest) IsSetMockTools() bool {
	return p.MockTools != nil
}

func (p *DebugStreamingRequest) IsSetSingleStepDebug() bool {
	return p.SingleStepDebug != nil
}

func (p *DebugStreamingRequest) IsSetDebugTraceKey() bool {
	return p.DebugTraceKey != nil
}

func (p *DebugStreamingRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DebugStreamingRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugStreamingRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DebugStreamingRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := prompt.NewPrompt()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Prompt = _field
	return nil
}
func (p *DebugStreamingRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*prompt.Message, 0, size)
	values := make([]prompt.Message, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Messages = _field
	return nil
}
func (p *DebugStreamingRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*prompt.VariableVal, 0, size)
	values := make([]prompt.VariableVal, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.VariableVals = _field
	return nil
}
func (p *DebugStreamingRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*prompt.MockTool, 0, size)
	values := make([]prompt.MockTool, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MockTools = _field
	return nil
}
func (p *DebugStreamingRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SingleStepDebug = _field
	return nil
}
func (p *DebugStreamingRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DebugTraceKey = _field
	return nil
}
func (p *DebugStreamingRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DebugStreamingRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugStreamingRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugStreamingRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrompt() {
		if err = oprot.WriteFieldBegin("prompt", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Prompt.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DebugStreamingRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessages() {
		if err = oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
			return err
		}
		for _, v := range p.Messages {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DebugStreamingRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVariableVals() {
		if err = oprot.WriteFieldBegin("variable_vals", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VariableVals)); err != nil {
			return err
		}
		for _, v := range p.VariableVals {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DebugStreamingRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMockTools() {
		if err = oprot.WriteFieldBegin("mock_tools", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MockTools)); err != nil {
			return err
		}
		for _, v := range p.MockTools {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DebugStreamingRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetSingleStepDebug() {
		if err = oprot.WriteFieldBegin("single_step_debug", thrift.BOOL, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SingleStepDebug); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *DebugStreamingRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugTraceKey() {
		if err = oprot.WriteFieldBegin("debug_trace_key", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DebugTraceKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *DebugStreamingRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DebugStreamingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugStreamingRequest(%+v)", *p)

}

func (p *DebugStreamingRequest) DeepEqual(ano *DebugStreamingRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Prompt) {
		return false
	}
	if !p.Field2DeepEqual(ano.Messages) {
		return false
	}
	if !p.Field3DeepEqual(ano.VariableVals) {
		return false
	}
	if !p.Field4DeepEqual(ano.MockTools) {
		return false
	}
	if !p.Field101DeepEqual(ano.SingleStepDebug) {
		return false
	}
	if !p.Field102DeepEqual(ano.DebugTraceKey) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DebugStreamingRequest) Field1DeepEqual(src *prompt.Prompt) bool {

	if !p.Prompt.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DebugStreamingRequest) Field2DeepEqual(src []*prompt.Message) bool {

	if len(p.Messages) != len(src) {
		return false
	}
	for i, v := range p.Messages {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DebugStreamingRequest) Field3DeepEqual(src []*prompt.VariableVal) bool {

	if len(p.VariableVals) != len(src) {
		return false
	}
	for i, v := range p.VariableVals {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DebugStreamingRequest) Field4DeepEqual(src []*prompt.MockTool) bool {

	if len(p.MockTools) != len(src) {
		return false
	}
	for i, v := range p.MockTools {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DebugStreamingRequest) Field101DeepEqual(src *bool) bool {

	if p.SingleStepDebug == src {
		return true
	} else if p.SingleStepDebug == nil || src == nil {
		return false
	}
	if *p.SingleStepDebug != *src {
		return false
	}
	return true
}
func (p *DebugStreamingRequest) Field102DeepEqual(src *string) bool {

	if p.DebugTraceKey == src {
		return true
	} else if p.DebugTraceKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DebugTraceKey, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugStreamingRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DebugStreamingResponse struct {
	Delta         *prompt.Message    `thrift:"delta,1,optional" frugal:"1,optional,prompt.Message" form:"delta" json:"delta,omitempty" query:"delta"`
	FinishReason  *string            `thrift:"finish_reason,2,optional" frugal:"2,optional,string" form:"finish_reason" json:"finish_reason,omitempty" query:"finish_reason"`
	Usage         *prompt.TokenUsage `thrift:"usage,3,optional" frugal:"3,optional,prompt.TokenUsage" form:"usage" json:"usage,omitempty" query:"usage"`
	DebugID       *int64             `thrift:"debug_id,4,optional" frugal:"4,optional,i64" json:"debug_id" form:"debug_id" query:"debug_id"`
	DebugTraceKey *string            `thrift:"debug_trace_key,5,optional" frugal:"5,optional,string" form:"debug_trace_key" json:"debug_trace_key,omitempty" query:"debug_trace_key"`
	BaseResp      *base.BaseResp     `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewDebugStreamingResponse() *DebugStreamingResponse {
	return &DebugStreamingResponse{}
}

func (p *DebugStreamingResponse) InitDefault() {
}

var DebugStreamingResponse_Delta_DEFAULT *prompt.Message

func (p *DebugStreamingResponse) GetDelta() (v *prompt.Message) {
	if p == nil {
		return
	}
	if !p.IsSetDelta() {
		return DebugStreamingResponse_Delta_DEFAULT
	}
	return p.Delta
}

var DebugStreamingResponse_FinishReason_DEFAULT string

func (p *DebugStreamingResponse) GetFinishReason() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFinishReason() {
		return DebugStreamingResponse_FinishReason_DEFAULT
	}
	return *p.FinishReason
}

var DebugStreamingResponse_Usage_DEFAULT *prompt.TokenUsage

func (p *DebugStreamingResponse) GetUsage() (v *prompt.TokenUsage) {
	if p == nil {
		return
	}
	if !p.IsSetUsage() {
		return DebugStreamingResponse_Usage_DEFAULT
	}
	return p.Usage
}

var DebugStreamingResponse_DebugID_DEFAULT int64

func (p *DebugStreamingResponse) GetDebugID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetDebugID() {
		return DebugStreamingResponse_DebugID_DEFAULT
	}
	return *p.DebugID
}

var DebugStreamingResponse_DebugTraceKey_DEFAULT string

func (p *DebugStreamingResponse) GetDebugTraceKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDebugTraceKey() {
		return DebugStreamingResponse_DebugTraceKey_DEFAULT
	}
	return *p.DebugTraceKey
}

var DebugStreamingResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DebugStreamingResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DebugStreamingResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DebugStreamingResponse) SetDelta(val *prompt.Message) {
	p.Delta = val
}
func (p *DebugStreamingResponse) SetFinishReason(val *string) {
	p.FinishReason = val
}
func (p *DebugStreamingResponse) SetUsage(val *prompt.TokenUsage) {
	p.Usage = val
}
func (p *DebugStreamingResponse) SetDebugID(val *int64) {
	p.DebugID = val
}
func (p *DebugStreamingResponse) SetDebugTraceKey(val *string) {
	p.DebugTraceKey = val
}
func (p *DebugStreamingResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DebugStreamingResponse = map[int16]string{
	1:   "delta",
	2:   "finish_reason",
	3:   "usage",
	4:   "debug_id",
	5:   "debug_trace_key",
	255: "BaseResp",
}

func (p *DebugStreamingResponse) IsSetDelta() bool {
	return p.Delta != nil
}

func (p *DebugStreamingResponse) IsSetFinishReason() bool {
	return p.FinishReason != nil
}

func (p *DebugStreamingResponse) IsSetUsage() bool {
	return p.Usage != nil
}

func (p *DebugStreamingResponse) IsSetDebugID() bool {
	return p.DebugID != nil
}

func (p *DebugStreamingResponse) IsSetDebugTraceKey() bool {
	return p.DebugTraceKey != nil
}

func (p *DebugStreamingResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DebugStreamingResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugStreamingResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DebugStreamingResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := prompt.NewMessage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Delta = _field
	return nil
}
func (p *DebugStreamingResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FinishReason = _field
	return nil
}
func (p *DebugStreamingResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := prompt.NewTokenUsage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Usage = _field
	return nil
}
func (p *DebugStreamingResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DebugID = _field
	return nil
}
func (p *DebugStreamingResponse) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DebugTraceKey = _field
	return nil
}
func (p *DebugStreamingResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DebugStreamingResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugStreamingResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugStreamingResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDelta() {
		if err = oprot.WriteFieldBegin("delta", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Delta.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DebugStreamingResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFinishReason() {
		if err = oprot.WriteFieldBegin("finish_reason", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FinishReason); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DebugStreamingResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsage() {
		if err = oprot.WriteFieldBegin("usage", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Usage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DebugStreamingResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugID() {
		if err = oprot.WriteFieldBegin("debug_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DebugID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DebugStreamingResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugTraceKey() {
		if err = oprot.WriteFieldBegin("debug_trace_key", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DebugTraceKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *DebugStreamingResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DebugStreamingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugStreamingResponse(%+v)", *p)

}

func (p *DebugStreamingResponse) DeepEqual(ano *DebugStreamingResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Delta) {
		return false
	}
	if !p.Field2DeepEqual(ano.FinishReason) {
		return false
	}
	if !p.Field3DeepEqual(ano.Usage) {
		return false
	}
	if !p.Field4DeepEqual(ano.DebugID) {
		return false
	}
	if !p.Field5DeepEqual(ano.DebugTraceKey) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DebugStreamingResponse) Field1DeepEqual(src *prompt.Message) bool {

	if !p.Delta.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DebugStreamingResponse) Field2DeepEqual(src *string) bool {

	if p.FinishReason == src {
		return true
	} else if p.FinishReason == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FinishReason, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugStreamingResponse) Field3DeepEqual(src *prompt.TokenUsage) bool {

	if !p.Usage.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DebugStreamingResponse) Field4DeepEqual(src *int64) bool {

	if p.DebugID == src {
		return true
	} else if p.DebugID == nil || src == nil {
		return false
	}
	if *p.DebugID != *src {
		return false
	}
	return true
}
func (p *DebugStreamingResponse) Field5DeepEqual(src *string) bool {

	if p.DebugTraceKey == src {
		return true
	} else if p.DebugTraceKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DebugTraceKey, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugStreamingResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type SaveDebugContextRequest struct {
	PromptID     *int64               `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" path:"prompt_id" `
	WorkspaceID  *int64               `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	DebugContext *prompt.DebugContext `thrift:"debug_context,3,optional" frugal:"3,optional,prompt.DebugContext" form:"debug_context" json:"debug_context,omitempty" query:"debug_context"`
	Base         *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewSaveDebugContextRequest() *SaveDebugContextRequest {
	return &SaveDebugContextRequest{}
}

func (p *SaveDebugContextRequest) InitDefault() {
}

var SaveDebugContextRequest_PromptID_DEFAULT int64

func (p *SaveDebugContextRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return SaveDebugContextRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var SaveDebugContextRequest_WorkspaceID_DEFAULT int64

func (p *SaveDebugContextRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return SaveDebugContextRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var SaveDebugContextRequest_DebugContext_DEFAULT *prompt.DebugContext

func (p *SaveDebugContextRequest) GetDebugContext() (v *prompt.DebugContext) {
	if p == nil {
		return
	}
	if !p.IsSetDebugContext() {
		return SaveDebugContextRequest_DebugContext_DEFAULT
	}
	return p.DebugContext
}

var SaveDebugContextRequest_Base_DEFAULT *base.Base

func (p *SaveDebugContextRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return SaveDebugContextRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SaveDebugContextRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *SaveDebugContextRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *SaveDebugContextRequest) SetDebugContext(val *prompt.DebugContext) {
	p.DebugContext = val
}
func (p *SaveDebugContextRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_SaveDebugContextRequest = map[int16]string{
	1:   "prompt_id",
	2:   "workspace_id",
	3:   "debug_context",
	255: "Base",
}

func (p *SaveDebugContextRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *SaveDebugContextRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *SaveDebugContextRequest) IsSetDebugContext() bool {
	return p.DebugContext != nil
}

func (p *SaveDebugContextRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SaveDebugContextRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SaveDebugContextRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SaveDebugContextRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *SaveDebugContextRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *SaveDebugContextRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := prompt.NewDebugContext()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DebugContext = _field
	return nil
}
func (p *SaveDebugContextRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SaveDebugContextRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveDebugContextRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SaveDebugContextRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SaveDebugContextRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SaveDebugContextRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugContext() {
		if err = oprot.WriteFieldBegin("debug_context", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DebugContext.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SaveDebugContextRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SaveDebugContextRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveDebugContextRequest(%+v)", *p)

}

func (p *SaveDebugContextRequest) DeepEqual(ano *SaveDebugContextRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.DebugContext) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SaveDebugContextRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *SaveDebugContextRequest) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *SaveDebugContextRequest) Field3DeepEqual(src *prompt.DebugContext) bool {

	if !p.DebugContext.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SaveDebugContextRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SaveDebugContextResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewSaveDebugContextResponse() *SaveDebugContextResponse {
	return &SaveDebugContextResponse{}
}

func (p *SaveDebugContextResponse) InitDefault() {
}

var SaveDebugContextResponse_BaseResp_DEFAULT *base.BaseResp

func (p *SaveDebugContextResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return SaveDebugContextResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SaveDebugContextResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SaveDebugContextResponse = map[int16]string{
	255: "BaseResp",
}

func (p *SaveDebugContextResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SaveDebugContextResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SaveDebugContextResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SaveDebugContextResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SaveDebugContextResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveDebugContextResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SaveDebugContextResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SaveDebugContextResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveDebugContextResponse(%+v)", *p)

}

func (p *SaveDebugContextResponse) DeepEqual(ano *SaveDebugContextResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SaveDebugContextResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetDebugContextRequest struct {
	PromptID    *int64     `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" path:"prompt_id" `
	WorkspaceID *int64     `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" query:"workspace_id" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetDebugContextRequest() *GetDebugContextRequest {
	return &GetDebugContextRequest{}
}

func (p *GetDebugContextRequest) InitDefault() {
}

var GetDebugContextRequest_PromptID_DEFAULT int64

func (p *GetDebugContextRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return GetDebugContextRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var GetDebugContextRequest_WorkspaceID_DEFAULT int64

func (p *GetDebugContextRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetDebugContextRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var GetDebugContextRequest_Base_DEFAULT *base.Base

func (p *GetDebugContextRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetDebugContextRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetDebugContextRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *GetDebugContextRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetDebugContextRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetDebugContextRequest = map[int16]string{
	1:   "prompt_id",
	2:   "workspace_id",
	255: "Base",
}

func (p *GetDebugContextRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *GetDebugContextRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetDebugContextRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDebugContextRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDebugContextRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDebugContextRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *GetDebugContextRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetDebugContextRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetDebugContextRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDebugContextRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDebugContextRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDebugContextRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetDebugContextRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDebugContextRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDebugContextRequest(%+v)", *p)

}

func (p *GetDebugContextRequest) DeepEqual(ano *GetDebugContextRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetDebugContextRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *GetDebugContextRequest) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetDebugContextRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetDebugContextResponse struct {
	DebugContext *prompt.DebugContext `thrift:"debug_context,1,optional" frugal:"1,optional,prompt.DebugContext" form:"debug_context" json:"debug_context,omitempty" query:"debug_context"`
	BaseResp     *base.BaseResp       `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewGetDebugContextResponse() *GetDebugContextResponse {
	return &GetDebugContextResponse{}
}

func (p *GetDebugContextResponse) InitDefault() {
}

var GetDebugContextResponse_DebugContext_DEFAULT *prompt.DebugContext

func (p *GetDebugContextResponse) GetDebugContext() (v *prompt.DebugContext) {
	if p == nil {
		return
	}
	if !p.IsSetDebugContext() {
		return GetDebugContextResponse_DebugContext_DEFAULT
	}
	return p.DebugContext
}

var GetDebugContextResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetDebugContextResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetDebugContextResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetDebugContextResponse) SetDebugContext(val *prompt.DebugContext) {
	p.DebugContext = val
}
func (p *GetDebugContextResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetDebugContextResponse = map[int16]string{
	1:   "debug_context",
	255: "BaseResp",
}

func (p *GetDebugContextResponse) IsSetDebugContext() bool {
	return p.DebugContext != nil
}

func (p *GetDebugContextResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetDebugContextResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDebugContextResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDebugContextResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := prompt.NewDebugContext()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DebugContext = _field
	return nil
}
func (p *GetDebugContextResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetDebugContextResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDebugContextResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDebugContextResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugContext() {
		if err = oprot.WriteFieldBegin("debug_context", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DebugContext.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDebugContextResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDebugContextResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDebugContextResponse(%+v)", *p)

}

func (p *GetDebugContextResponse) DeepEqual(ano *GetDebugContextResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DebugContext) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetDebugContextResponse) Field1DeepEqual(src *prompt.DebugContext) bool {

	if !p.DebugContext.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDebugContextResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListDebugHistoryRequest struct {
	PromptID    *int64     `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" path:"prompt_id" `
	WorkspaceID *int64     `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" query:"workspace_id" `
	DaysLimit   *int32     `thrift:"days_limit,3,optional" frugal:"3,optional,i32" json:"days_limit,omitempty" query:"days_limit"`
	PageSize    *int32     `thrift:"page_size,4,optional" frugal:"4,optional,i32" json:"page_size,omitempty" query:"page_size"`
	PageToken   *string    `thrift:"page_token,5,optional" frugal:"5,optional,string" json:"page_token,omitempty" query:"page_token"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListDebugHistoryRequest() *ListDebugHistoryRequest {
	return &ListDebugHistoryRequest{}
}

func (p *ListDebugHistoryRequest) InitDefault() {
}

var ListDebugHistoryRequest_PromptID_DEFAULT int64

func (p *ListDebugHistoryRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return ListDebugHistoryRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var ListDebugHistoryRequest_WorkspaceID_DEFAULT int64

func (p *ListDebugHistoryRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListDebugHistoryRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var ListDebugHistoryRequest_DaysLimit_DEFAULT int32

func (p *ListDebugHistoryRequest) GetDaysLimit() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetDaysLimit() {
		return ListDebugHistoryRequest_DaysLimit_DEFAULT
	}
	return *p.DaysLimit
}

var ListDebugHistoryRequest_PageSize_DEFAULT int32

func (p *ListDebugHistoryRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListDebugHistoryRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListDebugHistoryRequest_PageToken_DEFAULT string

func (p *ListDebugHistoryRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListDebugHistoryRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListDebugHistoryRequest_Base_DEFAULT *base.Base

func (p *ListDebugHistoryRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListDebugHistoryRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListDebugHistoryRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *ListDebugHistoryRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListDebugHistoryRequest) SetDaysLimit(val *int32) {
	p.DaysLimit = val
}
func (p *ListDebugHistoryRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListDebugHistoryRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListDebugHistoryRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListDebugHistoryRequest = map[int16]string{
	1:   "prompt_id",
	2:   "workspace_id",
	3:   "days_limit",
	4:   "page_size",
	5:   "page_token",
	255: "Base",
}

func (p *ListDebugHistoryRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *ListDebugHistoryRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListDebugHistoryRequest) IsSetDaysLimit() bool {
	return p.DaysLimit != nil
}

func (p *ListDebugHistoryRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListDebugHistoryRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListDebugHistoryRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListDebugHistoryRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDebugHistoryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListDebugHistoryRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *ListDebugHistoryRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListDebugHistoryRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DaysLimit = _field
	return nil
}
func (p *ListDebugHistoryRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListDebugHistoryRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListDebugHistoryRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListDebugHistoryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDebugHistoryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDebugHistoryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDebugHistoryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListDebugHistoryRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDaysLimit() {
		if err = oprot.WriteFieldBegin("days_limit", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.DaysLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListDebugHistoryRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ListDebugHistoryRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ListDebugHistoryRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDebugHistoryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDebugHistoryRequest(%+v)", *p)

}

func (p *ListDebugHistoryRequest) DeepEqual(ano *ListDebugHistoryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.DaysLimit) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field5DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListDebugHistoryRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *ListDebugHistoryRequest) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListDebugHistoryRequest) Field3DeepEqual(src *int32) bool {

	if p.DaysLimit == src {
		return true
	} else if p.DaysLimit == nil || src == nil {
		return false
	}
	if *p.DaysLimit != *src {
		return false
	}
	return true
}
func (p *ListDebugHistoryRequest) Field4DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListDebugHistoryRequest) Field5DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDebugHistoryRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListDebugHistoryResponse struct {
	DebugHistory  []*prompt.DebugLog `thrift:"debug_history,1,optional" frugal:"1,optional,list<prompt.DebugLog>" form:"debug_history" json:"debug_history,omitempty" query:"debug_history"`
	HasMore       *bool              `thrift:"has_more,2,optional" frugal:"2,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	NextPageToken *string            `thrift:"next_page_token,3,optional" frugal:"3,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	BaseResp      *base.BaseResp     `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewListDebugHistoryResponse() *ListDebugHistoryResponse {
	return &ListDebugHistoryResponse{}
}

func (p *ListDebugHistoryResponse) InitDefault() {
}

var ListDebugHistoryResponse_DebugHistory_DEFAULT []*prompt.DebugLog

func (p *ListDebugHistoryResponse) GetDebugHistory() (v []*prompt.DebugLog) {
	if p == nil {
		return
	}
	if !p.IsSetDebugHistory() {
		return ListDebugHistoryResponse_DebugHistory_DEFAULT
	}
	return p.DebugHistory
}

var ListDebugHistoryResponse_HasMore_DEFAULT bool

func (p *ListDebugHistoryResponse) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return ListDebugHistoryResponse_HasMore_DEFAULT
	}
	return *p.HasMore
}

var ListDebugHistoryResponse_NextPageToken_DEFAULT string

func (p *ListDebugHistoryResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListDebugHistoryResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListDebugHistoryResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListDebugHistoryResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListDebugHistoryResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListDebugHistoryResponse) SetDebugHistory(val []*prompt.DebugLog) {
	p.DebugHistory = val
}
func (p *ListDebugHistoryResponse) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *ListDebugHistoryResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListDebugHistoryResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListDebugHistoryResponse = map[int16]string{
	1:   "debug_history",
	2:   "has_more",
	3:   "next_page_token",
	255: "BaseResp",
}

func (p *ListDebugHistoryResponse) IsSetDebugHistory() bool {
	return p.DebugHistory != nil
}

func (p *ListDebugHistoryResponse) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *ListDebugHistoryResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListDebugHistoryResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListDebugHistoryResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDebugHistoryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListDebugHistoryResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*prompt.DebugLog, 0, size)
	values := make([]prompt.DebugLog, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DebugHistory = _field
	return nil
}
func (p *ListDebugHistoryResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *ListDebugHistoryResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListDebugHistoryResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListDebugHistoryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDebugHistoryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDebugHistoryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugHistory() {
		if err = oprot.WriteFieldBegin("debug_history", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DebugHistory)); err != nil {
			return err
		}
		for _, v := range p.DebugHistory {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListDebugHistoryResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListDebugHistoryResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListDebugHistoryResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListDebugHistoryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDebugHistoryResponse(%+v)", *p)

}

func (p *ListDebugHistoryResponse) DeepEqual(ano *ListDebugHistoryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DebugHistory) {
		return false
	}
	if !p.Field2DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field3DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListDebugHistoryResponse) Field1DeepEqual(src []*prompt.DebugLog) bool {

	if len(p.DebugHistory) != len(src) {
		return false
	}
	for i, v := range p.DebugHistory {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListDebugHistoryResponse) Field2DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *ListDebugHistoryResponse) Field3DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListDebugHistoryResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type PromptDebugService interface {
	DebugStreaming(ctx context.Context, req *DebugStreamingRequest, stream PromptDebugService_DebugStreamingServer) (err error)

	SaveDebugContext(ctx context.Context, req *SaveDebugContextRequest) (r *SaveDebugContextResponse, err error)

	GetDebugContext(ctx context.Context, req *GetDebugContextRequest) (r *GetDebugContextResponse, err error)

	ListDebugHistory(ctx context.Context, req *ListDebugHistoryRequest) (r *ListDebugHistoryResponse, err error)
}

type PromptDebugServiceClient struct {
	c thrift.TClient
}

func NewPromptDebugServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PromptDebugServiceClient {
	return &PromptDebugServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewPromptDebugServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PromptDebugServiceClient {
	return &PromptDebugServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewPromptDebugServiceClient(c thrift.TClient) *PromptDebugServiceClient {
	return &PromptDebugServiceClient{
		c: c,
	}
}

func (p *PromptDebugServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *PromptDebugServiceClient) DebugStreaming(ctx context.Context, req *DebugStreamingRequest, stream PromptDebugService_DebugStreamingServer) (err error) {
	panic("streaming method PromptDebugService.DebugStreaming(mode = server) not available, please use Kitex Thrift Streaming Client.")
}
func (p *PromptDebugServiceClient) SaveDebugContext(ctx context.Context, req *SaveDebugContextRequest) (r *SaveDebugContextResponse, err error) {
	var _args PromptDebugServiceSaveDebugContextArgs
	_args.Req = req
	var _result PromptDebugServiceSaveDebugContextResult
	if err = p.Client_().Call(ctx, "SaveDebugContext", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptDebugServiceClient) GetDebugContext(ctx context.Context, req *GetDebugContextRequest) (r *GetDebugContextResponse, err error) {
	var _args PromptDebugServiceGetDebugContextArgs
	_args.Req = req
	var _result PromptDebugServiceGetDebugContextResult
	if err = p.Client_().Call(ctx, "GetDebugContext", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptDebugServiceClient) ListDebugHistory(ctx context.Context, req *ListDebugHistoryRequest) (r *ListDebugHistoryResponse, err error) {
	var _args PromptDebugServiceListDebugHistoryArgs
	_args.Req = req
	var _result PromptDebugServiceListDebugHistoryResult
	if err = p.Client_().Call(ctx, "ListDebugHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type PromptDebugService_DebugStreamingServer streaming.ServerStreamingServer[DebugStreamingResponse]

type PromptDebugServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PromptDebugService
}

func (p *PromptDebugServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PromptDebugServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PromptDebugServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPromptDebugServiceProcessor(handler PromptDebugService) *PromptDebugServiceProcessor {
	self := &PromptDebugServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("DebugStreaming", &promptDebugServiceProcessorDebugStreaming{handler: handler})
	self.AddToProcessorMap("SaveDebugContext", &promptDebugServiceProcessorSaveDebugContext{handler: handler})
	self.AddToProcessorMap("GetDebugContext", &promptDebugServiceProcessorGetDebugContext{handler: handler})
	self.AddToProcessorMap("ListDebugHistory", &promptDebugServiceProcessorListDebugHistory{handler: handler})
	return self
}
func (p *PromptDebugServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type promptDebugServiceProcessorDebugStreaming struct {
	handler PromptDebugService
}

func (p *promptDebugServiceProcessorDebugStreaming) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	panic("streaming method PromptDebugService.DebugStreaming(mode = server) not available, please use Kitex Thrift Streaming Client.")
}

type promptDebugServiceProcessorSaveDebugContext struct {
	handler PromptDebugService
}

func (p *promptDebugServiceProcessorSaveDebugContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptDebugServiceSaveDebugContextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SaveDebugContext", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptDebugServiceSaveDebugContextResult{}
	var retval *SaveDebugContextResponse
	if retval, err2 = p.handler.SaveDebugContext(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveDebugContext: "+err2.Error())
		oprot.WriteMessageBegin("SaveDebugContext", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SaveDebugContext", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptDebugServiceProcessorGetDebugContext struct {
	handler PromptDebugService
}

func (p *promptDebugServiceProcessorGetDebugContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptDebugServiceGetDebugContextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDebugContext", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptDebugServiceGetDebugContextResult{}
	var retval *GetDebugContextResponse
	if retval, err2 = p.handler.GetDebugContext(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDebugContext: "+err2.Error())
		oprot.WriteMessageBegin("GetDebugContext", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDebugContext", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptDebugServiceProcessorListDebugHistory struct {
	handler PromptDebugService
}

func (p *promptDebugServiceProcessorListDebugHistory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptDebugServiceListDebugHistoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListDebugHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptDebugServiceListDebugHistoryResult{}
	var retval *ListDebugHistoryResponse
	if retval, err2 = p.handler.ListDebugHistory(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListDebugHistory: "+err2.Error())
		oprot.WriteMessageBegin("ListDebugHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListDebugHistory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type PromptDebugServiceDebugStreamingArgs struct {
	Req *DebugStreamingRequest `thrift:"req,1" frugal:"1,default,DebugStreamingRequest"`
}

func NewPromptDebugServiceDebugStreamingArgs() *PromptDebugServiceDebugStreamingArgs {
	return &PromptDebugServiceDebugStreamingArgs{}
}

func (p *PromptDebugServiceDebugStreamingArgs) InitDefault() {
}

var PromptDebugServiceDebugStreamingArgs_Req_DEFAULT *DebugStreamingRequest

func (p *PromptDebugServiceDebugStreamingArgs) GetReq() (v *DebugStreamingRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return PromptDebugServiceDebugStreamingArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PromptDebugServiceDebugStreamingArgs) SetReq(val *DebugStreamingRequest) {
	p.Req = val
}

var fieldIDToName_PromptDebugServiceDebugStreamingArgs = map[int16]string{
	1: "req",
}

func (p *PromptDebugServiceDebugStreamingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PromptDebugServiceDebugStreamingArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptDebugServiceDebugStreamingArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptDebugServiceDebugStreamingArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDebugStreamingRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PromptDebugServiceDebugStreamingArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugStreaming_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptDebugServiceDebugStreamingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptDebugServiceDebugStreamingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptDebugServiceDebugStreamingArgs(%+v)", *p)

}

func (p *PromptDebugServiceDebugStreamingArgs) DeepEqual(ano *PromptDebugServiceDebugStreamingArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PromptDebugServiceDebugStreamingArgs) Field1DeepEqual(src *DebugStreamingRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PromptDebugServiceDebugStreamingResult struct {
	Success *DebugStreamingResponse `thrift:"success,0,optional" frugal:"0,optional,DebugStreamingResponse"`
}

func NewPromptDebugServiceDebugStreamingResult() *PromptDebugServiceDebugStreamingResult {
	return &PromptDebugServiceDebugStreamingResult{}
}

func (p *PromptDebugServiceDebugStreamingResult) InitDefault() {
}

var PromptDebugServiceDebugStreamingResult_Success_DEFAULT *DebugStreamingResponse

func (p *PromptDebugServiceDebugStreamingResult) GetSuccess() (v *DebugStreamingResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptDebugServiceDebugStreamingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptDebugServiceDebugStreamingResult) SetSuccess(x interface{}) {
	p.Success = x.(*DebugStreamingResponse)
}

var fieldIDToName_PromptDebugServiceDebugStreamingResult = map[int16]string{
	0: "success",
}

func (p *PromptDebugServiceDebugStreamingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptDebugServiceDebugStreamingResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptDebugServiceDebugStreamingResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptDebugServiceDebugStreamingResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDebugStreamingResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptDebugServiceDebugStreamingResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugStreaming_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptDebugServiceDebugStreamingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptDebugServiceDebugStreamingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptDebugServiceDebugStreamingResult(%+v)", *p)

}

func (p *PromptDebugServiceDebugStreamingResult) DeepEqual(ano *PromptDebugServiceDebugStreamingResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptDebugServiceDebugStreamingResult) Field0DeepEqual(src *DebugStreamingResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptDebugServiceSaveDebugContextArgs struct {
	Req *SaveDebugContextRequest `thrift:"req,1" frugal:"1,default,SaveDebugContextRequest"`
}

func NewPromptDebugServiceSaveDebugContextArgs() *PromptDebugServiceSaveDebugContextArgs {
	return &PromptDebugServiceSaveDebugContextArgs{}
}

func (p *PromptDebugServiceSaveDebugContextArgs) InitDefault() {
}

var PromptDebugServiceSaveDebugContextArgs_Req_DEFAULT *SaveDebugContextRequest

func (p *PromptDebugServiceSaveDebugContextArgs) GetReq() (v *SaveDebugContextRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return PromptDebugServiceSaveDebugContextArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PromptDebugServiceSaveDebugContextArgs) SetReq(val *SaveDebugContextRequest) {
	p.Req = val
}

var fieldIDToName_PromptDebugServiceSaveDebugContextArgs = map[int16]string{
	1: "req",
}

func (p *PromptDebugServiceSaveDebugContextArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PromptDebugServiceSaveDebugContextArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptDebugServiceSaveDebugContextArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptDebugServiceSaveDebugContextArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSaveDebugContextRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PromptDebugServiceSaveDebugContextArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveDebugContext_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptDebugServiceSaveDebugContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptDebugServiceSaveDebugContextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptDebugServiceSaveDebugContextArgs(%+v)", *p)

}

func (p *PromptDebugServiceSaveDebugContextArgs) DeepEqual(ano *PromptDebugServiceSaveDebugContextArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PromptDebugServiceSaveDebugContextArgs) Field1DeepEqual(src *SaveDebugContextRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PromptDebugServiceSaveDebugContextResult struct {
	Success *SaveDebugContextResponse `thrift:"success,0,optional" frugal:"0,optional,SaveDebugContextResponse"`
}

func NewPromptDebugServiceSaveDebugContextResult() *PromptDebugServiceSaveDebugContextResult {
	return &PromptDebugServiceSaveDebugContextResult{}
}

func (p *PromptDebugServiceSaveDebugContextResult) InitDefault() {
}

var PromptDebugServiceSaveDebugContextResult_Success_DEFAULT *SaveDebugContextResponse

func (p *PromptDebugServiceSaveDebugContextResult) GetSuccess() (v *SaveDebugContextResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptDebugServiceSaveDebugContextResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptDebugServiceSaveDebugContextResult) SetSuccess(x interface{}) {
	p.Success = x.(*SaveDebugContextResponse)
}

var fieldIDToName_PromptDebugServiceSaveDebugContextResult = map[int16]string{
	0: "success",
}

func (p *PromptDebugServiceSaveDebugContextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptDebugServiceSaveDebugContextResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptDebugServiceSaveDebugContextResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptDebugServiceSaveDebugContextResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSaveDebugContextResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptDebugServiceSaveDebugContextResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveDebugContext_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptDebugServiceSaveDebugContextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptDebugServiceSaveDebugContextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptDebugServiceSaveDebugContextResult(%+v)", *p)

}

func (p *PromptDebugServiceSaveDebugContextResult) DeepEqual(ano *PromptDebugServiceSaveDebugContextResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptDebugServiceSaveDebugContextResult) Field0DeepEqual(src *SaveDebugContextResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptDebugServiceGetDebugContextArgs struct {
	Req *GetDebugContextRequest `thrift:"req,1" frugal:"1,default,GetDebugContextRequest"`
}

func NewPromptDebugServiceGetDebugContextArgs() *PromptDebugServiceGetDebugContextArgs {
	return &PromptDebugServiceGetDebugContextArgs{}
}

func (p *PromptDebugServiceGetDebugContextArgs) InitDefault() {
}

var PromptDebugServiceGetDebugContextArgs_Req_DEFAULT *GetDebugContextRequest

func (p *PromptDebugServiceGetDebugContextArgs) GetReq() (v *GetDebugContextRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return PromptDebugServiceGetDebugContextArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PromptDebugServiceGetDebugContextArgs) SetReq(val *GetDebugContextRequest) {
	p.Req = val
}

var fieldIDToName_PromptDebugServiceGetDebugContextArgs = map[int16]string{
	1: "req",
}

func (p *PromptDebugServiceGetDebugContextArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PromptDebugServiceGetDebugContextArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptDebugServiceGetDebugContextArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptDebugServiceGetDebugContextArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDebugContextRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PromptDebugServiceGetDebugContextArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDebugContext_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptDebugServiceGetDebugContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptDebugServiceGetDebugContextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptDebugServiceGetDebugContextArgs(%+v)", *p)

}

func (p *PromptDebugServiceGetDebugContextArgs) DeepEqual(ano *PromptDebugServiceGetDebugContextArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PromptDebugServiceGetDebugContextArgs) Field1DeepEqual(src *GetDebugContextRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PromptDebugServiceGetDebugContextResult struct {
	Success *GetDebugContextResponse `thrift:"success,0,optional" frugal:"0,optional,GetDebugContextResponse"`
}

func NewPromptDebugServiceGetDebugContextResult() *PromptDebugServiceGetDebugContextResult {
	return &PromptDebugServiceGetDebugContextResult{}
}

func (p *PromptDebugServiceGetDebugContextResult) InitDefault() {
}

var PromptDebugServiceGetDebugContextResult_Success_DEFAULT *GetDebugContextResponse

func (p *PromptDebugServiceGetDebugContextResult) GetSuccess() (v *GetDebugContextResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptDebugServiceGetDebugContextResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptDebugServiceGetDebugContextResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDebugContextResponse)
}

var fieldIDToName_PromptDebugServiceGetDebugContextResult = map[int16]string{
	0: "success",
}

func (p *PromptDebugServiceGetDebugContextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptDebugServiceGetDebugContextResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptDebugServiceGetDebugContextResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptDebugServiceGetDebugContextResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDebugContextResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptDebugServiceGetDebugContextResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDebugContext_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptDebugServiceGetDebugContextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptDebugServiceGetDebugContextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptDebugServiceGetDebugContextResult(%+v)", *p)

}

func (p *PromptDebugServiceGetDebugContextResult) DeepEqual(ano *PromptDebugServiceGetDebugContextResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptDebugServiceGetDebugContextResult) Field0DeepEqual(src *GetDebugContextResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptDebugServiceListDebugHistoryArgs struct {
	Req *ListDebugHistoryRequest `thrift:"req,1" frugal:"1,default,ListDebugHistoryRequest"`
}

func NewPromptDebugServiceListDebugHistoryArgs() *PromptDebugServiceListDebugHistoryArgs {
	return &PromptDebugServiceListDebugHistoryArgs{}
}

func (p *PromptDebugServiceListDebugHistoryArgs) InitDefault() {
}

var PromptDebugServiceListDebugHistoryArgs_Req_DEFAULT *ListDebugHistoryRequest

func (p *PromptDebugServiceListDebugHistoryArgs) GetReq() (v *ListDebugHistoryRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return PromptDebugServiceListDebugHistoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PromptDebugServiceListDebugHistoryArgs) SetReq(val *ListDebugHistoryRequest) {
	p.Req = val
}

var fieldIDToName_PromptDebugServiceListDebugHistoryArgs = map[int16]string{
	1: "req",
}

func (p *PromptDebugServiceListDebugHistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PromptDebugServiceListDebugHistoryArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptDebugServiceListDebugHistoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptDebugServiceListDebugHistoryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListDebugHistoryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PromptDebugServiceListDebugHistoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDebugHistory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptDebugServiceListDebugHistoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptDebugServiceListDebugHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptDebugServiceListDebugHistoryArgs(%+v)", *p)

}

func (p *PromptDebugServiceListDebugHistoryArgs) DeepEqual(ano *PromptDebugServiceListDebugHistoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PromptDebugServiceListDebugHistoryArgs) Field1DeepEqual(src *ListDebugHistoryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PromptDebugServiceListDebugHistoryResult struct {
	Success *ListDebugHistoryResponse `thrift:"success,0,optional" frugal:"0,optional,ListDebugHistoryResponse"`
}

func NewPromptDebugServiceListDebugHistoryResult() *PromptDebugServiceListDebugHistoryResult {
	return &PromptDebugServiceListDebugHistoryResult{}
}

func (p *PromptDebugServiceListDebugHistoryResult) InitDefault() {
}

var PromptDebugServiceListDebugHistoryResult_Success_DEFAULT *ListDebugHistoryResponse

func (p *PromptDebugServiceListDebugHistoryResult) GetSuccess() (v *ListDebugHistoryResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptDebugServiceListDebugHistoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptDebugServiceListDebugHistoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListDebugHistoryResponse)
}

var fieldIDToName_PromptDebugServiceListDebugHistoryResult = map[int16]string{
	0: "success",
}

func (p *PromptDebugServiceListDebugHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptDebugServiceListDebugHistoryResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptDebugServiceListDebugHistoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptDebugServiceListDebugHistoryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListDebugHistoryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptDebugServiceListDebugHistoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDebugHistory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptDebugServiceListDebugHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptDebugServiceListDebugHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptDebugServiceListDebugHistoryResult(%+v)", *p)

}

func (p *PromptDebugServiceListDebugHistoryResult) DeepEqual(ano *PromptDebugServiceListDebugHistoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptDebugServiceListDebugHistoryResult) Field0DeepEqual(src *ListDebugHistoryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
