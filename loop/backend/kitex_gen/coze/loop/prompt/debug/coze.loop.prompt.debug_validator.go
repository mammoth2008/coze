// Code generated by Validator v0.2.6. DO NOT EDIT.

package debug

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *DebugStreamingRequest) IsValid() error {
	if p.Prompt == nil {
		return fmt.Errorf("field Prompt not_nil rule failed")
	}
	if err := p.Prompt.IsValid(); err != nil {
		return fmt.Errorf("field Prompt not valid, %w", err)
	}
	if p.SingleStepDebug == nil {
		return fmt.Errorf("field SingleStepDebug not_nil rule failed")
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *DebugStreamingResponse) IsValid() error {
	if p.Delta != nil {
		if err := p.Delta.IsValid(); err != nil {
			return fmt.Errorf("field Delta not valid, %w", err)
		}
	}
	if p.Usage != nil {
		if err := p.Usage.IsValid(); err != nil {
			return fmt.Errorf("field Usage not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *SaveDebugContextRequest) IsValid() error {
	if p.PromptID == nil {
		return fmt.Errorf("field PromptID not_nil rule failed")
	}
	if *p.PromptID <= int64(0) {
		return fmt.Errorf("field PromptID gt rule failed, current value: %v", *p.PromptID)
	}
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DebugContext == nil {
		return fmt.Errorf("field DebugContext not_nil rule failed")
	}
	if err := p.DebugContext.IsValid(); err != nil {
		return fmt.Errorf("field DebugContext not valid, %w", err)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *SaveDebugContextResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDebugContextRequest) IsValid() error {
	if p.PromptID == nil {
		return fmt.Errorf("field PromptID not_nil rule failed")
	}
	if *p.PromptID <= int64(0) {
		return fmt.Errorf("field PromptID gt rule failed, current value: %v", *p.PromptID)
	}
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetDebugContextResponse) IsValid() error {
	if p.DebugContext != nil {
		if err := p.DebugContext.IsValid(); err != nil {
			return fmt.Errorf("field DebugContext not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDebugHistoryRequest) IsValid() error {
	if p.PromptID == nil {
		return fmt.Errorf("field PromptID not_nil rule failed")
	}
	if *p.PromptID <= int64(0) {
		return fmt.Errorf("field PromptID gt rule failed, current value: %v", *p.PromptID)
	}
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if *p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", *p.WorkspaceID)
	}
	if p.DaysLimit == nil {
		return fmt.Errorf("field DaysLimit not_nil rule failed")
	}
	if *p.DaysLimit <= int32(0) {
		return fmt.Errorf("field DaysLimit gt rule failed, current value: %v", *p.DaysLimit)
	}
	if p.PageSize == nil {
		return fmt.Errorf("field PageSize not_nil rule failed")
	}
	if *p.PageSize <= int32(0) {
		return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListDebugHistoryResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
