// Code generated by Kitex v0.13.1. DO NOT EDIT.

package promptmanageservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	manage "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/manage"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreatePrompt(ctx context.Context, request *manage.CreatePromptRequest, callOptions ...callopt.Option) (r *manage.CreatePromptResponse, err error)
	ClonePrompt(ctx context.Context, request *manage.ClonePromptRequest, callOptions ...callopt.Option) (r *manage.ClonePromptResponse, err error)
	DeletePrompt(ctx context.Context, request *manage.DeletePromptRequest, callOptions ...callopt.Option) (r *manage.DeletePromptResponse, err error)
	GetPrompt(ctx context.Context, request *manage.GetPromptRequest, callOptions ...callopt.Option) (r *manage.GetPromptResponse, err error)
	BatchGetPrompt(ctx context.Context, request *manage.BatchGetPromptRequest, callOptions ...callopt.Option) (r *manage.BatchGetPromptResponse, err error)
	ListPrompt(ctx context.Context, request *manage.ListPromptRequest, callOptions ...callopt.Option) (r *manage.ListPromptResponse, err error)
	UpdatePrompt(ctx context.Context, request *manage.UpdatePromptRequest, callOptions ...callopt.Option) (r *manage.UpdatePromptResponse, err error)
	SaveDraft(ctx context.Context, request *manage.SaveDraftRequest, callOptions ...callopt.Option) (r *manage.SaveDraftResponse, err error)
	ListCommit(ctx context.Context, request *manage.ListCommitRequest, callOptions ...callopt.Option) (r *manage.ListCommitResponse, err error)
	CommitDraft(ctx context.Context, request *manage.CommitDraftRequest, callOptions ...callopt.Option) (r *manage.CommitDraftResponse, err error)
	RevertDraftFromCommit(ctx context.Context, request *manage.RevertDraftFromCommitRequest, callOptions ...callopt.Option) (r *manage.RevertDraftFromCommitResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPromptManageServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPromptManageServiceClient struct {
	*kClient
}

func (p *kPromptManageServiceClient) CreatePrompt(ctx context.Context, request *manage.CreatePromptRequest, callOptions ...callopt.Option) (r *manage.CreatePromptResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreatePrompt(ctx, request)
}

func (p *kPromptManageServiceClient) ClonePrompt(ctx context.Context, request *manage.ClonePromptRequest, callOptions ...callopt.Option) (r *manage.ClonePromptResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ClonePrompt(ctx, request)
}

func (p *kPromptManageServiceClient) DeletePrompt(ctx context.Context, request *manage.DeletePromptRequest, callOptions ...callopt.Option) (r *manage.DeletePromptResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeletePrompt(ctx, request)
}

func (p *kPromptManageServiceClient) GetPrompt(ctx context.Context, request *manage.GetPromptRequest, callOptions ...callopt.Option) (r *manage.GetPromptResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPrompt(ctx, request)
}

func (p *kPromptManageServiceClient) BatchGetPrompt(ctx context.Context, request *manage.BatchGetPromptRequest, callOptions ...callopt.Option) (r *manage.BatchGetPromptResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetPrompt(ctx, request)
}

func (p *kPromptManageServiceClient) ListPrompt(ctx context.Context, request *manage.ListPromptRequest, callOptions ...callopt.Option) (r *manage.ListPromptResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListPrompt(ctx, request)
}

func (p *kPromptManageServiceClient) UpdatePrompt(ctx context.Context, request *manage.UpdatePromptRequest, callOptions ...callopt.Option) (r *manage.UpdatePromptResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdatePrompt(ctx, request)
}

func (p *kPromptManageServiceClient) SaveDraft(ctx context.Context, request *manage.SaveDraftRequest, callOptions ...callopt.Option) (r *manage.SaveDraftResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SaveDraft(ctx, request)
}

func (p *kPromptManageServiceClient) ListCommit(ctx context.Context, request *manage.ListCommitRequest, callOptions ...callopt.Option) (r *manage.ListCommitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCommit(ctx, request)
}

func (p *kPromptManageServiceClient) CommitDraft(ctx context.Context, request *manage.CommitDraftRequest, callOptions ...callopt.Option) (r *manage.CommitDraftResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommitDraft(ctx, request)
}

func (p *kPromptManageServiceClient) RevertDraftFromCommit(ctx context.Context, request *manage.RevertDraftFromCommitRequest, callOptions ...callopt.Option) (r *manage.RevertDraftFromCommitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RevertDraftFromCommit(ctx, request)
}
