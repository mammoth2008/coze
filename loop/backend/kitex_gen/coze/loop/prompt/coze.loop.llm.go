// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package prompt

import (
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/manage"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/runtime"
)

type LLMManageService interface {
	manage.LLMManageService
}

type LLMManageServiceClient struct {
	*manage.LLMManageServiceClient
}

func NewLLMManageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LLMManageServiceClient {
	return &LLMManageServiceClient{
		LLMManageServiceClient: manage.NewLLMManageServiceClientFactory(t, f),
	}
}

func NewLLMManageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LLMManageServiceClient {
	return &LLMManageServiceClient{
		LLMManageServiceClient: manage.NewLLMManageServiceClientProtocol(t, iprot, oprot),
	}
}

func NewLLMManageServiceClient(c thrift.TClient) *LLMManageServiceClient {
	return &LLMManageServiceClient{
		LLMManageServiceClient: manage.NewLLMManageServiceClient(c),
	}
}

type LLMRuntimeService interface {
	runtime.LLMRuntimeService
}

type LLMRuntimeServiceClient struct {
	*runtime.LLMRuntimeServiceClient
}

func NewLLMRuntimeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LLMRuntimeServiceClient {
	return &LLMRuntimeServiceClient{
		LLMRuntimeServiceClient: runtime.NewLLMRuntimeServiceClientFactory(t, f),
	}
}

func NewLLMRuntimeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LLMRuntimeServiceClient {
	return &LLMRuntimeServiceClient{
		LLMRuntimeServiceClient: runtime.NewLLMRuntimeServiceClientProtocol(t, iprot, oprot),
	}
}

func NewLLMRuntimeServiceClient(c thrift.TClient) *LLMRuntimeServiceClient {
	return &LLMRuntimeServiceClient{
		LLMRuntimeServiceClient: runtime.NewLLMRuntimeServiceClient(c),
	}
}

type LLMManageServiceProcessor struct {
	*manage.LLMManageServiceProcessor
}

func NewLLMManageServiceProcessor(handler LLMManageService) *LLMManageServiceProcessor {
	self := &LLMManageServiceProcessor{manage.NewLLMManageServiceProcessor(handler)}
	return self
}

type LLMRuntimeServiceProcessor struct {
	*runtime.LLMRuntimeServiceProcessor
}

func NewLLMRuntimeServiceProcessor(handler LLMRuntimeService) *LLMRuntimeServiceProcessor {
	self := &LLMRuntimeServiceProcessor{runtime.NewLLMRuntimeServiceProcessor(handler)}
	return self
}
