// Code generated by Kitex v0.13.1. DO NOT EDIT.

package foundationuserservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	user "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, request *user.UserRegisterRequest, callOptions ...callopt.Option) (r *user.UserRegisterResponse, err error)
	ResetPassword(ctx context.Context, request *user.ResetPasswordRequest, callOptions ...callopt.Option) (r *user.ResetPasswordResponse, err error)
	LoginByPassword(ctx context.Context, request *user.LoginByPasswordRequest, callOptions ...callopt.Option) (r *user.LoginByPasswordResponse, err error)
	Logout(ctx context.Context, request *user.LogoutRequest, callOptions ...callopt.Option) (r *user.LogoutResponse, err error)
	ModifyUserProfile(ctx context.Context, request *user.ModifyUserProfileRequest, callOptions ...callopt.Option) (r *user.ModifyUserProfileResponse, err error)
	GetUserInfoByToken(ctx context.Context, request *user.GetUserInfoByTokenRequest, callOptions ...callopt.Option) (r *user.GetUserInfoByTokenResponse, err error)
	GetUserInfo(ctx context.Context, request *user.GetUserInfoRequest, callOptions ...callopt.Option) (r *user.GetUserInfoResponse, err error)
	MGetUserInfo(ctx context.Context, request *user.MGetUserInfoRequest, callOptions ...callopt.Option) (r *user.MGetUserInfoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kFoundationUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kFoundationUserServiceClient struct {
	*kClient
}

func (p *kFoundationUserServiceClient) Register(ctx context.Context, request *user.UserRegisterRequest, callOptions ...callopt.Option) (r *user.UserRegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, request)
}

func (p *kFoundationUserServiceClient) ResetPassword(ctx context.Context, request *user.ResetPasswordRequest, callOptions ...callopt.Option) (r *user.ResetPasswordResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ResetPassword(ctx, request)
}

func (p *kFoundationUserServiceClient) LoginByPassword(ctx context.Context, request *user.LoginByPasswordRequest, callOptions ...callopt.Option) (r *user.LoginByPasswordResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoginByPassword(ctx, request)
}

func (p *kFoundationUserServiceClient) Logout(ctx context.Context, request *user.LogoutRequest, callOptions ...callopt.Option) (r *user.LogoutResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Logout(ctx, request)
}

func (p *kFoundationUserServiceClient) ModifyUserProfile(ctx context.Context, request *user.ModifyUserProfileRequest, callOptions ...callopt.Option) (r *user.ModifyUserProfileResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ModifyUserProfile(ctx, request)
}

func (p *kFoundationUserServiceClient) GetUserInfoByToken(ctx context.Context, request *user.GetUserInfoByTokenRequest, callOptions ...callopt.Option) (r *user.GetUserInfoByTokenResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserInfoByToken(ctx, request)
}

func (p *kFoundationUserServiceClient) GetUserInfo(ctx context.Context, request *user.GetUserInfoRequest, callOptions ...callopt.Option) (r *user.GetUserInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserInfo(ctx, request)
}

func (p *kFoundationUserServiceClient) MGetUserInfo(ctx context.Context, request *user.MGetUserInfoRequest, callOptions ...callopt.Option) (r *user.MGetUserInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetUserInfo(ctx, request)
}
