// Code generated by Kitex v0.13.1. DO NOT EDIT.

package promptdebugservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	apis "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/apis"
	debug "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/debug"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"DebugStreaming": kitex.NewMethodInfo(
		debugStreamingHandler,
		newPromptDebugServiceDebugStreamingArgs,
		newPromptDebugServiceDebugStreamingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
	"SaveDebugContext": kitex.NewMethodInfo(
		saveDebugContextHandler,
		newPromptDebugServiceSaveDebugContextArgs,
		newPromptDebugServiceSaveDebugContextResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDebugContext": kitex.NewMethodInfo(
		getDebugContextHandler,
		newPromptDebugServiceGetDebugContextArgs,
		newPromptDebugServiceGetDebugContextResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListDebugHistory": kitex.NewMethodInfo(
		listDebugHistoryHandler,
		newPromptDebugServiceListDebugHistoryArgs,
		newPromptDebugServiceListDebugHistoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	promptDebugServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return promptDebugServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "PromptDebugService"
	handlerType := (*apis.PromptDebugService)(nil)
	extra := map[string]interface{}{
		"PackageName": "apis",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func debugStreamingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, err := streaming.GetServerStreamFromArg(arg)
	if err != nil {
		return err
	}
	stream := streaming.NewServerStreamingServer[debug.DebugStreamingResponse](st)
	req := new(debug.DebugStreamingRequest)
	if err := stream.RecvMsg(ctx, req); err != nil {
		return err
	}
	return handler.(debug.PromptDebugService).DebugStreaming(ctx, req, stream)
}

func newPromptDebugServiceDebugStreamingArgs() interface{} {
	return debug.NewPromptDebugServiceDebugStreamingArgs()
}

func newPromptDebugServiceDebugStreamingResult() interface{} {
	return debug.NewPromptDebugServiceDebugStreamingResult()
}

func saveDebugContextHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*debug.PromptDebugServiceSaveDebugContextArgs)
	realResult := result.(*debug.PromptDebugServiceSaveDebugContextResult)
	success, err := handler.(debug.PromptDebugService).SaveDebugContext(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptDebugServiceSaveDebugContextArgs() interface{} {
	return debug.NewPromptDebugServiceSaveDebugContextArgs()
}

func newPromptDebugServiceSaveDebugContextResult() interface{} {
	return debug.NewPromptDebugServiceSaveDebugContextResult()
}

func getDebugContextHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*debug.PromptDebugServiceGetDebugContextArgs)
	realResult := result.(*debug.PromptDebugServiceGetDebugContextResult)
	success, err := handler.(debug.PromptDebugService).GetDebugContext(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptDebugServiceGetDebugContextArgs() interface{} {
	return debug.NewPromptDebugServiceGetDebugContextArgs()
}

func newPromptDebugServiceGetDebugContextResult() interface{} {
	return debug.NewPromptDebugServiceGetDebugContextResult()
}

func listDebugHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*debug.PromptDebugServiceListDebugHistoryArgs)
	realResult := result.(*debug.PromptDebugServiceListDebugHistoryResult)
	success, err := handler.(debug.PromptDebugService).ListDebugHistory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptDebugServiceListDebugHistoryArgs() interface{} {
	return debug.NewPromptDebugServiceListDebugHistoryArgs()
}

func newPromptDebugServiceListDebugHistoryResult() interface{} {
	return debug.NewPromptDebugServiceListDebugHistoryResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) DebugStreaming(ctx context.Context, req *debug.DebugStreamingRequest) (PromptDebugService_DebugStreamingClient, error) {
	st, err := p.sc.StreamX(ctx, "DebugStreaming")
	if err != nil {
		return nil, err
	}
	stream := streaming.NewServerStreamingClient[debug.DebugStreamingResponse](st)
	if err := stream.SendMsg(ctx, req); err != nil {
		return nil, err
	}
	if err := stream.CloseSend(ctx); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) SaveDebugContext(ctx context.Context, req *debug.SaveDebugContextRequest) (r *debug.SaveDebugContextResponse, err error) {
	var _args debug.PromptDebugServiceSaveDebugContextArgs
	_args.Req = req
	var _result debug.PromptDebugServiceSaveDebugContextResult
	if err = p.c.Call(ctx, "SaveDebugContext", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDebugContext(ctx context.Context, req *debug.GetDebugContextRequest) (r *debug.GetDebugContextResponse, err error) {
	var _args debug.PromptDebugServiceGetDebugContextArgs
	_args.Req = req
	var _result debug.PromptDebugServiceGetDebugContextResult
	if err = p.c.Call(ctx, "GetDebugContext", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDebugHistory(ctx context.Context, req *debug.ListDebugHistoryRequest) (r *debug.ListDebugHistoryResponse, err error) {
	var _args debug.PromptDebugServiceListDebugHistoryArgs
	_args.Req = req
	var _result debug.PromptDebugServiceListDebugHistoryResult
	if err = p.c.Call(ctx, "ListDebugHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
