// Code generated by Kitex v0.13.1. DO NOT EDIT.

package llmmanageservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	apis "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/apis"
	manage "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/manage"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ListModels": kitex.NewMethodInfo(
		listModelsHandler,
		newLLMManageServiceListModelsArgs,
		newLLMManageServiceListModelsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetModel": kitex.NewMethodInfo(
		getModelHandler,
		newLLMManageServiceGetModelArgs,
		newLLMManageServiceGetModelResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	lLMManageServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return lLMManageServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "LLMManageService"
	handlerType := (*apis.LLMManageService)(nil)
	extra := map[string]interface{}{
		"PackageName": "apis",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func listModelsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.LLMManageServiceListModelsArgs)
	realResult := result.(*manage.LLMManageServiceListModelsResult)
	success, err := handler.(manage.LLMManageService).ListModels(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newLLMManageServiceListModelsArgs() interface{} {
	return manage.NewLLMManageServiceListModelsArgs()
}

func newLLMManageServiceListModelsResult() interface{} {
	return manage.NewLLMManageServiceListModelsResult()
}

func getModelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.LLMManageServiceGetModelArgs)
	realResult := result.(*manage.LLMManageServiceGetModelResult)
	success, err := handler.(manage.LLMManageService).GetModel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newLLMManageServiceGetModelArgs() interface{} {
	return manage.NewLLMManageServiceGetModelArgs()
}

func newLLMManageServiceGetModelResult() interface{} {
	return manage.NewLLMManageServiceGetModelResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) ListModels(ctx context.Context, req *manage.ListModelsRequest) (r *manage.ListModelsResponse, err error) {
	var _args manage.LLMManageServiceListModelsArgs
	_args.Req = req
	var _result manage.LLMManageServiceListModelsResult
	if err = p.c.Call(ctx, "ListModels", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetModel(ctx context.Context, req *manage.GetModelRequest) (r *manage.GetModelResponse, err error) {
	var _args manage.LLMManageServiceGetModelArgs
	_args.Req = req
	var _result manage.LLMManageServiceGetModelResult
	if err = p.c.Call(ctx, "GetModel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
