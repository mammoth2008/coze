// Code generated by Kitex v0.13.1. DO NOT EDIT.

package foundationspaceservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	apis "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/apis"
	space "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/space"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetSpace": kitex.NewMethodInfo(
		getSpaceHandler,
		newSpaceServiceGetSpaceArgs,
		newSpaceServiceGetSpaceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListUserSpaces": kitex.NewMethodInfo(
		listUserSpacesHandler,
		newSpaceServiceListUserSpacesArgs,
		newSpaceServiceListUserSpacesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	foundationSpaceServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return foundationSpaceServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "FoundationSpaceService"
	handlerType := (*apis.FoundationSpaceService)(nil)
	extra := map[string]interface{}{
		"PackageName": "apis",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func getSpaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*space.SpaceServiceGetSpaceArgs)
	realResult := result.(*space.SpaceServiceGetSpaceResult)
	success, err := handler.(space.SpaceService).GetSpace(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newSpaceServiceGetSpaceArgs() interface{} {
	return space.NewSpaceServiceGetSpaceArgs()
}

func newSpaceServiceGetSpaceResult() interface{} {
	return space.NewSpaceServiceGetSpaceResult()
}

func listUserSpacesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*space.SpaceServiceListUserSpacesArgs)
	realResult := result.(*space.SpaceServiceListUserSpacesResult)
	success, err := handler.(space.SpaceService).ListUserSpaces(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newSpaceServiceListUserSpacesArgs() interface{} {
	return space.NewSpaceServiceListUserSpacesArgs()
}

func newSpaceServiceListUserSpacesResult() interface{} {
	return space.NewSpaceServiceListUserSpacesResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) GetSpace(ctx context.Context, request *space.GetSpaceRequest) (r *space.GetSpaceResponse, err error) {
	var _args space.SpaceServiceGetSpaceArgs
	_args.Request = request
	var _result space.SpaceServiceGetSpaceResult
	if err = p.c.Call(ctx, "GetSpace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListUserSpaces(ctx context.Context, request *space.ListUserSpaceRequest) (r *space.ListUserSpaceResponse, err error) {
	var _args space.SpaceServiceListUserSpacesArgs
	_args.Request = request
	var _result space.SpaceServiceListUserSpacesResult
	if err = p.c.Call(ctx, "ListUserSpaces", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
