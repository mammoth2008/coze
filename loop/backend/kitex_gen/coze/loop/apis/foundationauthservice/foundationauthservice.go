// Code generated by Kitex v0.13.1. DO NOT EDIT.

package foundationauthservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	apis "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/apis"
	auth "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"MCheckPermission": kitex.NewMethodInfo(
		mCheckPermissionHandler,
		newAuthServiceMCheckPermissionArgs,
		newAuthServiceMCheckPermissionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	foundationAuthServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return foundationAuthServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "FoundationAuthService"
	handlerType := (*apis.FoundationAuthService)(nil)
	extra := map[string]interface{}{
		"PackageName": "apis",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func mCheckPermissionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.AuthServiceMCheckPermissionArgs)
	realResult := result.(*auth.AuthServiceMCheckPermissionResult)
	success, err := handler.(auth.AuthService).MCheckPermission(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newAuthServiceMCheckPermissionArgs() interface{} {
	return auth.NewAuthServiceMCheckPermissionArgs()
}

func newAuthServiceMCheckPermissionResult() interface{} {
	return auth.NewAuthServiceMCheckPermissionResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) MCheckPermission(ctx context.Context, request *auth.MCheckPermissionRequest) (r *auth.MCheckPermissionResponse, err error) {
	var _args auth.AuthServiceMCheckPermissionArgs
	_args.Request = request
	var _result auth.AuthServiceMCheckPermissionResult
	if err = p.c.Call(ctx, "MCheckPermission", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
