// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package runtime

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/domain/runtime"
)

type ChatRequest struct {
	// 模型配置
	ModelConfig *runtime.ModelConfig `thrift:"model_config,1,optional" frugal:"1,optional,runtime.ModelConfig" form:"model_config" json:"model_config,omitempty" query:"model_config"`
	// 消息
	Messages []*runtime.Message `thrift:"messages,2,optional" frugal:"2,optional,list<runtime.Message>" form:"messages" json:"messages,omitempty" query:"messages"`
	// 工具
	Tools []*runtime.Tool `thrift:"tools,3,optional" frugal:"3,optional,list<runtime.Tool>" form:"tools" json:"tools,omitempty" query:"tools"`
	// 业务参数
	BizParam *runtime.BizParam `thrift:"biz_param,4,optional" frugal:"4,optional,runtime.BizParam" form:"biz_param" json:"biz_param,omitempty" query:"biz_param"`
	Base     *base.Base        `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewChatRequest() *ChatRequest {
	return &ChatRequest{}
}

func (p *ChatRequest) InitDefault() {
}

var ChatRequest_ModelConfig_DEFAULT *runtime.ModelConfig

func (p *ChatRequest) GetModelConfig() (v *runtime.ModelConfig) {
	if p == nil {
		return
	}
	if !p.IsSetModelConfig() {
		return ChatRequest_ModelConfig_DEFAULT
	}
	return p.ModelConfig
}

var ChatRequest_Messages_DEFAULT []*runtime.Message

func (p *ChatRequest) GetMessages() (v []*runtime.Message) {
	if p == nil {
		return
	}
	if !p.IsSetMessages() {
		return ChatRequest_Messages_DEFAULT
	}
	return p.Messages
}

var ChatRequest_Tools_DEFAULT []*runtime.Tool

func (p *ChatRequest) GetTools() (v []*runtime.Tool) {
	if p == nil {
		return
	}
	if !p.IsSetTools() {
		return ChatRequest_Tools_DEFAULT
	}
	return p.Tools
}

var ChatRequest_BizParam_DEFAULT *runtime.BizParam

func (p *ChatRequest) GetBizParam() (v *runtime.BizParam) {
	if p == nil {
		return
	}
	if !p.IsSetBizParam() {
		return ChatRequest_BizParam_DEFAULT
	}
	return p.BizParam
}

var ChatRequest_Base_DEFAULT *base.Base

func (p *ChatRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ChatRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ChatRequest) SetModelConfig(val *runtime.ModelConfig) {
	p.ModelConfig = val
}
func (p *ChatRequest) SetMessages(val []*runtime.Message) {
	p.Messages = val
}
func (p *ChatRequest) SetTools(val []*runtime.Tool) {
	p.Tools = val
}
func (p *ChatRequest) SetBizParam(val *runtime.BizParam) {
	p.BizParam = val
}
func (p *ChatRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ChatRequest = map[int16]string{
	1:   "model_config",
	2:   "messages",
	3:   "tools",
	4:   "biz_param",
	255: "Base",
}

func (p *ChatRequest) IsSetModelConfig() bool {
	return p.ModelConfig != nil
}

func (p *ChatRequest) IsSetMessages() bool {
	return p.Messages != nil
}

func (p *ChatRequest) IsSetTools() bool {
	return p.Tools != nil
}

func (p *ChatRequest) IsSetBizParam() bool {
	return p.BizParam != nil
}

func (p *ChatRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ChatRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := runtime.NewModelConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ModelConfig = _field
	return nil
}
func (p *ChatRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*runtime.Message, 0, size)
	values := make([]runtime.Message, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Messages = _field
	return nil
}
func (p *ChatRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*runtime.Tool, 0, size)
	values := make([]runtime.Tool, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tools = _field
	return nil
}
func (p *ChatRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := runtime.NewBizParam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BizParam = _field
	return nil
}
func (p *ChatRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ChatRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelConfig() {
		if err = oprot.WriteFieldBegin("model_config", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ModelConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ChatRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessages() {
		if err = oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
			return err
		}
		for _, v := range p.Messages {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ChatRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTools() {
		if err = oprot.WriteFieldBegin("tools", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tools)); err != nil {
			return err
		}
		for _, v := range p.Tools {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ChatRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizParam() {
		if err = oprot.WriteFieldBegin("biz_param", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BizParam.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ChatRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatRequest(%+v)", *p)

}

func (p *ChatRequest) DeepEqual(ano *ChatRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ModelConfig) {
		return false
	}
	if !p.Field2DeepEqual(ano.Messages) {
		return false
	}
	if !p.Field3DeepEqual(ano.Tools) {
		return false
	}
	if !p.Field4DeepEqual(ano.BizParam) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ChatRequest) Field1DeepEqual(src *runtime.ModelConfig) bool {

	if !p.ModelConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ChatRequest) Field2DeepEqual(src []*runtime.Message) bool {

	if len(p.Messages) != len(src) {
		return false
	}
	for i, v := range p.Messages {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ChatRequest) Field3DeepEqual(src []*runtime.Tool) bool {

	if len(p.Tools) != len(src) {
		return false
	}
	for i, v := range p.Tools {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ChatRequest) Field4DeepEqual(src *runtime.BizParam) bool {

	if !p.BizParam.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ChatRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ChatResponse struct {
	Message  *runtime.Message `thrift:"message,1,optional" frugal:"1,optional,runtime.Message" form:"message" json:"message,omitempty" query:"message"`
	BaseResp *base.BaseResp   `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewChatResponse() *ChatResponse {
	return &ChatResponse{}
}

func (p *ChatResponse) InitDefault() {
}

var ChatResponse_Message_DEFAULT *runtime.Message

func (p *ChatResponse) GetMessage() (v *runtime.Message) {
	if p == nil {
		return
	}
	if !p.IsSetMessage() {
		return ChatResponse_Message_DEFAULT
	}
	return p.Message
}

var ChatResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ChatResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ChatResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ChatResponse) SetMessage(val *runtime.Message) {
	p.Message = val
}
func (p *ChatResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ChatResponse = map[int16]string{
	1:   "message",
	255: "BaseResp",
}

func (p *ChatResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *ChatResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ChatResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := runtime.NewMessage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Message = _field
	return nil
}
func (p *ChatResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ChatResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Message.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ChatResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ChatResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatResponse(%+v)", *p)

}

func (p *ChatResponse) DeepEqual(ano *ChatResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ChatResponse) Field1DeepEqual(src *runtime.Message) bool {

	if !p.Message.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ChatResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type LLMRuntimeService interface {
	// 非流式接口
	Chat(ctx context.Context, req *ChatRequest) (r *ChatResponse, err error)
	// 流式接口
	ChatStream(ctx context.Context, req *ChatRequest, stream LLMRuntimeService_ChatStreamServer) (err error)
}

type LLMRuntimeServiceClient struct {
	c thrift.TClient
}

func NewLLMRuntimeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LLMRuntimeServiceClient {
	return &LLMRuntimeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLLMRuntimeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LLMRuntimeServiceClient {
	return &LLMRuntimeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLLMRuntimeServiceClient(c thrift.TClient) *LLMRuntimeServiceClient {
	return &LLMRuntimeServiceClient{
		c: c,
	}
}

func (p *LLMRuntimeServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *LLMRuntimeServiceClient) Chat(ctx context.Context, req *ChatRequest) (r *ChatResponse, err error) {
	var _args LLMRuntimeServiceChatArgs
	_args.Req = req
	var _result LLMRuntimeServiceChatResult
	if err = p.Client_().Call(ctx, "Chat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LLMRuntimeServiceClient) ChatStream(ctx context.Context, req *ChatRequest, stream LLMRuntimeService_ChatStreamServer) (err error) {
	panic("streaming method LLMRuntimeService.ChatStream(mode = server) not available, please use Kitex Thrift Streaming Client.")
}

type LLMRuntimeService_ChatStreamServer streaming.ServerStreamingServer[ChatResponse]

type LLMRuntimeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LLMRuntimeService
}

func (p *LLMRuntimeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LLMRuntimeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LLMRuntimeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLLMRuntimeServiceProcessor(handler LLMRuntimeService) *LLMRuntimeServiceProcessor {
	self := &LLMRuntimeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Chat", &lLMRuntimeServiceProcessorChat{handler: handler})
	self.AddToProcessorMap("ChatStream", &lLMRuntimeServiceProcessorChatStream{handler: handler})
	return self
}
func (p *LLMRuntimeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type lLMRuntimeServiceProcessorChat struct {
	handler LLMRuntimeService
}

func (p *lLMRuntimeServiceProcessorChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LLMRuntimeServiceChatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Chat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LLMRuntimeServiceChatResult{}
	var retval *ChatResponse
	if retval, err2 = p.handler.Chat(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Chat: "+err2.Error())
		oprot.WriteMessageBegin("Chat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Chat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lLMRuntimeServiceProcessorChatStream struct {
	handler LLMRuntimeService
}

func (p *lLMRuntimeServiceProcessorChatStream) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	panic("streaming method LLMRuntimeService.ChatStream(mode = server) not available, please use Kitex Thrift Streaming Client.")
}

type LLMRuntimeServiceChatArgs struct {
	Req *ChatRequest `thrift:"req,1" frugal:"1,default,ChatRequest"`
}

func NewLLMRuntimeServiceChatArgs() *LLMRuntimeServiceChatArgs {
	return &LLMRuntimeServiceChatArgs{}
}

func (p *LLMRuntimeServiceChatArgs) InitDefault() {
}

var LLMRuntimeServiceChatArgs_Req_DEFAULT *ChatRequest

func (p *LLMRuntimeServiceChatArgs) GetReq() (v *ChatRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return LLMRuntimeServiceChatArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LLMRuntimeServiceChatArgs) SetReq(val *ChatRequest) {
	p.Req = val
}

var fieldIDToName_LLMRuntimeServiceChatArgs = map[int16]string{
	1: "req",
}

func (p *LLMRuntimeServiceChatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LLMRuntimeServiceChatArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LLMRuntimeServiceChatArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LLMRuntimeServiceChatArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewChatRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LLMRuntimeServiceChatArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Chat_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LLMRuntimeServiceChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LLMRuntimeServiceChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LLMRuntimeServiceChatArgs(%+v)", *p)

}

func (p *LLMRuntimeServiceChatArgs) DeepEqual(ano *LLMRuntimeServiceChatArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LLMRuntimeServiceChatArgs) Field1DeepEqual(src *ChatRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LLMRuntimeServiceChatResult struct {
	Success *ChatResponse `thrift:"success,0,optional" frugal:"0,optional,ChatResponse"`
}

func NewLLMRuntimeServiceChatResult() *LLMRuntimeServiceChatResult {
	return &LLMRuntimeServiceChatResult{}
}

func (p *LLMRuntimeServiceChatResult) InitDefault() {
}

var LLMRuntimeServiceChatResult_Success_DEFAULT *ChatResponse

func (p *LLMRuntimeServiceChatResult) GetSuccess() (v *ChatResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return LLMRuntimeServiceChatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LLMRuntimeServiceChatResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChatResponse)
}

var fieldIDToName_LLMRuntimeServiceChatResult = map[int16]string{
	0: "success",
}

func (p *LLMRuntimeServiceChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LLMRuntimeServiceChatResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LLMRuntimeServiceChatResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LLMRuntimeServiceChatResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewChatResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LLMRuntimeServiceChatResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Chat_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LLMRuntimeServiceChatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LLMRuntimeServiceChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LLMRuntimeServiceChatResult(%+v)", *p)

}

func (p *LLMRuntimeServiceChatResult) DeepEqual(ano *LLMRuntimeServiceChatResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LLMRuntimeServiceChatResult) Field0DeepEqual(src *ChatResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LLMRuntimeServiceChatStreamArgs struct {
	Req *ChatRequest `thrift:"req,1" frugal:"1,default,ChatRequest"`
}

func NewLLMRuntimeServiceChatStreamArgs() *LLMRuntimeServiceChatStreamArgs {
	return &LLMRuntimeServiceChatStreamArgs{}
}

func (p *LLMRuntimeServiceChatStreamArgs) InitDefault() {
}

var LLMRuntimeServiceChatStreamArgs_Req_DEFAULT *ChatRequest

func (p *LLMRuntimeServiceChatStreamArgs) GetReq() (v *ChatRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return LLMRuntimeServiceChatStreamArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LLMRuntimeServiceChatStreamArgs) SetReq(val *ChatRequest) {
	p.Req = val
}

var fieldIDToName_LLMRuntimeServiceChatStreamArgs = map[int16]string{
	1: "req",
}

func (p *LLMRuntimeServiceChatStreamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LLMRuntimeServiceChatStreamArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LLMRuntimeServiceChatStreamArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LLMRuntimeServiceChatStreamArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewChatRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LLMRuntimeServiceChatStreamArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatStream_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LLMRuntimeServiceChatStreamArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LLMRuntimeServiceChatStreamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LLMRuntimeServiceChatStreamArgs(%+v)", *p)

}

func (p *LLMRuntimeServiceChatStreamArgs) DeepEqual(ano *LLMRuntimeServiceChatStreamArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LLMRuntimeServiceChatStreamArgs) Field1DeepEqual(src *ChatRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LLMRuntimeServiceChatStreamResult struct {
	Success *ChatResponse `thrift:"success,0,optional" frugal:"0,optional,ChatResponse"`
}

func NewLLMRuntimeServiceChatStreamResult() *LLMRuntimeServiceChatStreamResult {
	return &LLMRuntimeServiceChatStreamResult{}
}

func (p *LLMRuntimeServiceChatStreamResult) InitDefault() {
}

var LLMRuntimeServiceChatStreamResult_Success_DEFAULT *ChatResponse

func (p *LLMRuntimeServiceChatStreamResult) GetSuccess() (v *ChatResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return LLMRuntimeServiceChatStreamResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LLMRuntimeServiceChatStreamResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChatResponse)
}

var fieldIDToName_LLMRuntimeServiceChatStreamResult = map[int16]string{
	0: "success",
}

func (p *LLMRuntimeServiceChatStreamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LLMRuntimeServiceChatStreamResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LLMRuntimeServiceChatStreamResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LLMRuntimeServiceChatStreamResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewChatResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LLMRuntimeServiceChatStreamResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatStream_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LLMRuntimeServiceChatStreamResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LLMRuntimeServiceChatStreamResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LLMRuntimeServiceChatStreamResult(%+v)", *p)

}

func (p *LLMRuntimeServiceChatStreamResult) DeepEqual(ano *LLMRuntimeServiceChatStreamResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LLMRuntimeServiceChatStreamResult) Field0DeepEqual(src *ChatResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
