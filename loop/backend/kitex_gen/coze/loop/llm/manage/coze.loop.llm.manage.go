// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package manage

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/domain/common"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/domain/manage"
	"strings"
)

type ListModelsRequest struct {
	WorkspaceID *int64           `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	Scenario    *common.Scenario `thrift:"scenario,2,optional" frugal:"2,optional,string" form:"scenario" json:"scenario,omitempty" query:"scenario"`
	PageSize    *int32           `thrift:"page_size,127,optional" frugal:"127,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	PageToken   *string          `thrift:"page_token,128,optional" frugal:"128,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	Base        *base.Base       `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListModelsRequest() *ListModelsRequest {
	return &ListModelsRequest{}
}

func (p *ListModelsRequest) InitDefault() {
}

var ListModelsRequest_WorkspaceID_DEFAULT int64

func (p *ListModelsRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListModelsRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var ListModelsRequest_Scenario_DEFAULT common.Scenario

func (p *ListModelsRequest) GetScenario() (v common.Scenario) {
	if p == nil {
		return
	}
	if !p.IsSetScenario() {
		return ListModelsRequest_Scenario_DEFAULT
	}
	return *p.Scenario
}

var ListModelsRequest_PageSize_DEFAULT int32

func (p *ListModelsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListModelsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListModelsRequest_PageToken_DEFAULT string

func (p *ListModelsRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListModelsRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListModelsRequest_Base_DEFAULT *base.Base

func (p *ListModelsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListModelsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListModelsRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListModelsRequest) SetScenario(val *common.Scenario) {
	p.Scenario = val
}
func (p *ListModelsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListModelsRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListModelsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListModelsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "scenario",
	127: "page_size",
	128: "page_token",
	255: "Base",
}

func (p *ListModelsRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListModelsRequest) IsSetScenario() bool {
	return p.Scenario != nil
}

func (p *ListModelsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListModelsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListModelsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListModelsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 127:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField127(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 128:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField128(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListModelsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListModelsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListModelsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *common.Scenario
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Scenario = _field
	return nil
}
func (p *ListModelsRequest) ReadField127(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListModelsRequest) ReadField128(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListModelsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListModelsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListModelsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField127(oprot); err != nil {
			fieldId = 127
			goto WriteFieldError
		}
		if err = p.writeField128(oprot); err != nil {
			fieldId = 128
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListModelsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListModelsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetScenario() {
		if err = oprot.WriteFieldBegin("scenario", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Scenario); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListModelsRequest) writeField127(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 127); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 end error: ", p), err)
}
func (p *ListModelsRequest) writeField128(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 128); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 128 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 128 end error: ", p), err)
}
func (p *ListModelsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListModelsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListModelsRequest(%+v)", *p)

}

func (p *ListModelsRequest) DeepEqual(ano *ListModelsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Scenario) {
		return false
	}
	if !p.Field127DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field128DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListModelsRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListModelsRequest) Field2DeepEqual(src *common.Scenario) bool {

	if p.Scenario == src {
		return true
	} else if p.Scenario == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Scenario, *src) != 0 {
		return false
	}
	return true
}
func (p *ListModelsRequest) Field127DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListModelsRequest) Field128DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListModelsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListModelsResponse struct {
	Models        []*manage.Model `thrift:"models,1,optional" frugal:"1,optional,list<manage.Model>" form:"models" json:"models,omitempty" query:"models"`
	HasMore       *bool           `thrift:"has_more,127,optional" frugal:"127,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	NextPageToken *string         `thrift:"next_page_token,128,optional" frugal:"128,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int32          `thrift:"total,129,optional" frugal:"129,optional,i32" form:"total" json:"total,omitempty" query:"total"`
	BaseResp      *base.BaseResp  `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListModelsResponse() *ListModelsResponse {
	return &ListModelsResponse{}
}

func (p *ListModelsResponse) InitDefault() {
}

var ListModelsResponse_Models_DEFAULT []*manage.Model

func (p *ListModelsResponse) GetModels() (v []*manage.Model) {
	if p == nil {
		return
	}
	if !p.IsSetModels() {
		return ListModelsResponse_Models_DEFAULT
	}
	return p.Models
}

var ListModelsResponse_HasMore_DEFAULT bool

func (p *ListModelsResponse) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return ListModelsResponse_HasMore_DEFAULT
	}
	return *p.HasMore
}

var ListModelsResponse_NextPageToken_DEFAULT string

func (p *ListModelsResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListModelsResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListModelsResponse_Total_DEFAULT int32

func (p *ListModelsResponse) GetTotal() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListModelsResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListModelsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListModelsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListModelsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListModelsResponse) SetModels(val []*manage.Model) {
	p.Models = val
}
func (p *ListModelsResponse) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *ListModelsResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListModelsResponse) SetTotal(val *int32) {
	p.Total = val
}
func (p *ListModelsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListModelsResponse = map[int16]string{
	1:   "models",
	127: "has_more",
	128: "next_page_token",
	129: "total",
	255: "BaseResp",
}

func (p *ListModelsResponse) IsSetModels() bool {
	return p.Models != nil
}

func (p *ListModelsResponse) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *ListModelsResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListModelsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListModelsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListModelsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 127:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField127(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 128:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField128(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 129:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField129(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListModelsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListModelsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*manage.Model, 0, size)
	values := make([]manage.Model, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Models = _field
	return nil
}
func (p *ListModelsResponse) ReadField127(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *ListModelsResponse) ReadField128(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListModelsResponse) ReadField129(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListModelsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListModelsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListModelsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField127(oprot); err != nil {
			fieldId = 127
			goto WriteFieldError
		}
		if err = p.writeField128(oprot); err != nil {
			fieldId = 128
			goto WriteFieldError
		}
		if err = p.writeField129(oprot); err != nil {
			fieldId = 129
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListModelsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetModels() {
		if err = oprot.WriteFieldBegin("models", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Models)); err != nil {
			return err
		}
		for _, v := range p.Models {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListModelsResponse) writeField127(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 127); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 end error: ", p), err)
}
func (p *ListModelsResponse) writeField128(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 128); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 128 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 128 end error: ", p), err)
}
func (p *ListModelsResponse) writeField129(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I32, 129); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 129 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 129 end error: ", p), err)
}
func (p *ListModelsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListModelsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListModelsResponse(%+v)", *p)

}

func (p *ListModelsResponse) DeepEqual(ano *ListModelsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Models) {
		return false
	}
	if !p.Field127DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field128DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field129DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListModelsResponse) Field1DeepEqual(src []*manage.Model) bool {

	if len(p.Models) != len(src) {
		return false
	}
	for i, v := range p.Models {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListModelsResponse) Field127DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *ListModelsResponse) Field128DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListModelsResponse) Field129DeepEqual(src *int32) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListModelsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetModelRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	ModelID     *int64     `thrift:"model_id,2,optional" frugal:"2,optional,i64" json:"model_id" path:"model_id" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetModelRequest() *GetModelRequest {
	return &GetModelRequest{}
}

func (p *GetModelRequest) InitDefault() {
}

var GetModelRequest_WorkspaceID_DEFAULT int64

func (p *GetModelRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetModelRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var GetModelRequest_ModelID_DEFAULT int64

func (p *GetModelRequest) GetModelID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetModelID() {
		return GetModelRequest_ModelID_DEFAULT
	}
	return *p.ModelID
}

var GetModelRequest_Base_DEFAULT *base.Base

func (p *GetModelRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetModelRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetModelRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetModelRequest) SetModelID(val *int64) {
	p.ModelID = val
}
func (p *GetModelRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetModelRequest = map[int16]string{
	1:   "workspace_id",
	2:   "model_id",
	255: "Base",
}

func (p *GetModelRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetModelRequest) IsSetModelID() bool {
	return p.ModelID != nil
}

func (p *GetModelRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetModelRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetModelRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetModelRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetModelRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ModelID = _field
	return nil
}
func (p *GetModelRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetModelRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetModelRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetModelRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetModelRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelID() {
		if err = oprot.WriteFieldBegin("model_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ModelID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetModelRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetModelRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetModelRequest(%+v)", *p)

}

func (p *GetModelRequest) DeepEqual(ano *GetModelRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ModelID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetModelRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetModelRequest) Field2DeepEqual(src *int64) bool {

	if p.ModelID == src {
		return true
	} else if p.ModelID == nil || src == nil {
		return false
	}
	if *p.ModelID != *src {
		return false
	}
	return true
}
func (p *GetModelRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetModelResponse struct {
	Model    *manage.Model  `thrift:"model,1,optional" frugal:"1,optional,manage.Model" form:"model" json:"model,omitempty" query:"model"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetModelResponse() *GetModelResponse {
	return &GetModelResponse{}
}

func (p *GetModelResponse) InitDefault() {
}

var GetModelResponse_Model_DEFAULT *manage.Model

func (p *GetModelResponse) GetModel() (v *manage.Model) {
	if p == nil {
		return
	}
	if !p.IsSetModel() {
		return GetModelResponse_Model_DEFAULT
	}
	return p.Model
}

var GetModelResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetModelResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetModelResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetModelResponse) SetModel(val *manage.Model) {
	p.Model = val
}
func (p *GetModelResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetModelResponse = map[int16]string{
	1:   "model",
	255: "BaseResp",
}

func (p *GetModelResponse) IsSetModel() bool {
	return p.Model != nil
}

func (p *GetModelResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetModelResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetModelResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetModelResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := manage.NewModel()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Model = _field
	return nil
}
func (p *GetModelResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetModelResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetModelResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetModelResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetModel() {
		if err = oprot.WriteFieldBegin("model", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Model.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetModelResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetModelResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetModelResponse(%+v)", *p)

}

func (p *GetModelResponse) DeepEqual(ano *GetModelResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Model) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetModelResponse) Field1DeepEqual(src *manage.Model) bool {

	if !p.Model.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetModelResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type LLMManageService interface {
	ListModels(ctx context.Context, req *ListModelsRequest) (r *ListModelsResponse, err error)

	GetModel(ctx context.Context, req *GetModelRequest) (r *GetModelResponse, err error)
}

type LLMManageServiceClient struct {
	c thrift.TClient
}

func NewLLMManageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LLMManageServiceClient {
	return &LLMManageServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLLMManageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LLMManageServiceClient {
	return &LLMManageServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLLMManageServiceClient(c thrift.TClient) *LLMManageServiceClient {
	return &LLMManageServiceClient{
		c: c,
	}
}

func (p *LLMManageServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *LLMManageServiceClient) ListModels(ctx context.Context, req *ListModelsRequest) (r *ListModelsResponse, err error) {
	var _args LLMManageServiceListModelsArgs
	_args.Req = req
	var _result LLMManageServiceListModelsResult
	if err = p.Client_().Call(ctx, "ListModels", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LLMManageServiceClient) GetModel(ctx context.Context, req *GetModelRequest) (r *GetModelResponse, err error) {
	var _args LLMManageServiceGetModelArgs
	_args.Req = req
	var _result LLMManageServiceGetModelResult
	if err = p.Client_().Call(ctx, "GetModel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type LLMManageServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LLMManageService
}

func (p *LLMManageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LLMManageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LLMManageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLLMManageServiceProcessor(handler LLMManageService) *LLMManageServiceProcessor {
	self := &LLMManageServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ListModels", &lLMManageServiceProcessorListModels{handler: handler})
	self.AddToProcessorMap("GetModel", &lLMManageServiceProcessorGetModel{handler: handler})
	return self
}
func (p *LLMManageServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type lLMManageServiceProcessorListModels struct {
	handler LLMManageService
}

func (p *lLMManageServiceProcessorListModels) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LLMManageServiceListModelsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListModels", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LLMManageServiceListModelsResult{}
	var retval *ListModelsResponse
	if retval, err2 = p.handler.ListModels(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListModels: "+err2.Error())
		oprot.WriteMessageBegin("ListModels", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListModels", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lLMManageServiceProcessorGetModel struct {
	handler LLMManageService
}

func (p *lLMManageServiceProcessorGetModel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LLMManageServiceGetModelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetModel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LLMManageServiceGetModelResult{}
	var retval *GetModelResponse
	if retval, err2 = p.handler.GetModel(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetModel: "+err2.Error())
		oprot.WriteMessageBegin("GetModel", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetModel", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type LLMManageServiceListModelsArgs struct {
	Req *ListModelsRequest `thrift:"req,1" frugal:"1,default,ListModelsRequest"`
}

func NewLLMManageServiceListModelsArgs() *LLMManageServiceListModelsArgs {
	return &LLMManageServiceListModelsArgs{}
}

func (p *LLMManageServiceListModelsArgs) InitDefault() {
}

var LLMManageServiceListModelsArgs_Req_DEFAULT *ListModelsRequest

func (p *LLMManageServiceListModelsArgs) GetReq() (v *ListModelsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return LLMManageServiceListModelsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LLMManageServiceListModelsArgs) SetReq(val *ListModelsRequest) {
	p.Req = val
}

var fieldIDToName_LLMManageServiceListModelsArgs = map[int16]string{
	1: "req",
}

func (p *LLMManageServiceListModelsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LLMManageServiceListModelsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LLMManageServiceListModelsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LLMManageServiceListModelsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListModelsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LLMManageServiceListModelsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListModels_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LLMManageServiceListModelsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LLMManageServiceListModelsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LLMManageServiceListModelsArgs(%+v)", *p)

}

func (p *LLMManageServiceListModelsArgs) DeepEqual(ano *LLMManageServiceListModelsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LLMManageServiceListModelsArgs) Field1DeepEqual(src *ListModelsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LLMManageServiceListModelsResult struct {
	Success *ListModelsResponse `thrift:"success,0,optional" frugal:"0,optional,ListModelsResponse"`
}

func NewLLMManageServiceListModelsResult() *LLMManageServiceListModelsResult {
	return &LLMManageServiceListModelsResult{}
}

func (p *LLMManageServiceListModelsResult) InitDefault() {
}

var LLMManageServiceListModelsResult_Success_DEFAULT *ListModelsResponse

func (p *LLMManageServiceListModelsResult) GetSuccess() (v *ListModelsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return LLMManageServiceListModelsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LLMManageServiceListModelsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListModelsResponse)
}

var fieldIDToName_LLMManageServiceListModelsResult = map[int16]string{
	0: "success",
}

func (p *LLMManageServiceListModelsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LLMManageServiceListModelsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LLMManageServiceListModelsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LLMManageServiceListModelsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListModelsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LLMManageServiceListModelsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListModels_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LLMManageServiceListModelsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LLMManageServiceListModelsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LLMManageServiceListModelsResult(%+v)", *p)

}

func (p *LLMManageServiceListModelsResult) DeepEqual(ano *LLMManageServiceListModelsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LLMManageServiceListModelsResult) Field0DeepEqual(src *ListModelsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LLMManageServiceGetModelArgs struct {
	Req *GetModelRequest `thrift:"req,1" frugal:"1,default,GetModelRequest"`
}

func NewLLMManageServiceGetModelArgs() *LLMManageServiceGetModelArgs {
	return &LLMManageServiceGetModelArgs{}
}

func (p *LLMManageServiceGetModelArgs) InitDefault() {
}

var LLMManageServiceGetModelArgs_Req_DEFAULT *GetModelRequest

func (p *LLMManageServiceGetModelArgs) GetReq() (v *GetModelRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return LLMManageServiceGetModelArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LLMManageServiceGetModelArgs) SetReq(val *GetModelRequest) {
	p.Req = val
}

var fieldIDToName_LLMManageServiceGetModelArgs = map[int16]string{
	1: "req",
}

func (p *LLMManageServiceGetModelArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LLMManageServiceGetModelArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LLMManageServiceGetModelArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LLMManageServiceGetModelArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetModelRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LLMManageServiceGetModelArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetModel_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LLMManageServiceGetModelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LLMManageServiceGetModelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LLMManageServiceGetModelArgs(%+v)", *p)

}

func (p *LLMManageServiceGetModelArgs) DeepEqual(ano *LLMManageServiceGetModelArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LLMManageServiceGetModelArgs) Field1DeepEqual(src *GetModelRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LLMManageServiceGetModelResult struct {
	Success *GetModelResponse `thrift:"success,0,optional" frugal:"0,optional,GetModelResponse"`
}

func NewLLMManageServiceGetModelResult() *LLMManageServiceGetModelResult {
	return &LLMManageServiceGetModelResult{}
}

func (p *LLMManageServiceGetModelResult) InitDefault() {
}

var LLMManageServiceGetModelResult_Success_DEFAULT *GetModelResponse

func (p *LLMManageServiceGetModelResult) GetSuccess() (v *GetModelResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return LLMManageServiceGetModelResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LLMManageServiceGetModelResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetModelResponse)
}

var fieldIDToName_LLMManageServiceGetModelResult = map[int16]string{
	0: "success",
}

func (p *LLMManageServiceGetModelResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LLMManageServiceGetModelResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LLMManageServiceGetModelResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LLMManageServiceGetModelResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetModelResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LLMManageServiceGetModelResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetModel_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LLMManageServiceGetModelResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LLMManageServiceGetModelResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LLMManageServiceGetModelResult(%+v)", *p)

}

func (p *LLMManageServiceGetModelResult) DeepEqual(ano *LLMManageServiceGetModelResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LLMManageServiceGetModelResult) Field0DeepEqual(src *GetModelResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
