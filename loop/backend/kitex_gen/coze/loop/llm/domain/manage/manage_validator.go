// Code generated by Validator v0.2.6. DO NOT EDIT.

package manage

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *Model) IsValid() error {
	if p.Ability != nil {
		if err := p.Ability.IsValid(); err != nil {
			return fmt.Errorf("field Ability not valid, %w", err)
		}
	}
	if p.ProtocolConfig != nil {
		if err := p.ProtocolConfig.IsValid(); err != nil {
			return fmt.Errorf("field ProtocolConfig not valid, %w", err)
		}
	}
	if p.ParamConfig != nil {
		if err := p.ParamConfig.IsValid(); err != nil {
			return fmt.Errorf("field ParamConfig not valid, %w", err)
		}
	}
	return nil
}
func (p *Ability) IsValid() error {
	if p.AbilityMultiModal != nil {
		if err := p.AbilityMultiModal.IsValid(); err != nil {
			return fmt.Errorf("field AbilityMultiModal not valid, %w", err)
		}
	}
	return nil
}
func (p *AbilityMultiModal) IsValid() error {
	if p.AbilityImage != nil {
		if err := p.AbilityImage.IsValid(); err != nil {
			return fmt.Errorf("field AbilityImage not valid, %w", err)
		}
	}
	return nil
}
func (p *AbilityImage) IsValid() error {
	return nil
}
func (p *ProtocolConfig) IsValid() error {
	if p.ProtocolConfigArk != nil {
		if err := p.ProtocolConfigArk.IsValid(); err != nil {
			return fmt.Errorf("field ProtocolConfigArk not valid, %w", err)
		}
	}
	if p.ProtocolConfigOpenai != nil {
		if err := p.ProtocolConfigOpenai.IsValid(); err != nil {
			return fmt.Errorf("field ProtocolConfigOpenai not valid, %w", err)
		}
	}
	if p.ProtocolConfigClaude != nil {
		if err := p.ProtocolConfigClaude.IsValid(); err != nil {
			return fmt.Errorf("field ProtocolConfigClaude not valid, %w", err)
		}
	}
	if p.ProtocolConfigDeepseek != nil {
		if err := p.ProtocolConfigDeepseek.IsValid(); err != nil {
			return fmt.Errorf("field ProtocolConfigDeepseek not valid, %w", err)
		}
	}
	if p.ProtocolConfigOllama != nil {
		if err := p.ProtocolConfigOllama.IsValid(); err != nil {
			return fmt.Errorf("field ProtocolConfigOllama not valid, %w", err)
		}
	}
	if p.ProtocolConfigQwen != nil {
		if err := p.ProtocolConfigQwen.IsValid(); err != nil {
			return fmt.Errorf("field ProtocolConfigQwen not valid, %w", err)
		}
	}
	if p.ProtocolConfigQianfan != nil {
		if err := p.ProtocolConfigQianfan.IsValid(); err != nil {
			return fmt.Errorf("field ProtocolConfigQianfan not valid, %w", err)
		}
	}
	if p.ProtocolConfigGemini != nil {
		if err := p.ProtocolConfigGemini.IsValid(); err != nil {
			return fmt.Errorf("field ProtocolConfigGemini not valid, %w", err)
		}
	}
	if p.ProtocolConfigArkbot != nil {
		if err := p.ProtocolConfigArkbot.IsValid(); err != nil {
			return fmt.Errorf("field ProtocolConfigArkbot not valid, %w", err)
		}
	}
	return nil
}
func (p *ProtocolConfigArk) IsValid() error {
	return nil
}
func (p *ProtocolConfigOpenAI) IsValid() error {
	return nil
}
func (p *ProtocolConfigClaude) IsValid() error {
	return nil
}
func (p *ProtocolConfigDeepSeek) IsValid() error {
	return nil
}
func (p *ProtocolConfigGemini) IsValid() error {
	return nil
}
func (p *ProtocolConfigGeminiSafetySetting) IsValid() error {
	return nil
}
func (p *ProtocolConfigOllama) IsValid() error {
	return nil
}
func (p *ProtocolConfigQwen) IsValid() error {
	return nil
}
func (p *ProtocolConfigQianfan) IsValid() error {
	return nil
}
func (p *ProtocolConfigArkbot) IsValid() error {
	return nil
}
func (p *ScenarioConfig) IsValid() error {
	if p.Quota != nil {
		if err := p.Quota.IsValid(); err != nil {
			return fmt.Errorf("field Quota not valid, %w", err)
		}
	}
	return nil
}
func (p *ParamConfig) IsValid() error {
	return nil
}
func (p *ParamSchema) IsValid() error {
	return nil
}
func (p *ParamOption) IsValid() error {
	return nil
}
func (p *Quota) IsValid() error {
	return nil
}
