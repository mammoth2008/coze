// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package manage

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/domain/common"
	"strings"
)

const (
	ProtocolArk = "ark"

	ProtocolOpenai = "openai"

	ProtocolClaude = "claude"

	ProtocolDeepseek = "deepseek"

	ProtocolOllama = "ollama"

	ProtocolGemini = "gemini"

	ProtocolQwen = "qwen"

	ProtocolQianfan = "qianfan"

	ProtocolArkbot = "arkbot"

	ParamTypeFloat = "float"

	ParamTypeInt = "int"

	ParamTypeBoolean = "boolean"

	ParamTypeString = "string"
)

type Protocol = string

type ParamType = string

type Model struct {
	ModelID         *int64                              `thrift:"model_id,1,optional" frugal:"1,optional,i64" json:"model_id" form:"model_id" query:"model_id"`
	WorkspaceID     *int64                              `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	Name            *string                             `thrift:"name,3,optional" frugal:"3,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Desc            *string                             `thrift:"desc,4,optional" frugal:"4,optional,string" form:"desc" json:"desc,omitempty" query:"desc"`
	Ability         *Ability                            `thrift:"ability,5,optional" frugal:"5,optional,Ability" form:"ability" json:"ability,omitempty" query:"ability"`
	Protocol        *Protocol                           `thrift:"protocol,6,optional" frugal:"6,optional,string" form:"protocol" json:"protocol,omitempty" query:"protocol"`
	ProtocolConfig  *ProtocolConfig                     `thrift:"protocol_config,7,optional" frugal:"7,optional,ProtocolConfig" form:"protocol_config" json:"protocol_config,omitempty" query:"protocol_config"`
	ScenarioConfigs map[common.Scenario]*ScenarioConfig `thrift:"scenario_configs,8,optional" frugal:"8,optional,map<string:ScenarioConfig>" form:"scenario_configs" json:"scenario_configs,omitempty" query:"scenario_configs"`
	ParamConfig     *ParamConfig                        `thrift:"param_config,9,optional" frugal:"9,optional,ParamConfig" form:"param_config" json:"param_config,omitempty" query:"param_config"`
}

func NewModel() *Model {
	return &Model{}
}

func (p *Model) InitDefault() {
}

var Model_ModelID_DEFAULT int64

func (p *Model) GetModelID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetModelID() {
		return Model_ModelID_DEFAULT
	}
	return *p.ModelID
}

var Model_WorkspaceID_DEFAULT int64

func (p *Model) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return Model_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var Model_Name_DEFAULT string

func (p *Model) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return Model_Name_DEFAULT
	}
	return *p.Name
}

var Model_Desc_DEFAULT string

func (p *Model) GetDesc() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDesc() {
		return Model_Desc_DEFAULT
	}
	return *p.Desc
}

var Model_Ability_DEFAULT *Ability

func (p *Model) GetAbility() (v *Ability) {
	if p == nil {
		return
	}
	if !p.IsSetAbility() {
		return Model_Ability_DEFAULT
	}
	return p.Ability
}

var Model_Protocol_DEFAULT Protocol

func (p *Model) GetProtocol() (v Protocol) {
	if p == nil {
		return
	}
	if !p.IsSetProtocol() {
		return Model_Protocol_DEFAULT
	}
	return *p.Protocol
}

var Model_ProtocolConfig_DEFAULT *ProtocolConfig

func (p *Model) GetProtocolConfig() (v *ProtocolConfig) {
	if p == nil {
		return
	}
	if !p.IsSetProtocolConfig() {
		return Model_ProtocolConfig_DEFAULT
	}
	return p.ProtocolConfig
}

var Model_ScenarioConfigs_DEFAULT map[common.Scenario]*ScenarioConfig

func (p *Model) GetScenarioConfigs() (v map[common.Scenario]*ScenarioConfig) {
	if p == nil {
		return
	}
	if !p.IsSetScenarioConfigs() {
		return Model_ScenarioConfigs_DEFAULT
	}
	return p.ScenarioConfigs
}

var Model_ParamConfig_DEFAULT *ParamConfig

func (p *Model) GetParamConfig() (v *ParamConfig) {
	if p == nil {
		return
	}
	if !p.IsSetParamConfig() {
		return Model_ParamConfig_DEFAULT
	}
	return p.ParamConfig
}
func (p *Model) SetModelID(val *int64) {
	p.ModelID = val
}
func (p *Model) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *Model) SetName(val *string) {
	p.Name = val
}
func (p *Model) SetDesc(val *string) {
	p.Desc = val
}
func (p *Model) SetAbility(val *Ability) {
	p.Ability = val
}
func (p *Model) SetProtocol(val *Protocol) {
	p.Protocol = val
}
func (p *Model) SetProtocolConfig(val *ProtocolConfig) {
	p.ProtocolConfig = val
}
func (p *Model) SetScenarioConfigs(val map[common.Scenario]*ScenarioConfig) {
	p.ScenarioConfigs = val
}
func (p *Model) SetParamConfig(val *ParamConfig) {
	p.ParamConfig = val
}

var fieldIDToName_Model = map[int16]string{
	1: "model_id",
	2: "workspace_id",
	3: "name",
	4: "desc",
	5: "ability",
	6: "protocol",
	7: "protocol_config",
	8: "scenario_configs",
	9: "param_config",
}

func (p *Model) IsSetModelID() bool {
	return p.ModelID != nil
}

func (p *Model) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *Model) IsSetName() bool {
	return p.Name != nil
}

func (p *Model) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *Model) IsSetAbility() bool {
	return p.Ability != nil
}

func (p *Model) IsSetProtocol() bool {
	return p.Protocol != nil
}

func (p *Model) IsSetProtocolConfig() bool {
	return p.ProtocolConfig != nil
}

func (p *Model) IsSetScenarioConfigs() bool {
	return p.ScenarioConfigs != nil
}

func (p *Model) IsSetParamConfig() bool {
	return p.ParamConfig != nil
}

func (p *Model) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Model[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Model) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ModelID = _field
	return nil
}
func (p *Model) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *Model) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Model) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *Model) ReadField5(iprot thrift.TProtocol) error {
	_field := NewAbility()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Ability = _field
	return nil
}
func (p *Model) ReadField6(iprot thrift.TProtocol) error {

	var _field *Protocol
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Protocol = _field
	return nil
}
func (p *Model) ReadField7(iprot thrift.TProtocol) error {
	_field := NewProtocolConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ProtocolConfig = _field
	return nil
}
func (p *Model) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[common.Scenario]*ScenarioConfig, size)
	values := make([]ScenarioConfig, size)
	for i := 0; i < size; i++ {
		var _key common.Scenario
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ScenarioConfigs = _field
	return nil
}
func (p *Model) ReadField9(iprot thrift.TProtocol) error {
	_field := NewParamConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ParamConfig = _field
	return nil
}

func (p *Model) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Model"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Model) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelID() {
		if err = oprot.WriteFieldBegin("model_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ModelID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Model) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Model) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Model) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Model) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAbility() {
		if err = oprot.WriteFieldBegin("ability", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Ability.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Model) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocol() {
		if err = oprot.WriteFieldBegin("protocol", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Protocol); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *Model) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocolConfig() {
		if err = oprot.WriteFieldBegin("protocol_config", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ProtocolConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *Model) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetScenarioConfigs() {
		if err = oprot.WriteFieldBegin("scenario_configs", thrift.MAP, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ScenarioConfigs)); err != nil {
			return err
		}
		for k, v := range p.ScenarioConfigs {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *Model) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetParamConfig() {
		if err = oprot.WriteFieldBegin("param_config", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ParamConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Model) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Model(%+v)", *p)

}

func (p *Model) DeepEqual(ano *Model) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ModelID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field5DeepEqual(ano.Ability) {
		return false
	}
	if !p.Field6DeepEqual(ano.Protocol) {
		return false
	}
	if !p.Field7DeepEqual(ano.ProtocolConfig) {
		return false
	}
	if !p.Field8DeepEqual(ano.ScenarioConfigs) {
		return false
	}
	if !p.Field9DeepEqual(ano.ParamConfig) {
		return false
	}
	return true
}

func (p *Model) Field1DeepEqual(src *int64) bool {

	if p.ModelID == src {
		return true
	} else if p.ModelID == nil || src == nil {
		return false
	}
	if *p.ModelID != *src {
		return false
	}
	return true
}
func (p *Model) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *Model) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Model) Field4DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *Model) Field5DeepEqual(src *Ability) bool {

	if !p.Ability.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Model) Field6DeepEqual(src *Protocol) bool {

	if p.Protocol == src {
		return true
	} else if p.Protocol == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Protocol, *src) != 0 {
		return false
	}
	return true
}
func (p *Model) Field7DeepEqual(src *ProtocolConfig) bool {

	if !p.ProtocolConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Model) Field8DeepEqual(src map[common.Scenario]*ScenarioConfig) bool {

	if len(p.ScenarioConfigs) != len(src) {
		return false
	}
	for k, v := range p.ScenarioConfigs {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Model) Field9DeepEqual(src *ParamConfig) bool {

	if !p.ParamConfig.DeepEqual(src) {
		return false
	}
	return true
}

type Ability struct {
	MaxContextTokens  *int64             `thrift:"max_context_tokens,1,optional" frugal:"1,optional,i64" json:"max_context_tokens" form:"max_context_tokens" query:"max_context_tokens"`
	MaxInputTokens    *int64             `thrift:"max_input_tokens,2,optional" frugal:"2,optional,i64" json:"max_input_tokens" form:"max_input_tokens" query:"max_input_tokens"`
	MaxOutputTokens   *int64             `thrift:"max_output_tokens,3,optional" frugal:"3,optional,i64" json:"max_output_tokens" form:"max_output_tokens" query:"max_output_tokens"`
	FunctionCall      *bool              `thrift:"function_call,4,optional" frugal:"4,optional,bool" form:"function_call" json:"function_call,omitempty" query:"function_call"`
	JSONMode          *bool              `thrift:"json_mode,5,optional" frugal:"5,optional,bool" form:"json_mode" json:"json_mode,omitempty" query:"json_mode"`
	MultiModal        *bool              `thrift:"multi_modal,6,optional" frugal:"6,optional,bool" form:"multi_modal" json:"multi_modal,omitempty" query:"multi_modal"`
	AbilityMultiModal *AbilityMultiModal `thrift:"ability_multi_modal,7,optional" frugal:"7,optional,AbilityMultiModal" form:"ability_multi_modal" json:"ability_multi_modal,omitempty" query:"ability_multi_modal"`
}

func NewAbility() *Ability {
	return &Ability{}
}

func (p *Ability) InitDefault() {
}

var Ability_MaxContextTokens_DEFAULT int64

func (p *Ability) GetMaxContextTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxContextTokens() {
		return Ability_MaxContextTokens_DEFAULT
	}
	return *p.MaxContextTokens
}

var Ability_MaxInputTokens_DEFAULT int64

func (p *Ability) GetMaxInputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxInputTokens() {
		return Ability_MaxInputTokens_DEFAULT
	}
	return *p.MaxInputTokens
}

var Ability_MaxOutputTokens_DEFAULT int64

func (p *Ability) GetMaxOutputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxOutputTokens() {
		return Ability_MaxOutputTokens_DEFAULT
	}
	return *p.MaxOutputTokens
}

var Ability_FunctionCall_DEFAULT bool

func (p *Ability) GetFunctionCall() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetFunctionCall() {
		return Ability_FunctionCall_DEFAULT
	}
	return *p.FunctionCall
}

var Ability_JSONMode_DEFAULT bool

func (p *Ability) GetJSONMode() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetJSONMode() {
		return Ability_JSONMode_DEFAULT
	}
	return *p.JSONMode
}

var Ability_MultiModal_DEFAULT bool

func (p *Ability) GetMultiModal() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetMultiModal() {
		return Ability_MultiModal_DEFAULT
	}
	return *p.MultiModal
}

var Ability_AbilityMultiModal_DEFAULT *AbilityMultiModal

func (p *Ability) GetAbilityMultiModal() (v *AbilityMultiModal) {
	if p == nil {
		return
	}
	if !p.IsSetAbilityMultiModal() {
		return Ability_AbilityMultiModal_DEFAULT
	}
	return p.AbilityMultiModal
}
func (p *Ability) SetMaxContextTokens(val *int64) {
	p.MaxContextTokens = val
}
func (p *Ability) SetMaxInputTokens(val *int64) {
	p.MaxInputTokens = val
}
func (p *Ability) SetMaxOutputTokens(val *int64) {
	p.MaxOutputTokens = val
}
func (p *Ability) SetFunctionCall(val *bool) {
	p.FunctionCall = val
}
func (p *Ability) SetJSONMode(val *bool) {
	p.JSONMode = val
}
func (p *Ability) SetMultiModal(val *bool) {
	p.MultiModal = val
}
func (p *Ability) SetAbilityMultiModal(val *AbilityMultiModal) {
	p.AbilityMultiModal = val
}

var fieldIDToName_Ability = map[int16]string{
	1: "max_context_tokens",
	2: "max_input_tokens",
	3: "max_output_tokens",
	4: "function_call",
	5: "json_mode",
	6: "multi_modal",
	7: "ability_multi_modal",
}

func (p *Ability) IsSetMaxContextTokens() bool {
	return p.MaxContextTokens != nil
}

func (p *Ability) IsSetMaxInputTokens() bool {
	return p.MaxInputTokens != nil
}

func (p *Ability) IsSetMaxOutputTokens() bool {
	return p.MaxOutputTokens != nil
}

func (p *Ability) IsSetFunctionCall() bool {
	return p.FunctionCall != nil
}

func (p *Ability) IsSetJSONMode() bool {
	return p.JSONMode != nil
}

func (p *Ability) IsSetMultiModal() bool {
	return p.MultiModal != nil
}

func (p *Ability) IsSetAbilityMultiModal() bool {
	return p.AbilityMultiModal != nil
}

func (p *Ability) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Ability[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Ability) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxContextTokens = _field
	return nil
}
func (p *Ability) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxInputTokens = _field
	return nil
}
func (p *Ability) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxOutputTokens = _field
	return nil
}
func (p *Ability) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FunctionCall = _field
	return nil
}
func (p *Ability) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JSONMode = _field
	return nil
}
func (p *Ability) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MultiModal = _field
	return nil
}
func (p *Ability) ReadField7(iprot thrift.TProtocol) error {
	_field := NewAbilityMultiModal()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AbilityMultiModal = _field
	return nil
}

func (p *Ability) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Ability"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Ability) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxContextTokens() {
		if err = oprot.WriteFieldBegin("max_context_tokens", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxContextTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Ability) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxInputTokens() {
		if err = oprot.WriteFieldBegin("max_input_tokens", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxInputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Ability) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxOutputTokens() {
		if err = oprot.WriteFieldBegin("max_output_tokens", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxOutputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Ability) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunctionCall() {
		if err = oprot.WriteFieldBegin("function_call", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.FunctionCall); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Ability) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetJSONMode() {
		if err = oprot.WriteFieldBegin("json_mode", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.JSONMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Ability) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultiModal() {
		if err = oprot.WriteFieldBegin("multi_modal", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.MultiModal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *Ability) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAbilityMultiModal() {
		if err = oprot.WriteFieldBegin("ability_multi_modal", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AbilityMultiModal.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Ability) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ability(%+v)", *p)

}

func (p *Ability) DeepEqual(ano *Ability) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MaxContextTokens) {
		return false
	}
	if !p.Field2DeepEqual(ano.MaxInputTokens) {
		return false
	}
	if !p.Field3DeepEqual(ano.MaxOutputTokens) {
		return false
	}
	if !p.Field4DeepEqual(ano.FunctionCall) {
		return false
	}
	if !p.Field5DeepEqual(ano.JSONMode) {
		return false
	}
	if !p.Field6DeepEqual(ano.MultiModal) {
		return false
	}
	if !p.Field7DeepEqual(ano.AbilityMultiModal) {
		return false
	}
	return true
}

func (p *Ability) Field1DeepEqual(src *int64) bool {

	if p.MaxContextTokens == src {
		return true
	} else if p.MaxContextTokens == nil || src == nil {
		return false
	}
	if *p.MaxContextTokens != *src {
		return false
	}
	return true
}
func (p *Ability) Field2DeepEqual(src *int64) bool {

	if p.MaxInputTokens == src {
		return true
	} else if p.MaxInputTokens == nil || src == nil {
		return false
	}
	if *p.MaxInputTokens != *src {
		return false
	}
	return true
}
func (p *Ability) Field3DeepEqual(src *int64) bool {

	if p.MaxOutputTokens == src {
		return true
	} else if p.MaxOutputTokens == nil || src == nil {
		return false
	}
	if *p.MaxOutputTokens != *src {
		return false
	}
	return true
}
func (p *Ability) Field4DeepEqual(src *bool) bool {

	if p.FunctionCall == src {
		return true
	} else if p.FunctionCall == nil || src == nil {
		return false
	}
	if *p.FunctionCall != *src {
		return false
	}
	return true
}
func (p *Ability) Field5DeepEqual(src *bool) bool {

	if p.JSONMode == src {
		return true
	} else if p.JSONMode == nil || src == nil {
		return false
	}
	if *p.JSONMode != *src {
		return false
	}
	return true
}
func (p *Ability) Field6DeepEqual(src *bool) bool {

	if p.MultiModal == src {
		return true
	} else if p.MultiModal == nil || src == nil {
		return false
	}
	if *p.MultiModal != *src {
		return false
	}
	return true
}
func (p *Ability) Field7DeepEqual(src *AbilityMultiModal) bool {

	if !p.AbilityMultiModal.DeepEqual(src) {
		return false
	}
	return true
}

type AbilityMultiModal struct {
	Image        *bool         `thrift:"image,1,optional" frugal:"1,optional,bool" form:"image" json:"image,omitempty" query:"image"`
	AbilityImage *AbilityImage `thrift:"ability_image,2,optional" frugal:"2,optional,AbilityImage" form:"ability_image" json:"ability_image,omitempty" query:"ability_image"`
}

func NewAbilityMultiModal() *AbilityMultiModal {
	return &AbilityMultiModal{}
}

func (p *AbilityMultiModal) InitDefault() {
}

var AbilityMultiModal_Image_DEFAULT bool

func (p *AbilityMultiModal) GetImage() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetImage() {
		return AbilityMultiModal_Image_DEFAULT
	}
	return *p.Image
}

var AbilityMultiModal_AbilityImage_DEFAULT *AbilityImage

func (p *AbilityMultiModal) GetAbilityImage() (v *AbilityImage) {
	if p == nil {
		return
	}
	if !p.IsSetAbilityImage() {
		return AbilityMultiModal_AbilityImage_DEFAULT
	}
	return p.AbilityImage
}
func (p *AbilityMultiModal) SetImage(val *bool) {
	p.Image = val
}
func (p *AbilityMultiModal) SetAbilityImage(val *AbilityImage) {
	p.AbilityImage = val
}

var fieldIDToName_AbilityMultiModal = map[int16]string{
	1: "image",
	2: "ability_image",
}

func (p *AbilityMultiModal) IsSetImage() bool {
	return p.Image != nil
}

func (p *AbilityMultiModal) IsSetAbilityImage() bool {
	return p.AbilityImage != nil
}

func (p *AbilityMultiModal) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AbilityMultiModal[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AbilityMultiModal) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Image = _field
	return nil
}
func (p *AbilityMultiModal) ReadField2(iprot thrift.TProtocol) error {
	_field := NewAbilityImage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AbilityImage = _field
	return nil
}

func (p *AbilityMultiModal) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AbilityMultiModal"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AbilityMultiModal) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetImage() {
		if err = oprot.WriteFieldBegin("image", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Image); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AbilityMultiModal) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAbilityImage() {
		if err = oprot.WriteFieldBegin("ability_image", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AbilityImage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AbilityMultiModal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AbilityMultiModal(%+v)", *p)

}

func (p *AbilityMultiModal) DeepEqual(ano *AbilityMultiModal) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Image) {
		return false
	}
	if !p.Field2DeepEqual(ano.AbilityImage) {
		return false
	}
	return true
}

func (p *AbilityMultiModal) Field1DeepEqual(src *bool) bool {

	if p.Image == src {
		return true
	} else if p.Image == nil || src == nil {
		return false
	}
	if *p.Image != *src {
		return false
	}
	return true
}
func (p *AbilityMultiModal) Field2DeepEqual(src *AbilityImage) bool {

	if !p.AbilityImage.DeepEqual(src) {
		return false
	}
	return true
}

type AbilityImage struct {
	URLEnabled    *bool  `thrift:"url_enabled,1,optional" frugal:"1,optional,bool" form:"url_enabled" json:"url_enabled,omitempty" query:"url_enabled"`
	BinaryEnabled *bool  `thrift:"binary_enabled,2,optional" frugal:"2,optional,bool" form:"binary_enabled" json:"binary_enabled,omitempty" query:"binary_enabled"`
	MaxImageSize  *int64 `thrift:"max_image_size,3,optional" frugal:"3,optional,i64" json:"max_image_size" form:"max_image_size" query:"max_image_size"`
	MaxImageCount *int64 `thrift:"max_image_count,4,optional" frugal:"4,optional,i64" json:"max_image_count" form:"max_image_count" query:"max_image_count"`
}

func NewAbilityImage() *AbilityImage {
	return &AbilityImage{}
}

func (p *AbilityImage) InitDefault() {
}

var AbilityImage_URLEnabled_DEFAULT bool

func (p *AbilityImage) GetURLEnabled() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetURLEnabled() {
		return AbilityImage_URLEnabled_DEFAULT
	}
	return *p.URLEnabled
}

var AbilityImage_BinaryEnabled_DEFAULT bool

func (p *AbilityImage) GetBinaryEnabled() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetBinaryEnabled() {
		return AbilityImage_BinaryEnabled_DEFAULT
	}
	return *p.BinaryEnabled
}

var AbilityImage_MaxImageSize_DEFAULT int64

func (p *AbilityImage) GetMaxImageSize() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxImageSize() {
		return AbilityImage_MaxImageSize_DEFAULT
	}
	return *p.MaxImageSize
}

var AbilityImage_MaxImageCount_DEFAULT int64

func (p *AbilityImage) GetMaxImageCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxImageCount() {
		return AbilityImage_MaxImageCount_DEFAULT
	}
	return *p.MaxImageCount
}
func (p *AbilityImage) SetURLEnabled(val *bool) {
	p.URLEnabled = val
}
func (p *AbilityImage) SetBinaryEnabled(val *bool) {
	p.BinaryEnabled = val
}
func (p *AbilityImage) SetMaxImageSize(val *int64) {
	p.MaxImageSize = val
}
func (p *AbilityImage) SetMaxImageCount(val *int64) {
	p.MaxImageCount = val
}

var fieldIDToName_AbilityImage = map[int16]string{
	1: "url_enabled",
	2: "binary_enabled",
	3: "max_image_size",
	4: "max_image_count",
}

func (p *AbilityImage) IsSetURLEnabled() bool {
	return p.URLEnabled != nil
}

func (p *AbilityImage) IsSetBinaryEnabled() bool {
	return p.BinaryEnabled != nil
}

func (p *AbilityImage) IsSetMaxImageSize() bool {
	return p.MaxImageSize != nil
}

func (p *AbilityImage) IsSetMaxImageCount() bool {
	return p.MaxImageCount != nil
}

func (p *AbilityImage) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AbilityImage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AbilityImage) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.URLEnabled = _field
	return nil
}
func (p *AbilityImage) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BinaryEnabled = _field
	return nil
}
func (p *AbilityImage) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxImageSize = _field
	return nil
}
func (p *AbilityImage) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxImageCount = _field
	return nil
}

func (p *AbilityImage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AbilityImage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AbilityImage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetURLEnabled() {
		if err = oprot.WriteFieldBegin("url_enabled", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.URLEnabled); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AbilityImage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinaryEnabled() {
		if err = oprot.WriteFieldBegin("binary_enabled", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.BinaryEnabled); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AbilityImage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxImageSize() {
		if err = oprot.WriteFieldBegin("max_image_size", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxImageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *AbilityImage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxImageCount() {
		if err = oprot.WriteFieldBegin("max_image_count", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxImageCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AbilityImage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AbilityImage(%+v)", *p)

}

func (p *AbilityImage) DeepEqual(ano *AbilityImage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.URLEnabled) {
		return false
	}
	if !p.Field2DeepEqual(ano.BinaryEnabled) {
		return false
	}
	if !p.Field3DeepEqual(ano.MaxImageSize) {
		return false
	}
	if !p.Field4DeepEqual(ano.MaxImageCount) {
		return false
	}
	return true
}

func (p *AbilityImage) Field1DeepEqual(src *bool) bool {

	if p.URLEnabled == src {
		return true
	} else if p.URLEnabled == nil || src == nil {
		return false
	}
	if *p.URLEnabled != *src {
		return false
	}
	return true
}
func (p *AbilityImage) Field2DeepEqual(src *bool) bool {

	if p.BinaryEnabled == src {
		return true
	} else if p.BinaryEnabled == nil || src == nil {
		return false
	}
	if *p.BinaryEnabled != *src {
		return false
	}
	return true
}
func (p *AbilityImage) Field3DeepEqual(src *int64) bool {

	if p.MaxImageSize == src {
		return true
	} else if p.MaxImageSize == nil || src == nil {
		return false
	}
	if *p.MaxImageSize != *src {
		return false
	}
	return true
}
func (p *AbilityImage) Field4DeepEqual(src *int64) bool {

	if p.MaxImageCount == src {
		return true
	} else if p.MaxImageCount == nil || src == nil {
		return false
	}
	if *p.MaxImageCount != *src {
		return false
	}
	return true
}

type ProtocolConfig struct {
	BaseURL                *string                 `thrift:"base_url,1,optional" frugal:"1,optional,string" form:"base_url" json:"base_url,omitempty" query:"base_url"`
	APIKey                 *string                 `thrift:"api_key,2,optional" frugal:"2,optional,string" form:"api_key" json:"api_key,omitempty" query:"api_key"`
	Model                  *string                 `thrift:"model,3,optional" frugal:"3,optional,string" form:"model" json:"model,omitempty" query:"model"`
	ProtocolConfigArk      *ProtocolConfigArk      `thrift:"protocol_config_ark,4,optional" frugal:"4,optional,ProtocolConfigArk" form:"protocol_config_ark" json:"protocol_config_ark,omitempty" query:"protocol_config_ark"`
	ProtocolConfigOpenai   *ProtocolConfigOpenAI   `thrift:"protocol_config_openai,5,optional" frugal:"5,optional,ProtocolConfigOpenAI" form:"protocol_config_openai" json:"protocol_config_openai,omitempty" query:"protocol_config_openai"`
	ProtocolConfigClaude   *ProtocolConfigClaude   `thrift:"protocol_config_claude,6,optional" frugal:"6,optional,ProtocolConfigClaude" form:"protocol_config_claude" json:"protocol_config_claude,omitempty" query:"protocol_config_claude"`
	ProtocolConfigDeepseek *ProtocolConfigDeepSeek `thrift:"protocol_config_deepseek,7,optional" frugal:"7,optional,ProtocolConfigDeepSeek" form:"protocol_config_deepseek" json:"protocol_config_deepseek,omitempty" query:"protocol_config_deepseek"`
	ProtocolConfigOllama   *ProtocolConfigOllama   `thrift:"protocol_config_ollama,8,optional" frugal:"8,optional,ProtocolConfigOllama" form:"protocol_config_ollama" json:"protocol_config_ollama,omitempty" query:"protocol_config_ollama"`
	ProtocolConfigQwen     *ProtocolConfigQwen     `thrift:"protocol_config_qwen,9,optional" frugal:"9,optional,ProtocolConfigQwen" form:"protocol_config_qwen" json:"protocol_config_qwen,omitempty" query:"protocol_config_qwen"`
	ProtocolConfigQianfan  *ProtocolConfigQianfan  `thrift:"protocol_config_qianfan,10,optional" frugal:"10,optional,ProtocolConfigQianfan" form:"protocol_config_qianfan" json:"protocol_config_qianfan,omitempty" query:"protocol_config_qianfan"`
	ProtocolConfigGemini   *ProtocolConfigGemini   `thrift:"protocol_config_gemini,11,optional" frugal:"11,optional,ProtocolConfigGemini" form:"protocol_config_gemini" json:"protocol_config_gemini,omitempty" query:"protocol_config_gemini"`
	ProtocolConfigArkbot   *ProtocolConfigArkbot   `thrift:"protocol_config_arkbot,12,optional" frugal:"12,optional,ProtocolConfigArkbot" form:"protocol_config_arkbot" json:"protocol_config_arkbot,omitempty" query:"protocol_config_arkbot"`
}

func NewProtocolConfig() *ProtocolConfig {
	return &ProtocolConfig{}
}

func (p *ProtocolConfig) InitDefault() {
}

var ProtocolConfig_BaseURL_DEFAULT string

func (p *ProtocolConfig) GetBaseURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetBaseURL() {
		return ProtocolConfig_BaseURL_DEFAULT
	}
	return *p.BaseURL
}

var ProtocolConfig_APIKey_DEFAULT string

func (p *ProtocolConfig) GetAPIKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAPIKey() {
		return ProtocolConfig_APIKey_DEFAULT
	}
	return *p.APIKey
}

var ProtocolConfig_Model_DEFAULT string

func (p *ProtocolConfig) GetModel() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetModel() {
		return ProtocolConfig_Model_DEFAULT
	}
	return *p.Model
}

var ProtocolConfig_ProtocolConfigArk_DEFAULT *ProtocolConfigArk

func (p *ProtocolConfig) GetProtocolConfigArk() (v *ProtocolConfigArk) {
	if p == nil {
		return
	}
	if !p.IsSetProtocolConfigArk() {
		return ProtocolConfig_ProtocolConfigArk_DEFAULT
	}
	return p.ProtocolConfigArk
}

var ProtocolConfig_ProtocolConfigOpenai_DEFAULT *ProtocolConfigOpenAI

func (p *ProtocolConfig) GetProtocolConfigOpenai() (v *ProtocolConfigOpenAI) {
	if p == nil {
		return
	}
	if !p.IsSetProtocolConfigOpenai() {
		return ProtocolConfig_ProtocolConfigOpenai_DEFAULT
	}
	return p.ProtocolConfigOpenai
}

var ProtocolConfig_ProtocolConfigClaude_DEFAULT *ProtocolConfigClaude

func (p *ProtocolConfig) GetProtocolConfigClaude() (v *ProtocolConfigClaude) {
	if p == nil {
		return
	}
	if !p.IsSetProtocolConfigClaude() {
		return ProtocolConfig_ProtocolConfigClaude_DEFAULT
	}
	return p.ProtocolConfigClaude
}

var ProtocolConfig_ProtocolConfigDeepseek_DEFAULT *ProtocolConfigDeepSeek

func (p *ProtocolConfig) GetProtocolConfigDeepseek() (v *ProtocolConfigDeepSeek) {
	if p == nil {
		return
	}
	if !p.IsSetProtocolConfigDeepseek() {
		return ProtocolConfig_ProtocolConfigDeepseek_DEFAULT
	}
	return p.ProtocolConfigDeepseek
}

var ProtocolConfig_ProtocolConfigOllama_DEFAULT *ProtocolConfigOllama

func (p *ProtocolConfig) GetProtocolConfigOllama() (v *ProtocolConfigOllama) {
	if p == nil {
		return
	}
	if !p.IsSetProtocolConfigOllama() {
		return ProtocolConfig_ProtocolConfigOllama_DEFAULT
	}
	return p.ProtocolConfigOllama
}

var ProtocolConfig_ProtocolConfigQwen_DEFAULT *ProtocolConfigQwen

func (p *ProtocolConfig) GetProtocolConfigQwen() (v *ProtocolConfigQwen) {
	if p == nil {
		return
	}
	if !p.IsSetProtocolConfigQwen() {
		return ProtocolConfig_ProtocolConfigQwen_DEFAULT
	}
	return p.ProtocolConfigQwen
}

var ProtocolConfig_ProtocolConfigQianfan_DEFAULT *ProtocolConfigQianfan

func (p *ProtocolConfig) GetProtocolConfigQianfan() (v *ProtocolConfigQianfan) {
	if p == nil {
		return
	}
	if !p.IsSetProtocolConfigQianfan() {
		return ProtocolConfig_ProtocolConfigQianfan_DEFAULT
	}
	return p.ProtocolConfigQianfan
}

var ProtocolConfig_ProtocolConfigGemini_DEFAULT *ProtocolConfigGemini

func (p *ProtocolConfig) GetProtocolConfigGemini() (v *ProtocolConfigGemini) {
	if p == nil {
		return
	}
	if !p.IsSetProtocolConfigGemini() {
		return ProtocolConfig_ProtocolConfigGemini_DEFAULT
	}
	return p.ProtocolConfigGemini
}

var ProtocolConfig_ProtocolConfigArkbot_DEFAULT *ProtocolConfigArkbot

func (p *ProtocolConfig) GetProtocolConfigArkbot() (v *ProtocolConfigArkbot) {
	if p == nil {
		return
	}
	if !p.IsSetProtocolConfigArkbot() {
		return ProtocolConfig_ProtocolConfigArkbot_DEFAULT
	}
	return p.ProtocolConfigArkbot
}
func (p *ProtocolConfig) SetBaseURL(val *string) {
	p.BaseURL = val
}
func (p *ProtocolConfig) SetAPIKey(val *string) {
	p.APIKey = val
}
func (p *ProtocolConfig) SetModel(val *string) {
	p.Model = val
}
func (p *ProtocolConfig) SetProtocolConfigArk(val *ProtocolConfigArk) {
	p.ProtocolConfigArk = val
}
func (p *ProtocolConfig) SetProtocolConfigOpenai(val *ProtocolConfigOpenAI) {
	p.ProtocolConfigOpenai = val
}
func (p *ProtocolConfig) SetProtocolConfigClaude(val *ProtocolConfigClaude) {
	p.ProtocolConfigClaude = val
}
func (p *ProtocolConfig) SetProtocolConfigDeepseek(val *ProtocolConfigDeepSeek) {
	p.ProtocolConfigDeepseek = val
}
func (p *ProtocolConfig) SetProtocolConfigOllama(val *ProtocolConfigOllama) {
	p.ProtocolConfigOllama = val
}
func (p *ProtocolConfig) SetProtocolConfigQwen(val *ProtocolConfigQwen) {
	p.ProtocolConfigQwen = val
}
func (p *ProtocolConfig) SetProtocolConfigQianfan(val *ProtocolConfigQianfan) {
	p.ProtocolConfigQianfan = val
}
func (p *ProtocolConfig) SetProtocolConfigGemini(val *ProtocolConfigGemini) {
	p.ProtocolConfigGemini = val
}
func (p *ProtocolConfig) SetProtocolConfigArkbot(val *ProtocolConfigArkbot) {
	p.ProtocolConfigArkbot = val
}

var fieldIDToName_ProtocolConfig = map[int16]string{
	1:  "base_url",
	2:  "api_key",
	3:  "model",
	4:  "protocol_config_ark",
	5:  "protocol_config_openai",
	6:  "protocol_config_claude",
	7:  "protocol_config_deepseek",
	8:  "protocol_config_ollama",
	9:  "protocol_config_qwen",
	10: "protocol_config_qianfan",
	11: "protocol_config_gemini",
	12: "protocol_config_arkbot",
}

func (p *ProtocolConfig) IsSetBaseURL() bool {
	return p.BaseURL != nil
}

func (p *ProtocolConfig) IsSetAPIKey() bool {
	return p.APIKey != nil
}

func (p *ProtocolConfig) IsSetModel() bool {
	return p.Model != nil
}

func (p *ProtocolConfig) IsSetProtocolConfigArk() bool {
	return p.ProtocolConfigArk != nil
}

func (p *ProtocolConfig) IsSetProtocolConfigOpenai() bool {
	return p.ProtocolConfigOpenai != nil
}

func (p *ProtocolConfig) IsSetProtocolConfigClaude() bool {
	return p.ProtocolConfigClaude != nil
}

func (p *ProtocolConfig) IsSetProtocolConfigDeepseek() bool {
	return p.ProtocolConfigDeepseek != nil
}

func (p *ProtocolConfig) IsSetProtocolConfigOllama() bool {
	return p.ProtocolConfigOllama != nil
}

func (p *ProtocolConfig) IsSetProtocolConfigQwen() bool {
	return p.ProtocolConfigQwen != nil
}

func (p *ProtocolConfig) IsSetProtocolConfigQianfan() bool {
	return p.ProtocolConfigQianfan != nil
}

func (p *ProtocolConfig) IsSetProtocolConfigGemini() bool {
	return p.ProtocolConfigGemini != nil
}

func (p *ProtocolConfig) IsSetProtocolConfigArkbot() bool {
	return p.ProtocolConfigArkbot != nil
}

func (p *ProtocolConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProtocolConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProtocolConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BaseURL = _field
	return nil
}
func (p *ProtocolConfig) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.APIKey = _field
	return nil
}
func (p *ProtocolConfig) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Model = _field
	return nil
}
func (p *ProtocolConfig) ReadField4(iprot thrift.TProtocol) error {
	_field := NewProtocolConfigArk()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ProtocolConfigArk = _field
	return nil
}
func (p *ProtocolConfig) ReadField5(iprot thrift.TProtocol) error {
	_field := NewProtocolConfigOpenAI()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ProtocolConfigOpenai = _field
	return nil
}
func (p *ProtocolConfig) ReadField6(iprot thrift.TProtocol) error {
	_field := NewProtocolConfigClaude()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ProtocolConfigClaude = _field
	return nil
}
func (p *ProtocolConfig) ReadField7(iprot thrift.TProtocol) error {
	_field := NewProtocolConfigDeepSeek()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ProtocolConfigDeepseek = _field
	return nil
}
func (p *ProtocolConfig) ReadField8(iprot thrift.TProtocol) error {
	_field := NewProtocolConfigOllama()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ProtocolConfigOllama = _field
	return nil
}
func (p *ProtocolConfig) ReadField9(iprot thrift.TProtocol) error {
	_field := NewProtocolConfigQwen()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ProtocolConfigQwen = _field
	return nil
}
func (p *ProtocolConfig) ReadField10(iprot thrift.TProtocol) error {
	_field := NewProtocolConfigQianfan()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ProtocolConfigQianfan = _field
	return nil
}
func (p *ProtocolConfig) ReadField11(iprot thrift.TProtocol) error {
	_field := NewProtocolConfigGemini()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ProtocolConfigGemini = _field
	return nil
}
func (p *ProtocolConfig) ReadField12(iprot thrift.TProtocol) error {
	_field := NewProtocolConfigArkbot()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ProtocolConfigArkbot = _field
	return nil
}

func (p *ProtocolConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProtocolConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProtocolConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseURL() {
		if err = oprot.WriteFieldBegin("base_url", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BaseURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProtocolConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAPIKey() {
		if err = oprot.WriteFieldBegin("api_key", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.APIKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ProtocolConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetModel() {
		if err = oprot.WriteFieldBegin("model", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Model); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ProtocolConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocolConfigArk() {
		if err = oprot.WriteFieldBegin("protocol_config_ark", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ProtocolConfigArk.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ProtocolConfig) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocolConfigOpenai() {
		if err = oprot.WriteFieldBegin("protocol_config_openai", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ProtocolConfigOpenai.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ProtocolConfig) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocolConfigClaude() {
		if err = oprot.WriteFieldBegin("protocol_config_claude", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ProtocolConfigClaude.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ProtocolConfig) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocolConfigDeepseek() {
		if err = oprot.WriteFieldBegin("protocol_config_deepseek", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ProtocolConfigDeepseek.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *ProtocolConfig) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocolConfigOllama() {
		if err = oprot.WriteFieldBegin("protocol_config_ollama", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ProtocolConfigOllama.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *ProtocolConfig) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocolConfigQwen() {
		if err = oprot.WriteFieldBegin("protocol_config_qwen", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ProtocolConfigQwen.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *ProtocolConfig) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocolConfigQianfan() {
		if err = oprot.WriteFieldBegin("protocol_config_qianfan", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ProtocolConfigQianfan.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *ProtocolConfig) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocolConfigGemini() {
		if err = oprot.WriteFieldBegin("protocol_config_gemini", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ProtocolConfigGemini.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *ProtocolConfig) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetProtocolConfigArkbot() {
		if err = oprot.WriteFieldBegin("protocol_config_arkbot", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ProtocolConfigArkbot.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ProtocolConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProtocolConfig(%+v)", *p)

}

func (p *ProtocolConfig) DeepEqual(ano *ProtocolConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseURL) {
		return false
	}
	if !p.Field2DeepEqual(ano.APIKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.Model) {
		return false
	}
	if !p.Field4DeepEqual(ano.ProtocolConfigArk) {
		return false
	}
	if !p.Field5DeepEqual(ano.ProtocolConfigOpenai) {
		return false
	}
	if !p.Field6DeepEqual(ano.ProtocolConfigClaude) {
		return false
	}
	if !p.Field7DeepEqual(ano.ProtocolConfigDeepseek) {
		return false
	}
	if !p.Field8DeepEqual(ano.ProtocolConfigOllama) {
		return false
	}
	if !p.Field9DeepEqual(ano.ProtocolConfigQwen) {
		return false
	}
	if !p.Field10DeepEqual(ano.ProtocolConfigQianfan) {
		return false
	}
	if !p.Field11DeepEqual(ano.ProtocolConfigGemini) {
		return false
	}
	if !p.Field12DeepEqual(ano.ProtocolConfigArkbot) {
		return false
	}
	return true
}

func (p *ProtocolConfig) Field1DeepEqual(src *string) bool {

	if p.BaseURL == src {
		return true
	} else if p.BaseURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BaseURL, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfig) Field2DeepEqual(src *string) bool {

	if p.APIKey == src {
		return true
	} else if p.APIKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.APIKey, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfig) Field3DeepEqual(src *string) bool {

	if p.Model == src {
		return true
	} else if p.Model == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Model, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfig) Field4DeepEqual(src *ProtocolConfigArk) bool {

	if !p.ProtocolConfigArk.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProtocolConfig) Field5DeepEqual(src *ProtocolConfigOpenAI) bool {

	if !p.ProtocolConfigOpenai.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProtocolConfig) Field6DeepEqual(src *ProtocolConfigClaude) bool {

	if !p.ProtocolConfigClaude.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProtocolConfig) Field7DeepEqual(src *ProtocolConfigDeepSeek) bool {

	if !p.ProtocolConfigDeepseek.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProtocolConfig) Field8DeepEqual(src *ProtocolConfigOllama) bool {

	if !p.ProtocolConfigOllama.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProtocolConfig) Field9DeepEqual(src *ProtocolConfigQwen) bool {

	if !p.ProtocolConfigQwen.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProtocolConfig) Field10DeepEqual(src *ProtocolConfigQianfan) bool {

	if !p.ProtocolConfigQianfan.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProtocolConfig) Field11DeepEqual(src *ProtocolConfigGemini) bool {

	if !p.ProtocolConfigGemini.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ProtocolConfig) Field12DeepEqual(src *ProtocolConfigArkbot) bool {

	if !p.ProtocolConfigArkbot.DeepEqual(src) {
		return false
	}
	return true
}

type ProtocolConfigArk struct {
	// Default: "cn-beijing"
	Region        *string           `thrift:"region,1,optional" frugal:"1,optional,string" form:"region" json:"region,omitempty" query:"region"`
	AccessKey     *string           `thrift:"access_key,2,optional" frugal:"2,optional,string" form:"access_key" json:"access_key,omitempty" query:"access_key"`
	SecretKey     *string           `thrift:"secret_key,3,optional" frugal:"3,optional,string" form:"secret_key" json:"secret_key,omitempty" query:"secret_key"`
	RetryTimes    *int64            `thrift:"retry_times,4,optional" frugal:"4,optional,i64" json:"retry_times" form:"retry_times" query:"retry_times"`
	CustomHeaders map[string]string `thrift:"custom_headers,5,optional" frugal:"5,optional,map<string:string>" form:"custom_headers" json:"custom_headers,omitempty" query:"custom_headers"`
}

func NewProtocolConfigArk() *ProtocolConfigArk {
	return &ProtocolConfigArk{}
}

func (p *ProtocolConfigArk) InitDefault() {
}

var ProtocolConfigArk_Region_DEFAULT string

func (p *ProtocolConfigArk) GetRegion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetRegion() {
		return ProtocolConfigArk_Region_DEFAULT
	}
	return *p.Region
}

var ProtocolConfigArk_AccessKey_DEFAULT string

func (p *ProtocolConfigArk) GetAccessKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAccessKey() {
		return ProtocolConfigArk_AccessKey_DEFAULT
	}
	return *p.AccessKey
}

var ProtocolConfigArk_SecretKey_DEFAULT string

func (p *ProtocolConfigArk) GetSecretKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSecretKey() {
		return ProtocolConfigArk_SecretKey_DEFAULT
	}
	return *p.SecretKey
}

var ProtocolConfigArk_RetryTimes_DEFAULT int64

func (p *ProtocolConfigArk) GetRetryTimes() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetRetryTimes() {
		return ProtocolConfigArk_RetryTimes_DEFAULT
	}
	return *p.RetryTimes
}

var ProtocolConfigArk_CustomHeaders_DEFAULT map[string]string

func (p *ProtocolConfigArk) GetCustomHeaders() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetCustomHeaders() {
		return ProtocolConfigArk_CustomHeaders_DEFAULT
	}
	return p.CustomHeaders
}
func (p *ProtocolConfigArk) SetRegion(val *string) {
	p.Region = val
}
func (p *ProtocolConfigArk) SetAccessKey(val *string) {
	p.AccessKey = val
}
func (p *ProtocolConfigArk) SetSecretKey(val *string) {
	p.SecretKey = val
}
func (p *ProtocolConfigArk) SetRetryTimes(val *int64) {
	p.RetryTimes = val
}
func (p *ProtocolConfigArk) SetCustomHeaders(val map[string]string) {
	p.CustomHeaders = val
}

var fieldIDToName_ProtocolConfigArk = map[int16]string{
	1: "region",
	2: "access_key",
	3: "secret_key",
	4: "retry_times",
	5: "custom_headers",
}

func (p *ProtocolConfigArk) IsSetRegion() bool {
	return p.Region != nil
}

func (p *ProtocolConfigArk) IsSetAccessKey() bool {
	return p.AccessKey != nil
}

func (p *ProtocolConfigArk) IsSetSecretKey() bool {
	return p.SecretKey != nil
}

func (p *ProtocolConfigArk) IsSetRetryTimes() bool {
	return p.RetryTimes != nil
}

func (p *ProtocolConfigArk) IsSetCustomHeaders() bool {
	return p.CustomHeaders != nil
}

func (p *ProtocolConfigArk) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProtocolConfigArk[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProtocolConfigArk) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Region = _field
	return nil
}
func (p *ProtocolConfigArk) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AccessKey = _field
	return nil
}
func (p *ProtocolConfigArk) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SecretKey = _field
	return nil
}
func (p *ProtocolConfigArk) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RetryTimes = _field
	return nil
}
func (p *ProtocolConfigArk) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.CustomHeaders = _field
	return nil
}

func (p *ProtocolConfigArk) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProtocolConfigArk"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProtocolConfigArk) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegion() {
		if err = oprot.WriteFieldBegin("region", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Region); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProtocolConfigArk) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccessKey() {
		if err = oprot.WriteFieldBegin("access_key", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AccessKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ProtocolConfigArk) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecretKey() {
		if err = oprot.WriteFieldBegin("secret_key", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SecretKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ProtocolConfigArk) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRetryTimes() {
		if err = oprot.WriteFieldBegin("retry_times", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RetryTimes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ProtocolConfigArk) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomHeaders() {
		if err = oprot.WriteFieldBegin("custom_headers", thrift.MAP, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.CustomHeaders)); err != nil {
			return err
		}
		for k, v := range p.CustomHeaders {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ProtocolConfigArk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProtocolConfigArk(%+v)", *p)

}

func (p *ProtocolConfigArk) DeepEqual(ano *ProtocolConfigArk) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Region) {
		return false
	}
	if !p.Field2DeepEqual(ano.AccessKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.SecretKey) {
		return false
	}
	if !p.Field4DeepEqual(ano.RetryTimes) {
		return false
	}
	if !p.Field5DeepEqual(ano.CustomHeaders) {
		return false
	}
	return true
}

func (p *ProtocolConfigArk) Field1DeepEqual(src *string) bool {

	if p.Region == src {
		return true
	} else if p.Region == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Region, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigArk) Field2DeepEqual(src *string) bool {

	if p.AccessKey == src {
		return true
	} else if p.AccessKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AccessKey, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigArk) Field3DeepEqual(src *string) bool {

	if p.SecretKey == src {
		return true
	} else if p.SecretKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SecretKey, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigArk) Field4DeepEqual(src *int64) bool {

	if p.RetryTimes == src {
		return true
	} else if p.RetryTimes == nil || src == nil {
		return false
	}
	if *p.RetryTimes != *src {
		return false
	}
	return true
}
func (p *ProtocolConfigArk) Field5DeepEqual(src map[string]string) bool {

	if len(p.CustomHeaders) != len(src) {
		return false
	}
	for k, v := range p.CustomHeaders {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ProtocolConfigOpenAI struct {
	ByAzure                  *bool   `thrift:"by_azure,1,optional" frugal:"1,optional,bool" form:"by_azure" json:"by_azure,omitempty" query:"by_azure"`
	APIVersion               *string `thrift:"api_version,2,optional" frugal:"2,optional,string" form:"api_version" json:"api_version,omitempty" query:"api_version"`
	ResponseFormatType       *string `thrift:"response_format_type,3,optional" frugal:"3,optional,string" form:"response_format_type" json:"response_format_type,omitempty" query:"response_format_type"`
	ResponseFormatJSONSchema *string `thrift:"response_format_json_schema,4,optional" frugal:"4,optional,string" form:"response_format_json_schema" json:"response_format_json_schema,omitempty" query:"response_format_json_schema"`
}

func NewProtocolConfigOpenAI() *ProtocolConfigOpenAI {
	return &ProtocolConfigOpenAI{}
}

func (p *ProtocolConfigOpenAI) InitDefault() {
}

var ProtocolConfigOpenAI_ByAzure_DEFAULT bool

func (p *ProtocolConfigOpenAI) GetByAzure() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetByAzure() {
		return ProtocolConfigOpenAI_ByAzure_DEFAULT
	}
	return *p.ByAzure
}

var ProtocolConfigOpenAI_APIVersion_DEFAULT string

func (p *ProtocolConfigOpenAI) GetAPIVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAPIVersion() {
		return ProtocolConfigOpenAI_APIVersion_DEFAULT
	}
	return *p.APIVersion
}

var ProtocolConfigOpenAI_ResponseFormatType_DEFAULT string

func (p *ProtocolConfigOpenAI) GetResponseFormatType() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetResponseFormatType() {
		return ProtocolConfigOpenAI_ResponseFormatType_DEFAULT
	}
	return *p.ResponseFormatType
}

var ProtocolConfigOpenAI_ResponseFormatJSONSchema_DEFAULT string

func (p *ProtocolConfigOpenAI) GetResponseFormatJSONSchema() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetResponseFormatJSONSchema() {
		return ProtocolConfigOpenAI_ResponseFormatJSONSchema_DEFAULT
	}
	return *p.ResponseFormatJSONSchema
}
func (p *ProtocolConfigOpenAI) SetByAzure(val *bool) {
	p.ByAzure = val
}
func (p *ProtocolConfigOpenAI) SetAPIVersion(val *string) {
	p.APIVersion = val
}
func (p *ProtocolConfigOpenAI) SetResponseFormatType(val *string) {
	p.ResponseFormatType = val
}
func (p *ProtocolConfigOpenAI) SetResponseFormatJSONSchema(val *string) {
	p.ResponseFormatJSONSchema = val
}

var fieldIDToName_ProtocolConfigOpenAI = map[int16]string{
	1: "by_azure",
	2: "api_version",
	3: "response_format_type",
	4: "response_format_json_schema",
}

func (p *ProtocolConfigOpenAI) IsSetByAzure() bool {
	return p.ByAzure != nil
}

func (p *ProtocolConfigOpenAI) IsSetAPIVersion() bool {
	return p.APIVersion != nil
}

func (p *ProtocolConfigOpenAI) IsSetResponseFormatType() bool {
	return p.ResponseFormatType != nil
}

func (p *ProtocolConfigOpenAI) IsSetResponseFormatJSONSchema() bool {
	return p.ResponseFormatJSONSchema != nil
}

func (p *ProtocolConfigOpenAI) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProtocolConfigOpenAI[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProtocolConfigOpenAI) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ByAzure = _field
	return nil
}
func (p *ProtocolConfigOpenAI) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.APIVersion = _field
	return nil
}
func (p *ProtocolConfigOpenAI) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseFormatType = _field
	return nil
}
func (p *ProtocolConfigOpenAI) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseFormatJSONSchema = _field
	return nil
}

func (p *ProtocolConfigOpenAI) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProtocolConfigOpenAI"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProtocolConfigOpenAI) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetByAzure() {
		if err = oprot.WriteFieldBegin("by_azure", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ByAzure); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProtocolConfigOpenAI) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAPIVersion() {
		if err = oprot.WriteFieldBegin("api_version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.APIVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ProtocolConfigOpenAI) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseFormatType() {
		if err = oprot.WriteFieldBegin("response_format_type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseFormatType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ProtocolConfigOpenAI) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseFormatJSONSchema() {
		if err = oprot.WriteFieldBegin("response_format_json_schema", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseFormatJSONSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ProtocolConfigOpenAI) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProtocolConfigOpenAI(%+v)", *p)

}

func (p *ProtocolConfigOpenAI) DeepEqual(ano *ProtocolConfigOpenAI) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ByAzure) {
		return false
	}
	if !p.Field2DeepEqual(ano.APIVersion) {
		return false
	}
	if !p.Field3DeepEqual(ano.ResponseFormatType) {
		return false
	}
	if !p.Field4DeepEqual(ano.ResponseFormatJSONSchema) {
		return false
	}
	return true
}

func (p *ProtocolConfigOpenAI) Field1DeepEqual(src *bool) bool {

	if p.ByAzure == src {
		return true
	} else if p.ByAzure == nil || src == nil {
		return false
	}
	if *p.ByAzure != *src {
		return false
	}
	return true
}
func (p *ProtocolConfigOpenAI) Field2DeepEqual(src *string) bool {

	if p.APIVersion == src {
		return true
	} else if p.APIVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.APIVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigOpenAI) Field3DeepEqual(src *string) bool {

	if p.ResponseFormatType == src {
		return true
	} else if p.ResponseFormatType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ResponseFormatType, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigOpenAI) Field4DeepEqual(src *string) bool {

	if p.ResponseFormatJSONSchema == src {
		return true
	} else if p.ResponseFormatJSONSchema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ResponseFormatJSONSchema, *src) != 0 {
		return false
	}
	return true
}

type ProtocolConfigClaude struct {
	ByBedrock *bool `thrift:"by_bedrock,1,optional" frugal:"1,optional,bool" form:"by_bedrock" json:"by_bedrock,omitempty" query:"by_bedrock"`
	// bedrock config
	AccessKey       *string `thrift:"access_key,2,optional" frugal:"2,optional,string" form:"access_key" json:"access_key,omitempty" query:"access_key"`
	SecretAccessKey *string `thrift:"secret_access_key,3,optional" frugal:"3,optional,string" form:"secret_access_key" json:"secret_access_key,omitempty" query:"secret_access_key"`
	SessionToken    *string `thrift:"session_token,4,optional" frugal:"4,optional,string" form:"session_token" json:"session_token,omitempty" query:"session_token"`
	Region          *string `thrift:"region,5,optional" frugal:"5,optional,string" form:"region" json:"region,omitempty" query:"region"`
}

func NewProtocolConfigClaude() *ProtocolConfigClaude {
	return &ProtocolConfigClaude{}
}

func (p *ProtocolConfigClaude) InitDefault() {
}

var ProtocolConfigClaude_ByBedrock_DEFAULT bool

func (p *ProtocolConfigClaude) GetByBedrock() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetByBedrock() {
		return ProtocolConfigClaude_ByBedrock_DEFAULT
	}
	return *p.ByBedrock
}

var ProtocolConfigClaude_AccessKey_DEFAULT string

func (p *ProtocolConfigClaude) GetAccessKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAccessKey() {
		return ProtocolConfigClaude_AccessKey_DEFAULT
	}
	return *p.AccessKey
}

var ProtocolConfigClaude_SecretAccessKey_DEFAULT string

func (p *ProtocolConfigClaude) GetSecretAccessKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSecretAccessKey() {
		return ProtocolConfigClaude_SecretAccessKey_DEFAULT
	}
	return *p.SecretAccessKey
}

var ProtocolConfigClaude_SessionToken_DEFAULT string

func (p *ProtocolConfigClaude) GetSessionToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSessionToken() {
		return ProtocolConfigClaude_SessionToken_DEFAULT
	}
	return *p.SessionToken
}

var ProtocolConfigClaude_Region_DEFAULT string

func (p *ProtocolConfigClaude) GetRegion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetRegion() {
		return ProtocolConfigClaude_Region_DEFAULT
	}
	return *p.Region
}
func (p *ProtocolConfigClaude) SetByBedrock(val *bool) {
	p.ByBedrock = val
}
func (p *ProtocolConfigClaude) SetAccessKey(val *string) {
	p.AccessKey = val
}
func (p *ProtocolConfigClaude) SetSecretAccessKey(val *string) {
	p.SecretAccessKey = val
}
func (p *ProtocolConfigClaude) SetSessionToken(val *string) {
	p.SessionToken = val
}
func (p *ProtocolConfigClaude) SetRegion(val *string) {
	p.Region = val
}

var fieldIDToName_ProtocolConfigClaude = map[int16]string{
	1: "by_bedrock",
	2: "access_key",
	3: "secret_access_key",
	4: "session_token",
	5: "region",
}

func (p *ProtocolConfigClaude) IsSetByBedrock() bool {
	return p.ByBedrock != nil
}

func (p *ProtocolConfigClaude) IsSetAccessKey() bool {
	return p.AccessKey != nil
}

func (p *ProtocolConfigClaude) IsSetSecretAccessKey() bool {
	return p.SecretAccessKey != nil
}

func (p *ProtocolConfigClaude) IsSetSessionToken() bool {
	return p.SessionToken != nil
}

func (p *ProtocolConfigClaude) IsSetRegion() bool {
	return p.Region != nil
}

func (p *ProtocolConfigClaude) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProtocolConfigClaude[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProtocolConfigClaude) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ByBedrock = _field
	return nil
}
func (p *ProtocolConfigClaude) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AccessKey = _field
	return nil
}
func (p *ProtocolConfigClaude) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SecretAccessKey = _field
	return nil
}
func (p *ProtocolConfigClaude) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SessionToken = _field
	return nil
}
func (p *ProtocolConfigClaude) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Region = _field
	return nil
}

func (p *ProtocolConfigClaude) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProtocolConfigClaude"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProtocolConfigClaude) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetByBedrock() {
		if err = oprot.WriteFieldBegin("by_bedrock", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ByBedrock); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProtocolConfigClaude) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccessKey() {
		if err = oprot.WriteFieldBegin("access_key", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AccessKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ProtocolConfigClaude) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecretAccessKey() {
		if err = oprot.WriteFieldBegin("secret_access_key", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SecretAccessKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ProtocolConfigClaude) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionToken() {
		if err = oprot.WriteFieldBegin("session_token", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SessionToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ProtocolConfigClaude) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegion() {
		if err = oprot.WriteFieldBegin("region", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Region); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ProtocolConfigClaude) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProtocolConfigClaude(%+v)", *p)

}

func (p *ProtocolConfigClaude) DeepEqual(ano *ProtocolConfigClaude) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ByBedrock) {
		return false
	}
	if !p.Field2DeepEqual(ano.AccessKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.SecretAccessKey) {
		return false
	}
	if !p.Field4DeepEqual(ano.SessionToken) {
		return false
	}
	if !p.Field5DeepEqual(ano.Region) {
		return false
	}
	return true
}

func (p *ProtocolConfigClaude) Field1DeepEqual(src *bool) bool {

	if p.ByBedrock == src {
		return true
	} else if p.ByBedrock == nil || src == nil {
		return false
	}
	if *p.ByBedrock != *src {
		return false
	}
	return true
}
func (p *ProtocolConfigClaude) Field2DeepEqual(src *string) bool {

	if p.AccessKey == src {
		return true
	} else if p.AccessKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AccessKey, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigClaude) Field3DeepEqual(src *string) bool {

	if p.SecretAccessKey == src {
		return true
	} else if p.SecretAccessKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SecretAccessKey, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigClaude) Field4DeepEqual(src *string) bool {

	if p.SessionToken == src {
		return true
	} else if p.SessionToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SessionToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigClaude) Field5DeepEqual(src *string) bool {

	if p.Region == src {
		return true
	} else if p.Region == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Region, *src) != 0 {
		return false
	}
	return true
}

type ProtocolConfigDeepSeek struct {
	ResponseFormatType *string `thrift:"response_format_type,1,optional" frugal:"1,optional,string" form:"response_format_type" json:"response_format_type,omitempty" query:"response_format_type"`
}

func NewProtocolConfigDeepSeek() *ProtocolConfigDeepSeek {
	return &ProtocolConfigDeepSeek{}
}

func (p *ProtocolConfigDeepSeek) InitDefault() {
}

var ProtocolConfigDeepSeek_ResponseFormatType_DEFAULT string

func (p *ProtocolConfigDeepSeek) GetResponseFormatType() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetResponseFormatType() {
		return ProtocolConfigDeepSeek_ResponseFormatType_DEFAULT
	}
	return *p.ResponseFormatType
}
func (p *ProtocolConfigDeepSeek) SetResponseFormatType(val *string) {
	p.ResponseFormatType = val
}

var fieldIDToName_ProtocolConfigDeepSeek = map[int16]string{
	1: "response_format_type",
}

func (p *ProtocolConfigDeepSeek) IsSetResponseFormatType() bool {
	return p.ResponseFormatType != nil
}

func (p *ProtocolConfigDeepSeek) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProtocolConfigDeepSeek[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProtocolConfigDeepSeek) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseFormatType = _field
	return nil
}

func (p *ProtocolConfigDeepSeek) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProtocolConfigDeepSeek"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProtocolConfigDeepSeek) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseFormatType() {
		if err = oprot.WriteFieldBegin("response_format_type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseFormatType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProtocolConfigDeepSeek) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProtocolConfigDeepSeek(%+v)", *p)

}

func (p *ProtocolConfigDeepSeek) DeepEqual(ano *ProtocolConfigDeepSeek) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ResponseFormatType) {
		return false
	}
	return true
}

func (p *ProtocolConfigDeepSeek) Field1DeepEqual(src *string) bool {

	if p.ResponseFormatType == src {
		return true
	} else if p.ResponseFormatType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ResponseFormatType, *src) != 0 {
		return false
	}
	return true
}

type ProtocolConfigGemini struct {
	ResponseSchema      *string                              `thrift:"response_schema,1,optional" frugal:"1,optional,string" form:"response_schema" json:"response_schema,omitempty" query:"response_schema"`
	EnableCodeExecution *bool                                `thrift:"enable_code_execution,2,optional" frugal:"2,optional,bool" form:"enable_code_execution" json:"enable_code_execution,omitempty" query:"enable_code_execution"`
	SafetySettings      []*ProtocolConfigGeminiSafetySetting `thrift:"safety_settings,3,optional" frugal:"3,optional,list<ProtocolConfigGeminiSafetySetting>" form:"safety_settings" json:"safety_settings,omitempty" query:"safety_settings"`
}

func NewProtocolConfigGemini() *ProtocolConfigGemini {
	return &ProtocolConfigGemini{}
}

func (p *ProtocolConfigGemini) InitDefault() {
}

var ProtocolConfigGemini_ResponseSchema_DEFAULT string

func (p *ProtocolConfigGemini) GetResponseSchema() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetResponseSchema() {
		return ProtocolConfigGemini_ResponseSchema_DEFAULT
	}
	return *p.ResponseSchema
}

var ProtocolConfigGemini_EnableCodeExecution_DEFAULT bool

func (p *ProtocolConfigGemini) GetEnableCodeExecution() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetEnableCodeExecution() {
		return ProtocolConfigGemini_EnableCodeExecution_DEFAULT
	}
	return *p.EnableCodeExecution
}

var ProtocolConfigGemini_SafetySettings_DEFAULT []*ProtocolConfigGeminiSafetySetting

func (p *ProtocolConfigGemini) GetSafetySettings() (v []*ProtocolConfigGeminiSafetySetting) {
	if p == nil {
		return
	}
	if !p.IsSetSafetySettings() {
		return ProtocolConfigGemini_SafetySettings_DEFAULT
	}
	return p.SafetySettings
}
func (p *ProtocolConfigGemini) SetResponseSchema(val *string) {
	p.ResponseSchema = val
}
func (p *ProtocolConfigGemini) SetEnableCodeExecution(val *bool) {
	p.EnableCodeExecution = val
}
func (p *ProtocolConfigGemini) SetSafetySettings(val []*ProtocolConfigGeminiSafetySetting) {
	p.SafetySettings = val
}

var fieldIDToName_ProtocolConfigGemini = map[int16]string{
	1: "response_schema",
	2: "enable_code_execution",
	3: "safety_settings",
}

func (p *ProtocolConfigGemini) IsSetResponseSchema() bool {
	return p.ResponseSchema != nil
}

func (p *ProtocolConfigGemini) IsSetEnableCodeExecution() bool {
	return p.EnableCodeExecution != nil
}

func (p *ProtocolConfigGemini) IsSetSafetySettings() bool {
	return p.SafetySettings != nil
}

func (p *ProtocolConfigGemini) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProtocolConfigGemini[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProtocolConfigGemini) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseSchema = _field
	return nil
}
func (p *ProtocolConfigGemini) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnableCodeExecution = _field
	return nil
}
func (p *ProtocolConfigGemini) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ProtocolConfigGeminiSafetySetting, 0, size)
	values := make([]ProtocolConfigGeminiSafetySetting, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SafetySettings = _field
	return nil
}

func (p *ProtocolConfigGemini) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProtocolConfigGemini"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProtocolConfigGemini) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseSchema() {
		if err = oprot.WriteFieldBegin("response_schema", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProtocolConfigGemini) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableCodeExecution() {
		if err = oprot.WriteFieldBegin("enable_code_execution", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableCodeExecution); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ProtocolConfigGemini) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSafetySettings() {
		if err = oprot.WriteFieldBegin("safety_settings", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SafetySettings)); err != nil {
			return err
		}
		for _, v := range p.SafetySettings {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ProtocolConfigGemini) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProtocolConfigGemini(%+v)", *p)

}

func (p *ProtocolConfigGemini) DeepEqual(ano *ProtocolConfigGemini) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ResponseSchema) {
		return false
	}
	if !p.Field2DeepEqual(ano.EnableCodeExecution) {
		return false
	}
	if !p.Field3DeepEqual(ano.SafetySettings) {
		return false
	}
	return true
}

func (p *ProtocolConfigGemini) Field1DeepEqual(src *string) bool {

	if p.ResponseSchema == src {
		return true
	} else if p.ResponseSchema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ResponseSchema, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigGemini) Field2DeepEqual(src *bool) bool {

	if p.EnableCodeExecution == src {
		return true
	} else if p.EnableCodeExecution == nil || src == nil {
		return false
	}
	if *p.EnableCodeExecution != *src {
		return false
	}
	return true
}
func (p *ProtocolConfigGemini) Field3DeepEqual(src []*ProtocolConfigGeminiSafetySetting) bool {

	if len(p.SafetySettings) != len(src) {
		return false
	}
	for i, v := range p.SafetySettings {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ProtocolConfigGeminiSafetySetting struct {
	Category  *int32 `thrift:"category,1,optional" frugal:"1,optional,i32" form:"category" json:"category,omitempty" query:"category"`
	Threshold *int32 `thrift:"threshold,2,optional" frugal:"2,optional,i32" form:"threshold" json:"threshold,omitempty" query:"threshold"`
}

func NewProtocolConfigGeminiSafetySetting() *ProtocolConfigGeminiSafetySetting {
	return &ProtocolConfigGeminiSafetySetting{}
}

func (p *ProtocolConfigGeminiSafetySetting) InitDefault() {
}

var ProtocolConfigGeminiSafetySetting_Category_DEFAULT int32

func (p *ProtocolConfigGeminiSafetySetting) GetCategory() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCategory() {
		return ProtocolConfigGeminiSafetySetting_Category_DEFAULT
	}
	return *p.Category
}

var ProtocolConfigGeminiSafetySetting_Threshold_DEFAULT int32

func (p *ProtocolConfigGeminiSafetySetting) GetThreshold() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetThreshold() {
		return ProtocolConfigGeminiSafetySetting_Threshold_DEFAULT
	}
	return *p.Threshold
}
func (p *ProtocolConfigGeminiSafetySetting) SetCategory(val *int32) {
	p.Category = val
}
func (p *ProtocolConfigGeminiSafetySetting) SetThreshold(val *int32) {
	p.Threshold = val
}

var fieldIDToName_ProtocolConfigGeminiSafetySetting = map[int16]string{
	1: "category",
	2: "threshold",
}

func (p *ProtocolConfigGeminiSafetySetting) IsSetCategory() bool {
	return p.Category != nil
}

func (p *ProtocolConfigGeminiSafetySetting) IsSetThreshold() bool {
	return p.Threshold != nil
}

func (p *ProtocolConfigGeminiSafetySetting) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProtocolConfigGeminiSafetySetting[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProtocolConfigGeminiSafetySetting) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Category = _field
	return nil
}
func (p *ProtocolConfigGeminiSafetySetting) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Threshold = _field
	return nil
}

func (p *ProtocolConfigGeminiSafetySetting) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProtocolConfigGeminiSafetySetting"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProtocolConfigGeminiSafetySetting) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategory() {
		if err = oprot.WriteFieldBegin("category", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Category); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProtocolConfigGeminiSafetySetting) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetThreshold() {
		if err = oprot.WriteFieldBegin("threshold", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Threshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ProtocolConfigGeminiSafetySetting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProtocolConfigGeminiSafetySetting(%+v)", *p)

}

func (p *ProtocolConfigGeminiSafetySetting) DeepEqual(ano *ProtocolConfigGeminiSafetySetting) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Category) {
		return false
	}
	if !p.Field2DeepEqual(ano.Threshold) {
		return false
	}
	return true
}

func (p *ProtocolConfigGeminiSafetySetting) Field1DeepEqual(src *int32) bool {

	if p.Category == src {
		return true
	} else if p.Category == nil || src == nil {
		return false
	}
	if *p.Category != *src {
		return false
	}
	return true
}
func (p *ProtocolConfigGeminiSafetySetting) Field2DeepEqual(src *int32) bool {

	if p.Threshold == src {
		return true
	} else if p.Threshold == nil || src == nil {
		return false
	}
	if *p.Threshold != *src {
		return false
	}
	return true
}

type ProtocolConfigOllama struct {
	Format      *string `thrift:"format,1,optional" frugal:"1,optional,string" form:"format" json:"format,omitempty" query:"format"`
	KeepAliveMs *int64  `thrift:"keep_alive_ms,2,optional" frugal:"2,optional,i64" json:"keep_alive_ms" form:"keep_alive_ms" query:"keep_alive_ms"`
}

func NewProtocolConfigOllama() *ProtocolConfigOllama {
	return &ProtocolConfigOllama{}
}

func (p *ProtocolConfigOllama) InitDefault() {
}

var ProtocolConfigOllama_Format_DEFAULT string

func (p *ProtocolConfigOllama) GetFormat() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFormat() {
		return ProtocolConfigOllama_Format_DEFAULT
	}
	return *p.Format
}

var ProtocolConfigOllama_KeepAliveMs_DEFAULT int64

func (p *ProtocolConfigOllama) GetKeepAliveMs() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetKeepAliveMs() {
		return ProtocolConfigOllama_KeepAliveMs_DEFAULT
	}
	return *p.KeepAliveMs
}
func (p *ProtocolConfigOllama) SetFormat(val *string) {
	p.Format = val
}
func (p *ProtocolConfigOllama) SetKeepAliveMs(val *int64) {
	p.KeepAliveMs = val
}

var fieldIDToName_ProtocolConfigOllama = map[int16]string{
	1: "format",
	2: "keep_alive_ms",
}

func (p *ProtocolConfigOllama) IsSetFormat() bool {
	return p.Format != nil
}

func (p *ProtocolConfigOllama) IsSetKeepAliveMs() bool {
	return p.KeepAliveMs != nil
}

func (p *ProtocolConfigOllama) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProtocolConfigOllama[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProtocolConfigOllama) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Format = _field
	return nil
}
func (p *ProtocolConfigOllama) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.KeepAliveMs = _field
	return nil
}

func (p *ProtocolConfigOllama) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProtocolConfigOllama"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProtocolConfigOllama) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormat() {
		if err = oprot.WriteFieldBegin("format", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Format); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProtocolConfigOllama) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeepAliveMs() {
		if err = oprot.WriteFieldBegin("keep_alive_ms", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.KeepAliveMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ProtocolConfigOllama) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProtocolConfigOllama(%+v)", *p)

}

func (p *ProtocolConfigOllama) DeepEqual(ano *ProtocolConfigOllama) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Format) {
		return false
	}
	if !p.Field2DeepEqual(ano.KeepAliveMs) {
		return false
	}
	return true
}

func (p *ProtocolConfigOllama) Field1DeepEqual(src *string) bool {

	if p.Format == src {
		return true
	} else if p.Format == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Format, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigOllama) Field2DeepEqual(src *int64) bool {

	if p.KeepAliveMs == src {
		return true
	} else if p.KeepAliveMs == nil || src == nil {
		return false
	}
	if *p.KeepAliveMs != *src {
		return false
	}
	return true
}

type ProtocolConfigQwen struct {
	ResponseFormatType       *string `thrift:"response_format_type,1,optional" frugal:"1,optional,string" form:"response_format_type" json:"response_format_type,omitempty" query:"response_format_type"`
	ResponseFormatJSONSchema *string `thrift:"response_format_json_schema,2,optional" frugal:"2,optional,string" form:"response_format_json_schema" json:"response_format_json_schema,omitempty" query:"response_format_json_schema"`
}

func NewProtocolConfigQwen() *ProtocolConfigQwen {
	return &ProtocolConfigQwen{}
}

func (p *ProtocolConfigQwen) InitDefault() {
}

var ProtocolConfigQwen_ResponseFormatType_DEFAULT string

func (p *ProtocolConfigQwen) GetResponseFormatType() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetResponseFormatType() {
		return ProtocolConfigQwen_ResponseFormatType_DEFAULT
	}
	return *p.ResponseFormatType
}

var ProtocolConfigQwen_ResponseFormatJSONSchema_DEFAULT string

func (p *ProtocolConfigQwen) GetResponseFormatJSONSchema() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetResponseFormatJSONSchema() {
		return ProtocolConfigQwen_ResponseFormatJSONSchema_DEFAULT
	}
	return *p.ResponseFormatJSONSchema
}
func (p *ProtocolConfigQwen) SetResponseFormatType(val *string) {
	p.ResponseFormatType = val
}
func (p *ProtocolConfigQwen) SetResponseFormatJSONSchema(val *string) {
	p.ResponseFormatJSONSchema = val
}

var fieldIDToName_ProtocolConfigQwen = map[int16]string{
	1: "response_format_type",
	2: "response_format_json_schema",
}

func (p *ProtocolConfigQwen) IsSetResponseFormatType() bool {
	return p.ResponseFormatType != nil
}

func (p *ProtocolConfigQwen) IsSetResponseFormatJSONSchema() bool {
	return p.ResponseFormatJSONSchema != nil
}

func (p *ProtocolConfigQwen) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProtocolConfigQwen[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProtocolConfigQwen) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseFormatType = _field
	return nil
}
func (p *ProtocolConfigQwen) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseFormatJSONSchema = _field
	return nil
}

func (p *ProtocolConfigQwen) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProtocolConfigQwen"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProtocolConfigQwen) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseFormatType() {
		if err = oprot.WriteFieldBegin("response_format_type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseFormatType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProtocolConfigQwen) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseFormatJSONSchema() {
		if err = oprot.WriteFieldBegin("response_format_json_schema", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseFormatJSONSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ProtocolConfigQwen) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProtocolConfigQwen(%+v)", *p)

}

func (p *ProtocolConfigQwen) DeepEqual(ano *ProtocolConfigQwen) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ResponseFormatType) {
		return false
	}
	if !p.Field2DeepEqual(ano.ResponseFormatJSONSchema) {
		return false
	}
	return true
}

func (p *ProtocolConfigQwen) Field1DeepEqual(src *string) bool {

	if p.ResponseFormatType == src {
		return true
	} else if p.ResponseFormatType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ResponseFormatType, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigQwen) Field2DeepEqual(src *string) bool {

	if p.ResponseFormatJSONSchema == src {
		return true
	} else if p.ResponseFormatJSONSchema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ResponseFormatJSONSchema, *src) != 0 {
		return false
	}
	return true
}

type ProtocolConfigQianfan struct {
	LlmRetryCount            *int32   `thrift:"llm_retry_count,1,optional" frugal:"1,optional,i32" form:"llm_retry_count" json:"llm_retry_count,omitempty" query:"llm_retry_count"`
	LlmRetryTimeout          *float64 `thrift:"llm_retry_timeout,2,optional" frugal:"2,optional,double" form:"llm_retry_timeout" json:"llm_retry_timeout,omitempty" query:"llm_retry_timeout"`
	LlmRetryBackoffFactor    *float64 `thrift:"llm_retry_backoff_factor,3,optional" frugal:"3,optional,double" form:"llm_retry_backoff_factor" json:"llm_retry_backoff_factor,omitempty" query:"llm_retry_backoff_factor"`
	ParallelToolCalls        *bool    `thrift:"parallel_tool_calls,4,optional" frugal:"4,optional,bool" form:"parallel_tool_calls" json:"parallel_tool_calls,omitempty" query:"parallel_tool_calls"`
	ResponseFormatType       *string  `thrift:"response_format_type,5,optional" frugal:"5,optional,string" form:"response_format_type" json:"response_format_type,omitempty" query:"response_format_type"`
	ResponseFormatJSONSchema *string  `thrift:"response_format_json_schema,6,optional" frugal:"6,optional,string" form:"response_format_json_schema" json:"response_format_json_schema,omitempty" query:"response_format_json_schema"`
}

func NewProtocolConfigQianfan() *ProtocolConfigQianfan {
	return &ProtocolConfigQianfan{}
}

func (p *ProtocolConfigQianfan) InitDefault() {
}

var ProtocolConfigQianfan_LlmRetryCount_DEFAULT int32

func (p *ProtocolConfigQianfan) GetLlmRetryCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetLlmRetryCount() {
		return ProtocolConfigQianfan_LlmRetryCount_DEFAULT
	}
	return *p.LlmRetryCount
}

var ProtocolConfigQianfan_LlmRetryTimeout_DEFAULT float64

func (p *ProtocolConfigQianfan) GetLlmRetryTimeout() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetLlmRetryTimeout() {
		return ProtocolConfigQianfan_LlmRetryTimeout_DEFAULT
	}
	return *p.LlmRetryTimeout
}

var ProtocolConfigQianfan_LlmRetryBackoffFactor_DEFAULT float64

func (p *ProtocolConfigQianfan) GetLlmRetryBackoffFactor() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetLlmRetryBackoffFactor() {
		return ProtocolConfigQianfan_LlmRetryBackoffFactor_DEFAULT
	}
	return *p.LlmRetryBackoffFactor
}

var ProtocolConfigQianfan_ParallelToolCalls_DEFAULT bool

func (p *ProtocolConfigQianfan) GetParallelToolCalls() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetParallelToolCalls() {
		return ProtocolConfigQianfan_ParallelToolCalls_DEFAULT
	}
	return *p.ParallelToolCalls
}

var ProtocolConfigQianfan_ResponseFormatType_DEFAULT string

func (p *ProtocolConfigQianfan) GetResponseFormatType() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetResponseFormatType() {
		return ProtocolConfigQianfan_ResponseFormatType_DEFAULT
	}
	return *p.ResponseFormatType
}

var ProtocolConfigQianfan_ResponseFormatJSONSchema_DEFAULT string

func (p *ProtocolConfigQianfan) GetResponseFormatJSONSchema() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetResponseFormatJSONSchema() {
		return ProtocolConfigQianfan_ResponseFormatJSONSchema_DEFAULT
	}
	return *p.ResponseFormatJSONSchema
}
func (p *ProtocolConfigQianfan) SetLlmRetryCount(val *int32) {
	p.LlmRetryCount = val
}
func (p *ProtocolConfigQianfan) SetLlmRetryTimeout(val *float64) {
	p.LlmRetryTimeout = val
}
func (p *ProtocolConfigQianfan) SetLlmRetryBackoffFactor(val *float64) {
	p.LlmRetryBackoffFactor = val
}
func (p *ProtocolConfigQianfan) SetParallelToolCalls(val *bool) {
	p.ParallelToolCalls = val
}
func (p *ProtocolConfigQianfan) SetResponseFormatType(val *string) {
	p.ResponseFormatType = val
}
func (p *ProtocolConfigQianfan) SetResponseFormatJSONSchema(val *string) {
	p.ResponseFormatJSONSchema = val
}

var fieldIDToName_ProtocolConfigQianfan = map[int16]string{
	1: "llm_retry_count",
	2: "llm_retry_timeout",
	3: "llm_retry_backoff_factor",
	4: "parallel_tool_calls",
	5: "response_format_type",
	6: "response_format_json_schema",
}

func (p *ProtocolConfigQianfan) IsSetLlmRetryCount() bool {
	return p.LlmRetryCount != nil
}

func (p *ProtocolConfigQianfan) IsSetLlmRetryTimeout() bool {
	return p.LlmRetryTimeout != nil
}

func (p *ProtocolConfigQianfan) IsSetLlmRetryBackoffFactor() bool {
	return p.LlmRetryBackoffFactor != nil
}

func (p *ProtocolConfigQianfan) IsSetParallelToolCalls() bool {
	return p.ParallelToolCalls != nil
}

func (p *ProtocolConfigQianfan) IsSetResponseFormatType() bool {
	return p.ResponseFormatType != nil
}

func (p *ProtocolConfigQianfan) IsSetResponseFormatJSONSchema() bool {
	return p.ResponseFormatJSONSchema != nil
}

func (p *ProtocolConfigQianfan) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProtocolConfigQianfan[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProtocolConfigQianfan) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LlmRetryCount = _field
	return nil
}
func (p *ProtocolConfigQianfan) ReadField2(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LlmRetryTimeout = _field
	return nil
}
func (p *ProtocolConfigQianfan) ReadField3(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LlmRetryBackoffFactor = _field
	return nil
}
func (p *ProtocolConfigQianfan) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ParallelToolCalls = _field
	return nil
}
func (p *ProtocolConfigQianfan) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseFormatType = _field
	return nil
}
func (p *ProtocolConfigQianfan) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseFormatJSONSchema = _field
	return nil
}

func (p *ProtocolConfigQianfan) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProtocolConfigQianfan"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProtocolConfigQianfan) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLlmRetryCount() {
		if err = oprot.WriteFieldBegin("llm_retry_count", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.LlmRetryCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProtocolConfigQianfan) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLlmRetryTimeout() {
		if err = oprot.WriteFieldBegin("llm_retry_timeout", thrift.DOUBLE, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.LlmRetryTimeout); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ProtocolConfigQianfan) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLlmRetryBackoffFactor() {
		if err = oprot.WriteFieldBegin("llm_retry_backoff_factor", thrift.DOUBLE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.LlmRetryBackoffFactor); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ProtocolConfigQianfan) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelToolCalls() {
		if err = oprot.WriteFieldBegin("parallel_tool_calls", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ParallelToolCalls); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ProtocolConfigQianfan) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseFormatType() {
		if err = oprot.WriteFieldBegin("response_format_type", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseFormatType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ProtocolConfigQianfan) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseFormatJSONSchema() {
		if err = oprot.WriteFieldBegin("response_format_json_schema", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseFormatJSONSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ProtocolConfigQianfan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProtocolConfigQianfan(%+v)", *p)

}

func (p *ProtocolConfigQianfan) DeepEqual(ano *ProtocolConfigQianfan) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LlmRetryCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.LlmRetryTimeout) {
		return false
	}
	if !p.Field3DeepEqual(ano.LlmRetryBackoffFactor) {
		return false
	}
	if !p.Field4DeepEqual(ano.ParallelToolCalls) {
		return false
	}
	if !p.Field5DeepEqual(ano.ResponseFormatType) {
		return false
	}
	if !p.Field6DeepEqual(ano.ResponseFormatJSONSchema) {
		return false
	}
	return true
}

func (p *ProtocolConfigQianfan) Field1DeepEqual(src *int32) bool {

	if p.LlmRetryCount == src {
		return true
	} else if p.LlmRetryCount == nil || src == nil {
		return false
	}
	if *p.LlmRetryCount != *src {
		return false
	}
	return true
}
func (p *ProtocolConfigQianfan) Field2DeepEqual(src *float64) bool {

	if p.LlmRetryTimeout == src {
		return true
	} else if p.LlmRetryTimeout == nil || src == nil {
		return false
	}
	if *p.LlmRetryTimeout != *src {
		return false
	}
	return true
}
func (p *ProtocolConfigQianfan) Field3DeepEqual(src *float64) bool {

	if p.LlmRetryBackoffFactor == src {
		return true
	} else if p.LlmRetryBackoffFactor == nil || src == nil {
		return false
	}
	if *p.LlmRetryBackoffFactor != *src {
		return false
	}
	return true
}
func (p *ProtocolConfigQianfan) Field4DeepEqual(src *bool) bool {

	if p.ParallelToolCalls == src {
		return true
	} else if p.ParallelToolCalls == nil || src == nil {
		return false
	}
	if *p.ParallelToolCalls != *src {
		return false
	}
	return true
}
func (p *ProtocolConfigQianfan) Field5DeepEqual(src *string) bool {

	if p.ResponseFormatType == src {
		return true
	} else if p.ResponseFormatType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ResponseFormatType, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigQianfan) Field6DeepEqual(src *string) bool {

	if p.ResponseFormatJSONSchema == src {
		return true
	} else if p.ResponseFormatJSONSchema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ResponseFormatJSONSchema, *src) != 0 {
		return false
	}
	return true
}

type ProtocolConfigArkbot struct {
	// Default: "cn-beijing"
	Region        *string           `thrift:"region,1,optional" frugal:"1,optional,string" form:"region" json:"region,omitempty" query:"region"`
	AccessKey     *string           `thrift:"access_key,2,optional" frugal:"2,optional,string" form:"access_key" json:"access_key,omitempty" query:"access_key"`
	SecretKey     *string           `thrift:"secret_key,3,optional" frugal:"3,optional,string" form:"secret_key" json:"secret_key,omitempty" query:"secret_key"`
	RetryTimes    *int64            `thrift:"retry_times,4,optional" frugal:"4,optional,i64" json:"retry_times" form:"retry_times" query:"retry_times"`
	CustomHeaders map[string]string `thrift:"custom_headers,5,optional" frugal:"5,optional,map<string:string>" form:"custom_headers" json:"custom_headers,omitempty" query:"custom_headers"`
}

func NewProtocolConfigArkbot() *ProtocolConfigArkbot {
	return &ProtocolConfigArkbot{}
}

func (p *ProtocolConfigArkbot) InitDefault() {
}

var ProtocolConfigArkbot_Region_DEFAULT string

func (p *ProtocolConfigArkbot) GetRegion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetRegion() {
		return ProtocolConfigArkbot_Region_DEFAULT
	}
	return *p.Region
}

var ProtocolConfigArkbot_AccessKey_DEFAULT string

func (p *ProtocolConfigArkbot) GetAccessKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAccessKey() {
		return ProtocolConfigArkbot_AccessKey_DEFAULT
	}
	return *p.AccessKey
}

var ProtocolConfigArkbot_SecretKey_DEFAULT string

func (p *ProtocolConfigArkbot) GetSecretKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSecretKey() {
		return ProtocolConfigArkbot_SecretKey_DEFAULT
	}
	return *p.SecretKey
}

var ProtocolConfigArkbot_RetryTimes_DEFAULT int64

func (p *ProtocolConfigArkbot) GetRetryTimes() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetRetryTimes() {
		return ProtocolConfigArkbot_RetryTimes_DEFAULT
	}
	return *p.RetryTimes
}

var ProtocolConfigArkbot_CustomHeaders_DEFAULT map[string]string

func (p *ProtocolConfigArkbot) GetCustomHeaders() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetCustomHeaders() {
		return ProtocolConfigArkbot_CustomHeaders_DEFAULT
	}
	return p.CustomHeaders
}
func (p *ProtocolConfigArkbot) SetRegion(val *string) {
	p.Region = val
}
func (p *ProtocolConfigArkbot) SetAccessKey(val *string) {
	p.AccessKey = val
}
func (p *ProtocolConfigArkbot) SetSecretKey(val *string) {
	p.SecretKey = val
}
func (p *ProtocolConfigArkbot) SetRetryTimes(val *int64) {
	p.RetryTimes = val
}
func (p *ProtocolConfigArkbot) SetCustomHeaders(val map[string]string) {
	p.CustomHeaders = val
}

var fieldIDToName_ProtocolConfigArkbot = map[int16]string{
	1: "region",
	2: "access_key",
	3: "secret_key",
	4: "retry_times",
	5: "custom_headers",
}

func (p *ProtocolConfigArkbot) IsSetRegion() bool {
	return p.Region != nil
}

func (p *ProtocolConfigArkbot) IsSetAccessKey() bool {
	return p.AccessKey != nil
}

func (p *ProtocolConfigArkbot) IsSetSecretKey() bool {
	return p.SecretKey != nil
}

func (p *ProtocolConfigArkbot) IsSetRetryTimes() bool {
	return p.RetryTimes != nil
}

func (p *ProtocolConfigArkbot) IsSetCustomHeaders() bool {
	return p.CustomHeaders != nil
}

func (p *ProtocolConfigArkbot) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProtocolConfigArkbot[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProtocolConfigArkbot) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Region = _field
	return nil
}
func (p *ProtocolConfigArkbot) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AccessKey = _field
	return nil
}
func (p *ProtocolConfigArkbot) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SecretKey = _field
	return nil
}
func (p *ProtocolConfigArkbot) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RetryTimes = _field
	return nil
}
func (p *ProtocolConfigArkbot) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.CustomHeaders = _field
	return nil
}

func (p *ProtocolConfigArkbot) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProtocolConfigArkbot"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProtocolConfigArkbot) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegion() {
		if err = oprot.WriteFieldBegin("region", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Region); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ProtocolConfigArkbot) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccessKey() {
		if err = oprot.WriteFieldBegin("access_key", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AccessKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ProtocolConfigArkbot) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecretKey() {
		if err = oprot.WriteFieldBegin("secret_key", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SecretKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ProtocolConfigArkbot) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRetryTimes() {
		if err = oprot.WriteFieldBegin("retry_times", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RetryTimes); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ProtocolConfigArkbot) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomHeaders() {
		if err = oprot.WriteFieldBegin("custom_headers", thrift.MAP, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.CustomHeaders)); err != nil {
			return err
		}
		for k, v := range p.CustomHeaders {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ProtocolConfigArkbot) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProtocolConfigArkbot(%+v)", *p)

}

func (p *ProtocolConfigArkbot) DeepEqual(ano *ProtocolConfigArkbot) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Region) {
		return false
	}
	if !p.Field2DeepEqual(ano.AccessKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.SecretKey) {
		return false
	}
	if !p.Field4DeepEqual(ano.RetryTimes) {
		return false
	}
	if !p.Field5DeepEqual(ano.CustomHeaders) {
		return false
	}
	return true
}

func (p *ProtocolConfigArkbot) Field1DeepEqual(src *string) bool {

	if p.Region == src {
		return true
	} else if p.Region == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Region, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigArkbot) Field2DeepEqual(src *string) bool {

	if p.AccessKey == src {
		return true
	} else if p.AccessKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AccessKey, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigArkbot) Field3DeepEqual(src *string) bool {

	if p.SecretKey == src {
		return true
	} else if p.SecretKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SecretKey, *src) != 0 {
		return false
	}
	return true
}
func (p *ProtocolConfigArkbot) Field4DeepEqual(src *int64) bool {

	if p.RetryTimes == src {
		return true
	} else if p.RetryTimes == nil || src == nil {
		return false
	}
	if *p.RetryTimes != *src {
		return false
	}
	return true
}
func (p *ProtocolConfigArkbot) Field5DeepEqual(src map[string]string) bool {

	if len(p.CustomHeaders) != len(src) {
		return false
	}
	for k, v := range p.CustomHeaders {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ScenarioConfig struct {
	Scenario    *common.Scenario `thrift:"scenario,1,optional" frugal:"1,optional,string" form:"scenario" json:"scenario,omitempty" query:"scenario"`
	Quota       *Quota           `thrift:"quota,3,optional" frugal:"3,optional,Quota" form:"quota" json:"quota,omitempty" query:"quota"`
	Unavailable *bool            `thrift:"unavailable,4,optional" frugal:"4,optional,bool" form:"unavailable" json:"unavailable,omitempty" query:"unavailable"`
}

func NewScenarioConfig() *ScenarioConfig {
	return &ScenarioConfig{}
}

func (p *ScenarioConfig) InitDefault() {
}

var ScenarioConfig_Scenario_DEFAULT common.Scenario

func (p *ScenarioConfig) GetScenario() (v common.Scenario) {
	if p == nil {
		return
	}
	if !p.IsSetScenario() {
		return ScenarioConfig_Scenario_DEFAULT
	}
	return *p.Scenario
}

var ScenarioConfig_Quota_DEFAULT *Quota

func (p *ScenarioConfig) GetQuota() (v *Quota) {
	if p == nil {
		return
	}
	if !p.IsSetQuota() {
		return ScenarioConfig_Quota_DEFAULT
	}
	return p.Quota
}

var ScenarioConfig_Unavailable_DEFAULT bool

func (p *ScenarioConfig) GetUnavailable() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetUnavailable() {
		return ScenarioConfig_Unavailable_DEFAULT
	}
	return *p.Unavailable
}
func (p *ScenarioConfig) SetScenario(val *common.Scenario) {
	p.Scenario = val
}
func (p *ScenarioConfig) SetQuota(val *Quota) {
	p.Quota = val
}
func (p *ScenarioConfig) SetUnavailable(val *bool) {
	p.Unavailable = val
}

var fieldIDToName_ScenarioConfig = map[int16]string{
	1: "scenario",
	3: "quota",
	4: "unavailable",
}

func (p *ScenarioConfig) IsSetScenario() bool {
	return p.Scenario != nil
}

func (p *ScenarioConfig) IsSetQuota() bool {
	return p.Quota != nil
}

func (p *ScenarioConfig) IsSetUnavailable() bool {
	return p.Unavailable != nil
}

func (p *ScenarioConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScenarioConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScenarioConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field *common.Scenario
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Scenario = _field
	return nil
}
func (p *ScenarioConfig) ReadField3(iprot thrift.TProtocol) error {
	_field := NewQuota()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Quota = _field
	return nil
}
func (p *ScenarioConfig) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Unavailable = _field
	return nil
}

func (p *ScenarioConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScenarioConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScenarioConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetScenario() {
		if err = oprot.WriteFieldBegin("scenario", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Scenario); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ScenarioConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuota() {
		if err = oprot.WriteFieldBegin("quota", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Quota.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ScenarioConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnavailable() {
		if err = oprot.WriteFieldBegin("unavailable", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Unavailable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ScenarioConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScenarioConfig(%+v)", *p)

}

func (p *ScenarioConfig) DeepEqual(ano *ScenarioConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Scenario) {
		return false
	}
	if !p.Field3DeepEqual(ano.Quota) {
		return false
	}
	if !p.Field4DeepEqual(ano.Unavailable) {
		return false
	}
	return true
}

func (p *ScenarioConfig) Field1DeepEqual(src *common.Scenario) bool {

	if p.Scenario == src {
		return true
	} else if p.Scenario == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Scenario, *src) != 0 {
		return false
	}
	return true
}
func (p *ScenarioConfig) Field3DeepEqual(src *Quota) bool {

	if !p.Quota.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ScenarioConfig) Field4DeepEqual(src *bool) bool {

	if p.Unavailable == src {
		return true
	} else if p.Unavailable == nil || src == nil {
		return false
	}
	if *p.Unavailable != *src {
		return false
	}
	return true
}

type ParamConfig struct {
	ParamSchemas []*ParamSchema `thrift:"param_schemas,1,optional" frugal:"1,optional,list<ParamSchema>" form:"param_schemas" json:"param_schemas,omitempty" query:"param_schemas"`
}

func NewParamConfig() *ParamConfig {
	return &ParamConfig{}
}

func (p *ParamConfig) InitDefault() {
}

var ParamConfig_ParamSchemas_DEFAULT []*ParamSchema

func (p *ParamConfig) GetParamSchemas() (v []*ParamSchema) {
	if p == nil {
		return
	}
	if !p.IsSetParamSchemas() {
		return ParamConfig_ParamSchemas_DEFAULT
	}
	return p.ParamSchemas
}
func (p *ParamConfig) SetParamSchemas(val []*ParamSchema) {
	p.ParamSchemas = val
}

var fieldIDToName_ParamConfig = map[int16]string{
	1: "param_schemas",
}

func (p *ParamConfig) IsSetParamSchemas() bool {
	return p.ParamSchemas != nil
}

func (p *ParamConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ParamConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ParamConfig) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ParamSchema, 0, size)
	values := make([]ParamSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ParamSchemas = _field
	return nil
}

func (p *ParamConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParamConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ParamConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetParamSchemas() {
		if err = oprot.WriteFieldBegin("param_schemas", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ParamSchemas)); err != nil {
			return err
		}
		for _, v := range p.ParamSchemas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ParamConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ParamConfig(%+v)", *p)

}

func (p *ParamConfig) DeepEqual(ano *ParamConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ParamSchemas) {
		return false
	}
	return true
}

func (p *ParamConfig) Field1DeepEqual(src []*ParamSchema) bool {

	if len(p.ParamSchemas) != len(src) {
		return false
	}
	for i, v := range p.ParamSchemas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ParamSchema struct {
	// 实际名称
	Name *string `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	// 展示名称
	Label        *string        `thrift:"label,2,optional" frugal:"2,optional,string" form:"label" json:"label,omitempty" query:"label"`
	Desc         *string        `thrift:"desc,3,optional" frugal:"3,optional,string" form:"desc" json:"desc,omitempty" query:"desc"`
	Type         *ParamType     `thrift:"type,4,optional" frugal:"4,optional,string" form:"type" json:"type,omitempty" query:"type"`
	Min          *string        `thrift:"min,5,optional" frugal:"5,optional,string" form:"min" json:"min,omitempty" query:"min"`
	Max          *string        `thrift:"max,6,optional" frugal:"6,optional,string" form:"max" json:"max,omitempty" query:"max"`
	DefaultValue *string        `thrift:"default_value,7,optional" frugal:"7,optional,string" form:"default_value" json:"default_value,omitempty" query:"default_value"`
	Options      []*ParamOption `thrift:"options,8,optional" frugal:"8,optional,list<ParamOption>" form:"options" json:"options,omitempty" query:"options"`
}

func NewParamSchema() *ParamSchema {
	return &ParamSchema{}
}

func (p *ParamSchema) InitDefault() {
}

var ParamSchema_Name_DEFAULT string

func (p *ParamSchema) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ParamSchema_Name_DEFAULT
	}
	return *p.Name
}

var ParamSchema_Label_DEFAULT string

func (p *ParamSchema) GetLabel() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetLabel() {
		return ParamSchema_Label_DEFAULT
	}
	return *p.Label
}

var ParamSchema_Desc_DEFAULT string

func (p *ParamSchema) GetDesc() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDesc() {
		return ParamSchema_Desc_DEFAULT
	}
	return *p.Desc
}

var ParamSchema_Type_DEFAULT ParamType

func (p *ParamSchema) GetType() (v ParamType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return ParamSchema_Type_DEFAULT
	}
	return *p.Type
}

var ParamSchema_Min_DEFAULT string

func (p *ParamSchema) GetMin() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMin() {
		return ParamSchema_Min_DEFAULT
	}
	return *p.Min
}

var ParamSchema_Max_DEFAULT string

func (p *ParamSchema) GetMax() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMax() {
		return ParamSchema_Max_DEFAULT
	}
	return *p.Max
}

var ParamSchema_DefaultValue_DEFAULT string

func (p *ParamSchema) GetDefaultValue() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDefaultValue() {
		return ParamSchema_DefaultValue_DEFAULT
	}
	return *p.DefaultValue
}

var ParamSchema_Options_DEFAULT []*ParamOption

func (p *ParamSchema) GetOptions() (v []*ParamOption) {
	if p == nil {
		return
	}
	if !p.IsSetOptions() {
		return ParamSchema_Options_DEFAULT
	}
	return p.Options
}
func (p *ParamSchema) SetName(val *string) {
	p.Name = val
}
func (p *ParamSchema) SetLabel(val *string) {
	p.Label = val
}
func (p *ParamSchema) SetDesc(val *string) {
	p.Desc = val
}
func (p *ParamSchema) SetType(val *ParamType) {
	p.Type = val
}
func (p *ParamSchema) SetMin(val *string) {
	p.Min = val
}
func (p *ParamSchema) SetMax(val *string) {
	p.Max = val
}
func (p *ParamSchema) SetDefaultValue(val *string) {
	p.DefaultValue = val
}
func (p *ParamSchema) SetOptions(val []*ParamOption) {
	p.Options = val
}

var fieldIDToName_ParamSchema = map[int16]string{
	1: "name",
	2: "label",
	3: "desc",
	4: "type",
	5: "min",
	6: "max",
	7: "default_value",
	8: "options",
}

func (p *ParamSchema) IsSetName() bool {
	return p.Name != nil
}

func (p *ParamSchema) IsSetLabel() bool {
	return p.Label != nil
}

func (p *ParamSchema) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *ParamSchema) IsSetType() bool {
	return p.Type != nil
}

func (p *ParamSchema) IsSetMin() bool {
	return p.Min != nil
}

func (p *ParamSchema) IsSetMax() bool {
	return p.Max != nil
}

func (p *ParamSchema) IsSetDefaultValue() bool {
	return p.DefaultValue != nil
}

func (p *ParamSchema) IsSetOptions() bool {
	return p.Options != nil
}

func (p *ParamSchema) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ParamSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ParamSchema) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ParamSchema) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Label = _field
	return nil
}
func (p *ParamSchema) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *ParamSchema) ReadField4(iprot thrift.TProtocol) error {

	var _field *ParamType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *ParamSchema) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Min = _field
	return nil
}
func (p *ParamSchema) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Max = _field
	return nil
}
func (p *ParamSchema) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DefaultValue = _field
	return nil
}
func (p *ParamSchema) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ParamOption, 0, size)
	values := make([]ParamOption, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Options = _field
	return nil
}

func (p *ParamSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParamSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ParamSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ParamSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ParamSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ParamSchema) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ParamSchema) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMin() {
		if err = oprot.WriteFieldBegin("min", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Min); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ParamSchema) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMax() {
		if err = oprot.WriteFieldBegin("max", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Max); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ParamSchema) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultValue() {
		if err = oprot.WriteFieldBegin("default_value", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DefaultValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *ParamSchema) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetOptions() {
		if err = oprot.WriteFieldBegin("options", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Options)); err != nil {
			return err
		}
		for _, v := range p.Options {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ParamSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ParamSchema(%+v)", *p)

}

func (p *ParamSchema) DeepEqual(ano *ParamSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Label) {
		return false
	}
	if !p.Field3DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field4DeepEqual(ano.Type) {
		return false
	}
	if !p.Field5DeepEqual(ano.Min) {
		return false
	}
	if !p.Field6DeepEqual(ano.Max) {
		return false
	}
	if !p.Field7DeepEqual(ano.DefaultValue) {
		return false
	}
	if !p.Field8DeepEqual(ano.Options) {
		return false
	}
	return true
}

func (p *ParamSchema) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ParamSchema) Field2DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}
func (p *ParamSchema) Field3DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *ParamSchema) Field4DeepEqual(src *ParamType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *ParamSchema) Field5DeepEqual(src *string) bool {

	if p.Min == src {
		return true
	} else if p.Min == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Min, *src) != 0 {
		return false
	}
	return true
}
func (p *ParamSchema) Field6DeepEqual(src *string) bool {

	if p.Max == src {
		return true
	} else if p.Max == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Max, *src) != 0 {
		return false
	}
	return true
}
func (p *ParamSchema) Field7DeepEqual(src *string) bool {

	if p.DefaultValue == src {
		return true
	} else if p.DefaultValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DefaultValue, *src) != 0 {
		return false
	}
	return true
}
func (p *ParamSchema) Field8DeepEqual(src []*ParamOption) bool {

	if len(p.Options) != len(src) {
		return false
	}
	for i, v := range p.Options {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ParamOption struct {
	// 实际值
	Value *string `thrift:"value,1,optional" frugal:"1,optional,string" form:"value" json:"value,omitempty" query:"value"`
	// 展示值
	Label *string `thrift:"label,2,optional" frugal:"2,optional,string" form:"label" json:"label,omitempty" query:"label"`
}

func NewParamOption() *ParamOption {
	return &ParamOption{}
}

func (p *ParamOption) InitDefault() {
}

var ParamOption_Value_DEFAULT string

func (p *ParamOption) GetValue() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetValue() {
		return ParamOption_Value_DEFAULT
	}
	return *p.Value
}

var ParamOption_Label_DEFAULT string

func (p *ParamOption) GetLabel() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetLabel() {
		return ParamOption_Label_DEFAULT
	}
	return *p.Label
}
func (p *ParamOption) SetValue(val *string) {
	p.Value = val
}
func (p *ParamOption) SetLabel(val *string) {
	p.Label = val
}

var fieldIDToName_ParamOption = map[int16]string{
	1: "value",
	2: "label",
}

func (p *ParamOption) IsSetValue() bool {
	return p.Value != nil
}

func (p *ParamOption) IsSetLabel() bool {
	return p.Label != nil
}

func (p *ParamOption) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ParamOption[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ParamOption) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Value = _field
	return nil
}
func (p *ParamOption) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Label = _field
	return nil
}

func (p *ParamOption) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ParamOption"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ParamOption) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ParamOption) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ParamOption) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ParamOption(%+v)", *p)

}

func (p *ParamOption) DeepEqual(ano *ParamOption) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	if !p.Field2DeepEqual(ano.Label) {
		return false
	}
	return true
}

func (p *ParamOption) Field1DeepEqual(src *string) bool {

	if p.Value == src {
		return true
	} else if p.Value == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Value, *src) != 0 {
		return false
	}
	return true
}
func (p *ParamOption) Field2DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}

type Quota struct {
	Qpm *int64 `thrift:"qpm,1,optional" frugal:"1,optional,i64" json:"qpm" form:"qpm" query:"qpm"`
	Tpm *int64 `thrift:"tpm,2,optional" frugal:"2,optional,i64" json:"tpm" form:"tpm" query:"tpm"`
}

func NewQuota() *Quota {
	return &Quota{}
}

func (p *Quota) InitDefault() {
}

var Quota_Qpm_DEFAULT int64

func (p *Quota) GetQpm() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetQpm() {
		return Quota_Qpm_DEFAULT
	}
	return *p.Qpm
}

var Quota_Tpm_DEFAULT int64

func (p *Quota) GetTpm() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTpm() {
		return Quota_Tpm_DEFAULT
	}
	return *p.Tpm
}
func (p *Quota) SetQpm(val *int64) {
	p.Qpm = val
}
func (p *Quota) SetTpm(val *int64) {
	p.Tpm = val
}

var fieldIDToName_Quota = map[int16]string{
	1: "qpm",
	2: "tpm",
}

func (p *Quota) IsSetQpm() bool {
	return p.Qpm != nil
}

func (p *Quota) IsSetTpm() bool {
	return p.Tpm != nil
}

func (p *Quota) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Quota[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Quota) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Qpm = _field
	return nil
}
func (p *Quota) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Tpm = _field
	return nil
}

func (p *Quota) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Quota"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Quota) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetQpm() {
		if err = oprot.WriteFieldBegin("qpm", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Qpm); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Quota) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTpm() {
		if err = oprot.WriteFieldBegin("tpm", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Tpm); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Quota) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Quota(%+v)", *p)

}

func (p *Quota) DeepEqual(ano *Quota) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Qpm) {
		return false
	}
	if !p.Field2DeepEqual(ano.Tpm) {
		return false
	}
	return true
}

func (p *Quota) Field1DeepEqual(src *int64) bool {

	if p.Qpm == src {
		return true
	} else if p.Qpm == nil || src == nil {
		return false
	}
	if *p.Qpm != *src {
		return false
	}
	return true
}
func (p *Quota) Field2DeepEqual(src *int64) bool {

	if p.Tpm == src {
		return true
	} else if p.Tpm == nil || src == nil {
		return false
	}
	if *p.Tpm != *src {
		return false
	}
	return true
}
