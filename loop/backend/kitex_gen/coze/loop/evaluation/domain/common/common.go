// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package common

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/domain/dataset"
	"strings"
)

const (
	ContentTypeText = "Text"

	ContentTypeImage = "Image"

	ContentTypeAudio = "Audio"

	ContentTypeMultiPart = "MultiPart"
)

type Role int64

const (
	Role_System    Role = 1
	Role_User      Role = 2
	Role_Assistant Role = 3
	Role_Tool      Role = 4
)

func (p Role) String() string {
	switch p {
	case Role_System:
		return "System"
	case Role_User:
		return "User"
	case Role_Assistant:
		return "Assistant"
	case Role_Tool:
		return "Tool"
	}
	return "<UNSET>"
}

func RoleFromString(s string) (Role, error) {
	switch s {
	case "System":
		return Role_System, nil
	case "User":
		return Role_User, nil
	case "Assistant":
		return Role_Assistant, nil
	case "Tool":
		return Role_Tool, nil
	}
	return Role(0), fmt.Errorf("not a valid Role string")
}

func RolePtr(v Role) *Role { return &v }
func (p *Role) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Role(result.Int64)
	return
}

func (p *Role) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ContentType = string

type Content struct {
	ContentType *ContentType                `thrift:"content_type,1,optional" frugal:"1,optional,string" mapstructure:"content_type" form:"content_type" json:"content_type,omitempty" query:"content_type"`
	Format      *dataset.FieldDisplayFormat `thrift:"format,2,optional" frugal:"2,optional,FieldDisplayFormat" mapstructure:"format" form:"format" json:"format,omitempty" query:"format"`
	Text        *string                     `thrift:"text,10,optional" frugal:"10,optional,string" mapstructure:"text" form:"text" json:"text,omitempty" query:"text"`
	Image       *Image                      `thrift:"image,11,optional" frugal:"11,optional,Image" mapstructure:"image" form:"image" json:"image,omitempty" query:"image"`
	MultiPart   []*Content                  `thrift:"multi_part,12,optional" frugal:"12,optional,list<Content>" mapstructure:"multi_part" form:"multi_part" json:"multi_part,omitempty" query:"multi_part"`
	Audio       *Audio                      `thrift:"audio,13,optional" frugal:"13,optional,Audio" mapstructure:"audio" form:"audio" json:"audio,omitempty" query:"audio"`
}

func NewContent() *Content {
	return &Content{}
}

func (p *Content) InitDefault() {
}

var Content_ContentType_DEFAULT ContentType

func (p *Content) GetContentType() (v ContentType) {
	if p == nil {
		return
	}
	if !p.IsSetContentType() {
		return Content_ContentType_DEFAULT
	}
	return *p.ContentType
}

var Content_Format_DEFAULT dataset.FieldDisplayFormat

func (p *Content) GetFormat() (v dataset.FieldDisplayFormat) {
	if p == nil {
		return
	}
	if !p.IsSetFormat() {
		return Content_Format_DEFAULT
	}
	return *p.Format
}

var Content_Text_DEFAULT string

func (p *Content) GetText() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetText() {
		return Content_Text_DEFAULT
	}
	return *p.Text
}

var Content_Image_DEFAULT *Image

func (p *Content) GetImage() (v *Image) {
	if p == nil {
		return
	}
	if !p.IsSetImage() {
		return Content_Image_DEFAULT
	}
	return p.Image
}

var Content_MultiPart_DEFAULT []*Content

func (p *Content) GetMultiPart() (v []*Content) {
	if p == nil {
		return
	}
	if !p.IsSetMultiPart() {
		return Content_MultiPart_DEFAULT
	}
	return p.MultiPart
}

var Content_Audio_DEFAULT *Audio

func (p *Content) GetAudio() (v *Audio) {
	if p == nil {
		return
	}
	if !p.IsSetAudio() {
		return Content_Audio_DEFAULT
	}
	return p.Audio
}
func (p *Content) SetContentType(val *ContentType) {
	p.ContentType = val
}
func (p *Content) SetFormat(val *dataset.FieldDisplayFormat) {
	p.Format = val
}
func (p *Content) SetText(val *string) {
	p.Text = val
}
func (p *Content) SetImage(val *Image) {
	p.Image = val
}
func (p *Content) SetMultiPart(val []*Content) {
	p.MultiPart = val
}
func (p *Content) SetAudio(val *Audio) {
	p.Audio = val
}

var fieldIDToName_Content = map[int16]string{
	1:  "content_type",
	2:  "format",
	10: "text",
	11: "image",
	12: "multi_part",
	13: "audio",
}

func (p *Content) IsSetContentType() bool {
	return p.ContentType != nil
}

func (p *Content) IsSetFormat() bool {
	return p.Format != nil
}

func (p *Content) IsSetText() bool {
	return p.Text != nil
}

func (p *Content) IsSetImage() bool {
	return p.Image != nil
}

func (p *Content) IsSetMultiPart() bool {
	return p.MultiPart != nil
}

func (p *Content) IsSetAudio() bool {
	return p.Audio != nil
}

func (p *Content) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Content[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Content) ReadField1(iprot thrift.TProtocol) error {

	var _field *ContentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContentType = _field
	return nil
}
func (p *Content) ReadField2(iprot thrift.TProtocol) error {

	var _field *dataset.FieldDisplayFormat
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := dataset.FieldDisplayFormat(v)
		_field = &tmp
	}
	p.Format = _field
	return nil
}
func (p *Content) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Text = _field
	return nil
}
func (p *Content) ReadField11(iprot thrift.TProtocol) error {
	_field := NewImage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Image = _field
	return nil
}
func (p *Content) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Content, 0, size)
	values := make([]Content, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MultiPart = _field
	return nil
}
func (p *Content) ReadField13(iprot thrift.TProtocol) error {
	_field := NewAudio()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Audio = _field
	return nil
}

func (p *Content) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Content"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Content) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentType() {
		if err = oprot.WriteFieldBegin("content_type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Content) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormat() {
		if err = oprot.WriteFieldBegin("format", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Format)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Content) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err = oprot.WriteFieldBegin("text", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Text); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *Content) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetImage() {
		if err = oprot.WriteFieldBegin("image", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Image.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *Content) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultiPart() {
		if err = oprot.WriteFieldBegin("multi_part", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MultiPart)); err != nil {
			return err
		}
		for _, v := range p.MultiPart {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *Content) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetAudio() {
		if err = oprot.WriteFieldBegin("audio", thrift.STRUCT, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Audio.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *Content) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Content(%+v)", *p)

}

func (p *Content) DeepEqual(ano *Content) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ContentType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Format) {
		return false
	}
	if !p.Field10DeepEqual(ano.Text) {
		return false
	}
	if !p.Field11DeepEqual(ano.Image) {
		return false
	}
	if !p.Field12DeepEqual(ano.MultiPart) {
		return false
	}
	if !p.Field13DeepEqual(ano.Audio) {
		return false
	}
	return true
}

func (p *Content) Field1DeepEqual(src *ContentType) bool {

	if p.ContentType == src {
		return true
	} else if p.ContentType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContentType, *src) != 0 {
		return false
	}
	return true
}
func (p *Content) Field2DeepEqual(src *dataset.FieldDisplayFormat) bool {

	if p.Format == src {
		return true
	} else if p.Format == nil || src == nil {
		return false
	}
	if *p.Format != *src {
		return false
	}
	return true
}
func (p *Content) Field10DeepEqual(src *string) bool {

	if p.Text == src {
		return true
	} else if p.Text == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Text, *src) != 0 {
		return false
	}
	return true
}
func (p *Content) Field11DeepEqual(src *Image) bool {

	if !p.Image.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Content) Field12DeepEqual(src []*Content) bool {

	if len(p.MultiPart) != len(src) {
		return false
	}
	for i, v := range p.MultiPart {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Content) Field13DeepEqual(src *Audio) bool {

	if !p.Audio.DeepEqual(src) {
		return false
	}
	return true
}

type AudioContent struct {
	Audios []*Audio `thrift:"audios,1,optional" frugal:"1,optional,list<Audio>" form:"audios" json:"audios,omitempty" query:"audios"`
}

func NewAudioContent() *AudioContent {
	return &AudioContent{}
}

func (p *AudioContent) InitDefault() {
}

var AudioContent_Audios_DEFAULT []*Audio

func (p *AudioContent) GetAudios() (v []*Audio) {
	if p == nil {
		return
	}
	if !p.IsSetAudios() {
		return AudioContent_Audios_DEFAULT
	}
	return p.Audios
}
func (p *AudioContent) SetAudios(val []*Audio) {
	p.Audios = val
}

var fieldIDToName_AudioContent = map[int16]string{
	1: "audios",
}

func (p *AudioContent) IsSetAudios() bool {
	return p.Audios != nil
}

func (p *AudioContent) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AudioContent[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AudioContent) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Audio, 0, size)
	values := make([]Audio, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Audios = _field
	return nil
}

func (p *AudioContent) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AudioContent"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AudioContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAudios() {
		if err = oprot.WriteFieldBegin("audios", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Audios)); err != nil {
			return err
		}
		for _, v := range p.Audios {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AudioContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioContent(%+v)", *p)

}

func (p *AudioContent) DeepEqual(ano *AudioContent) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Audios) {
		return false
	}
	return true
}

func (p *AudioContent) Field1DeepEqual(src []*Audio) bool {

	if len(p.Audios) != len(src) {
		return false
	}
	for i, v := range p.Audios {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type Audio struct {
	Format *string `thrift:"format,1,optional" frugal:"1,optional,string" form:"format" json:"format,omitempty" query:"format"`
	URL    *string `thrift:"url,2,optional" frugal:"2,optional,string" form:"url" json:"url,omitempty" query:"url"`
}

func NewAudio() *Audio {
	return &Audio{}
}

func (p *Audio) InitDefault() {
}

var Audio_Format_DEFAULT string

func (p *Audio) GetFormat() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFormat() {
		return Audio_Format_DEFAULT
	}
	return *p.Format
}

var Audio_URL_DEFAULT string

func (p *Audio) GetURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetURL() {
		return Audio_URL_DEFAULT
	}
	return *p.URL
}
func (p *Audio) SetFormat(val *string) {
	p.Format = val
}
func (p *Audio) SetURL(val *string) {
	p.URL = val
}

var fieldIDToName_Audio = map[int16]string{
	1: "format",
	2: "url",
}

func (p *Audio) IsSetFormat() bool {
	return p.Format != nil
}

func (p *Audio) IsSetURL() bool {
	return p.URL != nil
}

func (p *Audio) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Audio[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Audio) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Format = _field
	return nil
}
func (p *Audio) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.URL = _field
	return nil
}

func (p *Audio) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Audio"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Audio) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormat() {
		if err = oprot.WriteFieldBegin("format", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Format); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Audio) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.URL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Audio) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Audio(%+v)", *p)

}

func (p *Audio) DeepEqual(ano *Audio) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Format) {
		return false
	}
	if !p.Field2DeepEqual(ano.URL) {
		return false
	}
	return true
}

func (p *Audio) Field1DeepEqual(src *string) bool {

	if p.Format == src {
		return true
	} else if p.Format == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Format, *src) != 0 {
		return false
	}
	return true
}
func (p *Audio) Field2DeepEqual(src *string) bool {

	if p.URL == src {
		return true
	} else if p.URL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.URL, *src) != 0 {
		return false
	}
	return true
}

type Image struct {
	Name     *string `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	URL      *string `thrift:"url,2,optional" frugal:"2,optional,string" form:"url" json:"url,omitempty" query:"url"`
	URI      *string `thrift:"uri,3,optional" frugal:"3,optional,string" form:"uri" json:"uri,omitempty" query:"uri"`
	ThumbURL *string `thrift:"thumb_url,4,optional" frugal:"4,optional,string" form:"thumb_url" json:"thumb_url,omitempty" query:"thumb_url"`
}

func NewImage() *Image {
	return &Image{}
}

func (p *Image) InitDefault() {
}

var Image_Name_DEFAULT string

func (p *Image) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return Image_Name_DEFAULT
	}
	return *p.Name
}

var Image_URL_DEFAULT string

func (p *Image) GetURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetURL() {
		return Image_URL_DEFAULT
	}
	return *p.URL
}

var Image_URI_DEFAULT string

func (p *Image) GetURI() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetURI() {
		return Image_URI_DEFAULT
	}
	return *p.URI
}

var Image_ThumbURL_DEFAULT string

func (p *Image) GetThumbURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetThumbURL() {
		return Image_ThumbURL_DEFAULT
	}
	return *p.ThumbURL
}
func (p *Image) SetName(val *string) {
	p.Name = val
}
func (p *Image) SetURL(val *string) {
	p.URL = val
}
func (p *Image) SetURI(val *string) {
	p.URI = val
}
func (p *Image) SetThumbURL(val *string) {
	p.ThumbURL = val
}

var fieldIDToName_Image = map[int16]string{
	1: "name",
	2: "url",
	3: "uri",
	4: "thumb_url",
}

func (p *Image) IsSetName() bool {
	return p.Name != nil
}

func (p *Image) IsSetURL() bool {
	return p.URL != nil
}

func (p *Image) IsSetURI() bool {
	return p.URI != nil
}

func (p *Image) IsSetThumbURL() bool {
	return p.ThumbURL != nil
}

func (p *Image) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Image[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Image) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Image) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.URL = _field
	return nil
}
func (p *Image) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.URI = _field
	return nil
}
func (p *Image) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ThumbURL = _field
	return nil
}

func (p *Image) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Image"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Image) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Image) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.URL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Image) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetURI() {
		if err = oprot.WriteFieldBegin("uri", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.URI); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Image) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetThumbURL() {
		if err = oprot.WriteFieldBegin("thumb_url", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ThumbURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Image) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Image(%+v)", *p)

}

func (p *Image) DeepEqual(ano *Image) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.URL) {
		return false
	}
	if !p.Field3DeepEqual(ano.URI) {
		return false
	}
	if !p.Field4DeepEqual(ano.ThumbURL) {
		return false
	}
	return true
}

func (p *Image) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Image) Field2DeepEqual(src *string) bool {

	if p.URL == src {
		return true
	} else if p.URL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.URL, *src) != 0 {
		return false
	}
	return true
}
func (p *Image) Field3DeepEqual(src *string) bool {

	if p.URI == src {
		return true
	} else if p.URI == nil || src == nil {
		return false
	}
	if strings.Compare(*p.URI, *src) != 0 {
		return false
	}
	return true
}
func (p *Image) Field4DeepEqual(src *string) bool {

	if p.ThumbURL == src {
		return true
	} else if p.ThumbURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ThumbURL, *src) != 0 {
		return false
	}
	return true
}

type OrderBy struct {
	Field *string `thrift:"field,1,optional" frugal:"1,optional,string" form:"field" json:"field,omitempty" query:"field"`
	IsAsc *bool   `thrift:"is_asc,2,optional" frugal:"2,optional,bool" form:"is_asc" json:"is_asc,omitempty" query:"is_asc"`
}

func NewOrderBy() *OrderBy {
	return &OrderBy{}
}

func (p *OrderBy) InitDefault() {
}

var OrderBy_Field_DEFAULT string

func (p *OrderBy) GetField() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetField() {
		return OrderBy_Field_DEFAULT
	}
	return *p.Field
}

var OrderBy_IsAsc_DEFAULT bool

func (p *OrderBy) GetIsAsc() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsAsc() {
		return OrderBy_IsAsc_DEFAULT
	}
	return *p.IsAsc
}
func (p *OrderBy) SetField(val *string) {
	p.Field = val
}
func (p *OrderBy) SetIsAsc(val *bool) {
	p.IsAsc = val
}

var fieldIDToName_OrderBy = map[int16]string{
	1: "field",
	2: "is_asc",
}

func (p *OrderBy) IsSetField() bool {
	return p.Field != nil
}

func (p *OrderBy) IsSetIsAsc() bool {
	return p.IsAsc != nil
}

func (p *OrderBy) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OrderBy[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OrderBy) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Field = _field
	return nil
}
func (p *OrderBy) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsAsc = _field
	return nil
}

func (p *OrderBy) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OrderBy"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OrderBy) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetField() {
		if err = oprot.WriteFieldBegin("field", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Field); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *OrderBy) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAsc() {
		if err = oprot.WriteFieldBegin("is_asc", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsAsc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *OrderBy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderBy(%+v)", *p)

}

func (p *OrderBy) DeepEqual(ano *OrderBy) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Field) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsAsc) {
		return false
	}
	return true
}

func (p *OrderBy) Field1DeepEqual(src *string) bool {

	if p.Field == src {
		return true
	} else if p.Field == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Field, *src) != 0 {
		return false
	}
	return true
}
func (p *OrderBy) Field2DeepEqual(src *bool) bool {

	if p.IsAsc == src {
		return true
	} else if p.IsAsc == nil || src == nil {
		return false
	}
	if *p.IsAsc != *src {
		return false
	}
	return true
}

type Message struct {
	Role    *Role             `thrift:"role,1,optional" frugal:"1,optional,Role" mapstructure:"role" form:"role" json:"role,omitempty" query:"role"`
	Content *Content          `thrift:"content,2,optional" frugal:"2,optional,Content" mapstructure:"content" form:"content" json:"content,omitempty" query:"content"`
	Ext     map[string]string `thrift:"ext,3,optional" frugal:"3,optional,map<string:string>" mapstructure:"ext" form:"ext" json:"ext,omitempty" query:"ext"`
}

func NewMessage() *Message {
	return &Message{}
}

func (p *Message) InitDefault() {
}

var Message_Role_DEFAULT Role

func (p *Message) GetRole() (v Role) {
	if p == nil {
		return
	}
	if !p.IsSetRole() {
		return Message_Role_DEFAULT
	}
	return *p.Role
}

var Message_Content_DEFAULT *Content

func (p *Message) GetContent() (v *Content) {
	if p == nil {
		return
	}
	if !p.IsSetContent() {
		return Message_Content_DEFAULT
	}
	return p.Content
}

var Message_Ext_DEFAULT map[string]string

func (p *Message) GetExt() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetExt() {
		return Message_Ext_DEFAULT
	}
	return p.Ext
}
func (p *Message) SetRole(val *Role) {
	p.Role = val
}
func (p *Message) SetContent(val *Content) {
	p.Content = val
}
func (p *Message) SetExt(val map[string]string) {
	p.Ext = val
}

var fieldIDToName_Message = map[int16]string{
	1: "role",
	2: "content",
	3: "ext",
}

func (p *Message) IsSetRole() bool {
	return p.Role != nil
}

func (p *Message) IsSetContent() bool {
	return p.Content != nil
}

func (p *Message) IsSetExt() bool {
	return p.Ext != nil
}

func (p *Message) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Message[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Message) ReadField1(iprot thrift.TProtocol) error {

	var _field *Role
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := Role(v)
		_field = &tmp
	}
	p.Role = _field
	return nil
}
func (p *Message) ReadField2(iprot thrift.TProtocol) error {
	_field := NewContent()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Content = _field
	return nil
}
func (p *Message) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Ext = _field
	return nil
}

func (p *Message) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Message"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err = oprot.WriteFieldBegin("role", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Role)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Content.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExt() {
		if err = oprot.WriteFieldBegin("ext", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Ext)); err != nil {
			return err
		}
		for k, v := range p.Ext {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)

}

func (p *Message) DeepEqual(ano *Message) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Role) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	if !p.Field3DeepEqual(ano.Ext) {
		return false
	}
	return true
}

func (p *Message) Field1DeepEqual(src *Role) bool {

	if p.Role == src {
		return true
	} else if p.Role == nil || src == nil {
		return false
	}
	if *p.Role != *src {
		return false
	}
	return true
}
func (p *Message) Field2DeepEqual(src *Content) bool {

	if !p.Content.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Message) Field3DeepEqual(src map[string]string) bool {

	if len(p.Ext) != len(src) {
		return false
	}
	for k, v := range p.Ext {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ArgsSchema struct {
	Key                 *string       `thrift:"key,1,optional" frugal:"1,optional,string" mapstructure:"key" form:"key" json:"key,omitempty" query:"key"`
	SupportContentTypes []ContentType `thrift:"support_content_types,2,optional" frugal:"2,optional,list<string>" mapstructure:"support_content_types" form:"support_content_types" json:"support_content_types,omitempty" query:"support_content_types"`
	// 	序列化后的jsonSchema字符串，例如："{\"type\": \"object\", \"properties\": {\"name\": {\"type\": \"string\"}, \"age\": {\"type\": \"integer\"}, \"isStudent\": {\"type\": \"boolean\"}}, \"required\": [\"name\", \"age\", \"isStudent\"]}"
	JSONSchema *string `thrift:"json_schema,3,optional" frugal:"3,optional,string" mapstructure:"json_schema" form:"json_schema" json:"json_schema,omitempty" query:"json_schema"`
}

func NewArgsSchema() *ArgsSchema {
	return &ArgsSchema{}
}

func (p *ArgsSchema) InitDefault() {
}

var ArgsSchema_Key_DEFAULT string

func (p *ArgsSchema) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return ArgsSchema_Key_DEFAULT
	}
	return *p.Key
}

var ArgsSchema_SupportContentTypes_DEFAULT []ContentType

func (p *ArgsSchema) GetSupportContentTypes() (v []ContentType) {
	if p == nil {
		return
	}
	if !p.IsSetSupportContentTypes() {
		return ArgsSchema_SupportContentTypes_DEFAULT
	}
	return p.SupportContentTypes
}

var ArgsSchema_JSONSchema_DEFAULT string

func (p *ArgsSchema) GetJSONSchema() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetJSONSchema() {
		return ArgsSchema_JSONSchema_DEFAULT
	}
	return *p.JSONSchema
}
func (p *ArgsSchema) SetKey(val *string) {
	p.Key = val
}
func (p *ArgsSchema) SetSupportContentTypes(val []ContentType) {
	p.SupportContentTypes = val
}
func (p *ArgsSchema) SetJSONSchema(val *string) {
	p.JSONSchema = val
}

var fieldIDToName_ArgsSchema = map[int16]string{
	1: "key",
	2: "support_content_types",
	3: "json_schema",
}

func (p *ArgsSchema) IsSetKey() bool {
	return p.Key != nil
}

func (p *ArgsSchema) IsSetSupportContentTypes() bool {
	return p.SupportContentTypes != nil
}

func (p *ArgsSchema) IsSetJSONSchema() bool {
	return p.JSONSchema != nil
}

func (p *ArgsSchema) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArgsSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArgsSchema) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *ArgsSchema) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]ContentType, 0, size)
	for i := 0; i < size; i++ {

		var _elem ContentType
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SupportContentTypes = _field
	return nil
}
func (p *ArgsSchema) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JSONSchema = _field
	return nil
}

func (p *ArgsSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ArgsSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArgsSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ArgsSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSupportContentTypes() {
		if err = oprot.WriteFieldBegin("support_content_types", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SupportContentTypes)); err != nil {
			return err
		}
		for _, v := range p.SupportContentTypes {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ArgsSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetJSONSchema() {
		if err = oprot.WriteFieldBegin("json_schema", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JSONSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ArgsSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArgsSchema(%+v)", *p)

}

func (p *ArgsSchema) DeepEqual(ano *ArgsSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.SupportContentTypes) {
		return false
	}
	if !p.Field3DeepEqual(ano.JSONSchema) {
		return false
	}
	return true
}

func (p *ArgsSchema) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *ArgsSchema) Field2DeepEqual(src []ContentType) bool {

	if len(p.SupportContentTypes) != len(src) {
		return false
	}
	for i, v := range p.SupportContentTypes {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ArgsSchema) Field3DeepEqual(src *string) bool {

	if p.JSONSchema == src {
		return true
	} else if p.JSONSchema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.JSONSchema, *src) != 0 {
		return false
	}
	return true
}

type UserInfo struct {
	// 姓名
	Name *string `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	// 英文名称
	EnName *string `thrift:"en_name,2,optional" frugal:"2,optional,string" form:"en_name" json:"en_name,omitempty" query:"en_name"`
	// 用户头像url
	AvatarURL *string `thrift:"avatar_url,3,optional" frugal:"3,optional,string" form:"avatar_url" json:"avatar_url,omitempty" query:"avatar_url"`
	// 72 * 72 头像
	AvatarThumb *string `thrift:"avatar_thumb,4,optional" frugal:"4,optional,string" form:"avatar_thumb" json:"avatar_thumb,omitempty" query:"avatar_thumb"`
	// 用户应用内唯一标识
	OpenID *string `thrift:"open_id,5,optional" frugal:"5,optional,string" form:"open_id" json:"open_id,omitempty" query:"open_id"`
	// 用户应用开发商内唯一标识
	UnionID *string `thrift:"union_id,6,optional" frugal:"6,optional,string" form:"union_id" json:"union_id,omitempty" query:"union_id"`
	// 用户在租户内的唯一标识
	UserID *string `thrift:"user_id,8,optional" frugal:"8,optional,string" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	// 用户邮箱
	Email *string `thrift:"email,9,optional" frugal:"9,optional,string" form:"email" json:"email,omitempty" query:"email"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
}

var UserInfo_Name_DEFAULT string

func (p *UserInfo) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return UserInfo_Name_DEFAULT
	}
	return *p.Name
}

var UserInfo_EnName_DEFAULT string

func (p *UserInfo) GetEnName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEnName() {
		return UserInfo_EnName_DEFAULT
	}
	return *p.EnName
}

var UserInfo_AvatarURL_DEFAULT string

func (p *UserInfo) GetAvatarURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAvatarURL() {
		return UserInfo_AvatarURL_DEFAULT
	}
	return *p.AvatarURL
}

var UserInfo_AvatarThumb_DEFAULT string

func (p *UserInfo) GetAvatarThumb() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAvatarThumb() {
		return UserInfo_AvatarThumb_DEFAULT
	}
	return *p.AvatarThumb
}

var UserInfo_OpenID_DEFAULT string

func (p *UserInfo) GetOpenID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetOpenID() {
		return UserInfo_OpenID_DEFAULT
	}
	return *p.OpenID
}

var UserInfo_UnionID_DEFAULT string

func (p *UserInfo) GetUnionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUnionID() {
		return UserInfo_UnionID_DEFAULT
	}
	return *p.UnionID
}

var UserInfo_UserID_DEFAULT string

func (p *UserInfo) GetUserID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUserID() {
		return UserInfo_UserID_DEFAULT
	}
	return *p.UserID
}

var UserInfo_Email_DEFAULT string

func (p *UserInfo) GetEmail() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEmail() {
		return UserInfo_Email_DEFAULT
	}
	return *p.Email
}
func (p *UserInfo) SetName(val *string) {
	p.Name = val
}
func (p *UserInfo) SetEnName(val *string) {
	p.EnName = val
}
func (p *UserInfo) SetAvatarURL(val *string) {
	p.AvatarURL = val
}
func (p *UserInfo) SetAvatarThumb(val *string) {
	p.AvatarThumb = val
}
func (p *UserInfo) SetOpenID(val *string) {
	p.OpenID = val
}
func (p *UserInfo) SetUnionID(val *string) {
	p.UnionID = val
}
func (p *UserInfo) SetUserID(val *string) {
	p.UserID = val
}
func (p *UserInfo) SetEmail(val *string) {
	p.Email = val
}

var fieldIDToName_UserInfo = map[int16]string{
	1: "name",
	2: "en_name",
	3: "avatar_url",
	4: "avatar_thumb",
	5: "open_id",
	6: "union_id",
	8: "user_id",
	9: "email",
}

func (p *UserInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *UserInfo) IsSetEnName() bool {
	return p.EnName != nil
}

func (p *UserInfo) IsSetAvatarURL() bool {
	return p.AvatarURL != nil
}

func (p *UserInfo) IsSetAvatarThumb() bool {
	return p.AvatarThumb != nil
}

func (p *UserInfo) IsSetOpenID() bool {
	return p.OpenID != nil
}

func (p *UserInfo) IsSetUnionID() bool {
	return p.UnionID != nil
}

func (p *UserInfo) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *UserInfo) IsSetEmail() bool {
	return p.Email != nil
}

func (p *UserInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *UserInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnName = _field
	return nil
}
func (p *UserInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AvatarURL = _field
	return nil
}
func (p *UserInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AvatarThumb = _field
	return nil
}
func (p *UserInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OpenID = _field
	return nil
}
func (p *UserInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UnionID = _field
	return nil
}
func (p *UserInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *UserInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Email = _field
	return nil
}

func (p *UserInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UserInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnName() {
		if err = oprot.WriteFieldBegin("en_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EnName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UserInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatarURL() {
		if err = oprot.WriteFieldBegin("avatar_url", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AvatarURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UserInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatarThumb() {
		if err = oprot.WriteFieldBegin("avatar_thumb", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AvatarThumb); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *UserInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOpenID() {
		if err = oprot.WriteFieldBegin("open_id", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OpenID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *UserInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnionID() {
		if err = oprot.WriteFieldBegin("union_id", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UnionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *UserInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *UserInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err = oprot.WriteFieldBegin("email", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Email); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)

}

func (p *UserInfo) DeepEqual(ano *UserInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.EnName) {
		return false
	}
	if !p.Field3DeepEqual(ano.AvatarURL) {
		return false
	}
	if !p.Field4DeepEqual(ano.AvatarThumb) {
		return false
	}
	if !p.Field5DeepEqual(ano.OpenID) {
		return false
	}
	if !p.Field6DeepEqual(ano.UnionID) {
		return false
	}
	if !p.Field8DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field9DeepEqual(ano.Email) {
		return false
	}
	return true
}

func (p *UserInfo) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field2DeepEqual(src *string) bool {

	if p.EnName == src {
		return true
	} else if p.EnName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EnName, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field3DeepEqual(src *string) bool {

	if p.AvatarURL == src {
		return true
	} else if p.AvatarURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AvatarURL, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field4DeepEqual(src *string) bool {

	if p.AvatarThumb == src {
		return true
	} else if p.AvatarThumb == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AvatarThumb, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field5DeepEqual(src *string) bool {

	if p.OpenID == src {
		return true
	} else if p.OpenID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OpenID, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field6DeepEqual(src *string) bool {

	if p.UnionID == src {
		return true
	} else if p.UnionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UnionID, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field8DeepEqual(src *string) bool {

	if p.UserID == src {
		return true
	} else if p.UserID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserID, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field9DeepEqual(src *string) bool {

	if p.Email == src {
		return true
	} else if p.Email == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Email, *src) != 0 {
		return false
	}
	return true
}

type BaseInfo struct {
	CreatedBy *UserInfo `thrift:"created_by,1,optional" frugal:"1,optional,UserInfo" form:"created_by" json:"created_by,omitempty" query:"created_by"`
	UpdatedBy *UserInfo `thrift:"updated_by,2,optional" frugal:"2,optional,UserInfo" form:"updated_by" json:"updated_by,omitempty" query:"updated_by"`
	CreatedAt *int64    `thrift:"created_at,3,optional" frugal:"3,optional,i64" json:"created_at" form:"created_at" query:"created_at"`
	UpdatedAt *int64    `thrift:"updated_at,4,optional" frugal:"4,optional,i64" json:"updated_at" form:"updated_at" query:"updated_at"`
	DeletedAt *int64    `thrift:"deleted_at,5,optional" frugal:"5,optional,i64" json:"deleted_at" form:"deleted_at" query:"deleted_at"`
}

func NewBaseInfo() *BaseInfo {
	return &BaseInfo{}
}

func (p *BaseInfo) InitDefault() {
}

var BaseInfo_CreatedBy_DEFAULT *UserInfo

func (p *BaseInfo) GetCreatedBy() (v *UserInfo) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedBy() {
		return BaseInfo_CreatedBy_DEFAULT
	}
	return p.CreatedBy
}

var BaseInfo_UpdatedBy_DEFAULT *UserInfo

func (p *BaseInfo) GetUpdatedBy() (v *UserInfo) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedBy() {
		return BaseInfo_UpdatedBy_DEFAULT
	}
	return p.UpdatedBy
}

var BaseInfo_CreatedAt_DEFAULT int64

func (p *BaseInfo) GetCreatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedAt() {
		return BaseInfo_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var BaseInfo_UpdatedAt_DEFAULT int64

func (p *BaseInfo) GetUpdatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedAt() {
		return BaseInfo_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

var BaseInfo_DeletedAt_DEFAULT int64

func (p *BaseInfo) GetDeletedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetDeletedAt() {
		return BaseInfo_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *BaseInfo) SetCreatedBy(val *UserInfo) {
	p.CreatedBy = val
}
func (p *BaseInfo) SetUpdatedBy(val *UserInfo) {
	p.UpdatedBy = val
}
func (p *BaseInfo) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *BaseInfo) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *BaseInfo) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

var fieldIDToName_BaseInfo = map[int16]string{
	1: "created_by",
	2: "updated_by",
	3: "created_at",
	4: "updated_at",
	5: "deleted_at",
}

func (p *BaseInfo) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *BaseInfo) IsSetUpdatedBy() bool {
	return p.UpdatedBy != nil
}

func (p *BaseInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *BaseInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *BaseInfo) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *BaseInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BaseInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BaseInfo) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUserInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreatedBy = _field
	return nil
}
func (p *BaseInfo) ReadField2(iprot thrift.TProtocol) error {
	_field := NewUserInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.UpdatedBy = _field
	return nil
}
func (p *BaseInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *BaseInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *BaseInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DeletedAt = _field
	return nil
}

func (p *BaseInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BaseInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BaseInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBy() {
		if err = oprot.WriteFieldBegin("created_by", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CreatedBy.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BaseInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedBy() {
		if err = oprot.WriteFieldBegin("updated_by", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.UpdatedBy.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BaseInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("created_at", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BaseInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updated_at", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BaseInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeletedAt() {
		if err = oprot.WriteFieldBegin("deleted_at", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DeletedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BaseInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseInfo(%+v)", *p)

}

func (p *BaseInfo) DeepEqual(ano *BaseInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CreatedBy) {
		return false
	}
	if !p.Field2DeepEqual(ano.UpdatedBy) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.DeletedAt) {
		return false
	}
	return true
}

func (p *BaseInfo) Field1DeepEqual(src *UserInfo) bool {

	if !p.CreatedBy.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BaseInfo) Field2DeepEqual(src *UserInfo) bool {

	if !p.UpdatedBy.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BaseInfo) Field3DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *BaseInfo) Field4DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *BaseInfo) Field5DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}

// 评测模型配置
type ModelConfig struct {
	// 模型id
	ModelID *int64 `thrift:"model_id,1,optional" frugal:"1,optional,i64" json:"model_id" form:"model_id" query:"model_id"`
	// 模型名称
	ModelName   *string  `thrift:"model_name,2,optional" frugal:"2,optional,string" form:"model_name" json:"model_name,omitempty" query:"model_name"`
	Temperature *float64 `thrift:"temperature,3,optional" frugal:"3,optional,double" form:"temperature" json:"temperature,omitempty" query:"temperature"`
	MaxTokens   *int32   `thrift:"max_tokens,4,optional" frugal:"4,optional,i32" form:"max_tokens" json:"max_tokens,omitempty" query:"max_tokens"`
	TopP        *float64 `thrift:"top_p,5,optional" frugal:"5,optional,double" form:"top_p" json:"top_p,omitempty" query:"top_p"`
}

func NewModelConfig() *ModelConfig {
	return &ModelConfig{}
}

func (p *ModelConfig) InitDefault() {
}

var ModelConfig_ModelID_DEFAULT int64

func (p *ModelConfig) GetModelID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetModelID() {
		return ModelConfig_ModelID_DEFAULT
	}
	return *p.ModelID
}

var ModelConfig_ModelName_DEFAULT string

func (p *ModelConfig) GetModelName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetModelName() {
		return ModelConfig_ModelName_DEFAULT
	}
	return *p.ModelName
}

var ModelConfig_Temperature_DEFAULT float64

func (p *ModelConfig) GetTemperature() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetTemperature() {
		return ModelConfig_Temperature_DEFAULT
	}
	return *p.Temperature
}

var ModelConfig_MaxTokens_DEFAULT int32

func (p *ModelConfig) GetMaxTokens() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetMaxTokens() {
		return ModelConfig_MaxTokens_DEFAULT
	}
	return *p.MaxTokens
}

var ModelConfig_TopP_DEFAULT float64

func (p *ModelConfig) GetTopP() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetTopP() {
		return ModelConfig_TopP_DEFAULT
	}
	return *p.TopP
}
func (p *ModelConfig) SetModelID(val *int64) {
	p.ModelID = val
}
func (p *ModelConfig) SetModelName(val *string) {
	p.ModelName = val
}
func (p *ModelConfig) SetTemperature(val *float64) {
	p.Temperature = val
}
func (p *ModelConfig) SetMaxTokens(val *int32) {
	p.MaxTokens = val
}
func (p *ModelConfig) SetTopP(val *float64) {
	p.TopP = val
}

var fieldIDToName_ModelConfig = map[int16]string{
	1: "model_id",
	2: "model_name",
	3: "temperature",
	4: "max_tokens",
	5: "top_p",
}

func (p *ModelConfig) IsSetModelID() bool {
	return p.ModelID != nil
}

func (p *ModelConfig) IsSetModelName() bool {
	return p.ModelName != nil
}

func (p *ModelConfig) IsSetTemperature() bool {
	return p.Temperature != nil
}

func (p *ModelConfig) IsSetMaxTokens() bool {
	return p.MaxTokens != nil
}

func (p *ModelConfig) IsSetTopP() bool {
	return p.TopP != nil
}

func (p *ModelConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ModelID = _field
	return nil
}
func (p *ModelConfig) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ModelName = _field
	return nil
}
func (p *ModelConfig) ReadField3(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Temperature = _field
	return nil
}
func (p *ModelConfig) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxTokens = _field
	return nil
}
func (p *ModelConfig) ReadField5(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TopP = _field
	return nil
}

func (p *ModelConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelID() {
		if err = oprot.WriteFieldBegin("model_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ModelID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ModelConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelName() {
		if err = oprot.WriteFieldBegin("model_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ModelName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ModelConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTemperature() {
		if err = oprot.WriteFieldBegin("temperature", thrift.DOUBLE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Temperature); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ModelConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxTokens() {
		if err = oprot.WriteFieldBegin("max_tokens", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ModelConfig) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopP() {
		if err = oprot.WriteFieldBegin("top_p", thrift.DOUBLE, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.TopP); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ModelConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelConfig(%+v)", *p)

}

func (p *ModelConfig) DeepEqual(ano *ModelConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ModelID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ModelName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Temperature) {
		return false
	}
	if !p.Field4DeepEqual(ano.MaxTokens) {
		return false
	}
	if !p.Field5DeepEqual(ano.TopP) {
		return false
	}
	return true
}

func (p *ModelConfig) Field1DeepEqual(src *int64) bool {

	if p.ModelID == src {
		return true
	} else if p.ModelID == nil || src == nil {
		return false
	}
	if *p.ModelID != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field2DeepEqual(src *string) bool {

	if p.ModelName == src {
		return true
	} else if p.ModelName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ModelName, *src) != 0 {
		return false
	}
	return true
}
func (p *ModelConfig) Field3DeepEqual(src *float64) bool {

	if p.Temperature == src {
		return true
	} else if p.Temperature == nil || src == nil {
		return false
	}
	if *p.Temperature != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field4DeepEqual(src *int32) bool {

	if p.MaxTokens == src {
		return true
	} else if p.MaxTokens == nil || src == nil {
		return false
	}
	if *p.MaxTokens != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field5DeepEqual(src *float64) bool {

	if p.TopP == src {
		return true
	} else if p.TopP == nil || src == nil {
		return false
	}
	if *p.TopP != *src {
		return false
	}
	return true
}

type Session struct {
	UserID *int64 `thrift:"user_id,1,optional" frugal:"1,optional,i64" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	AppID  *int32 `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,omitempty" query:"app_id"`
}

func NewSession() *Session {
	return &Session{}
}

func (p *Session) InitDefault() {
}

var Session_UserID_DEFAULT int64

func (p *Session) GetUserID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetUserID() {
		return Session_UserID_DEFAULT
	}
	return *p.UserID
}

var Session_AppID_DEFAULT int32

func (p *Session) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return Session_AppID_DEFAULT
	}
	return *p.AppID
}
func (p *Session) SetUserID(val *int64) {
	p.UserID = val
}
func (p *Session) SetAppID(val *int32) {
	p.AppID = val
}

var fieldIDToName_Session = map[int16]string{
	1: "user_id",
	2: "app_id",
}

func (p *Session) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *Session) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *Session) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Session[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Session) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *Session) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}

func (p *Session) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Session"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Session) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Session) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Session) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Session(%+v)", *p)

}

func (p *Session) DeepEqual(ano *Session) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	return true
}

func (p *Session) Field1DeepEqual(src *int64) bool {

	if p.UserID == src {
		return true
	} else if p.UserID == nil || src == nil {
		return false
	}
	if *p.UserID != *src {
		return false
	}
	return true
}
func (p *Session) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
