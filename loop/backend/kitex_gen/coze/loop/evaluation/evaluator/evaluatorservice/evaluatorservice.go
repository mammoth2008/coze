// Code generated by Kitex v0.13.1. DO NOT EDIT.

package evaluatorservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	evaluator "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/evaluator"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ListEvaluators": kitex.NewMethodInfo(
		listEvaluatorsHandler,
		newEvaluatorServiceListEvaluatorsArgs,
		newEvaluatorServiceListEvaluatorsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetEvaluators": kitex.NewMethodInfo(
		batchGetEvaluatorsHandler,
		newEvaluatorServiceBatchGetEvaluatorsArgs,
		newEvaluatorServiceBatchGetEvaluatorsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetEvaluator": kitex.NewMethodInfo(
		getEvaluatorHandler,
		newEvaluatorServiceGetEvaluatorArgs,
		newEvaluatorServiceGetEvaluatorResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateEvaluator": kitex.NewMethodInfo(
		createEvaluatorHandler,
		newEvaluatorServiceCreateEvaluatorArgs,
		newEvaluatorServiceCreateEvaluatorResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateEvaluator": kitex.NewMethodInfo(
		updateEvaluatorHandler,
		newEvaluatorServiceUpdateEvaluatorArgs,
		newEvaluatorServiceUpdateEvaluatorResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateEvaluatorDraft": kitex.NewMethodInfo(
		updateEvaluatorDraftHandler,
		newEvaluatorServiceUpdateEvaluatorDraftArgs,
		newEvaluatorServiceUpdateEvaluatorDraftResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteEvaluator": kitex.NewMethodInfo(
		deleteEvaluatorHandler,
		newEvaluatorServiceDeleteEvaluatorArgs,
		newEvaluatorServiceDeleteEvaluatorResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CheckEvaluatorName": kitex.NewMethodInfo(
		checkEvaluatorNameHandler,
		newEvaluatorServiceCheckEvaluatorNameArgs,
		newEvaluatorServiceCheckEvaluatorNameResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListEvaluatorVersions": kitex.NewMethodInfo(
		listEvaluatorVersionsHandler,
		newEvaluatorServiceListEvaluatorVersionsArgs,
		newEvaluatorServiceListEvaluatorVersionsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetEvaluatorVersion": kitex.NewMethodInfo(
		getEvaluatorVersionHandler,
		newEvaluatorServiceGetEvaluatorVersionArgs,
		newEvaluatorServiceGetEvaluatorVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetEvaluatorVersions": kitex.NewMethodInfo(
		batchGetEvaluatorVersionsHandler,
		newEvaluatorServiceBatchGetEvaluatorVersionsArgs,
		newEvaluatorServiceBatchGetEvaluatorVersionsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SubmitEvaluatorVersion": kitex.NewMethodInfo(
		submitEvaluatorVersionHandler,
		newEvaluatorServiceSubmitEvaluatorVersionArgs,
		newEvaluatorServiceSubmitEvaluatorVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListTemplates": kitex.NewMethodInfo(
		listTemplatesHandler,
		newEvaluatorServiceListTemplatesArgs,
		newEvaluatorServiceListTemplatesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTemplateInfo": kitex.NewMethodInfo(
		getTemplateInfoHandler,
		newEvaluatorServiceGetTemplateInfoArgs,
		newEvaluatorServiceGetTemplateInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDefaultPromptEvaluatorTools": kitex.NewMethodInfo(
		getDefaultPromptEvaluatorToolsHandler,
		newEvaluatorServiceGetDefaultPromptEvaluatorToolsArgs,
		newEvaluatorServiceGetDefaultPromptEvaluatorToolsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RunEvaluator": kitex.NewMethodInfo(
		runEvaluatorHandler,
		newEvaluatorServiceRunEvaluatorArgs,
		newEvaluatorServiceRunEvaluatorResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DebugEvaluator": kitex.NewMethodInfo(
		debugEvaluatorHandler,
		newEvaluatorServiceDebugEvaluatorArgs,
		newEvaluatorServiceDebugEvaluatorResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateEvaluatorRecord": kitex.NewMethodInfo(
		updateEvaluatorRecordHandler,
		newEvaluatorServiceUpdateEvaluatorRecordArgs,
		newEvaluatorServiceUpdateEvaluatorRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetEvaluatorRecord": kitex.NewMethodInfo(
		getEvaluatorRecordHandler,
		newEvaluatorServiceGetEvaluatorRecordArgs,
		newEvaluatorServiceGetEvaluatorRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetEvaluatorRecords": kitex.NewMethodInfo(
		batchGetEvaluatorRecordsHandler,
		newEvaluatorServiceBatchGetEvaluatorRecordsArgs,
		newEvaluatorServiceBatchGetEvaluatorRecordsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	evaluatorServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return evaluatorServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "EvaluatorService"
	handlerType := (*evaluator.EvaluatorService)(nil)
	extra := map[string]interface{}{
		"PackageName": "evaluator",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func listEvaluatorsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceListEvaluatorsArgs)
	realResult := result.(*evaluator.EvaluatorServiceListEvaluatorsResult)
	success, err := handler.(evaluator.EvaluatorService).ListEvaluators(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceListEvaluatorsArgs() interface{} {
	return evaluator.NewEvaluatorServiceListEvaluatorsArgs()
}

func newEvaluatorServiceListEvaluatorsResult() interface{} {
	return evaluator.NewEvaluatorServiceListEvaluatorsResult()
}

func batchGetEvaluatorsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceBatchGetEvaluatorsArgs)
	realResult := result.(*evaluator.EvaluatorServiceBatchGetEvaluatorsResult)
	success, err := handler.(evaluator.EvaluatorService).BatchGetEvaluators(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceBatchGetEvaluatorsArgs() interface{} {
	return evaluator.NewEvaluatorServiceBatchGetEvaluatorsArgs()
}

func newEvaluatorServiceBatchGetEvaluatorsResult() interface{} {
	return evaluator.NewEvaluatorServiceBatchGetEvaluatorsResult()
}

func getEvaluatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceGetEvaluatorArgs)
	realResult := result.(*evaluator.EvaluatorServiceGetEvaluatorResult)
	success, err := handler.(evaluator.EvaluatorService).GetEvaluator(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceGetEvaluatorArgs() interface{} {
	return evaluator.NewEvaluatorServiceGetEvaluatorArgs()
}

func newEvaluatorServiceGetEvaluatorResult() interface{} {
	return evaluator.NewEvaluatorServiceGetEvaluatorResult()
}

func createEvaluatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceCreateEvaluatorArgs)
	realResult := result.(*evaluator.EvaluatorServiceCreateEvaluatorResult)
	success, err := handler.(evaluator.EvaluatorService).CreateEvaluator(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceCreateEvaluatorArgs() interface{} {
	return evaluator.NewEvaluatorServiceCreateEvaluatorArgs()
}

func newEvaluatorServiceCreateEvaluatorResult() interface{} {
	return evaluator.NewEvaluatorServiceCreateEvaluatorResult()
}

func updateEvaluatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceUpdateEvaluatorArgs)
	realResult := result.(*evaluator.EvaluatorServiceUpdateEvaluatorResult)
	success, err := handler.(evaluator.EvaluatorService).UpdateEvaluator(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceUpdateEvaluatorArgs() interface{} {
	return evaluator.NewEvaluatorServiceUpdateEvaluatorArgs()
}

func newEvaluatorServiceUpdateEvaluatorResult() interface{} {
	return evaluator.NewEvaluatorServiceUpdateEvaluatorResult()
}

func updateEvaluatorDraftHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceUpdateEvaluatorDraftArgs)
	realResult := result.(*evaluator.EvaluatorServiceUpdateEvaluatorDraftResult)
	success, err := handler.(evaluator.EvaluatorService).UpdateEvaluatorDraft(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceUpdateEvaluatorDraftArgs() interface{} {
	return evaluator.NewEvaluatorServiceUpdateEvaluatorDraftArgs()
}

func newEvaluatorServiceUpdateEvaluatorDraftResult() interface{} {
	return evaluator.NewEvaluatorServiceUpdateEvaluatorDraftResult()
}

func deleteEvaluatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceDeleteEvaluatorArgs)
	realResult := result.(*evaluator.EvaluatorServiceDeleteEvaluatorResult)
	success, err := handler.(evaluator.EvaluatorService).DeleteEvaluator(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceDeleteEvaluatorArgs() interface{} {
	return evaluator.NewEvaluatorServiceDeleteEvaluatorArgs()
}

func newEvaluatorServiceDeleteEvaluatorResult() interface{} {
	return evaluator.NewEvaluatorServiceDeleteEvaluatorResult()
}

func checkEvaluatorNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceCheckEvaluatorNameArgs)
	realResult := result.(*evaluator.EvaluatorServiceCheckEvaluatorNameResult)
	success, err := handler.(evaluator.EvaluatorService).CheckEvaluatorName(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceCheckEvaluatorNameArgs() interface{} {
	return evaluator.NewEvaluatorServiceCheckEvaluatorNameArgs()
}

func newEvaluatorServiceCheckEvaluatorNameResult() interface{} {
	return evaluator.NewEvaluatorServiceCheckEvaluatorNameResult()
}

func listEvaluatorVersionsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceListEvaluatorVersionsArgs)
	realResult := result.(*evaluator.EvaluatorServiceListEvaluatorVersionsResult)
	success, err := handler.(evaluator.EvaluatorService).ListEvaluatorVersions(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceListEvaluatorVersionsArgs() interface{} {
	return evaluator.NewEvaluatorServiceListEvaluatorVersionsArgs()
}

func newEvaluatorServiceListEvaluatorVersionsResult() interface{} {
	return evaluator.NewEvaluatorServiceListEvaluatorVersionsResult()
}

func getEvaluatorVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceGetEvaluatorVersionArgs)
	realResult := result.(*evaluator.EvaluatorServiceGetEvaluatorVersionResult)
	success, err := handler.(evaluator.EvaluatorService).GetEvaluatorVersion(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceGetEvaluatorVersionArgs() interface{} {
	return evaluator.NewEvaluatorServiceGetEvaluatorVersionArgs()
}

func newEvaluatorServiceGetEvaluatorVersionResult() interface{} {
	return evaluator.NewEvaluatorServiceGetEvaluatorVersionResult()
}

func batchGetEvaluatorVersionsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceBatchGetEvaluatorVersionsArgs)
	realResult := result.(*evaluator.EvaluatorServiceBatchGetEvaluatorVersionsResult)
	success, err := handler.(evaluator.EvaluatorService).BatchGetEvaluatorVersions(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceBatchGetEvaluatorVersionsArgs() interface{} {
	return evaluator.NewEvaluatorServiceBatchGetEvaluatorVersionsArgs()
}

func newEvaluatorServiceBatchGetEvaluatorVersionsResult() interface{} {
	return evaluator.NewEvaluatorServiceBatchGetEvaluatorVersionsResult()
}

func submitEvaluatorVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceSubmitEvaluatorVersionArgs)
	realResult := result.(*evaluator.EvaluatorServiceSubmitEvaluatorVersionResult)
	success, err := handler.(evaluator.EvaluatorService).SubmitEvaluatorVersion(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceSubmitEvaluatorVersionArgs() interface{} {
	return evaluator.NewEvaluatorServiceSubmitEvaluatorVersionArgs()
}

func newEvaluatorServiceSubmitEvaluatorVersionResult() interface{} {
	return evaluator.NewEvaluatorServiceSubmitEvaluatorVersionResult()
}

func listTemplatesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceListTemplatesArgs)
	realResult := result.(*evaluator.EvaluatorServiceListTemplatesResult)
	success, err := handler.(evaluator.EvaluatorService).ListTemplates(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceListTemplatesArgs() interface{} {
	return evaluator.NewEvaluatorServiceListTemplatesArgs()
}

func newEvaluatorServiceListTemplatesResult() interface{} {
	return evaluator.NewEvaluatorServiceListTemplatesResult()
}

func getTemplateInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceGetTemplateInfoArgs)
	realResult := result.(*evaluator.EvaluatorServiceGetTemplateInfoResult)
	success, err := handler.(evaluator.EvaluatorService).GetTemplateInfo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceGetTemplateInfoArgs() interface{} {
	return evaluator.NewEvaluatorServiceGetTemplateInfoArgs()
}

func newEvaluatorServiceGetTemplateInfoResult() interface{} {
	return evaluator.NewEvaluatorServiceGetTemplateInfoResult()
}

func getDefaultPromptEvaluatorToolsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs)
	realResult := result.(*evaluator.EvaluatorServiceGetDefaultPromptEvaluatorToolsResult)
	success, err := handler.(evaluator.EvaluatorService).GetDefaultPromptEvaluatorTools(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceGetDefaultPromptEvaluatorToolsArgs() interface{} {
	return evaluator.NewEvaluatorServiceGetDefaultPromptEvaluatorToolsArgs()
}

func newEvaluatorServiceGetDefaultPromptEvaluatorToolsResult() interface{} {
	return evaluator.NewEvaluatorServiceGetDefaultPromptEvaluatorToolsResult()
}

func runEvaluatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceRunEvaluatorArgs)
	realResult := result.(*evaluator.EvaluatorServiceRunEvaluatorResult)
	success, err := handler.(evaluator.EvaluatorService).RunEvaluator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceRunEvaluatorArgs() interface{} {
	return evaluator.NewEvaluatorServiceRunEvaluatorArgs()
}

func newEvaluatorServiceRunEvaluatorResult() interface{} {
	return evaluator.NewEvaluatorServiceRunEvaluatorResult()
}

func debugEvaluatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceDebugEvaluatorArgs)
	realResult := result.(*evaluator.EvaluatorServiceDebugEvaluatorResult)
	success, err := handler.(evaluator.EvaluatorService).DebugEvaluator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceDebugEvaluatorArgs() interface{} {
	return evaluator.NewEvaluatorServiceDebugEvaluatorArgs()
}

func newEvaluatorServiceDebugEvaluatorResult() interface{} {
	return evaluator.NewEvaluatorServiceDebugEvaluatorResult()
}

func updateEvaluatorRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceUpdateEvaluatorRecordArgs)
	realResult := result.(*evaluator.EvaluatorServiceUpdateEvaluatorRecordResult)
	success, err := handler.(evaluator.EvaluatorService).UpdateEvaluatorRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceUpdateEvaluatorRecordArgs() interface{} {
	return evaluator.NewEvaluatorServiceUpdateEvaluatorRecordArgs()
}

func newEvaluatorServiceUpdateEvaluatorRecordResult() interface{} {
	return evaluator.NewEvaluatorServiceUpdateEvaluatorRecordResult()
}

func getEvaluatorRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceGetEvaluatorRecordArgs)
	realResult := result.(*evaluator.EvaluatorServiceGetEvaluatorRecordResult)
	success, err := handler.(evaluator.EvaluatorService).GetEvaluatorRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceGetEvaluatorRecordArgs() interface{} {
	return evaluator.NewEvaluatorServiceGetEvaluatorRecordArgs()
}

func newEvaluatorServiceGetEvaluatorRecordResult() interface{} {
	return evaluator.NewEvaluatorServiceGetEvaluatorRecordResult()
}

func batchGetEvaluatorRecordsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*evaluator.EvaluatorServiceBatchGetEvaluatorRecordsArgs)
	realResult := result.(*evaluator.EvaluatorServiceBatchGetEvaluatorRecordsResult)
	success, err := handler.(evaluator.EvaluatorService).BatchGetEvaluatorRecords(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluatorServiceBatchGetEvaluatorRecordsArgs() interface{} {
	return evaluator.NewEvaluatorServiceBatchGetEvaluatorRecordsArgs()
}

func newEvaluatorServiceBatchGetEvaluatorRecordsResult() interface{} {
	return evaluator.NewEvaluatorServiceBatchGetEvaluatorRecordsResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) ListEvaluators(ctx context.Context, request *evaluator.ListEvaluatorsRequest) (r *evaluator.ListEvaluatorsResponse, err error) {
	var _args evaluator.EvaluatorServiceListEvaluatorsArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceListEvaluatorsResult
	if err = p.c.Call(ctx, "ListEvaluators", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetEvaluators(ctx context.Context, request *evaluator.BatchGetEvaluatorsRequest) (r *evaluator.BatchGetEvaluatorsResponse, err error) {
	var _args evaluator.EvaluatorServiceBatchGetEvaluatorsArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceBatchGetEvaluatorsResult
	if err = p.c.Call(ctx, "BatchGetEvaluators", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEvaluator(ctx context.Context, request *evaluator.GetEvaluatorRequest) (r *evaluator.GetEvaluatorResponse, err error) {
	var _args evaluator.EvaluatorServiceGetEvaluatorArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceGetEvaluatorResult
	if err = p.c.Call(ctx, "GetEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateEvaluator(ctx context.Context, request *evaluator.CreateEvaluatorRequest) (r *evaluator.CreateEvaluatorResponse, err error) {
	var _args evaluator.EvaluatorServiceCreateEvaluatorArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceCreateEvaluatorResult
	if err = p.c.Call(ctx, "CreateEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateEvaluator(ctx context.Context, request *evaluator.UpdateEvaluatorRequest) (r *evaluator.UpdateEvaluatorResponse, err error) {
	var _args evaluator.EvaluatorServiceUpdateEvaluatorArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceUpdateEvaluatorResult
	if err = p.c.Call(ctx, "UpdateEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateEvaluatorDraft(ctx context.Context, request *evaluator.UpdateEvaluatorDraftRequest) (r *evaluator.UpdateEvaluatorDraftResponse, err error) {
	var _args evaluator.EvaluatorServiceUpdateEvaluatorDraftArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceUpdateEvaluatorDraftResult
	if err = p.c.Call(ctx, "UpdateEvaluatorDraft", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteEvaluator(ctx context.Context, request *evaluator.DeleteEvaluatorRequest) (r *evaluator.DeleteEvaluatorResponse, err error) {
	var _args evaluator.EvaluatorServiceDeleteEvaluatorArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceDeleteEvaluatorResult
	if err = p.c.Call(ctx, "DeleteEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckEvaluatorName(ctx context.Context, request *evaluator.CheckEvaluatorNameRequest) (r *evaluator.CheckEvaluatorNameResponse, err error) {
	var _args evaluator.EvaluatorServiceCheckEvaluatorNameArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceCheckEvaluatorNameResult
	if err = p.c.Call(ctx, "CheckEvaluatorName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListEvaluatorVersions(ctx context.Context, request *evaluator.ListEvaluatorVersionsRequest) (r *evaluator.ListEvaluatorVersionsResponse, err error) {
	var _args evaluator.EvaluatorServiceListEvaluatorVersionsArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceListEvaluatorVersionsResult
	if err = p.c.Call(ctx, "ListEvaluatorVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEvaluatorVersion(ctx context.Context, request *evaluator.GetEvaluatorVersionRequest) (r *evaluator.GetEvaluatorVersionResponse, err error) {
	var _args evaluator.EvaluatorServiceGetEvaluatorVersionArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceGetEvaluatorVersionResult
	if err = p.c.Call(ctx, "GetEvaluatorVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetEvaluatorVersions(ctx context.Context, request *evaluator.BatchGetEvaluatorVersionsRequest) (r *evaluator.BatchGetEvaluatorVersionsResponse, err error) {
	var _args evaluator.EvaluatorServiceBatchGetEvaluatorVersionsArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceBatchGetEvaluatorVersionsResult
	if err = p.c.Call(ctx, "BatchGetEvaluatorVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubmitEvaluatorVersion(ctx context.Context, request *evaluator.SubmitEvaluatorVersionRequest) (r *evaluator.SubmitEvaluatorVersionResponse, err error) {
	var _args evaluator.EvaluatorServiceSubmitEvaluatorVersionArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceSubmitEvaluatorVersionResult
	if err = p.c.Call(ctx, "SubmitEvaluatorVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListTemplates(ctx context.Context, request *evaluator.ListTemplatesRequest) (r *evaluator.ListTemplatesResponse, err error) {
	var _args evaluator.EvaluatorServiceListTemplatesArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceListTemplatesResult
	if err = p.c.Call(ctx, "ListTemplates", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTemplateInfo(ctx context.Context, request *evaluator.GetTemplateInfoRequest) (r *evaluator.GetTemplateInfoResponse, err error) {
	var _args evaluator.EvaluatorServiceGetTemplateInfoArgs
	_args.Request = request
	var _result evaluator.EvaluatorServiceGetTemplateInfoResult
	if err = p.c.Call(ctx, "GetTemplateInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDefaultPromptEvaluatorTools(ctx context.Context, req *evaluator.GetDefaultPromptEvaluatorToolsRequest) (r *evaluator.GetDefaultPromptEvaluatorToolsResponse, err error) {
	var _args evaluator.EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs
	_args.Req = req
	var _result evaluator.EvaluatorServiceGetDefaultPromptEvaluatorToolsResult
	if err = p.c.Call(ctx, "GetDefaultPromptEvaluatorTools", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RunEvaluator(ctx context.Context, req *evaluator.RunEvaluatorRequest) (r *evaluator.RunEvaluatorResponse, err error) {
	var _args evaluator.EvaluatorServiceRunEvaluatorArgs
	_args.Req = req
	var _result evaluator.EvaluatorServiceRunEvaluatorResult
	if err = p.c.Call(ctx, "RunEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DebugEvaluator(ctx context.Context, req *evaluator.DebugEvaluatorRequest) (r *evaluator.DebugEvaluatorResponse, err error) {
	var _args evaluator.EvaluatorServiceDebugEvaluatorArgs
	_args.Req = req
	var _result evaluator.EvaluatorServiceDebugEvaluatorResult
	if err = p.c.Call(ctx, "DebugEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateEvaluatorRecord(ctx context.Context, req *evaluator.UpdateEvaluatorRecordRequest) (r *evaluator.UpdateEvaluatorRecordResponse, err error) {
	var _args evaluator.EvaluatorServiceUpdateEvaluatorRecordArgs
	_args.Req = req
	var _result evaluator.EvaluatorServiceUpdateEvaluatorRecordResult
	if err = p.c.Call(ctx, "UpdateEvaluatorRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEvaluatorRecord(ctx context.Context, req *evaluator.GetEvaluatorRecordRequest) (r *evaluator.GetEvaluatorRecordResponse, err error) {
	var _args evaluator.EvaluatorServiceGetEvaluatorRecordArgs
	_args.Req = req
	var _result evaluator.EvaluatorServiceGetEvaluatorRecordResult
	if err = p.c.Call(ctx, "GetEvaluatorRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetEvaluatorRecords(ctx context.Context, req *evaluator.BatchGetEvaluatorRecordsRequest) (r *evaluator.BatchGetEvaluatorRecordsResponse, err error) {
	var _args evaluator.EvaluatorServiceBatchGetEvaluatorRecordsArgs
	_args.Req = req
	var _result evaluator.EvaluatorServiceBatchGetEvaluatorRecordsResult
	if err = p.c.Call(ctx, "BatchGetEvaluatorRecords", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
