// Code generated by Validator v0.2.6. DO NOT EDIT.

package eval_set

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *CreateEvaluationSetRequest) IsValid() error {
	if p.Name != nil {
		if len(*p.Name) < int(1) {
			return fmt.Errorf("field Name min_len rule failed, current value: %d", len(*p.Name))
		}
		if len(*p.Name) > int(255) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	if p.Description != nil {
		if len(*p.Description) > int(2048) {
			return fmt.Errorf("field Description max_len rule failed, current value: %d", len(*p.Description))
		}
	}
	if p.EvaluationSetSchema != nil {
		if err := p.EvaluationSetSchema.IsValid(); err != nil {
			return fmt.Errorf("field EvaluationSetSchema not valid, %w", err)
		}
	}
	if p.BizCategory != nil {
		if len(*p.BizCategory) > int(128) {
			return fmt.Errorf("field BizCategory max_len rule failed, current value: %d", len(*p.BizCategory))
		}
	}
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateEvaluationSetResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateEvaluationSetRequest) IsValid() error {
	if p.Name != nil {
		if len(*p.Name) < int(1) {
			return fmt.Errorf("field Name min_len rule failed, current value: %d", len(*p.Name))
		}
		if len(*p.Name) > int(255) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	if p.Description != nil {
		if len(*p.Description) > int(2048) {
			return fmt.Errorf("field Description max_len rule failed, current value: %d", len(*p.Description))
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateEvaluationSetResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteEvaluationSetRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteEvaluationSetResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluationSetRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluationSetResponse) IsValid() error {
	if p.EvaluationSet != nil {
		if err := p.EvaluationSet.IsValid(); err != nil {
			return fmt.Errorf("field EvaluationSet not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetsRequest) IsValid() error {
	if p.Name != nil {
		if len(*p.Name) > int(100) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	if p.PageNumber != nil {
		if *p.PageNumber <= int32(0) {
			return fmt.Errorf("field PageNumber gt rule failed, current value: %v", *p.PageNumber)
		}
	}
	if p.PageSize != nil {
		if *p.PageSize <= int32(0) {
			return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
		}
		if *p.PageSize > int32(200) {
			return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateEvaluationSetVersionRequest) IsValid() error {
	if p.Version != nil {
		if len(*p.Version) < int(1) {
			return fmt.Errorf("field Version min_len rule failed, current value: %d", len(*p.Version))
		}
		if len(*p.Version) > int(50) {
			return fmt.Errorf("field Version max_len rule failed, current value: %d", len(*p.Version))
		}
	}
	if p.Desc != nil {
		if len(*p.Desc) > int(400) {
			return fmt.Errorf("field Desc max_len rule failed, current value: %d", len(*p.Desc))
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateEvaluationSetVersionResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluationSetVersionRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluationSetVersionResponse) IsValid() error {
	if p.Version != nil {
		if err := p.Version.IsValid(); err != nil {
			return fmt.Errorf("field Version not valid, %w", err)
		}
	}
	if p.EvaluationSet != nil {
		if err := p.EvaluationSet.IsValid(); err != nil {
			return fmt.Errorf("field EvaluationSet not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetEvaluationSetVersionsRequest) IsValid() error {
	if len(p.VersionIds) > int(100) {
		return fmt.Errorf("field VersionIds MaxLen rule failed, current value: %v", p.VersionIds)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetEvaluationSetVersionsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *VersionedEvaluationSet) IsValid() error {
	if p.Version != nil {
		if err := p.Version.IsValid(); err != nil {
			return fmt.Errorf("field Version not valid, %w", err)
		}
	}
	if p.EvaluationSet != nil {
		if err := p.EvaluationSet.IsValid(); err != nil {
			return fmt.Errorf("field EvaluationSet not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetVersionsRequest) IsValid() error {
	if p.PageNumber != nil {
		if *p.PageNumber <= int32(0) {
			return fmt.Errorf("field PageNumber gt rule failed, current value: %v", *p.PageNumber)
		}
	}
	if p.PageSize != nil {
		if *p.PageSize <= int32(0) {
			return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
		}
		if *p.PageSize > int32(200) {
			return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetVersionsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateEvaluationSetSchemaRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateEvaluationSetSchemaResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchCreateEvaluationSetItemsRequest) IsValid() error {
	if len(p.Items) < int(1) {
		return fmt.Errorf("field Items MinLen rule failed, current value: %v", p.Items)
	}
	if len(p.Items) > int(100) {
		return fmt.Errorf("field Items MaxLen rule failed, current value: %v", p.Items)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchCreateEvaluationSetItemsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateEvaluationSetItemRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateEvaluationSetItemResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteEvaluationSetItemRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteEvaluationSetItemResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchDeleteEvaluationSetItemsRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchDeleteEvaluationSetItemsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetItemsRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetItemsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluationSetItemRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluationSetItemResponse) IsValid() error {
	if p.Item != nil {
		if err := p.Item.IsValid(); err != nil {
			return fmt.Errorf("field Item not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetEvaluationSetItemsRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetEvaluationSetItemsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ClearEvaluationSetDraftItemRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ClearEvaluationSetDraftItemResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
