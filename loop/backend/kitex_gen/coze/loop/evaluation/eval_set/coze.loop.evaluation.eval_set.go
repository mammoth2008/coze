// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package eval_set

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/domain/dataset"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/common"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/eval_set"
	"strings"
)

type CreateEvaluationSetRequest struct {
	WorkspaceID         int64                         `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	Name                *string                       `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description         *string                       `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	EvaluationSetSchema *eval_set.EvaluationSetSchema `thrift:"evaluation_set_schema,4,optional" frugal:"4,optional,eval_set.EvaluationSetSchema" form:"evaluation_set_schema" json:"evaluation_set_schema,omitempty" query:"evaluation_set_schema"`
	// 业务分类
	BizCategory *eval_set.BizCategory `thrift:"biz_category,5,optional" frugal:"5,optional,string" form:"biz_category" json:"biz_category,omitempty" query:"biz_category"`
	Session     *common.Session       `thrift:"session,200,optional" frugal:"200,optional,common.Session" form:"session" json:"session,omitempty" query:"session"`
	Base        *base.Base            `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluationSetRequest() *CreateEvaluationSetRequest {
	return &CreateEvaluationSetRequest{}
}

func (p *CreateEvaluationSetRequest) InitDefault() {
}

func (p *CreateEvaluationSetRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var CreateEvaluationSetRequest_Name_DEFAULT string

func (p *CreateEvaluationSetRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return CreateEvaluationSetRequest_Name_DEFAULT
	}
	return *p.Name
}

var CreateEvaluationSetRequest_Description_DEFAULT string

func (p *CreateEvaluationSetRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CreateEvaluationSetRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateEvaluationSetRequest_EvaluationSetSchema_DEFAULT *eval_set.EvaluationSetSchema

func (p *CreateEvaluationSetRequest) GetEvaluationSetSchema() (v *eval_set.EvaluationSetSchema) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetSchema() {
		return CreateEvaluationSetRequest_EvaluationSetSchema_DEFAULT
	}
	return p.EvaluationSetSchema
}

var CreateEvaluationSetRequest_BizCategory_DEFAULT eval_set.BizCategory

func (p *CreateEvaluationSetRequest) GetBizCategory() (v eval_set.BizCategory) {
	if p == nil {
		return
	}
	if !p.IsSetBizCategory() {
		return CreateEvaluationSetRequest_BizCategory_DEFAULT
	}
	return *p.BizCategory
}

var CreateEvaluationSetRequest_Session_DEFAULT *common.Session

func (p *CreateEvaluationSetRequest) GetSession() (v *common.Session) {
	if p == nil {
		return
	}
	if !p.IsSetSession() {
		return CreateEvaluationSetRequest_Session_DEFAULT
	}
	return p.Session
}

var CreateEvaluationSetRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluationSetRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluationSetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluationSetRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CreateEvaluationSetRequest) SetName(val *string) {
	p.Name = val
}
func (p *CreateEvaluationSetRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateEvaluationSetRequest) SetEvaluationSetSchema(val *eval_set.EvaluationSetSchema) {
	p.EvaluationSetSchema = val
}
func (p *CreateEvaluationSetRequest) SetBizCategory(val *eval_set.BizCategory) {
	p.BizCategory = val
}
func (p *CreateEvaluationSetRequest) SetSession(val *common.Session) {
	p.Session = val
}
func (p *CreateEvaluationSetRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluationSetRequest = map[int16]string{
	1:   "workspace_id",
	2:   "name",
	3:   "description",
	4:   "evaluation_set_schema",
	5:   "biz_category",
	200: "session",
	255: "Base",
}

func (p *CreateEvaluationSetRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *CreateEvaluationSetRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateEvaluationSetRequest) IsSetEvaluationSetSchema() bool {
	return p.EvaluationSetSchema != nil
}

func (p *CreateEvaluationSetRequest) IsSetBizCategory() bool {
	return p.BizCategory != nil
}

func (p *CreateEvaluationSetRequest) IsSetSession() bool {
	return p.Session != nil
}

func (p *CreateEvaluationSetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluationSetRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 200:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField200(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEvaluationSetRequest[fieldId]))
}

func (p *CreateEvaluationSetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateEvaluationSetRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *CreateEvaluationSetRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CreateEvaluationSetRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSetSchema()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSetSchema = _field
	return nil
}
func (p *CreateEvaluationSetRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *eval_set.BizCategory
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BizCategory = _field
	return nil
}
func (p *CreateEvaluationSetRequest) ReadField200(iprot thrift.TProtocol) error {
	_field := common.NewSession()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Session = _field
	return nil
}
func (p *CreateEvaluationSetRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluationSetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField200(oprot); err != nil {
			fieldId = 200
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetSchema() {
		if err = oprot.WriteFieldBegin("evaluation_set_schema", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSetSchema.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateEvaluationSetRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizCategory() {
		if err = oprot.WriteFieldBegin("biz_category", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BizCategory); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *CreateEvaluationSetRequest) writeField200(oprot thrift.TProtocol) (err error) {
	if p.IsSetSession() {
		if err = oprot.WriteFieldBegin("session", thrift.STRUCT, 200); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Session.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 end error: ", p), err)
}
func (p *CreateEvaluationSetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetRequest(%+v)", *p)

}

func (p *CreateEvaluationSetRequest) DeepEqual(ano *CreateEvaluationSetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetSchema) {
		return false
	}
	if !p.Field5DeepEqual(ano.BizCategory) {
		return false
	}
	if !p.Field200DeepEqual(ano.Session) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetRequest) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetRequest) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetRequest) Field4DeepEqual(src *eval_set.EvaluationSetSchema) bool {

	if !p.EvaluationSetSchema.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluationSetRequest) Field5DeepEqual(src *eval_set.BizCategory) bool {

	if p.BizCategory == src {
		return true
	} else if p.BizCategory == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BizCategory, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetRequest) Field200DeepEqual(src *common.Session) bool {

	if !p.Session.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluationSetRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetResponse struct {
	EvaluationSetID *int64         `thrift:"evaluation_set_id,1,optional" frugal:"1,optional,i64" json:"evaluation_set_id" form:"evaluation_set_id" query:"evaluation_set_id"`
	BaseResp        *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluationSetResponse() *CreateEvaluationSetResponse {
	return &CreateEvaluationSetResponse{}
}

func (p *CreateEvaluationSetResponse) InitDefault() {
}

var CreateEvaluationSetResponse_EvaluationSetID_DEFAULT int64

func (p *CreateEvaluationSetResponse) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return CreateEvaluationSetResponse_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var CreateEvaluationSetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluationSetResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluationSetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluationSetResponse) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *CreateEvaluationSetResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluationSetResponse = map[int16]string{
	1:   "evaluation_set_id",
	255: "BaseResp",
}

func (p *CreateEvaluationSetResponse) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *CreateEvaluationSetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluationSetResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *CreateEvaluationSetResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluationSetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetResponse(%+v)", *p)

}

func (p *CreateEvaluationSetResponse) DeepEqual(ano *CreateEvaluationSetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetResponse) Field1DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluationSetRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	Name            *string    `thrift:"name,3,optional" frugal:"3,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description     *string    `thrift:"description,4,optional" frugal:"4,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateEvaluationSetRequest() *UpdateEvaluationSetRequest {
	return &UpdateEvaluationSetRequest{}
}

func (p *UpdateEvaluationSetRequest) InitDefault() {
}

func (p *UpdateEvaluationSetRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *UpdateEvaluationSetRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var UpdateEvaluationSetRequest_Name_DEFAULT string

func (p *UpdateEvaluationSetRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return UpdateEvaluationSetRequest_Name_DEFAULT
	}
	return *p.Name
}

var UpdateEvaluationSetRequest_Description_DEFAULT string

func (p *UpdateEvaluationSetRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return UpdateEvaluationSetRequest_Description_DEFAULT
	}
	return *p.Description
}

var UpdateEvaluationSetRequest_Base_DEFAULT *base.Base

func (p *UpdateEvaluationSetRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateEvaluationSetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateEvaluationSetRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *UpdateEvaluationSetRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *UpdateEvaluationSetRequest) SetName(val *string) {
	p.Name = val
}
func (p *UpdateEvaluationSetRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *UpdateEvaluationSetRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateEvaluationSetRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "name",
	4:   "description",
	255: "Base",
}

func (p *UpdateEvaluationSetRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *UpdateEvaluationSetRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UpdateEvaluationSetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateEvaluationSetRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluationSetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateEvaluationSetRequest[fieldId]))
}

func (p *UpdateEvaluationSetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateEvaluationSetRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *UpdateEvaluationSetRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *UpdateEvaluationSetRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *UpdateEvaluationSetRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateEvaluationSetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluationSetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluationSetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateEvaluationSetRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateEvaluationSetRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *UpdateEvaluationSetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluationSetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluationSetRequest(%+v)", *p)

}

func (p *UpdateEvaluationSetRequest) DeepEqual(ano *UpdateEvaluationSetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateEvaluationSetRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetRequest) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluationSetResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateEvaluationSetResponse() *UpdateEvaluationSetResponse {
	return &UpdateEvaluationSetResponse{}
}

func (p *UpdateEvaluationSetResponse) InitDefault() {
}

var UpdateEvaluationSetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateEvaluationSetResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateEvaluationSetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateEvaluationSetResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateEvaluationSetResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdateEvaluationSetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateEvaluationSetResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluationSetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateEvaluationSetResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateEvaluationSetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluationSetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluationSetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluationSetResponse(%+v)", *p)

}

func (p *UpdateEvaluationSetResponse) DeepEqual(ano *UpdateEvaluationSetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateEvaluationSetResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteEvaluationSetRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" query:"workspace_id,required" `
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDeleteEvaluationSetRequest() *DeleteEvaluationSetRequest {
	return &DeleteEvaluationSetRequest{}
}

func (p *DeleteEvaluationSetRequest) InitDefault() {
}

func (p *DeleteEvaluationSetRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *DeleteEvaluationSetRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var DeleteEvaluationSetRequest_Base_DEFAULT *base.Base

func (p *DeleteEvaluationSetRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DeleteEvaluationSetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteEvaluationSetRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *DeleteEvaluationSetRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *DeleteEvaluationSetRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteEvaluationSetRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	255: "Base",
}

func (p *DeleteEvaluationSetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteEvaluationSetRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteEvaluationSetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteEvaluationSetRequest[fieldId]))
}

func (p *DeleteEvaluationSetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *DeleteEvaluationSetRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *DeleteEvaluationSetRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeleteEvaluationSetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluationSetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteEvaluationSetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeleteEvaluationSetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeleteEvaluationSetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteEvaluationSetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteEvaluationSetRequest(%+v)", *p)

}

func (p *DeleteEvaluationSetRequest) DeepEqual(ano *DeleteEvaluationSetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteEvaluationSetRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *DeleteEvaluationSetRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *DeleteEvaluationSetRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteEvaluationSetResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewDeleteEvaluationSetResponse() *DeleteEvaluationSetResponse {
	return &DeleteEvaluationSetResponse{}
}

func (p *DeleteEvaluationSetResponse) InitDefault() {
}

var DeleteEvaluationSetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DeleteEvaluationSetResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DeleteEvaluationSetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteEvaluationSetResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeleteEvaluationSetResponse = map[int16]string{
	255: "BaseResp",
}

func (p *DeleteEvaluationSetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteEvaluationSetResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteEvaluationSetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteEvaluationSetResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeleteEvaluationSetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluationSetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteEvaluationSetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteEvaluationSetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteEvaluationSetResponse(%+v)", *p)

}

func (p *DeleteEvaluationSetResponse) DeepEqual(ano *DeleteEvaluationSetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeleteEvaluationSetResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" query:"workspace_id,required" `
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	DeletedAt       *bool      `thrift:"deleted_at,3,optional" frugal:"3,optional,bool" json:"deleted_at,omitempty" query:"deleted_at"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluationSetRequest() *GetEvaluationSetRequest {
	return &GetEvaluationSetRequest{}
}

func (p *GetEvaluationSetRequest) InitDefault() {
}

func (p *GetEvaluationSetRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetEvaluationSetRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var GetEvaluationSetRequest_DeletedAt_DEFAULT bool

func (p *GetEvaluationSetRequest) GetDeletedAt() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetDeletedAt() {
		return GetEvaluationSetRequest_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}

var GetEvaluationSetRequest_Base_DEFAULT *base.Base

func (p *GetEvaluationSetRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluationSetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluationSetRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluationSetRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *GetEvaluationSetRequest) SetDeletedAt(val *bool) {
	p.DeletedAt = val
}
func (p *GetEvaluationSetRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluationSetRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "deleted_at",
	255: "Base",
}

func (p *GetEvaluationSetRequest) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *GetEvaluationSetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluationSetRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvaluationSetRequest[fieldId]))
}

func (p *GetEvaluationSetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluationSetRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *GetEvaluationSetRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DeletedAt = _field
	return nil
}
func (p *GetEvaluationSetRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluationSetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluationSetRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeletedAt() {
		if err = oprot.WriteFieldBegin("deleted_at", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.DeletedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluationSetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetRequest(%+v)", *p)

}

func (p *GetEvaluationSetRequest) DeepEqual(ano *GetEvaluationSetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluationSetRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetEvaluationSetRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *GetEvaluationSetRequest) Field3DeepEqual(src *bool) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}
func (p *GetEvaluationSetRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetResponse struct {
	EvaluationSet *eval_set.EvaluationSet `thrift:"evaluation_set,1,optional" frugal:"1,optional,eval_set.EvaluationSet" form:"evaluation_set" json:"evaluation_set,omitempty" query:"evaluation_set"`
	BaseResp      *base.BaseResp          `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluationSetResponse() *GetEvaluationSetResponse {
	return &GetEvaluationSetResponse{}
}

func (p *GetEvaluationSetResponse) InitDefault() {
}

var GetEvaluationSetResponse_EvaluationSet_DEFAULT *eval_set.EvaluationSet

func (p *GetEvaluationSetResponse) GetEvaluationSet() (v *eval_set.EvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSet() {
		return GetEvaluationSetResponse_EvaluationSet_DEFAULT
	}
	return p.EvaluationSet
}

var GetEvaluationSetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluationSetResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluationSetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluationSetResponse) SetEvaluationSet(val *eval_set.EvaluationSet) {
	p.EvaluationSet = val
}
func (p *GetEvaluationSetResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluationSetResponse = map[int16]string{
	1:   "evaluation_set",
	255: "BaseResp",
}

func (p *GetEvaluationSetResponse) IsSetEvaluationSet() bool {
	return p.EvaluationSet != nil
}

func (p *GetEvaluationSetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluationSetResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluationSetResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSet()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSet = _field
	return nil
}
func (p *GetEvaluationSetResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluationSetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSet() {
		if err = oprot.WriteFieldBegin("evaluation_set", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSet.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetResponse(%+v)", *p)

}

func (p *GetEvaluationSetResponse) DeepEqual(ano *GetEvaluationSetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluationSet) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluationSetResponse) Field1DeepEqual(src *eval_set.EvaluationSet) bool {

	if !p.EvaluationSet.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluationSetResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetsRequest struct {
	WorkspaceID int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	// 支持模糊搜索
	Name             *string  `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Creators         []string `thrift:"creators,3,optional" frugal:"3,optional,list<string>" form:"creators" json:"creators,omitempty" query:"creators"`
	EvaluationSetIds []int64  `thrift:"evaluation_set_ids,4,optional" frugal:"4,optional,list<i64>" json:"evaluation_set_ids" form:"evaluation_set_ids" query:"evaluation_set_ids"`
	PageNumber       *int32   `thrift:"page_number,100,optional" frugal:"100,optional,i32" form:"page_number" json:"page_number,omitempty" query:"page_number"`
	// 分页大小 (0, 200]，默认为 20
	PageSize  *int32  `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	PageToken *string `thrift:"page_token,102,optional" frugal:"102,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	// 排列顺序，默认按照 createdAt 顺序排列，目前仅支持按照 createdAt 和 UpdatedAt 排序
	OrderBys []*common.OrderBy `thrift:"order_bys,103,optional" frugal:"103,optional,list<common.OrderBy>" form:"order_bys" json:"order_bys,omitempty" query:"order_bys"`
	Base     *base.Base        `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluationSetsRequest() *ListEvaluationSetsRequest {
	return &ListEvaluationSetsRequest{}
}

func (p *ListEvaluationSetsRequest) InitDefault() {
}

func (p *ListEvaluationSetsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var ListEvaluationSetsRequest_Name_DEFAULT string

func (p *ListEvaluationSetsRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ListEvaluationSetsRequest_Name_DEFAULT
	}
	return *p.Name
}

var ListEvaluationSetsRequest_Creators_DEFAULT []string

func (p *ListEvaluationSetsRequest) GetCreators() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetCreators() {
		return ListEvaluationSetsRequest_Creators_DEFAULT
	}
	return p.Creators
}

var ListEvaluationSetsRequest_EvaluationSetIds_DEFAULT []int64

func (p *ListEvaluationSetsRequest) GetEvaluationSetIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetIds() {
		return ListEvaluationSetsRequest_EvaluationSetIds_DEFAULT
	}
	return p.EvaluationSetIds
}

var ListEvaluationSetsRequest_PageNumber_DEFAULT int32

func (p *ListEvaluationSetsRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListEvaluationSetsRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListEvaluationSetsRequest_PageSize_DEFAULT int32

func (p *ListEvaluationSetsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluationSetsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluationSetsRequest_PageToken_DEFAULT string

func (p *ListEvaluationSetsRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListEvaluationSetsRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListEvaluationSetsRequest_OrderBys_DEFAULT []*common.OrderBy

func (p *ListEvaluationSetsRequest) GetOrderBys() (v []*common.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListEvaluationSetsRequest_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListEvaluationSetsRequest_Base_DEFAULT *base.Base

func (p *ListEvaluationSetsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluationSetsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluationSetsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluationSetsRequest) SetName(val *string) {
	p.Name = val
}
func (p *ListEvaluationSetsRequest) SetCreators(val []string) {
	p.Creators = val
}
func (p *ListEvaluationSetsRequest) SetEvaluationSetIds(val []int64) {
	p.EvaluationSetIds = val
}
func (p *ListEvaluationSetsRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListEvaluationSetsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluationSetsRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListEvaluationSetsRequest) SetOrderBys(val []*common.OrderBy) {
	p.OrderBys = val
}
func (p *ListEvaluationSetsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluationSetsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "name",
	3:   "creators",
	4:   "evaluation_set_ids",
	100: "page_number",
	101: "page_size",
	102: "page_token",
	103: "order_bys",
	255: "Base",
}

func (p *ListEvaluationSetsRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *ListEvaluationSetsRequest) IsSetCreators() bool {
	return p.Creators != nil
}

func (p *ListEvaluationSetsRequest) IsSetEvaluationSetIds() bool {
	return p.EvaluationSetIds != nil
}

func (p *ListEvaluationSetsRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListEvaluationSetsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluationSetsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEvaluationSetsRequest) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListEvaluationSetsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluationSetsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListEvaluationSetsRequest[fieldId]))
}

func (p *ListEvaluationSetsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluationSetsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ListEvaluationSetsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Creators = _field
	return nil
}
func (p *ListEvaluationSetsRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluationSetIds = _field
	return nil
}
func (p *ListEvaluationSetsRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListEvaluationSetsRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluationSetsRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListEvaluationSetsRequest) ReadField103(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.OrderBy, 0, size)
	values := make([]common.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListEvaluationSetsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluationSetsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreators() {
		if err = oprot.WriteFieldBegin("creators", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Creators)); err != nil {
			return err
		}
		for _, v := range p.Creators {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetIds() {
		if err = oprot.WriteFieldBegin("evaluation_set_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvaluationSetIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluationSetIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ListEvaluationSetsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetsRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetsRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *ListEvaluationSetsRequest) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *ListEvaluationSetsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetsRequest(%+v)", *p)

}

func (p *ListEvaluationSetsRequest) DeepEqual(ano *ListEvaluationSetsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Creators) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetIds) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluationSetsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsRequest) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsRequest) Field3DeepEqual(src []string) bool {

	if len(p.Creators) != len(src) {
		return false
	}
	for i, v := range p.Creators {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsRequest) Field4DeepEqual(src []int64) bool {

	if len(p.EvaluationSetIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluationSetIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsRequest) Field100DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsRequest) Field102DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsRequest) Field103DeepEqual(src []*common.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetsResponse struct {
	EvaluationSets []*eval_set.EvaluationSet `thrift:"evaluation_sets,1,optional" frugal:"1,optional,list<eval_set.EvaluationSet>" form:"evaluation_sets" json:"evaluation_sets,omitempty" query:"evaluation_sets"`
	Total          *int64                    `thrift:"total,100,optional" frugal:"100,optional,i64" json:"total" form:"total" query:"total"`
	NextPageToken  *string                   `thrift:"next_page_token,101,optional" frugal:"101,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	BaseResp       *base.BaseResp            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluationSetsResponse() *ListEvaluationSetsResponse {
	return &ListEvaluationSetsResponse{}
}

func (p *ListEvaluationSetsResponse) InitDefault() {
}

var ListEvaluationSetsResponse_EvaluationSets_DEFAULT []*eval_set.EvaluationSet

func (p *ListEvaluationSetsResponse) GetEvaluationSets() (v []*eval_set.EvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSets() {
		return ListEvaluationSetsResponse_EvaluationSets_DEFAULT
	}
	return p.EvaluationSets
}

var ListEvaluationSetsResponse_Total_DEFAULT int64

func (p *ListEvaluationSetsResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluationSetsResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListEvaluationSetsResponse_NextPageToken_DEFAULT string

func (p *ListEvaluationSetsResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListEvaluationSetsResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListEvaluationSetsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluationSetsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluationSetsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluationSetsResponse) SetEvaluationSets(val []*eval_set.EvaluationSet) {
	p.EvaluationSets = val
}
func (p *ListEvaluationSetsResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *ListEvaluationSetsResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListEvaluationSetsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluationSetsResponse = map[int16]string{
	1:   "evaluation_sets",
	100: "total",
	101: "next_page_token",
	255: "BaseResp",
}

func (p *ListEvaluationSetsResponse) IsSetEvaluationSets() bool {
	return p.EvaluationSets != nil
}

func (p *ListEvaluationSetsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluationSetsResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListEvaluationSetsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluationSetsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSet, 0, size)
	values := make([]eval_set.EvaluationSet, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluationSets = _field
	return nil
}
func (p *ListEvaluationSetsResponse) ReadField100(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListEvaluationSetsResponse) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListEvaluationSetsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluationSetsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSets() {
		if err = oprot.WriteFieldBegin("evaluation_sets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluationSets)); err != nil {
			return err
		}
		for _, v := range p.EvaluationSets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetsResponse(%+v)", *p)

}

func (p *ListEvaluationSetsResponse) DeepEqual(ano *ListEvaluationSetsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluationSets) {
		return false
	}
	if !p.Field100DeepEqual(ano.Total) {
		return false
	}
	if !p.Field101DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluationSetsResponse) Field1DeepEqual(src []*eval_set.EvaluationSet) bool {

	if len(p.EvaluationSets) != len(src) {
		return false
	}
	for i, v := range p.EvaluationSets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsResponse) Field100DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsResponse) Field101DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetVersionRequest struct {
	WorkspaceID     int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64 `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	// 展示的版本号，SemVer2 三段式，需要大于上一版本
	Version *string    `thrift:"version,3,optional" frugal:"3,optional,string" form:"version" json:"version,omitempty" query:"version"`
	Desc    *string    `thrift:"desc,4,optional" frugal:"4,optional,string" form:"desc" json:"desc,omitempty" query:"desc"`
	Base    *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluationSetVersionRequest() *CreateEvaluationSetVersionRequest {
	return &CreateEvaluationSetVersionRequest{}
}

func (p *CreateEvaluationSetVersionRequest) InitDefault() {
}

func (p *CreateEvaluationSetVersionRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *CreateEvaluationSetVersionRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var CreateEvaluationSetVersionRequest_Version_DEFAULT string

func (p *CreateEvaluationSetVersionRequest) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return CreateEvaluationSetVersionRequest_Version_DEFAULT
	}
	return *p.Version
}

var CreateEvaluationSetVersionRequest_Desc_DEFAULT string

func (p *CreateEvaluationSetVersionRequest) GetDesc() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDesc() {
		return CreateEvaluationSetVersionRequest_Desc_DEFAULT
	}
	return *p.Desc
}

var CreateEvaluationSetVersionRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluationSetVersionRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluationSetVersionRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluationSetVersionRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CreateEvaluationSetVersionRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *CreateEvaluationSetVersionRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *CreateEvaluationSetVersionRequest) SetDesc(val *string) {
	p.Desc = val
}
func (p *CreateEvaluationSetVersionRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluationSetVersionRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "version",
	4:   "desc",
	255: "Base",
}

func (p *CreateEvaluationSetVersionRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *CreateEvaluationSetVersionRequest) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *CreateEvaluationSetVersionRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluationSetVersionRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetVersionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEvaluationSetVersionRequest[fieldId]))
}

func (p *CreateEvaluationSetVersionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateEvaluationSetVersionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *CreateEvaluationSetVersionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *CreateEvaluationSetVersionRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *CreateEvaluationSetVersionRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluationSetVersionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetVersionRequest(%+v)", *p)

}

func (p *CreateEvaluationSetVersionRequest) DeepEqual(ano *CreateEvaluationSetVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetVersionRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionRequest) Field3DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionRequest) Field4DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetVersionResponse struct {
	ID       *int64         `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluationSetVersionResponse() *CreateEvaluationSetVersionResponse {
	return &CreateEvaluationSetVersionResponse{}
}

func (p *CreateEvaluationSetVersionResponse) InitDefault() {
}

var CreateEvaluationSetVersionResponse_ID_DEFAULT int64

func (p *CreateEvaluationSetVersionResponse) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return CreateEvaluationSetVersionResponse_ID_DEFAULT
	}
	return *p.ID
}

var CreateEvaluationSetVersionResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluationSetVersionResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluationSetVersionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluationSetVersionResponse) SetID(val *int64) {
	p.ID = val
}
func (p *CreateEvaluationSetVersionResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluationSetVersionResponse = map[int16]string{
	1:   "id",
	255: "BaseResp",
}

func (p *CreateEvaluationSetVersionResponse) IsSetID() bool {
	return p.ID != nil
}

func (p *CreateEvaluationSetVersionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluationSetVersionResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *CreateEvaluationSetVersionResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluationSetVersionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetVersionResponse(%+v)", *p)

}

func (p *CreateEvaluationSetVersionResponse) DeepEqual(ano *CreateEvaluationSetVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetVersionResponse) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetVersionRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" query:"workspace_id,required" `
	VersionID       int64      `thrift:"version_id,2,required" frugal:"2,required,i64" json:"version_id" path:"version_id,required" `
	EvaluationSetID *int64     `thrift:"evaluation_set_id,3,optional" frugal:"3,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	DeletedAt       *bool      `thrift:"deleted_at,4,optional" frugal:"4,optional,bool" json:"deleted_at,omitempty" query:"deleted_at"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluationSetVersionRequest() *GetEvaluationSetVersionRequest {
	return &GetEvaluationSetVersionRequest{}
}

func (p *GetEvaluationSetVersionRequest) InitDefault() {
}

func (p *GetEvaluationSetVersionRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetEvaluationSetVersionRequest) GetVersionID() (v int64) {
	if p != nil {
		return p.VersionID
	}
	return
}

var GetEvaluationSetVersionRequest_EvaluationSetID_DEFAULT int64

func (p *GetEvaluationSetVersionRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return GetEvaluationSetVersionRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var GetEvaluationSetVersionRequest_DeletedAt_DEFAULT bool

func (p *GetEvaluationSetVersionRequest) GetDeletedAt() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetDeletedAt() {
		return GetEvaluationSetVersionRequest_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}

var GetEvaluationSetVersionRequest_Base_DEFAULT *base.Base

func (p *GetEvaluationSetVersionRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluationSetVersionRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluationSetVersionRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluationSetVersionRequest) SetVersionID(val int64) {
	p.VersionID = val
}
func (p *GetEvaluationSetVersionRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *GetEvaluationSetVersionRequest) SetDeletedAt(val *bool) {
	p.DeletedAt = val
}
func (p *GetEvaluationSetVersionRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluationSetVersionRequest = map[int16]string{
	1:   "workspace_id",
	2:   "version_id",
	3:   "evaluation_set_id",
	4:   "deleted_at",
	255: "Base",
}

func (p *GetEvaluationSetVersionRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *GetEvaluationSetVersionRequest) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *GetEvaluationSetVersionRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluationSetVersionRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetVersionID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVersionID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetVersionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvaluationSetVersionRequest[fieldId]))
}

func (p *GetEvaluationSetVersionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluationSetVersionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionID = _field
	return nil
}
func (p *GetEvaluationSetVersionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *GetEvaluationSetVersionRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DeletedAt = _field
	return nil
}
func (p *GetEvaluationSetVersionRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluationSetVersionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetVersionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetVersionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluationSetVersionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluationSetVersionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeletedAt() {
		if err = oprot.WriteFieldBegin("deleted_at", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.DeletedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *GetEvaluationSetVersionRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetVersionRequest(%+v)", *p)

}

func (p *GetEvaluationSetVersionRequest) DeepEqual(ano *GetEvaluationSetVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.VersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluationSetVersionRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetEvaluationSetVersionRequest) Field2DeepEqual(src int64) bool {

	if p.VersionID != src {
		return false
	}
	return true
}
func (p *GetEvaluationSetVersionRequest) Field3DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *GetEvaluationSetVersionRequest) Field4DeepEqual(src *bool) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}
func (p *GetEvaluationSetVersionRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetVersionResponse struct {
	Version       *eval_set.EvaluationSetVersion `thrift:"version,1,optional" frugal:"1,optional,eval_set.EvaluationSetVersion" form:"version" json:"version,omitempty" query:"version"`
	EvaluationSet *eval_set.EvaluationSet        `thrift:"evaluation_set,2,optional" frugal:"2,optional,eval_set.EvaluationSet" form:"evaluation_set" json:"evaluation_set,omitempty" query:"evaluation_set"`
	BaseResp      *base.BaseResp                 `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluationSetVersionResponse() *GetEvaluationSetVersionResponse {
	return &GetEvaluationSetVersionResponse{}
}

func (p *GetEvaluationSetVersionResponse) InitDefault() {
}

var GetEvaluationSetVersionResponse_Version_DEFAULT *eval_set.EvaluationSetVersion

func (p *GetEvaluationSetVersionResponse) GetVersion() (v *eval_set.EvaluationSetVersion) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return GetEvaluationSetVersionResponse_Version_DEFAULT
	}
	return p.Version
}

var GetEvaluationSetVersionResponse_EvaluationSet_DEFAULT *eval_set.EvaluationSet

func (p *GetEvaluationSetVersionResponse) GetEvaluationSet() (v *eval_set.EvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSet() {
		return GetEvaluationSetVersionResponse_EvaluationSet_DEFAULT
	}
	return p.EvaluationSet
}

var GetEvaluationSetVersionResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluationSetVersionResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluationSetVersionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluationSetVersionResponse) SetVersion(val *eval_set.EvaluationSetVersion) {
	p.Version = val
}
func (p *GetEvaluationSetVersionResponse) SetEvaluationSet(val *eval_set.EvaluationSet) {
	p.EvaluationSet = val
}
func (p *GetEvaluationSetVersionResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluationSetVersionResponse = map[int16]string{
	1:   "version",
	2:   "evaluation_set",
	255: "BaseResp",
}

func (p *GetEvaluationSetVersionResponse) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetEvaluationSetVersionResponse) IsSetEvaluationSet() bool {
	return p.EvaluationSet != nil
}

func (p *GetEvaluationSetVersionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluationSetVersionResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluationSetVersionResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSetVersion()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Version = _field
	return nil
}
func (p *GetEvaluationSetVersionResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSet()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSet = _field
	return nil
}
func (p *GetEvaluationSetVersionResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluationSetVersionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Version.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetVersionResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSet() {
		if err = oprot.WriteFieldBegin("evaluation_set", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSet.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluationSetVersionResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetVersionResponse(%+v)", *p)

}

func (p *GetEvaluationSetVersionResponse) DeepEqual(ano *GetEvaluationSetVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Version) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSet) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluationSetVersionResponse) Field1DeepEqual(src *eval_set.EvaluationSetVersion) bool {

	if !p.Version.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluationSetVersionResponse) Field2DeepEqual(src *eval_set.EvaluationSet) bool {

	if !p.EvaluationSet.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluationSetVersionResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvaluationSetVersionsRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	VersionIds  []int64    `thrift:"version_ids,2,required" frugal:"2,required,list<i64>" json:"version_ids" form:"version_ids,required" query:"version_ids,required"`
	DeletedAt   *bool      `thrift:"deleted_at,3,optional" frugal:"3,optional,bool" form:"deleted_at" json:"deleted_at,omitempty" query:"deleted_at"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetEvaluationSetVersionsRequest() *BatchGetEvaluationSetVersionsRequest {
	return &BatchGetEvaluationSetVersionsRequest{}
}

func (p *BatchGetEvaluationSetVersionsRequest) InitDefault() {
}

func (p *BatchGetEvaluationSetVersionsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchGetEvaluationSetVersionsRequest) GetVersionIds() (v []int64) {
	if p != nil {
		return p.VersionIds
	}
	return
}

var BatchGetEvaluationSetVersionsRequest_DeletedAt_DEFAULT bool

func (p *BatchGetEvaluationSetVersionsRequest) GetDeletedAt() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetDeletedAt() {
		return BatchGetEvaluationSetVersionsRequest_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}

var BatchGetEvaluationSetVersionsRequest_Base_DEFAULT *base.Base

func (p *BatchGetEvaluationSetVersionsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetEvaluationSetVersionsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetEvaluationSetVersionsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetEvaluationSetVersionsRequest) SetVersionIds(val []int64) {
	p.VersionIds = val
}
func (p *BatchGetEvaluationSetVersionsRequest) SetDeletedAt(val *bool) {
	p.DeletedAt = val
}
func (p *BatchGetEvaluationSetVersionsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetEvaluationSetVersionsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "version_ids",
	3:   "deleted_at",
	255: "Base",
}

func (p *BatchGetEvaluationSetVersionsRequest) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *BatchGetEvaluationSetVersionsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetEvaluationSetVersionsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetVersionIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVersionIds {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvaluationSetVersionsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetEvaluationSetVersionsRequest[fieldId]))
}

func (p *BatchGetEvaluationSetVersionsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetEvaluationSetVersionsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.VersionIds = _field
	return nil
}
func (p *BatchGetEvaluationSetVersionsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DeletedAt = _field
	return nil
}
func (p *BatchGetEvaluationSetVersionsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetEvaluationSetVersionsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluationSetVersionsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvaluationSetVersionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvaluationSetVersionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_ids", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.VersionIds)); err != nil {
		return err
	}
	for _, v := range p.VersionIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetEvaluationSetVersionsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeletedAt() {
		if err = oprot.WriteFieldBegin("deleted_at", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.DeletedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetEvaluationSetVersionsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvaluationSetVersionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvaluationSetVersionsRequest(%+v)", *p)

}

func (p *BatchGetEvaluationSetVersionsRequest) DeepEqual(ano *BatchGetEvaluationSetVersionsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.VersionIds) {
		return false
	}
	if !p.Field3DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetEvaluationSetVersionsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetEvaluationSetVersionsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.VersionIds) != len(src) {
		return false
	}
	for i, v := range p.VersionIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetEvaluationSetVersionsRequest) Field3DeepEqual(src *bool) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}
func (p *BatchGetEvaluationSetVersionsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvaluationSetVersionsResponse struct {
	VersionedEvaluationSets []*VersionedEvaluationSet `thrift:"versioned_evaluation_sets,1,optional" frugal:"1,optional,list<VersionedEvaluationSet>" form:"versioned_evaluation_sets" json:"versioned_evaluation_sets,omitempty" query:"versioned_evaluation_sets"`
	BaseResp                *base.BaseResp            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetEvaluationSetVersionsResponse() *BatchGetEvaluationSetVersionsResponse {
	return &BatchGetEvaluationSetVersionsResponse{}
}

func (p *BatchGetEvaluationSetVersionsResponse) InitDefault() {
}

var BatchGetEvaluationSetVersionsResponse_VersionedEvaluationSets_DEFAULT []*VersionedEvaluationSet

func (p *BatchGetEvaluationSetVersionsResponse) GetVersionedEvaluationSets() (v []*VersionedEvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetVersionedEvaluationSets() {
		return BatchGetEvaluationSetVersionsResponse_VersionedEvaluationSets_DEFAULT
	}
	return p.VersionedEvaluationSets
}

var BatchGetEvaluationSetVersionsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetEvaluationSetVersionsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetEvaluationSetVersionsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetEvaluationSetVersionsResponse) SetVersionedEvaluationSets(val []*VersionedEvaluationSet) {
	p.VersionedEvaluationSets = val
}
func (p *BatchGetEvaluationSetVersionsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetEvaluationSetVersionsResponse = map[int16]string{
	1:   "versioned_evaluation_sets",
	255: "BaseResp",
}

func (p *BatchGetEvaluationSetVersionsResponse) IsSetVersionedEvaluationSets() bool {
	return p.VersionedEvaluationSets != nil
}

func (p *BatchGetEvaluationSetVersionsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetEvaluationSetVersionsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvaluationSetVersionsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetEvaluationSetVersionsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*VersionedEvaluationSet, 0, size)
	values := make([]VersionedEvaluationSet, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.VersionedEvaluationSets = _field
	return nil
}
func (p *BatchGetEvaluationSetVersionsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetEvaluationSetVersionsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluationSetVersionsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvaluationSetVersionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionedEvaluationSets() {
		if err = oprot.WriteFieldBegin("versioned_evaluation_sets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VersionedEvaluationSets)); err != nil {
			return err
		}
		for _, v := range p.VersionedEvaluationSets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvaluationSetVersionsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvaluationSetVersionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvaluationSetVersionsResponse(%+v)", *p)

}

func (p *BatchGetEvaluationSetVersionsResponse) DeepEqual(ano *BatchGetEvaluationSetVersionsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VersionedEvaluationSets) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetEvaluationSetVersionsResponse) Field1DeepEqual(src []*VersionedEvaluationSet) bool {

	if len(p.VersionedEvaluationSets) != len(src) {
		return false
	}
	for i, v := range p.VersionedEvaluationSets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetEvaluationSetVersionsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type VersionedEvaluationSet struct {
	Version       *eval_set.EvaluationSetVersion `thrift:"version,1,optional" frugal:"1,optional,eval_set.EvaluationSetVersion" form:"version" json:"version,omitempty" query:"version"`
	EvaluationSet *eval_set.EvaluationSet        `thrift:"evaluation_set,2,optional" frugal:"2,optional,eval_set.EvaluationSet" form:"evaluation_set" json:"evaluation_set,omitempty" query:"evaluation_set"`
}

func NewVersionedEvaluationSet() *VersionedEvaluationSet {
	return &VersionedEvaluationSet{}
}

func (p *VersionedEvaluationSet) InitDefault() {
}

var VersionedEvaluationSet_Version_DEFAULT *eval_set.EvaluationSetVersion

func (p *VersionedEvaluationSet) GetVersion() (v *eval_set.EvaluationSetVersion) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return VersionedEvaluationSet_Version_DEFAULT
	}
	return p.Version
}

var VersionedEvaluationSet_EvaluationSet_DEFAULT *eval_set.EvaluationSet

func (p *VersionedEvaluationSet) GetEvaluationSet() (v *eval_set.EvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSet() {
		return VersionedEvaluationSet_EvaluationSet_DEFAULT
	}
	return p.EvaluationSet
}
func (p *VersionedEvaluationSet) SetVersion(val *eval_set.EvaluationSetVersion) {
	p.Version = val
}
func (p *VersionedEvaluationSet) SetEvaluationSet(val *eval_set.EvaluationSet) {
	p.EvaluationSet = val
}

var fieldIDToName_VersionedEvaluationSet = map[int16]string{
	1: "version",
	2: "evaluation_set",
}

func (p *VersionedEvaluationSet) IsSetVersion() bool {
	return p.Version != nil
}

func (p *VersionedEvaluationSet) IsSetEvaluationSet() bool {
	return p.EvaluationSet != nil
}

func (p *VersionedEvaluationSet) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VersionedEvaluationSet[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VersionedEvaluationSet) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSetVersion()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Version = _field
	return nil
}
func (p *VersionedEvaluationSet) ReadField2(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSet()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSet = _field
	return nil
}

func (p *VersionedEvaluationSet) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VersionedEvaluationSet"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VersionedEvaluationSet) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Version.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *VersionedEvaluationSet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSet() {
		if err = oprot.WriteFieldBegin("evaluation_set", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSet.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VersionedEvaluationSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VersionedEvaluationSet(%+v)", *p)

}

func (p *VersionedEvaluationSet) DeepEqual(ano *VersionedEvaluationSet) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Version) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSet) {
		return false
	}
	return true
}

func (p *VersionedEvaluationSet) Field1DeepEqual(src *eval_set.EvaluationSetVersion) bool {

	if !p.Version.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VersionedEvaluationSet) Field2DeepEqual(src *eval_set.EvaluationSet) bool {

	if !p.EvaluationSet.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetVersionsRequest struct {
	WorkspaceID     int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64 `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	// 根据版本号模糊匹配
	VersionLike *string `thrift:"version_like,3,optional" frugal:"3,optional,string" form:"version_like" json:"version_like,omitempty" query:"version_like"`
	PageNumber  *int32  `thrift:"page_number,100,optional" frugal:"100,optional,i32" form:"page_number" json:"page_number,omitempty" query:"page_number"`
	// 分页大小 (0, 200]，默认为 20
	PageSize  *int32     `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	PageToken *string    `thrift:"page_token,102,optional" frugal:"102,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	Base      *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluationSetVersionsRequest() *ListEvaluationSetVersionsRequest {
	return &ListEvaluationSetVersionsRequest{}
}

func (p *ListEvaluationSetVersionsRequest) InitDefault() {
}

func (p *ListEvaluationSetVersionsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *ListEvaluationSetVersionsRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var ListEvaluationSetVersionsRequest_VersionLike_DEFAULT string

func (p *ListEvaluationSetVersionsRequest) GetVersionLike() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersionLike() {
		return ListEvaluationSetVersionsRequest_VersionLike_DEFAULT
	}
	return *p.VersionLike
}

var ListEvaluationSetVersionsRequest_PageNumber_DEFAULT int32

func (p *ListEvaluationSetVersionsRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListEvaluationSetVersionsRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListEvaluationSetVersionsRequest_PageSize_DEFAULT int32

func (p *ListEvaluationSetVersionsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluationSetVersionsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluationSetVersionsRequest_PageToken_DEFAULT string

func (p *ListEvaluationSetVersionsRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListEvaluationSetVersionsRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListEvaluationSetVersionsRequest_Base_DEFAULT *base.Base

func (p *ListEvaluationSetVersionsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluationSetVersionsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluationSetVersionsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluationSetVersionsRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *ListEvaluationSetVersionsRequest) SetVersionLike(val *string) {
	p.VersionLike = val
}
func (p *ListEvaluationSetVersionsRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListEvaluationSetVersionsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluationSetVersionsRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListEvaluationSetVersionsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluationSetVersionsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "version_like",
	100: "page_number",
	101: "page_size",
	102: "page_token",
	255: "Base",
}

func (p *ListEvaluationSetVersionsRequest) IsSetVersionLike() bool {
	return p.VersionLike != nil
}

func (p *ListEvaluationSetVersionsRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListEvaluationSetVersionsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluationSetVersionsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEvaluationSetVersionsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluationSetVersionsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListEvaluationSetVersionsRequest[fieldId]))
}

func (p *ListEvaluationSetVersionsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluationSetVersionsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *ListEvaluationSetVersionsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionLike = _field
	return nil
}
func (p *ListEvaluationSetVersionsRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListEvaluationSetVersionsRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluationSetVersionsRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListEvaluationSetVersionsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluationSetVersionsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionLike() {
		if err = oprot.WriteFieldBegin("version_like", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.VersionLike); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetVersionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionsRequest(%+v)", *p)

}

func (p *ListEvaluationSetVersionsRequest) DeepEqual(ano *ListEvaluationSetVersionsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionLike) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsRequest) Field3DeepEqual(src *string) bool {

	if p.VersionLike == src {
		return true
	} else if p.VersionLike == nil || src == nil {
		return false
	}
	if strings.Compare(*p.VersionLike, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsRequest) Field100DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsRequest) Field102DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetVersionsResponse struct {
	Versions      []*eval_set.EvaluationSetVersion `thrift:"versions,1,optional" frugal:"1,optional,list<eval_set.EvaluationSetVersion>" form:"versions" json:"versions,omitempty" query:"versions"`
	Total         *int64                           `thrift:"total,100,optional" frugal:"100,optional,i64" json:"total" form:"total" query:"total"`
	NextPageToken *string                          `thrift:"next_page_token,101,optional" frugal:"101,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	BaseResp      *base.BaseResp                   `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluationSetVersionsResponse() *ListEvaluationSetVersionsResponse {
	return &ListEvaluationSetVersionsResponse{}
}

func (p *ListEvaluationSetVersionsResponse) InitDefault() {
}

var ListEvaluationSetVersionsResponse_Versions_DEFAULT []*eval_set.EvaluationSetVersion

func (p *ListEvaluationSetVersionsResponse) GetVersions() (v []*eval_set.EvaluationSetVersion) {
	if p == nil {
		return
	}
	if !p.IsSetVersions() {
		return ListEvaluationSetVersionsResponse_Versions_DEFAULT
	}
	return p.Versions
}

var ListEvaluationSetVersionsResponse_Total_DEFAULT int64

func (p *ListEvaluationSetVersionsResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluationSetVersionsResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListEvaluationSetVersionsResponse_NextPageToken_DEFAULT string

func (p *ListEvaluationSetVersionsResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListEvaluationSetVersionsResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListEvaluationSetVersionsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluationSetVersionsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluationSetVersionsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluationSetVersionsResponse) SetVersions(val []*eval_set.EvaluationSetVersion) {
	p.Versions = val
}
func (p *ListEvaluationSetVersionsResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *ListEvaluationSetVersionsResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListEvaluationSetVersionsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluationSetVersionsResponse = map[int16]string{
	1:   "versions",
	100: "total",
	101: "next_page_token",
	255: "BaseResp",
}

func (p *ListEvaluationSetVersionsResponse) IsSetVersions() bool {
	return p.Versions != nil
}

func (p *ListEvaluationSetVersionsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluationSetVersionsResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListEvaluationSetVersionsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluationSetVersionsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetVersion, 0, size)
	values := make([]eval_set.EvaluationSetVersion, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Versions = _field
	return nil
}
func (p *ListEvaluationSetVersionsResponse) ReadField100(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListEvaluationSetVersionsResponse) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListEvaluationSetVersionsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluationSetVersionsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersions() {
		if err = oprot.WriteFieldBegin("versions", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Versions)); err != nil {
			return err
		}
		for _, v := range p.Versions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetVersionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionsResponse(%+v)", *p)

}

func (p *ListEvaluationSetVersionsResponse) DeepEqual(ano *ListEvaluationSetVersionsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Versions) {
		return false
	}
	if !p.Field100DeepEqual(ano.Total) {
		return false
	}
	if !p.Field101DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionsResponse) Field1DeepEqual(src []*eval_set.EvaluationSetVersion) bool {

	if len(p.Versions) != len(src) {
		return false
	}
	for i, v := range p.Versions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetVersionsResponse) Field100DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsResponse) Field101DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluationSetSchemaRequest struct {
	WorkspaceID     int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64 `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	// fieldSchema.key 为空时：插入新的一列
	// fieldSchema.key 不为空时：更新对应的列
	// 硬删除（不支持恢复数据）的情况下，不需要写入入参的 field list；
	// 软删（支持恢复数据）的情况下，入参的 field list 中仍需保留该字段，并且需要把该字段的 deleted 置为 true
	Fields []*eval_set.FieldSchema `thrift:"fields,10,optional" frugal:"10,optional,list<eval_set.FieldSchema>" form:"fields" json:"fields,omitempty" query:"fields"`
	Base   *base.Base              `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateEvaluationSetSchemaRequest() *UpdateEvaluationSetSchemaRequest {
	return &UpdateEvaluationSetSchemaRequest{}
}

func (p *UpdateEvaluationSetSchemaRequest) InitDefault() {
}

func (p *UpdateEvaluationSetSchemaRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *UpdateEvaluationSetSchemaRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var UpdateEvaluationSetSchemaRequest_Fields_DEFAULT []*eval_set.FieldSchema

func (p *UpdateEvaluationSetSchemaRequest) GetFields() (v []*eval_set.FieldSchema) {
	if p == nil {
		return
	}
	if !p.IsSetFields() {
		return UpdateEvaluationSetSchemaRequest_Fields_DEFAULT
	}
	return p.Fields
}

var UpdateEvaluationSetSchemaRequest_Base_DEFAULT *base.Base

func (p *UpdateEvaluationSetSchemaRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateEvaluationSetSchemaRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateEvaluationSetSchemaRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *UpdateEvaluationSetSchemaRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *UpdateEvaluationSetSchemaRequest) SetFields(val []*eval_set.FieldSchema) {
	p.Fields = val
}
func (p *UpdateEvaluationSetSchemaRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateEvaluationSetSchemaRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	10:  "fields",
	255: "Base",
}

func (p *UpdateEvaluationSetSchemaRequest) IsSetFields() bool {
	return p.Fields != nil
}

func (p *UpdateEvaluationSetSchemaRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateEvaluationSetSchemaRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluationSetSchemaRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateEvaluationSetSchemaRequest[fieldId]))
}

func (p *UpdateEvaluationSetSchemaRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateEvaluationSetSchemaRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *UpdateEvaluationSetSchemaRequest) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.FieldSchema, 0, size)
	values := make([]eval_set.FieldSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Fields = _field
	return nil
}
func (p *UpdateEvaluationSetSchemaRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateEvaluationSetSchemaRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetSchemaRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluationSetSchemaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluationSetSchemaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateEvaluationSetSchemaRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err = oprot.WriteFieldBegin("fields", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
			return err
		}
		for _, v := range p.Fields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *UpdateEvaluationSetSchemaRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluationSetSchemaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluationSetSchemaRequest(%+v)", *p)

}

func (p *UpdateEvaluationSetSchemaRequest) DeepEqual(ano *UpdateEvaluationSetSchemaRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field10DeepEqual(ano.Fields) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateEvaluationSetSchemaRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetSchemaRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetSchemaRequest) Field10DeepEqual(src []*eval_set.FieldSchema) bool {

	if len(p.Fields) != len(src) {
		return false
	}
	for i, v := range p.Fields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateEvaluationSetSchemaRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluationSetSchemaResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateEvaluationSetSchemaResponse() *UpdateEvaluationSetSchemaResponse {
	return &UpdateEvaluationSetSchemaResponse{}
}

func (p *UpdateEvaluationSetSchemaResponse) InitDefault() {
}

var UpdateEvaluationSetSchemaResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateEvaluationSetSchemaResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateEvaluationSetSchemaResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateEvaluationSetSchemaResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateEvaluationSetSchemaResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdateEvaluationSetSchemaResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateEvaluationSetSchemaResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluationSetSchemaResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateEvaluationSetSchemaResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateEvaluationSetSchemaResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetSchemaResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluationSetSchemaResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluationSetSchemaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluationSetSchemaResponse(%+v)", *p)

}

func (p *UpdateEvaluationSetSchemaResponse) DeepEqual(ano *UpdateEvaluationSetSchemaResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateEvaluationSetSchemaResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchCreateEvaluationSetItemsRequest struct {
	WorkspaceID     int64                         `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64                         `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	Items           []*eval_set.EvaluationSetItem `thrift:"items,3,optional" frugal:"3,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty" query:"items"`
	// items 中存在无效数据时，默认不会写入任何数据；设置 skipInvalidItems=true 会跳过无效数据，写入有效数据                                                    // items 中存在无效数据时，默认不会写入任何数据；设置 skipInvalidItems=true 会跳过无效数据，写入有效数据
	SkipInvalidItems *bool `thrift:"skip_invalid_items,10,optional" frugal:"10,optional,bool" form:"skip_invalid_items" json:"skip_invalid_items,omitempty" query:"skip_invalid_items"`
	// 批量写入 items 如果超出数据集容量限制，默认不会写入任何数据；设置 partialAdd=true 会写入不超出容量限制的前 N 条
	AllowPartialAdd *bool      `thrift:"allow_partial_add,11,optional" frugal:"11,optional,bool" form:"allow_partial_add" json:"allow_partial_add,omitempty" query:"allow_partial_add"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchCreateEvaluationSetItemsRequest() *BatchCreateEvaluationSetItemsRequest {
	return &BatchCreateEvaluationSetItemsRequest{}
}

func (p *BatchCreateEvaluationSetItemsRequest) InitDefault() {
}

func (p *BatchCreateEvaluationSetItemsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchCreateEvaluationSetItemsRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var BatchCreateEvaluationSetItemsRequest_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *BatchCreateEvaluationSetItemsRequest) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return BatchCreateEvaluationSetItemsRequest_Items_DEFAULT
	}
	return p.Items
}

var BatchCreateEvaluationSetItemsRequest_SkipInvalidItems_DEFAULT bool

func (p *BatchCreateEvaluationSetItemsRequest) GetSkipInvalidItems() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetSkipInvalidItems() {
		return BatchCreateEvaluationSetItemsRequest_SkipInvalidItems_DEFAULT
	}
	return *p.SkipInvalidItems
}

var BatchCreateEvaluationSetItemsRequest_AllowPartialAdd_DEFAULT bool

func (p *BatchCreateEvaluationSetItemsRequest) GetAllowPartialAdd() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetAllowPartialAdd() {
		return BatchCreateEvaluationSetItemsRequest_AllowPartialAdd_DEFAULT
	}
	return *p.AllowPartialAdd
}

var BatchCreateEvaluationSetItemsRequest_Base_DEFAULT *base.Base

func (p *BatchCreateEvaluationSetItemsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchCreateEvaluationSetItemsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchCreateEvaluationSetItemsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchCreateEvaluationSetItemsRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *BatchCreateEvaluationSetItemsRequest) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *BatchCreateEvaluationSetItemsRequest) SetSkipInvalidItems(val *bool) {
	p.SkipInvalidItems = val
}
func (p *BatchCreateEvaluationSetItemsRequest) SetAllowPartialAdd(val *bool) {
	p.AllowPartialAdd = val
}
func (p *BatchCreateEvaluationSetItemsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchCreateEvaluationSetItemsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "items",
	10:  "skip_invalid_items",
	11:  "allow_partial_add",
	255: "Base",
}

func (p *BatchCreateEvaluationSetItemsRequest) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchCreateEvaluationSetItemsRequest) IsSetSkipInvalidItems() bool {
	return p.SkipInvalidItems != nil
}

func (p *BatchCreateEvaluationSetItemsRequest) IsSetAllowPartialAdd() bool {
	return p.AllowPartialAdd != nil
}

func (p *BatchCreateEvaluationSetItemsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchCreateEvaluationSetItemsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateEvaluationSetItemsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchCreateEvaluationSetItemsRequest[fieldId]))
}

func (p *BatchCreateEvaluationSetItemsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SkipInvalidItems = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AllowPartialAdd = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchCreateEvaluationSetItemsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipInvalidItems() {
		if err = oprot.WriteFieldBegin("skip_invalid_items", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SkipInvalidItems); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowPartialAdd() {
		if err = oprot.WriteFieldBegin("allow_partial_add", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.AllowPartialAdd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateEvaluationSetItemsRequest(%+v)", *p)

}

func (p *BatchCreateEvaluationSetItemsRequest) DeepEqual(ano *BatchCreateEvaluationSetItemsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Items) {
		return false
	}
	if !p.Field10DeepEqual(ano.SkipInvalidItems) {
		return false
	}
	if !p.Field11DeepEqual(ano.AllowPartialAdd) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchCreateEvaluationSetItemsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsRequest) Field3DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsRequest) Field10DeepEqual(src *bool) bool {

	if p.SkipInvalidItems == src {
		return true
	} else if p.SkipInvalidItems == nil || src == nil {
		return false
	}
	if *p.SkipInvalidItems != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsRequest) Field11DeepEqual(src *bool) bool {

	if p.AllowPartialAdd == src {
		return true
	} else if p.AllowPartialAdd == nil || src == nil {
		return false
	}
	if *p.AllowPartialAdd != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchCreateEvaluationSetItemsResponse struct {
	// key: item 在 items 中的索引
	AddedItems map[int64]int64           `thrift:"added_items,1,optional" frugal:"1,optional,map<i64:i64>" json:"added_items" form:"added_items" query:"added_items"`
	Errors     []*dataset.ItemErrorGroup `thrift:"errors,2,optional" frugal:"2,optional,list<dataset.ItemErrorGroup>" form:"errors" json:"errors,omitempty" query:"errors"`
	BaseResp   *base.BaseResp            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchCreateEvaluationSetItemsResponse() *BatchCreateEvaluationSetItemsResponse {
	return &BatchCreateEvaluationSetItemsResponse{}
}

func (p *BatchCreateEvaluationSetItemsResponse) InitDefault() {
}

var BatchCreateEvaluationSetItemsResponse_AddedItems_DEFAULT map[int64]int64

func (p *BatchCreateEvaluationSetItemsResponse) GetAddedItems() (v map[int64]int64) {
	if p == nil {
		return
	}
	if !p.IsSetAddedItems() {
		return BatchCreateEvaluationSetItemsResponse_AddedItems_DEFAULT
	}
	return p.AddedItems
}

var BatchCreateEvaluationSetItemsResponse_Errors_DEFAULT []*dataset.ItemErrorGroup

func (p *BatchCreateEvaluationSetItemsResponse) GetErrors() (v []*dataset.ItemErrorGroup) {
	if p == nil {
		return
	}
	if !p.IsSetErrors() {
		return BatchCreateEvaluationSetItemsResponse_Errors_DEFAULT
	}
	return p.Errors
}

var BatchCreateEvaluationSetItemsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchCreateEvaluationSetItemsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchCreateEvaluationSetItemsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchCreateEvaluationSetItemsResponse) SetAddedItems(val map[int64]int64) {
	p.AddedItems = val
}
func (p *BatchCreateEvaluationSetItemsResponse) SetErrors(val []*dataset.ItemErrorGroup) {
	p.Errors = val
}
func (p *BatchCreateEvaluationSetItemsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchCreateEvaluationSetItemsResponse = map[int16]string{
	1:   "added_items",
	2:   "errors",
	255: "BaseResp",
}

func (p *BatchCreateEvaluationSetItemsResponse) IsSetAddedItems() bool {
	return p.AddedItems != nil
}

func (p *BatchCreateEvaluationSetItemsResponse) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *BatchCreateEvaluationSetItemsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchCreateEvaluationSetItemsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateEvaluationSetItemsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.AddedItems = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.ItemErrorGroup, 0, size)
	values := make([]dataset.ItemErrorGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Errors = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchCreateEvaluationSetItemsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddedItems() {
		if err = oprot.WriteFieldBegin("added_items", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.AddedItems)); err != nil {
			return err
		}
		for k, v := range p.AddedItems {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err = oprot.WriteFieldBegin("errors", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return err
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateEvaluationSetItemsResponse(%+v)", *p)

}

func (p *BatchCreateEvaluationSetItemsResponse) DeepEqual(ano *BatchCreateEvaluationSetItemsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AddedItems) {
		return false
	}
	if !p.Field2DeepEqual(ano.Errors) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchCreateEvaluationSetItemsResponse) Field1DeepEqual(src map[int64]int64) bool {

	if len(p.AddedItems) != len(src) {
		return false
	}
	for k, v := range p.AddedItems {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsResponse) Field2DeepEqual(src []*dataset.ItemErrorGroup) bool {

	if len(p.Errors) != len(src) {
		return false
	}
	for i, v := range p.Errors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluationSetItemRequest struct {
	WorkspaceID     int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64 `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	ItemID          int64 `thrift:"item_id,3,required" frugal:"3,required,i64" json:"item_id" path:"item_id,required" `
	// 每轮对话
	Turns []*eval_set.Turn `thrift:"turns,5,optional" frugal:"5,optional,list<eval_set.Turn>" form:"turns" json:"turns,omitempty" query:"turns"`
	Base  *base.Base       `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateEvaluationSetItemRequest() *UpdateEvaluationSetItemRequest {
	return &UpdateEvaluationSetItemRequest{}
}

func (p *UpdateEvaluationSetItemRequest) InitDefault() {
}

func (p *UpdateEvaluationSetItemRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *UpdateEvaluationSetItemRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

func (p *UpdateEvaluationSetItemRequest) GetItemID() (v int64) {
	if p != nil {
		return p.ItemID
	}
	return
}

var UpdateEvaluationSetItemRequest_Turns_DEFAULT []*eval_set.Turn

func (p *UpdateEvaluationSetItemRequest) GetTurns() (v []*eval_set.Turn) {
	if p == nil {
		return
	}
	if !p.IsSetTurns() {
		return UpdateEvaluationSetItemRequest_Turns_DEFAULT
	}
	return p.Turns
}

var UpdateEvaluationSetItemRequest_Base_DEFAULT *base.Base

func (p *UpdateEvaluationSetItemRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateEvaluationSetItemRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateEvaluationSetItemRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *UpdateEvaluationSetItemRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *UpdateEvaluationSetItemRequest) SetItemID(val int64) {
	p.ItemID = val
}
func (p *UpdateEvaluationSetItemRequest) SetTurns(val []*eval_set.Turn) {
	p.Turns = val
}
func (p *UpdateEvaluationSetItemRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateEvaluationSetItemRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "item_id",
	5:   "turns",
	255: "Base",
}

func (p *UpdateEvaluationSetItemRequest) IsSetTurns() bool {
	return p.Turns != nil
}

func (p *UpdateEvaluationSetItemRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateEvaluationSetItemRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false
	var issetItemID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetItemID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetItemID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluationSetItemRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateEvaluationSetItemRequest[fieldId]))
}

func (p *UpdateEvaluationSetItemRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateEvaluationSetItemRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *UpdateEvaluationSetItemRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ItemID = _field
	return nil
}
func (p *UpdateEvaluationSetItemRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.Turn, 0, size)
	values := make([]eval_set.Turn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Turns = _field
	return nil
}
func (p *UpdateEvaluationSetItemRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateEvaluationSetItemRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetItemRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluationSetItemRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluationSetItemRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateEvaluationSetItemRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("item_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ItemID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateEvaluationSetItemRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurns() {
		if err = oprot.WriteFieldBegin("turns", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Turns)); err != nil {
			return err
		}
		for _, v := range p.Turns {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *UpdateEvaluationSetItemRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluationSetItemRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluationSetItemRequest(%+v)", *p)

}

func (p *UpdateEvaluationSetItemRequest) DeepEqual(ano *UpdateEvaluationSetItemRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field5DeepEqual(ano.Turns) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateEvaluationSetItemRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetItemRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetItemRequest) Field3DeepEqual(src int64) bool {

	if p.ItemID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetItemRequest) Field5DeepEqual(src []*eval_set.Turn) bool {

	if len(p.Turns) != len(src) {
		return false
	}
	for i, v := range p.Turns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateEvaluationSetItemRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluationSetItemResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateEvaluationSetItemResponse() *UpdateEvaluationSetItemResponse {
	return &UpdateEvaluationSetItemResponse{}
}

func (p *UpdateEvaluationSetItemResponse) InitDefault() {
}

var UpdateEvaluationSetItemResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateEvaluationSetItemResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateEvaluationSetItemResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateEvaluationSetItemResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateEvaluationSetItemResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdateEvaluationSetItemResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateEvaluationSetItemResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluationSetItemResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateEvaluationSetItemResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateEvaluationSetItemResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetItemResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluationSetItemResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluationSetItemResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluationSetItemResponse(%+v)", *p)

}

func (p *UpdateEvaluationSetItemResponse) DeepEqual(ano *UpdateEvaluationSetItemResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateEvaluationSetItemResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteEvaluationSetItemRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	ItemID          int64      `thrift:"item_id,3,required" frugal:"3,required,i64" json:"item_id" path:"item_id,required" `
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDeleteEvaluationSetItemRequest() *DeleteEvaluationSetItemRequest {
	return &DeleteEvaluationSetItemRequest{}
}

func (p *DeleteEvaluationSetItemRequest) InitDefault() {
}

func (p *DeleteEvaluationSetItemRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *DeleteEvaluationSetItemRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

func (p *DeleteEvaluationSetItemRequest) GetItemID() (v int64) {
	if p != nil {
		return p.ItemID
	}
	return
}

var DeleteEvaluationSetItemRequest_Base_DEFAULT *base.Base

func (p *DeleteEvaluationSetItemRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DeleteEvaluationSetItemRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteEvaluationSetItemRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *DeleteEvaluationSetItemRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *DeleteEvaluationSetItemRequest) SetItemID(val int64) {
	p.ItemID = val
}
func (p *DeleteEvaluationSetItemRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteEvaluationSetItemRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "item_id",
	255: "Base",
}

func (p *DeleteEvaluationSetItemRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteEvaluationSetItemRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false
	var issetItemID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetItemID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetItemID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteEvaluationSetItemRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteEvaluationSetItemRequest[fieldId]))
}

func (p *DeleteEvaluationSetItemRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *DeleteEvaluationSetItemRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *DeleteEvaluationSetItemRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ItemID = _field
	return nil
}
func (p *DeleteEvaluationSetItemRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeleteEvaluationSetItemRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluationSetItemRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteEvaluationSetItemRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeleteEvaluationSetItemRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeleteEvaluationSetItemRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("item_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ItemID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DeleteEvaluationSetItemRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteEvaluationSetItemRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteEvaluationSetItemRequest(%+v)", *p)

}

func (p *DeleteEvaluationSetItemRequest) DeepEqual(ano *DeleteEvaluationSetItemRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteEvaluationSetItemRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *DeleteEvaluationSetItemRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *DeleteEvaluationSetItemRequest) Field3DeepEqual(src int64) bool {

	if p.ItemID != src {
		return false
	}
	return true
}
func (p *DeleteEvaluationSetItemRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteEvaluationSetItemResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewDeleteEvaluationSetItemResponse() *DeleteEvaluationSetItemResponse {
	return &DeleteEvaluationSetItemResponse{}
}

func (p *DeleteEvaluationSetItemResponse) InitDefault() {
}

var DeleteEvaluationSetItemResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DeleteEvaluationSetItemResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DeleteEvaluationSetItemResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteEvaluationSetItemResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeleteEvaluationSetItemResponse = map[int16]string{
	255: "BaseResp",
}

func (p *DeleteEvaluationSetItemResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteEvaluationSetItemResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteEvaluationSetItemResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteEvaluationSetItemResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeleteEvaluationSetItemResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluationSetItemResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteEvaluationSetItemResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteEvaluationSetItemResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteEvaluationSetItemResponse(%+v)", *p)

}

func (p *DeleteEvaluationSetItemResponse) DeepEqual(ano *DeleteEvaluationSetItemResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeleteEvaluationSetItemResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDeleteEvaluationSetItemsRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	ItemIds         []int64    `thrift:"item_ids,3,optional" frugal:"3,optional,list<i64>" json:"item_ids" form:"item_ids" query:"item_ids"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchDeleteEvaluationSetItemsRequest() *BatchDeleteEvaluationSetItemsRequest {
	return &BatchDeleteEvaluationSetItemsRequest{}
}

func (p *BatchDeleteEvaluationSetItemsRequest) InitDefault() {
}

func (p *BatchDeleteEvaluationSetItemsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchDeleteEvaluationSetItemsRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var BatchDeleteEvaluationSetItemsRequest_ItemIds_DEFAULT []int64

func (p *BatchDeleteEvaluationSetItemsRequest) GetItemIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemIds() {
		return BatchDeleteEvaluationSetItemsRequest_ItemIds_DEFAULT
	}
	return p.ItemIds
}

var BatchDeleteEvaluationSetItemsRequest_Base_DEFAULT *base.Base

func (p *BatchDeleteEvaluationSetItemsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchDeleteEvaluationSetItemsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchDeleteEvaluationSetItemsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchDeleteEvaluationSetItemsRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *BatchDeleteEvaluationSetItemsRequest) SetItemIds(val []int64) {
	p.ItemIds = val
}
func (p *BatchDeleteEvaluationSetItemsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchDeleteEvaluationSetItemsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "item_ids",
	255: "Base",
}

func (p *BatchDeleteEvaluationSetItemsRequest) IsSetItemIds() bool {
	return p.ItemIds != nil
}

func (p *BatchDeleteEvaluationSetItemsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchDeleteEvaluationSetItemsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteEvaluationSetItemsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchDeleteEvaluationSetItemsRequest[fieldId]))
}

func (p *BatchDeleteEvaluationSetItemsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemIds = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchDeleteEvaluationSetItemsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemIds() {
		if err = oprot.WriteFieldBegin("item_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ItemIds)); err != nil {
			return err
		}
		for _, v := range p.ItemIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteEvaluationSetItemsRequest(%+v)", *p)

}

func (p *BatchDeleteEvaluationSetItemsRequest) DeepEqual(ano *BatchDeleteEvaluationSetItemsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchDeleteEvaluationSetItemsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsRequest) Field3DeepEqual(src []int64) bool {

	if len(p.ItemIds) != len(src) {
		return false
	}
	for i, v := range p.ItemIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDeleteEvaluationSetItemsResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchDeleteEvaluationSetItemsResponse() *BatchDeleteEvaluationSetItemsResponse {
	return &BatchDeleteEvaluationSetItemsResponse{}
}

func (p *BatchDeleteEvaluationSetItemsResponse) InitDefault() {
}

var BatchDeleteEvaluationSetItemsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchDeleteEvaluationSetItemsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchDeleteEvaluationSetItemsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchDeleteEvaluationSetItemsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchDeleteEvaluationSetItemsResponse = map[int16]string{
	255: "BaseResp",
}

func (p *BatchDeleteEvaluationSetItemsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchDeleteEvaluationSetItemsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteEvaluationSetItemsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchDeleteEvaluationSetItemsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteEvaluationSetItemsResponse(%+v)", *p)

}

func (p *BatchDeleteEvaluationSetItemsResponse) DeepEqual(ano *BatchDeleteEvaluationSetItemsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchDeleteEvaluationSetItemsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetItemsRequest struct {
	WorkspaceID     int64  `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64  `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	VersionID       *int64 `thrift:"version_id,3,optional" frugal:"3,optional,i64" json:"version_id" form:"version_id" query:"version_id"`
	PageNumber      *int32 `thrift:"page_number,100,optional" frugal:"100,optional,i32" form:"page_number" json:"page_number,omitempty" query:"page_number"`
	// 分页大小 (0, 200]，默认为 20
	PageSize    *int32            `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	PageToken   *string           `thrift:"page_token,102,optional" frugal:"102,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	OrderBys    []*common.OrderBy `thrift:"order_bys,103,optional" frugal:"103,optional,list<common.OrderBy>" form:"order_bys" json:"order_bys,omitempty" query:"order_bys"`
	ItemIDNotIn []int64           `thrift:"item_id_not_in,200,optional" frugal:"200,optional,list<i64>" json:"item_id_not_in" form:"item_id_not_in" query:"item_id_not_in"`
	Base        *base.Base        `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluationSetItemsRequest() *ListEvaluationSetItemsRequest {
	return &ListEvaluationSetItemsRequest{}
}

func (p *ListEvaluationSetItemsRequest) InitDefault() {
}

func (p *ListEvaluationSetItemsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *ListEvaluationSetItemsRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var ListEvaluationSetItemsRequest_VersionID_DEFAULT int64

func (p *ListEvaluationSetItemsRequest) GetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetVersionID() {
		return ListEvaluationSetItemsRequest_VersionID_DEFAULT
	}
	return *p.VersionID
}

var ListEvaluationSetItemsRequest_PageNumber_DEFAULT int32

func (p *ListEvaluationSetItemsRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListEvaluationSetItemsRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListEvaluationSetItemsRequest_PageSize_DEFAULT int32

func (p *ListEvaluationSetItemsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluationSetItemsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluationSetItemsRequest_PageToken_DEFAULT string

func (p *ListEvaluationSetItemsRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListEvaluationSetItemsRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListEvaluationSetItemsRequest_OrderBys_DEFAULT []*common.OrderBy

func (p *ListEvaluationSetItemsRequest) GetOrderBys() (v []*common.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListEvaluationSetItemsRequest_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListEvaluationSetItemsRequest_ItemIDNotIn_DEFAULT []int64

func (p *ListEvaluationSetItemsRequest) GetItemIDNotIn() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemIDNotIn() {
		return ListEvaluationSetItemsRequest_ItemIDNotIn_DEFAULT
	}
	return p.ItemIDNotIn
}

var ListEvaluationSetItemsRequest_Base_DEFAULT *base.Base

func (p *ListEvaluationSetItemsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluationSetItemsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluationSetItemsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluationSetItemsRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *ListEvaluationSetItemsRequest) SetVersionID(val *int64) {
	p.VersionID = val
}
func (p *ListEvaluationSetItemsRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListEvaluationSetItemsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluationSetItemsRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListEvaluationSetItemsRequest) SetOrderBys(val []*common.OrderBy) {
	p.OrderBys = val
}
func (p *ListEvaluationSetItemsRequest) SetItemIDNotIn(val []int64) {
	p.ItemIDNotIn = val
}
func (p *ListEvaluationSetItemsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluationSetItemsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "version_id",
	100: "page_number",
	101: "page_size",
	102: "page_token",
	103: "order_bys",
	200: "item_id_not_in",
	255: "Base",
}

func (p *ListEvaluationSetItemsRequest) IsSetVersionID() bool {
	return p.VersionID != nil
}

func (p *ListEvaluationSetItemsRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListEvaluationSetItemsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluationSetItemsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEvaluationSetItemsRequest) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListEvaluationSetItemsRequest) IsSetItemIDNotIn() bool {
	return p.ItemIDNotIn != nil
}

func (p *ListEvaluationSetItemsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluationSetItemsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 200:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField200(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetItemsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListEvaluationSetItemsRequest[fieldId]))
}

func (p *ListEvaluationSetItemsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluationSetItemsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *ListEvaluationSetItemsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionID = _field
	return nil
}
func (p *ListEvaluationSetItemsRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListEvaluationSetItemsRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluationSetItemsRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListEvaluationSetItemsRequest) ReadField103(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.OrderBy, 0, size)
	values := make([]common.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListEvaluationSetItemsRequest) ReadField200(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemIDNotIn = _field
	return nil
}
func (p *ListEvaluationSetItemsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluationSetItemsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetItemsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField200(oprot); err != nil {
			fieldId = 200
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetItemsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetItemsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetItemsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionID() {
		if err = oprot.WriteFieldBegin("version_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetItemsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetItemsRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetItemsRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *ListEvaluationSetItemsRequest) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *ListEvaluationSetItemsRequest) writeField200(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemIDNotIn() {
		if err = oprot.WriteFieldBegin("item_id_not_in", thrift.LIST, 200); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ItemIDNotIn)); err != nil {
			return err
		}
		for _, v := range p.ItemIDNotIn {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 end error: ", p), err)
}
func (p *ListEvaluationSetItemsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetItemsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetItemsRequest(%+v)", *p)

}

func (p *ListEvaluationSetItemsRequest) DeepEqual(ano *ListEvaluationSetItemsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionID) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field200DeepEqual(ano.ItemIDNotIn) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluationSetItemsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListEvaluationSetItemsRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *ListEvaluationSetItemsRequest) Field3DeepEqual(src *int64) bool {

	if p.VersionID == src {
		return true
	} else if p.VersionID == nil || src == nil {
		return false
	}
	if *p.VersionID != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetItemsRequest) Field100DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetItemsRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetItemsRequest) Field102DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetItemsRequest) Field103DeepEqual(src []*common.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetItemsRequest) Field200DeepEqual(src []int64) bool {

	if len(p.ItemIDNotIn) != len(src) {
		return false
	}
	for i, v := range p.ItemIDNotIn {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetItemsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetItemsResponse struct {
	Items         []*eval_set.EvaluationSetItem `thrift:"items,1,optional" frugal:"1,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty" query:"items"`
	Total         *int64                        `thrift:"total,100,optional" frugal:"100,optional,i64" json:"total" form:"total" query:"total"`
	NextPageToken *string                       `thrift:"next_page_token,101,optional" frugal:"101,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	BaseResp      *base.BaseResp                `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluationSetItemsResponse() *ListEvaluationSetItemsResponse {
	return &ListEvaluationSetItemsResponse{}
}

func (p *ListEvaluationSetItemsResponse) InitDefault() {
}

var ListEvaluationSetItemsResponse_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *ListEvaluationSetItemsResponse) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return ListEvaluationSetItemsResponse_Items_DEFAULT
	}
	return p.Items
}

var ListEvaluationSetItemsResponse_Total_DEFAULT int64

func (p *ListEvaluationSetItemsResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluationSetItemsResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListEvaluationSetItemsResponse_NextPageToken_DEFAULT string

func (p *ListEvaluationSetItemsResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListEvaluationSetItemsResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListEvaluationSetItemsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluationSetItemsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluationSetItemsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluationSetItemsResponse) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *ListEvaluationSetItemsResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *ListEvaluationSetItemsResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListEvaluationSetItemsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluationSetItemsResponse = map[int16]string{
	1:   "items",
	100: "total",
	101: "next_page_token",
	255: "BaseResp",
}

func (p *ListEvaluationSetItemsResponse) IsSetItems() bool {
	return p.Items != nil
}

func (p *ListEvaluationSetItemsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluationSetItemsResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListEvaluationSetItemsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluationSetItemsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetItemsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetItemsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *ListEvaluationSetItemsResponse) ReadField100(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListEvaluationSetItemsResponse) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListEvaluationSetItemsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluationSetItemsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetItemsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetItemsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetItemsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetItemsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetItemsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetItemsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetItemsResponse(%+v)", *p)

}

func (p *ListEvaluationSetItemsResponse) DeepEqual(ano *ListEvaluationSetItemsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field100DeepEqual(ano.Total) {
		return false
	}
	if !p.Field101DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluationSetItemsResponse) Field1DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetItemsResponse) Field100DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetItemsResponse) Field101DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetItemsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetItemRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	ItemID          int64      `thrift:"item_id,3,required" frugal:"3,required,i64" json:"item_id" path:"item_id,required" `
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluationSetItemRequest() *GetEvaluationSetItemRequest {
	return &GetEvaluationSetItemRequest{}
}

func (p *GetEvaluationSetItemRequest) InitDefault() {
}

func (p *GetEvaluationSetItemRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetEvaluationSetItemRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

func (p *GetEvaluationSetItemRequest) GetItemID() (v int64) {
	if p != nil {
		return p.ItemID
	}
	return
}

var GetEvaluationSetItemRequest_Base_DEFAULT *base.Base

func (p *GetEvaluationSetItemRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluationSetItemRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluationSetItemRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluationSetItemRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *GetEvaluationSetItemRequest) SetItemID(val int64) {
	p.ItemID = val
}
func (p *GetEvaluationSetItemRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluationSetItemRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "item_id",
	255: "Base",
}

func (p *GetEvaluationSetItemRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluationSetItemRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false
	var issetItemID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetItemID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetItemID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetItemRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvaluationSetItemRequest[fieldId]))
}

func (p *GetEvaluationSetItemRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluationSetItemRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *GetEvaluationSetItemRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ItemID = _field
	return nil
}
func (p *GetEvaluationSetItemRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluationSetItemRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetItemRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetItemRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetItemRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluationSetItemRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("item_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ItemID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluationSetItemRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetItemRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetItemRequest(%+v)", *p)

}

func (p *GetEvaluationSetItemRequest) DeepEqual(ano *GetEvaluationSetItemRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluationSetItemRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetEvaluationSetItemRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *GetEvaluationSetItemRequest) Field3DeepEqual(src int64) bool {

	if p.ItemID != src {
		return false
	}
	return true
}
func (p *GetEvaluationSetItemRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetItemResponse struct {
	Item     *eval_set.EvaluationSetItem `thrift:"item,1,optional" frugal:"1,optional,eval_set.EvaluationSetItem" form:"item" json:"item,omitempty" query:"item"`
	BaseResp *base.BaseResp              `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluationSetItemResponse() *GetEvaluationSetItemResponse {
	return &GetEvaluationSetItemResponse{}
}

func (p *GetEvaluationSetItemResponse) InitDefault() {
}

var GetEvaluationSetItemResponse_Item_DEFAULT *eval_set.EvaluationSetItem

func (p *GetEvaluationSetItemResponse) GetItem() (v *eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItem() {
		return GetEvaluationSetItemResponse_Item_DEFAULT
	}
	return p.Item
}

var GetEvaluationSetItemResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluationSetItemResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluationSetItemResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluationSetItemResponse) SetItem(val *eval_set.EvaluationSetItem) {
	p.Item = val
}
func (p *GetEvaluationSetItemResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluationSetItemResponse = map[int16]string{
	1:   "item",
	255: "BaseResp",
}

func (p *GetEvaluationSetItemResponse) IsSetItem() bool {
	return p.Item != nil
}

func (p *GetEvaluationSetItemResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluationSetItemResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetItemResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluationSetItemResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSetItem()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Item = _field
	return nil
}
func (p *GetEvaluationSetItemResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluationSetItemResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetItemResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetItemResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItem() {
		if err = oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Item.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetItemResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetItemResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetItemResponse(%+v)", *p)

}

func (p *GetEvaluationSetItemResponse) DeepEqual(ano *GetEvaluationSetItemResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Item) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluationSetItemResponse) Field1DeepEqual(src *eval_set.EvaluationSetItem) bool {

	if !p.Item.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluationSetItemResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvaluationSetItemsRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	VersionID       *int64     `thrift:"version_id,3,optional" frugal:"3,optional,i64" json:"version_id" form:"version_id" query:"version_id"`
	ItemIds         []int64    `thrift:"item_ids,4,optional" frugal:"4,optional,list<i64>" json:"item_ids" form:"item_ids" query:"item_ids"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetEvaluationSetItemsRequest() *BatchGetEvaluationSetItemsRequest {
	return &BatchGetEvaluationSetItemsRequest{}
}

func (p *BatchGetEvaluationSetItemsRequest) InitDefault() {
}

func (p *BatchGetEvaluationSetItemsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchGetEvaluationSetItemsRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var BatchGetEvaluationSetItemsRequest_VersionID_DEFAULT int64

func (p *BatchGetEvaluationSetItemsRequest) GetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetVersionID() {
		return BatchGetEvaluationSetItemsRequest_VersionID_DEFAULT
	}
	return *p.VersionID
}

var BatchGetEvaluationSetItemsRequest_ItemIds_DEFAULT []int64

func (p *BatchGetEvaluationSetItemsRequest) GetItemIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemIds() {
		return BatchGetEvaluationSetItemsRequest_ItemIds_DEFAULT
	}
	return p.ItemIds
}

var BatchGetEvaluationSetItemsRequest_Base_DEFAULT *base.Base

func (p *BatchGetEvaluationSetItemsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetEvaluationSetItemsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetEvaluationSetItemsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetEvaluationSetItemsRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *BatchGetEvaluationSetItemsRequest) SetVersionID(val *int64) {
	p.VersionID = val
}
func (p *BatchGetEvaluationSetItemsRequest) SetItemIds(val []int64) {
	p.ItemIds = val
}
func (p *BatchGetEvaluationSetItemsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetEvaluationSetItemsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "version_id",
	4:   "item_ids",
	255: "Base",
}

func (p *BatchGetEvaluationSetItemsRequest) IsSetVersionID() bool {
	return p.VersionID != nil
}

func (p *BatchGetEvaluationSetItemsRequest) IsSetItemIds() bool {
	return p.ItemIds != nil
}

func (p *BatchGetEvaluationSetItemsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetEvaluationSetItemsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvaluationSetItemsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetEvaluationSetItemsRequest[fieldId]))
}

func (p *BatchGetEvaluationSetItemsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetEvaluationSetItemsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchGetEvaluationSetItemsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionID = _field
	return nil
}
func (p *BatchGetEvaluationSetItemsRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemIds = _field
	return nil
}
func (p *BatchGetEvaluationSetItemsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetEvaluationSetItemsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluationSetItemsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvaluationSetItemsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvaluationSetItemsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetEvaluationSetItemsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionID() {
		if err = oprot.WriteFieldBegin("version_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetEvaluationSetItemsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemIds() {
		if err = oprot.WriteFieldBegin("item_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ItemIds)); err != nil {
			return err
		}
		for _, v := range p.ItemIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchGetEvaluationSetItemsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvaluationSetItemsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvaluationSetItemsRequest(%+v)", *p)

}

func (p *BatchGetEvaluationSetItemsRequest) DeepEqual(ano *BatchGetEvaluationSetItemsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionID) {
		return false
	}
	if !p.Field4DeepEqual(ano.ItemIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetEvaluationSetItemsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetEvaluationSetItemsRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *BatchGetEvaluationSetItemsRequest) Field3DeepEqual(src *int64) bool {

	if p.VersionID == src {
		return true
	} else if p.VersionID == nil || src == nil {
		return false
	}
	if *p.VersionID != *src {
		return false
	}
	return true
}
func (p *BatchGetEvaluationSetItemsRequest) Field4DeepEqual(src []int64) bool {

	if len(p.ItemIds) != len(src) {
		return false
	}
	for i, v := range p.ItemIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetEvaluationSetItemsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvaluationSetItemsResponse struct {
	Items    []*eval_set.EvaluationSetItem `thrift:"items,1,optional" frugal:"1,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty" query:"items"`
	BaseResp *base.BaseResp                `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetEvaluationSetItemsResponse() *BatchGetEvaluationSetItemsResponse {
	return &BatchGetEvaluationSetItemsResponse{}
}

func (p *BatchGetEvaluationSetItemsResponse) InitDefault() {
}

var BatchGetEvaluationSetItemsResponse_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *BatchGetEvaluationSetItemsResponse) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return BatchGetEvaluationSetItemsResponse_Items_DEFAULT
	}
	return p.Items
}

var BatchGetEvaluationSetItemsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetEvaluationSetItemsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetEvaluationSetItemsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetEvaluationSetItemsResponse) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *BatchGetEvaluationSetItemsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetEvaluationSetItemsResponse = map[int16]string{
	1:   "items",
	255: "BaseResp",
}

func (p *BatchGetEvaluationSetItemsResponse) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchGetEvaluationSetItemsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetEvaluationSetItemsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvaluationSetItemsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetEvaluationSetItemsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *BatchGetEvaluationSetItemsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetEvaluationSetItemsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluationSetItemsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvaluationSetItemsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvaluationSetItemsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvaluationSetItemsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvaluationSetItemsResponse(%+v)", *p)

}

func (p *BatchGetEvaluationSetItemsResponse) DeepEqual(ano *BatchGetEvaluationSetItemsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetEvaluationSetItemsResponse) Field1DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetEvaluationSetItemsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ClearEvaluationSetDraftItemRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id" path:"evaluation_set_id,required" `
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewClearEvaluationSetDraftItemRequest() *ClearEvaluationSetDraftItemRequest {
	return &ClearEvaluationSetDraftItemRequest{}
}

func (p *ClearEvaluationSetDraftItemRequest) InitDefault() {
}

func (p *ClearEvaluationSetDraftItemRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *ClearEvaluationSetDraftItemRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var ClearEvaluationSetDraftItemRequest_Base_DEFAULT *base.Base

func (p *ClearEvaluationSetDraftItemRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ClearEvaluationSetDraftItemRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ClearEvaluationSetDraftItemRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ClearEvaluationSetDraftItemRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *ClearEvaluationSetDraftItemRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ClearEvaluationSetDraftItemRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	255: "Base",
}

func (p *ClearEvaluationSetDraftItemRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ClearEvaluationSetDraftItemRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClearEvaluationSetDraftItemRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ClearEvaluationSetDraftItemRequest[fieldId]))
}

func (p *ClearEvaluationSetDraftItemRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ClearEvaluationSetDraftItemRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *ClearEvaluationSetDraftItemRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ClearEvaluationSetDraftItemRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearEvaluationSetDraftItemRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ClearEvaluationSetDraftItemRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ClearEvaluationSetDraftItemRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearEvaluationSetDraftItemRequest(%+v)", *p)

}

func (p *ClearEvaluationSetDraftItemRequest) DeepEqual(ano *ClearEvaluationSetDraftItemRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ClearEvaluationSetDraftItemRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ClearEvaluationSetDraftItemRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *ClearEvaluationSetDraftItemRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ClearEvaluationSetDraftItemResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewClearEvaluationSetDraftItemResponse() *ClearEvaluationSetDraftItemResponse {
	return &ClearEvaluationSetDraftItemResponse{}
}

func (p *ClearEvaluationSetDraftItemResponse) InitDefault() {
}

var ClearEvaluationSetDraftItemResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ClearEvaluationSetDraftItemResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ClearEvaluationSetDraftItemResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ClearEvaluationSetDraftItemResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ClearEvaluationSetDraftItemResponse = map[int16]string{
	255: "BaseResp",
}

func (p *ClearEvaluationSetDraftItemResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ClearEvaluationSetDraftItemResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClearEvaluationSetDraftItemResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ClearEvaluationSetDraftItemResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearEvaluationSetDraftItemResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearEvaluationSetDraftItemResponse(%+v)", *p)

}

func (p *ClearEvaluationSetDraftItemResponse) DeepEqual(ano *ClearEvaluationSetDraftItemResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ClearEvaluationSetDraftItemResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetService interface {
	// 基本信息管理
	CreateEvaluationSet(ctx context.Context, req *CreateEvaluationSetRequest) (r *CreateEvaluationSetResponse, err error)

	UpdateEvaluationSet(ctx context.Context, req *UpdateEvaluationSetRequest) (r *UpdateEvaluationSetResponse, err error)

	DeleteEvaluationSet(ctx context.Context, req *DeleteEvaluationSetRequest) (r *DeleteEvaluationSetResponse, err error)

	GetEvaluationSet(ctx context.Context, req *GetEvaluationSetRequest) (r *GetEvaluationSetResponse, err error)

	ListEvaluationSets(ctx context.Context, req *ListEvaluationSetsRequest) (r *ListEvaluationSetsResponse, err error)
	// 版本管理
	CreateEvaluationSetVersion(ctx context.Context, req *CreateEvaluationSetVersionRequest) (r *CreateEvaluationSetVersionResponse, err error)

	GetEvaluationSetVersion(ctx context.Context, req *GetEvaluationSetVersionRequest) (r *GetEvaluationSetVersionResponse, err error)

	ListEvaluationSetVersions(ctx context.Context, req *ListEvaluationSetVersionsRequest) (r *ListEvaluationSetVersionsResponse, err error)

	BatchGetEvaluationSetVersions(ctx context.Context, req *BatchGetEvaluationSetVersionsRequest) (r *BatchGetEvaluationSetVersionsResponse, err error)
	// 字段管理
	UpdateEvaluationSetSchema(ctx context.Context, req *UpdateEvaluationSetSchemaRequest) (r *UpdateEvaluationSetSchemaResponse, err error)
	// 数据管理
	BatchCreateEvaluationSetItems(ctx context.Context, req *BatchCreateEvaluationSetItemsRequest) (r *BatchCreateEvaluationSetItemsResponse, err error)

	UpdateEvaluationSetItem(ctx context.Context, req *UpdateEvaluationSetItemRequest) (r *UpdateEvaluationSetItemResponse, err error)

	BatchDeleteEvaluationSetItems(ctx context.Context, req *BatchDeleteEvaluationSetItemsRequest) (r *BatchDeleteEvaluationSetItemsResponse, err error)

	ListEvaluationSetItems(ctx context.Context, req *ListEvaluationSetItemsRequest) (r *ListEvaluationSetItemsResponse, err error)

	BatchGetEvaluationSetItems(ctx context.Context, req *BatchGetEvaluationSetItemsRequest) (r *BatchGetEvaluationSetItemsResponse, err error)

	ClearEvaluationSetDraftItem(ctx context.Context, req *ClearEvaluationSetDraftItemRequest) (r *ClearEvaluationSetDraftItemResponse, err error)
}

type EvaluationSetServiceClient struct {
	c thrift.TClient
}

func NewEvaluationSetServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EvaluationSetServiceClient {
	return &EvaluationSetServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEvaluationSetServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EvaluationSetServiceClient {
	return &EvaluationSetServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEvaluationSetServiceClient(c thrift.TClient) *EvaluationSetServiceClient {
	return &EvaluationSetServiceClient{
		c: c,
	}
}

func (p *EvaluationSetServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EvaluationSetServiceClient) CreateEvaluationSet(ctx context.Context, req *CreateEvaluationSetRequest) (r *CreateEvaluationSetResponse, err error) {
	var _args EvaluationSetServiceCreateEvaluationSetArgs
	_args.Req = req
	var _result EvaluationSetServiceCreateEvaluationSetResult
	if err = p.Client_().Call(ctx, "CreateEvaluationSet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) UpdateEvaluationSet(ctx context.Context, req *UpdateEvaluationSetRequest) (r *UpdateEvaluationSetResponse, err error) {
	var _args EvaluationSetServiceUpdateEvaluationSetArgs
	_args.Req = req
	var _result EvaluationSetServiceUpdateEvaluationSetResult
	if err = p.Client_().Call(ctx, "UpdateEvaluationSet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) DeleteEvaluationSet(ctx context.Context, req *DeleteEvaluationSetRequest) (r *DeleteEvaluationSetResponse, err error) {
	var _args EvaluationSetServiceDeleteEvaluationSetArgs
	_args.Req = req
	var _result EvaluationSetServiceDeleteEvaluationSetResult
	if err = p.Client_().Call(ctx, "DeleteEvaluationSet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) GetEvaluationSet(ctx context.Context, req *GetEvaluationSetRequest) (r *GetEvaluationSetResponse, err error) {
	var _args EvaluationSetServiceGetEvaluationSetArgs
	_args.Req = req
	var _result EvaluationSetServiceGetEvaluationSetResult
	if err = p.Client_().Call(ctx, "GetEvaluationSet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) ListEvaluationSets(ctx context.Context, req *ListEvaluationSetsRequest) (r *ListEvaluationSetsResponse, err error) {
	var _args EvaluationSetServiceListEvaluationSetsArgs
	_args.Req = req
	var _result EvaluationSetServiceListEvaluationSetsResult
	if err = p.Client_().Call(ctx, "ListEvaluationSets", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) CreateEvaluationSetVersion(ctx context.Context, req *CreateEvaluationSetVersionRequest) (r *CreateEvaluationSetVersionResponse, err error) {
	var _args EvaluationSetServiceCreateEvaluationSetVersionArgs
	_args.Req = req
	var _result EvaluationSetServiceCreateEvaluationSetVersionResult
	if err = p.Client_().Call(ctx, "CreateEvaluationSetVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) GetEvaluationSetVersion(ctx context.Context, req *GetEvaluationSetVersionRequest) (r *GetEvaluationSetVersionResponse, err error) {
	var _args EvaluationSetServiceGetEvaluationSetVersionArgs
	_args.Req = req
	var _result EvaluationSetServiceGetEvaluationSetVersionResult
	if err = p.Client_().Call(ctx, "GetEvaluationSetVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) ListEvaluationSetVersions(ctx context.Context, req *ListEvaluationSetVersionsRequest) (r *ListEvaluationSetVersionsResponse, err error) {
	var _args EvaluationSetServiceListEvaluationSetVersionsArgs
	_args.Req = req
	var _result EvaluationSetServiceListEvaluationSetVersionsResult
	if err = p.Client_().Call(ctx, "ListEvaluationSetVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) BatchGetEvaluationSetVersions(ctx context.Context, req *BatchGetEvaluationSetVersionsRequest) (r *BatchGetEvaluationSetVersionsResponse, err error) {
	var _args EvaluationSetServiceBatchGetEvaluationSetVersionsArgs
	_args.Req = req
	var _result EvaluationSetServiceBatchGetEvaluationSetVersionsResult
	if err = p.Client_().Call(ctx, "BatchGetEvaluationSetVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) UpdateEvaluationSetSchema(ctx context.Context, req *UpdateEvaluationSetSchemaRequest) (r *UpdateEvaluationSetSchemaResponse, err error) {
	var _args EvaluationSetServiceUpdateEvaluationSetSchemaArgs
	_args.Req = req
	var _result EvaluationSetServiceUpdateEvaluationSetSchemaResult
	if err = p.Client_().Call(ctx, "UpdateEvaluationSetSchema", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) BatchCreateEvaluationSetItems(ctx context.Context, req *BatchCreateEvaluationSetItemsRequest) (r *BatchCreateEvaluationSetItemsResponse, err error) {
	var _args EvaluationSetServiceBatchCreateEvaluationSetItemsArgs
	_args.Req = req
	var _result EvaluationSetServiceBatchCreateEvaluationSetItemsResult
	if err = p.Client_().Call(ctx, "BatchCreateEvaluationSetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) UpdateEvaluationSetItem(ctx context.Context, req *UpdateEvaluationSetItemRequest) (r *UpdateEvaluationSetItemResponse, err error) {
	var _args EvaluationSetServiceUpdateEvaluationSetItemArgs
	_args.Req = req
	var _result EvaluationSetServiceUpdateEvaluationSetItemResult
	if err = p.Client_().Call(ctx, "UpdateEvaluationSetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) BatchDeleteEvaluationSetItems(ctx context.Context, req *BatchDeleteEvaluationSetItemsRequest) (r *BatchDeleteEvaluationSetItemsResponse, err error) {
	var _args EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs
	_args.Req = req
	var _result EvaluationSetServiceBatchDeleteEvaluationSetItemsResult
	if err = p.Client_().Call(ctx, "BatchDeleteEvaluationSetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) ListEvaluationSetItems(ctx context.Context, req *ListEvaluationSetItemsRequest) (r *ListEvaluationSetItemsResponse, err error) {
	var _args EvaluationSetServiceListEvaluationSetItemsArgs
	_args.Req = req
	var _result EvaluationSetServiceListEvaluationSetItemsResult
	if err = p.Client_().Call(ctx, "ListEvaluationSetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) BatchGetEvaluationSetItems(ctx context.Context, req *BatchGetEvaluationSetItemsRequest) (r *BatchGetEvaluationSetItemsResponse, err error) {
	var _args EvaluationSetServiceBatchGetEvaluationSetItemsArgs
	_args.Req = req
	var _result EvaluationSetServiceBatchGetEvaluationSetItemsResult
	if err = p.Client_().Call(ctx, "BatchGetEvaluationSetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationSetServiceClient) ClearEvaluationSetDraftItem(ctx context.Context, req *ClearEvaluationSetDraftItemRequest) (r *ClearEvaluationSetDraftItemResponse, err error) {
	var _args EvaluationSetServiceClearEvaluationSetDraftItemArgs
	_args.Req = req
	var _result EvaluationSetServiceClearEvaluationSetDraftItemResult
	if err = p.Client_().Call(ctx, "ClearEvaluationSetDraftItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EvaluationSetServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EvaluationSetService
}

func (p *EvaluationSetServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EvaluationSetServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EvaluationSetServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEvaluationSetServiceProcessor(handler EvaluationSetService) *EvaluationSetServiceProcessor {
	self := &EvaluationSetServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateEvaluationSet", &evaluationSetServiceProcessorCreateEvaluationSet{handler: handler})
	self.AddToProcessorMap("UpdateEvaluationSet", &evaluationSetServiceProcessorUpdateEvaluationSet{handler: handler})
	self.AddToProcessorMap("DeleteEvaluationSet", &evaluationSetServiceProcessorDeleteEvaluationSet{handler: handler})
	self.AddToProcessorMap("GetEvaluationSet", &evaluationSetServiceProcessorGetEvaluationSet{handler: handler})
	self.AddToProcessorMap("ListEvaluationSets", &evaluationSetServiceProcessorListEvaluationSets{handler: handler})
	self.AddToProcessorMap("CreateEvaluationSetVersion", &evaluationSetServiceProcessorCreateEvaluationSetVersion{handler: handler})
	self.AddToProcessorMap("GetEvaluationSetVersion", &evaluationSetServiceProcessorGetEvaluationSetVersion{handler: handler})
	self.AddToProcessorMap("ListEvaluationSetVersions", &evaluationSetServiceProcessorListEvaluationSetVersions{handler: handler})
	self.AddToProcessorMap("BatchGetEvaluationSetVersions", &evaluationSetServiceProcessorBatchGetEvaluationSetVersions{handler: handler})
	self.AddToProcessorMap("UpdateEvaluationSetSchema", &evaluationSetServiceProcessorUpdateEvaluationSetSchema{handler: handler})
	self.AddToProcessorMap("BatchCreateEvaluationSetItems", &evaluationSetServiceProcessorBatchCreateEvaluationSetItems{handler: handler})
	self.AddToProcessorMap("UpdateEvaluationSetItem", &evaluationSetServiceProcessorUpdateEvaluationSetItem{handler: handler})
	self.AddToProcessorMap("BatchDeleteEvaluationSetItems", &evaluationSetServiceProcessorBatchDeleteEvaluationSetItems{handler: handler})
	self.AddToProcessorMap("ListEvaluationSetItems", &evaluationSetServiceProcessorListEvaluationSetItems{handler: handler})
	self.AddToProcessorMap("BatchGetEvaluationSetItems", &evaluationSetServiceProcessorBatchGetEvaluationSetItems{handler: handler})
	self.AddToProcessorMap("ClearEvaluationSetDraftItem", &evaluationSetServiceProcessorClearEvaluationSetDraftItem{handler: handler})
	return self
}
func (p *EvaluationSetServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type evaluationSetServiceProcessorCreateEvaluationSet struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorCreateEvaluationSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceCreateEvaluationSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceCreateEvaluationSetResult{}
	var retval *CreateEvaluationSetResponse
	if retval, err2 = p.handler.CreateEvaluationSet(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluationSet: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluationSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorUpdateEvaluationSet struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorUpdateEvaluationSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceUpdateEvaluationSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceUpdateEvaluationSetResult{}
	var retval *UpdateEvaluationSetResponse
	if retval, err2 = p.handler.UpdateEvaluationSet(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEvaluationSet: "+err2.Error())
		oprot.WriteMessageBegin("UpdateEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateEvaluationSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorDeleteEvaluationSet struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorDeleteEvaluationSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceDeleteEvaluationSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceDeleteEvaluationSetResult{}
	var retval *DeleteEvaluationSetResponse
	if retval, err2 = p.handler.DeleteEvaluationSet(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteEvaluationSet: "+err2.Error())
		oprot.WriteMessageBegin("DeleteEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteEvaluationSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorGetEvaluationSet struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorGetEvaluationSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceGetEvaluationSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceGetEvaluationSetResult{}
	var retval *GetEvaluationSetResponse
	if retval, err2 = p.handler.GetEvaluationSet(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluationSet: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluationSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorListEvaluationSets struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorListEvaluationSets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceListEvaluationSetsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluationSets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceListEvaluationSetsResult{}
	var retval *ListEvaluationSetsResponse
	if retval, err2 = p.handler.ListEvaluationSets(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluationSets: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluationSets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluationSets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorCreateEvaluationSetVersion struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorCreateEvaluationSetVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceCreateEvaluationSetVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceCreateEvaluationSetVersionResult{}
	var retval *CreateEvaluationSetVersionResponse
	if retval, err2 = p.handler.CreateEvaluationSetVersion(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluationSetVersion: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluationSetVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorGetEvaluationSetVersion struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorGetEvaluationSetVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceGetEvaluationSetVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluationSetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceGetEvaluationSetVersionResult{}
	var retval *GetEvaluationSetVersionResponse
	if retval, err2 = p.handler.GetEvaluationSetVersion(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluationSetVersion: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluationSetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluationSetVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorListEvaluationSetVersions struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorListEvaluationSetVersions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceListEvaluationSetVersionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluationSetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceListEvaluationSetVersionsResult{}
	var retval *ListEvaluationSetVersionsResponse
	if retval, err2 = p.handler.ListEvaluationSetVersions(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluationSetVersions: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluationSetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluationSetVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorBatchGetEvaluationSetVersions struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorBatchGetEvaluationSetVersions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceBatchGetEvaluationSetVersionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetEvaluationSetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceBatchGetEvaluationSetVersionsResult{}
	var retval *BatchGetEvaluationSetVersionsResponse
	if retval, err2 = p.handler.BatchGetEvaluationSetVersions(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetEvaluationSetVersions: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetEvaluationSetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetEvaluationSetVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorUpdateEvaluationSetSchema struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorUpdateEvaluationSetSchema) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceUpdateEvaluationSetSchemaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateEvaluationSetSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceUpdateEvaluationSetSchemaResult{}
	var retval *UpdateEvaluationSetSchemaResponse
	if retval, err2 = p.handler.UpdateEvaluationSetSchema(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEvaluationSetSchema: "+err2.Error())
		oprot.WriteMessageBegin("UpdateEvaluationSetSchema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateEvaluationSetSchema", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorBatchCreateEvaluationSetItems struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorBatchCreateEvaluationSetItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceBatchCreateEvaluationSetItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchCreateEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceBatchCreateEvaluationSetItemsResult{}
	var retval *BatchCreateEvaluationSetItemsResponse
	if retval, err2 = p.handler.BatchCreateEvaluationSetItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchCreateEvaluationSetItems: "+err2.Error())
		oprot.WriteMessageBegin("BatchCreateEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchCreateEvaluationSetItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorUpdateEvaluationSetItem struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorUpdateEvaluationSetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceUpdateEvaluationSetItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateEvaluationSetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceUpdateEvaluationSetItemResult{}
	var retval *UpdateEvaluationSetItemResponse
	if retval, err2 = p.handler.UpdateEvaluationSetItem(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEvaluationSetItem: "+err2.Error())
		oprot.WriteMessageBegin("UpdateEvaluationSetItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateEvaluationSetItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorBatchDeleteEvaluationSetItems struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorBatchDeleteEvaluationSetItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchDeleteEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceBatchDeleteEvaluationSetItemsResult{}
	var retval *BatchDeleteEvaluationSetItemsResponse
	if retval, err2 = p.handler.BatchDeleteEvaluationSetItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchDeleteEvaluationSetItems: "+err2.Error())
		oprot.WriteMessageBegin("BatchDeleteEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchDeleteEvaluationSetItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorListEvaluationSetItems struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorListEvaluationSetItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceListEvaluationSetItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceListEvaluationSetItemsResult{}
	var retval *ListEvaluationSetItemsResponse
	if retval, err2 = p.handler.ListEvaluationSetItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluationSetItems: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluationSetItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorBatchGetEvaluationSetItems struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorBatchGetEvaluationSetItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceBatchGetEvaluationSetItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceBatchGetEvaluationSetItemsResult{}
	var retval *BatchGetEvaluationSetItemsResponse
	if retval, err2 = p.handler.BatchGetEvaluationSetItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetEvaluationSetItems: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetEvaluationSetItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationSetServiceProcessorClearEvaluationSetDraftItem struct {
	handler EvaluationSetService
}

func (p *evaluationSetServiceProcessorClearEvaluationSetDraftItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationSetServiceClearEvaluationSetDraftItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ClearEvaluationSetDraftItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationSetServiceClearEvaluationSetDraftItemResult{}
	var retval *ClearEvaluationSetDraftItemResponse
	if retval, err2 = p.handler.ClearEvaluationSetDraftItem(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearEvaluationSetDraftItem: "+err2.Error())
		oprot.WriteMessageBegin("ClearEvaluationSetDraftItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ClearEvaluationSetDraftItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EvaluationSetServiceCreateEvaluationSetArgs struct {
	Req *CreateEvaluationSetRequest `thrift:"req,1" frugal:"1,default,CreateEvaluationSetRequest"`
}

func NewEvaluationSetServiceCreateEvaluationSetArgs() *EvaluationSetServiceCreateEvaluationSetArgs {
	return &EvaluationSetServiceCreateEvaluationSetArgs{}
}

func (p *EvaluationSetServiceCreateEvaluationSetArgs) InitDefault() {
}

var EvaluationSetServiceCreateEvaluationSetArgs_Req_DEFAULT *CreateEvaluationSetRequest

func (p *EvaluationSetServiceCreateEvaluationSetArgs) GetReq() (v *CreateEvaluationSetRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceCreateEvaluationSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceCreateEvaluationSetArgs) SetReq(val *CreateEvaluationSetRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceCreateEvaluationSetArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceCreateEvaluationSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceCreateEvaluationSetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceCreateEvaluationSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceCreateEvaluationSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceCreateEvaluationSetArgs(%+v)", *p)

}

func (p *EvaluationSetServiceCreateEvaluationSetArgs) DeepEqual(ano *EvaluationSetServiceCreateEvaluationSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceCreateEvaluationSetArgs) Field1DeepEqual(src *CreateEvaluationSetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceCreateEvaluationSetResult struct {
	Success *CreateEvaluationSetResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluationSetResponse"`
}

func NewEvaluationSetServiceCreateEvaluationSetResult() *EvaluationSetServiceCreateEvaluationSetResult {
	return &EvaluationSetServiceCreateEvaluationSetResult{}
}

func (p *EvaluationSetServiceCreateEvaluationSetResult) InitDefault() {
}

var EvaluationSetServiceCreateEvaluationSetResult_Success_DEFAULT *CreateEvaluationSetResponse

func (p *EvaluationSetServiceCreateEvaluationSetResult) GetSuccess() (v *CreateEvaluationSetResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceCreateEvaluationSetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceCreateEvaluationSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluationSetResponse)
}

var fieldIDToName_EvaluationSetServiceCreateEvaluationSetResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceCreateEvaluationSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceCreateEvaluationSetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceCreateEvaluationSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceCreateEvaluationSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceCreateEvaluationSetResult(%+v)", *p)

}

func (p *EvaluationSetServiceCreateEvaluationSetResult) DeepEqual(ano *EvaluationSetServiceCreateEvaluationSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceCreateEvaluationSetResult) Field0DeepEqual(src *CreateEvaluationSetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceUpdateEvaluationSetArgs struct {
	Req *UpdateEvaluationSetRequest `thrift:"req,1" frugal:"1,default,UpdateEvaluationSetRequest"`
}

func NewEvaluationSetServiceUpdateEvaluationSetArgs() *EvaluationSetServiceUpdateEvaluationSetArgs {
	return &EvaluationSetServiceUpdateEvaluationSetArgs{}
}

func (p *EvaluationSetServiceUpdateEvaluationSetArgs) InitDefault() {
}

var EvaluationSetServiceUpdateEvaluationSetArgs_Req_DEFAULT *UpdateEvaluationSetRequest

func (p *EvaluationSetServiceUpdateEvaluationSetArgs) GetReq() (v *UpdateEvaluationSetRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceUpdateEvaluationSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceUpdateEvaluationSetArgs) SetReq(val *UpdateEvaluationSetRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceUpdateEvaluationSetArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceUpdateEvaluationSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceUpdateEvaluationSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluationSetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceUpdateEvaluationSetArgs(%+v)", *p)

}

func (p *EvaluationSetServiceUpdateEvaluationSetArgs) DeepEqual(ano *EvaluationSetServiceUpdateEvaluationSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceUpdateEvaluationSetArgs) Field1DeepEqual(src *UpdateEvaluationSetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceUpdateEvaluationSetResult struct {
	Success *UpdateEvaluationSetResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateEvaluationSetResponse"`
}

func NewEvaluationSetServiceUpdateEvaluationSetResult() *EvaluationSetServiceUpdateEvaluationSetResult {
	return &EvaluationSetServiceUpdateEvaluationSetResult{}
}

func (p *EvaluationSetServiceUpdateEvaluationSetResult) InitDefault() {
}

var EvaluationSetServiceUpdateEvaluationSetResult_Success_DEFAULT *UpdateEvaluationSetResponse

func (p *EvaluationSetServiceUpdateEvaluationSetResult) GetSuccess() (v *UpdateEvaluationSetResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceUpdateEvaluationSetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceUpdateEvaluationSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateEvaluationSetResponse)
}

var fieldIDToName_EvaluationSetServiceUpdateEvaluationSetResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceUpdateEvaluationSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceUpdateEvaluationSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluationSetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceUpdateEvaluationSetResult(%+v)", *p)

}

func (p *EvaluationSetServiceUpdateEvaluationSetResult) DeepEqual(ano *EvaluationSetServiceUpdateEvaluationSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceUpdateEvaluationSetResult) Field0DeepEqual(src *UpdateEvaluationSetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceDeleteEvaluationSetArgs struct {
	Req *DeleteEvaluationSetRequest `thrift:"req,1" frugal:"1,default,DeleteEvaluationSetRequest"`
}

func NewEvaluationSetServiceDeleteEvaluationSetArgs() *EvaluationSetServiceDeleteEvaluationSetArgs {
	return &EvaluationSetServiceDeleteEvaluationSetArgs{}
}

func (p *EvaluationSetServiceDeleteEvaluationSetArgs) InitDefault() {
}

var EvaluationSetServiceDeleteEvaluationSetArgs_Req_DEFAULT *DeleteEvaluationSetRequest

func (p *EvaluationSetServiceDeleteEvaluationSetArgs) GetReq() (v *DeleteEvaluationSetRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceDeleteEvaluationSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceDeleteEvaluationSetArgs) SetReq(val *DeleteEvaluationSetRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceDeleteEvaluationSetArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceDeleteEvaluationSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceDeleteEvaluationSetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceDeleteEvaluationSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceDeleteEvaluationSetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteEvaluationSetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceDeleteEvaluationSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluationSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceDeleteEvaluationSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceDeleteEvaluationSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceDeleteEvaluationSetArgs(%+v)", *p)

}

func (p *EvaluationSetServiceDeleteEvaluationSetArgs) DeepEqual(ano *EvaluationSetServiceDeleteEvaluationSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceDeleteEvaluationSetArgs) Field1DeepEqual(src *DeleteEvaluationSetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceDeleteEvaluationSetResult struct {
	Success *DeleteEvaluationSetResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteEvaluationSetResponse"`
}

func NewEvaluationSetServiceDeleteEvaluationSetResult() *EvaluationSetServiceDeleteEvaluationSetResult {
	return &EvaluationSetServiceDeleteEvaluationSetResult{}
}

func (p *EvaluationSetServiceDeleteEvaluationSetResult) InitDefault() {
}

var EvaluationSetServiceDeleteEvaluationSetResult_Success_DEFAULT *DeleteEvaluationSetResponse

func (p *EvaluationSetServiceDeleteEvaluationSetResult) GetSuccess() (v *DeleteEvaluationSetResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceDeleteEvaluationSetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceDeleteEvaluationSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteEvaluationSetResponse)
}

var fieldIDToName_EvaluationSetServiceDeleteEvaluationSetResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceDeleteEvaluationSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceDeleteEvaluationSetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceDeleteEvaluationSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceDeleteEvaluationSetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteEvaluationSetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceDeleteEvaluationSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluationSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceDeleteEvaluationSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceDeleteEvaluationSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceDeleteEvaluationSetResult(%+v)", *p)

}

func (p *EvaluationSetServiceDeleteEvaluationSetResult) DeepEqual(ano *EvaluationSetServiceDeleteEvaluationSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceDeleteEvaluationSetResult) Field0DeepEqual(src *DeleteEvaluationSetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceGetEvaluationSetArgs struct {
	Req *GetEvaluationSetRequest `thrift:"req,1" frugal:"1,default,GetEvaluationSetRequest"`
}

func NewEvaluationSetServiceGetEvaluationSetArgs() *EvaluationSetServiceGetEvaluationSetArgs {
	return &EvaluationSetServiceGetEvaluationSetArgs{}
}

func (p *EvaluationSetServiceGetEvaluationSetArgs) InitDefault() {
}

var EvaluationSetServiceGetEvaluationSetArgs_Req_DEFAULT *GetEvaluationSetRequest

func (p *EvaluationSetServiceGetEvaluationSetArgs) GetReq() (v *GetEvaluationSetRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceGetEvaluationSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceGetEvaluationSetArgs) SetReq(val *GetEvaluationSetRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceGetEvaluationSetArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceGetEvaluationSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceGetEvaluationSetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceGetEvaluationSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceGetEvaluationSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceGetEvaluationSetArgs(%+v)", *p)

}

func (p *EvaluationSetServiceGetEvaluationSetArgs) DeepEqual(ano *EvaluationSetServiceGetEvaluationSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceGetEvaluationSetArgs) Field1DeepEqual(src *GetEvaluationSetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceGetEvaluationSetResult struct {
	Success *GetEvaluationSetResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluationSetResponse"`
}

func NewEvaluationSetServiceGetEvaluationSetResult() *EvaluationSetServiceGetEvaluationSetResult {
	return &EvaluationSetServiceGetEvaluationSetResult{}
}

func (p *EvaluationSetServiceGetEvaluationSetResult) InitDefault() {
}

var EvaluationSetServiceGetEvaluationSetResult_Success_DEFAULT *GetEvaluationSetResponse

func (p *EvaluationSetServiceGetEvaluationSetResult) GetSuccess() (v *GetEvaluationSetResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceGetEvaluationSetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceGetEvaluationSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluationSetResponse)
}

var fieldIDToName_EvaluationSetServiceGetEvaluationSetResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceGetEvaluationSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceGetEvaluationSetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceGetEvaluationSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceGetEvaluationSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceGetEvaluationSetResult(%+v)", *p)

}

func (p *EvaluationSetServiceGetEvaluationSetResult) DeepEqual(ano *EvaluationSetServiceGetEvaluationSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceGetEvaluationSetResult) Field0DeepEqual(src *GetEvaluationSetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceListEvaluationSetsArgs struct {
	Req *ListEvaluationSetsRequest `thrift:"req,1" frugal:"1,default,ListEvaluationSetsRequest"`
}

func NewEvaluationSetServiceListEvaluationSetsArgs() *EvaluationSetServiceListEvaluationSetsArgs {
	return &EvaluationSetServiceListEvaluationSetsArgs{}
}

func (p *EvaluationSetServiceListEvaluationSetsArgs) InitDefault() {
}

var EvaluationSetServiceListEvaluationSetsArgs_Req_DEFAULT *ListEvaluationSetsRequest

func (p *EvaluationSetServiceListEvaluationSetsArgs) GetReq() (v *ListEvaluationSetsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceListEvaluationSetsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceListEvaluationSetsArgs) SetReq(val *ListEvaluationSetsRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceListEvaluationSetsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceListEvaluationSetsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceListEvaluationSetsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceListEvaluationSetsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceListEvaluationSetsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSets_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceListEvaluationSetsArgs(%+v)", *p)

}

func (p *EvaluationSetServiceListEvaluationSetsArgs) DeepEqual(ano *EvaluationSetServiceListEvaluationSetsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceListEvaluationSetsArgs) Field1DeepEqual(src *ListEvaluationSetsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceListEvaluationSetsResult struct {
	Success *ListEvaluationSetsResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluationSetsResponse"`
}

func NewEvaluationSetServiceListEvaluationSetsResult() *EvaluationSetServiceListEvaluationSetsResult {
	return &EvaluationSetServiceListEvaluationSetsResult{}
}

func (p *EvaluationSetServiceListEvaluationSetsResult) InitDefault() {
}

var EvaluationSetServiceListEvaluationSetsResult_Success_DEFAULT *ListEvaluationSetsResponse

func (p *EvaluationSetServiceListEvaluationSetsResult) GetSuccess() (v *ListEvaluationSetsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceListEvaluationSetsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceListEvaluationSetsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluationSetsResponse)
}

var fieldIDToName_EvaluationSetServiceListEvaluationSetsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceListEvaluationSetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceListEvaluationSetsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceListEvaluationSetsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceListEvaluationSetsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSets_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceListEvaluationSetsResult(%+v)", *p)

}

func (p *EvaluationSetServiceListEvaluationSetsResult) DeepEqual(ano *EvaluationSetServiceListEvaluationSetsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceListEvaluationSetsResult) Field0DeepEqual(src *ListEvaluationSetsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceCreateEvaluationSetVersionArgs struct {
	Req *CreateEvaluationSetVersionRequest `thrift:"req,1" frugal:"1,default,CreateEvaluationSetVersionRequest"`
}

func NewEvaluationSetServiceCreateEvaluationSetVersionArgs() *EvaluationSetServiceCreateEvaluationSetVersionArgs {
	return &EvaluationSetServiceCreateEvaluationSetVersionArgs{}
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionArgs) InitDefault() {
}

var EvaluationSetServiceCreateEvaluationSetVersionArgs_Req_DEFAULT *CreateEvaluationSetVersionRequest

func (p *EvaluationSetServiceCreateEvaluationSetVersionArgs) GetReq() (v *CreateEvaluationSetVersionRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceCreateEvaluationSetVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceCreateEvaluationSetVersionArgs) SetReq(val *CreateEvaluationSetVersionRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceCreateEvaluationSetVersionArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceCreateEvaluationSetVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceCreateEvaluationSetVersionArgs(%+v)", *p)

}

func (p *EvaluationSetServiceCreateEvaluationSetVersionArgs) DeepEqual(ano *EvaluationSetServiceCreateEvaluationSetVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionArgs) Field1DeepEqual(src *CreateEvaluationSetVersionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceCreateEvaluationSetVersionResult struct {
	Success *CreateEvaluationSetVersionResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluationSetVersionResponse"`
}

func NewEvaluationSetServiceCreateEvaluationSetVersionResult() *EvaluationSetServiceCreateEvaluationSetVersionResult {
	return &EvaluationSetServiceCreateEvaluationSetVersionResult{}
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionResult) InitDefault() {
}

var EvaluationSetServiceCreateEvaluationSetVersionResult_Success_DEFAULT *CreateEvaluationSetVersionResponse

func (p *EvaluationSetServiceCreateEvaluationSetVersionResult) GetSuccess() (v *CreateEvaluationSetVersionResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceCreateEvaluationSetVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceCreateEvaluationSetVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluationSetVersionResponse)
}

var fieldIDToName_EvaluationSetServiceCreateEvaluationSetVersionResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceCreateEvaluationSetVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetVersionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceCreateEvaluationSetVersionResult(%+v)", *p)

}

func (p *EvaluationSetServiceCreateEvaluationSetVersionResult) DeepEqual(ano *EvaluationSetServiceCreateEvaluationSetVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceCreateEvaluationSetVersionResult) Field0DeepEqual(src *CreateEvaluationSetVersionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceGetEvaluationSetVersionArgs struct {
	Req *GetEvaluationSetVersionRequest `thrift:"req,1" frugal:"1,default,GetEvaluationSetVersionRequest"`
}

func NewEvaluationSetServiceGetEvaluationSetVersionArgs() *EvaluationSetServiceGetEvaluationSetVersionArgs {
	return &EvaluationSetServiceGetEvaluationSetVersionArgs{}
}

func (p *EvaluationSetServiceGetEvaluationSetVersionArgs) InitDefault() {
}

var EvaluationSetServiceGetEvaluationSetVersionArgs_Req_DEFAULT *GetEvaluationSetVersionRequest

func (p *EvaluationSetServiceGetEvaluationSetVersionArgs) GetReq() (v *GetEvaluationSetVersionRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceGetEvaluationSetVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceGetEvaluationSetVersionArgs) SetReq(val *GetEvaluationSetVersionRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceGetEvaluationSetVersionArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceGetEvaluationSetVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceGetEvaluationSetVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceGetEvaluationSetVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceGetEvaluationSetVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceGetEvaluationSetVersionArgs(%+v)", *p)

}

func (p *EvaluationSetServiceGetEvaluationSetVersionArgs) DeepEqual(ano *EvaluationSetServiceGetEvaluationSetVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceGetEvaluationSetVersionArgs) Field1DeepEqual(src *GetEvaluationSetVersionRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceGetEvaluationSetVersionResult struct {
	Success *GetEvaluationSetVersionResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluationSetVersionResponse"`
}

func NewEvaluationSetServiceGetEvaluationSetVersionResult() *EvaluationSetServiceGetEvaluationSetVersionResult {
	return &EvaluationSetServiceGetEvaluationSetVersionResult{}
}

func (p *EvaluationSetServiceGetEvaluationSetVersionResult) InitDefault() {
}

var EvaluationSetServiceGetEvaluationSetVersionResult_Success_DEFAULT *GetEvaluationSetVersionResponse

func (p *EvaluationSetServiceGetEvaluationSetVersionResult) GetSuccess() (v *GetEvaluationSetVersionResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceGetEvaluationSetVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceGetEvaluationSetVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluationSetVersionResponse)
}

var fieldIDToName_EvaluationSetServiceGetEvaluationSetVersionResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceGetEvaluationSetVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceGetEvaluationSetVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceGetEvaluationSetVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetVersionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceGetEvaluationSetVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceGetEvaluationSetVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceGetEvaluationSetVersionResult(%+v)", *p)

}

func (p *EvaluationSetServiceGetEvaluationSetVersionResult) DeepEqual(ano *EvaluationSetServiceGetEvaluationSetVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceGetEvaluationSetVersionResult) Field0DeepEqual(src *GetEvaluationSetVersionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceListEvaluationSetVersionsArgs struct {
	Req *ListEvaluationSetVersionsRequest `thrift:"req,1" frugal:"1,default,ListEvaluationSetVersionsRequest"`
}

func NewEvaluationSetServiceListEvaluationSetVersionsArgs() *EvaluationSetServiceListEvaluationSetVersionsArgs {
	return &EvaluationSetServiceListEvaluationSetVersionsArgs{}
}

func (p *EvaluationSetServiceListEvaluationSetVersionsArgs) InitDefault() {
}

var EvaluationSetServiceListEvaluationSetVersionsArgs_Req_DEFAULT *ListEvaluationSetVersionsRequest

func (p *EvaluationSetServiceListEvaluationSetVersionsArgs) GetReq() (v *ListEvaluationSetVersionsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceListEvaluationSetVersionsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceListEvaluationSetVersionsArgs) SetReq(val *ListEvaluationSetVersionsRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceListEvaluationSetVersionsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceListEvaluationSetVersionsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceListEvaluationSetVersionsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceListEvaluationSetVersionsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetVersionsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceListEvaluationSetVersionsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersions_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceListEvaluationSetVersionsArgs(%+v)", *p)

}

func (p *EvaluationSetServiceListEvaluationSetVersionsArgs) DeepEqual(ano *EvaluationSetServiceListEvaluationSetVersionsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceListEvaluationSetVersionsArgs) Field1DeepEqual(src *ListEvaluationSetVersionsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceListEvaluationSetVersionsResult struct {
	Success *ListEvaluationSetVersionsResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluationSetVersionsResponse"`
}

func NewEvaluationSetServiceListEvaluationSetVersionsResult() *EvaluationSetServiceListEvaluationSetVersionsResult {
	return &EvaluationSetServiceListEvaluationSetVersionsResult{}
}

func (p *EvaluationSetServiceListEvaluationSetVersionsResult) InitDefault() {
}

var EvaluationSetServiceListEvaluationSetVersionsResult_Success_DEFAULT *ListEvaluationSetVersionsResponse

func (p *EvaluationSetServiceListEvaluationSetVersionsResult) GetSuccess() (v *ListEvaluationSetVersionsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceListEvaluationSetVersionsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceListEvaluationSetVersionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluationSetVersionsResponse)
}

var fieldIDToName_EvaluationSetServiceListEvaluationSetVersionsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceListEvaluationSetVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceListEvaluationSetVersionsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceListEvaluationSetVersionsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetVersionsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceListEvaluationSetVersionsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersions_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceListEvaluationSetVersionsResult(%+v)", *p)

}

func (p *EvaluationSetServiceListEvaluationSetVersionsResult) DeepEqual(ano *EvaluationSetServiceListEvaluationSetVersionsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceListEvaluationSetVersionsResult) Field0DeepEqual(src *ListEvaluationSetVersionsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceBatchGetEvaluationSetVersionsArgs struct {
	Req *BatchGetEvaluationSetVersionsRequest `thrift:"req,1" frugal:"1,default,BatchGetEvaluationSetVersionsRequest"`
}

func NewEvaluationSetServiceBatchGetEvaluationSetVersionsArgs() *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs {
	return &EvaluationSetServiceBatchGetEvaluationSetVersionsArgs{}
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) InitDefault() {
}

var EvaluationSetServiceBatchGetEvaluationSetVersionsArgs_Req_DEFAULT *BatchGetEvaluationSetVersionsRequest

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) GetReq() (v *BatchGetEvaluationSetVersionsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceBatchGetEvaluationSetVersionsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) SetReq(val *BatchGetEvaluationSetVersionsRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceBatchGetEvaluationSetVersionsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceBatchGetEvaluationSetVersionsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvaluationSetVersionsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluationSetVersions_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceBatchGetEvaluationSetVersionsArgs(%+v)", *p)

}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) DeepEqual(ano *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsArgs) Field1DeepEqual(src *BatchGetEvaluationSetVersionsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceBatchGetEvaluationSetVersionsResult struct {
	Success *BatchGetEvaluationSetVersionsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetEvaluationSetVersionsResponse"`
}

func NewEvaluationSetServiceBatchGetEvaluationSetVersionsResult() *EvaluationSetServiceBatchGetEvaluationSetVersionsResult {
	return &EvaluationSetServiceBatchGetEvaluationSetVersionsResult{}
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) InitDefault() {
}

var EvaluationSetServiceBatchGetEvaluationSetVersionsResult_Success_DEFAULT *BatchGetEvaluationSetVersionsResponse

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) GetSuccess() (v *BatchGetEvaluationSetVersionsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceBatchGetEvaluationSetVersionsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetEvaluationSetVersionsResponse)
}

var fieldIDToName_EvaluationSetServiceBatchGetEvaluationSetVersionsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceBatchGetEvaluationSetVersionsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvaluationSetVersionsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluationSetVersions_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceBatchGetEvaluationSetVersionsResult(%+v)", *p)

}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) DeepEqual(ano *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceBatchGetEvaluationSetVersionsResult) Field0DeepEqual(src *BatchGetEvaluationSetVersionsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceUpdateEvaluationSetSchemaArgs struct {
	Req *UpdateEvaluationSetSchemaRequest `thrift:"req,1" frugal:"1,default,UpdateEvaluationSetSchemaRequest"`
}

func NewEvaluationSetServiceUpdateEvaluationSetSchemaArgs() *EvaluationSetServiceUpdateEvaluationSetSchemaArgs {
	return &EvaluationSetServiceUpdateEvaluationSetSchemaArgs{}
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) InitDefault() {
}

var EvaluationSetServiceUpdateEvaluationSetSchemaArgs_Req_DEFAULT *UpdateEvaluationSetSchemaRequest

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) GetReq() (v *UpdateEvaluationSetSchemaRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceUpdateEvaluationSetSchemaArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) SetReq(val *UpdateEvaluationSetSchemaRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceUpdateEvaluationSetSchemaArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceUpdateEvaluationSetSchemaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluationSetSchemaRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetSchema_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceUpdateEvaluationSetSchemaArgs(%+v)", *p)

}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) DeepEqual(ano *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaArgs) Field1DeepEqual(src *UpdateEvaluationSetSchemaRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceUpdateEvaluationSetSchemaResult struct {
	Success *UpdateEvaluationSetSchemaResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateEvaluationSetSchemaResponse"`
}

func NewEvaluationSetServiceUpdateEvaluationSetSchemaResult() *EvaluationSetServiceUpdateEvaluationSetSchemaResult {
	return &EvaluationSetServiceUpdateEvaluationSetSchemaResult{}
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaResult) InitDefault() {
}

var EvaluationSetServiceUpdateEvaluationSetSchemaResult_Success_DEFAULT *UpdateEvaluationSetSchemaResponse

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaResult) GetSuccess() (v *UpdateEvaluationSetSchemaResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceUpdateEvaluationSetSchemaResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceUpdateEvaluationSetSchemaResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateEvaluationSetSchemaResponse)
}

var fieldIDToName_EvaluationSetServiceUpdateEvaluationSetSchemaResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceUpdateEvaluationSetSchemaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluationSetSchemaResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetSchema_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceUpdateEvaluationSetSchemaResult(%+v)", *p)

}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaResult) DeepEqual(ano *EvaluationSetServiceUpdateEvaluationSetSchemaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceUpdateEvaluationSetSchemaResult) Field0DeepEqual(src *UpdateEvaluationSetSchemaResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceBatchCreateEvaluationSetItemsArgs struct {
	Req *BatchCreateEvaluationSetItemsRequest `thrift:"req,1" frugal:"1,default,BatchCreateEvaluationSetItemsRequest"`
}

func NewEvaluationSetServiceBatchCreateEvaluationSetItemsArgs() *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs {
	return &EvaluationSetServiceBatchCreateEvaluationSetItemsArgs{}
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) InitDefault() {
}

var EvaluationSetServiceBatchCreateEvaluationSetItemsArgs_Req_DEFAULT *BatchCreateEvaluationSetItemsRequest

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) GetReq() (v *BatchCreateEvaluationSetItemsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceBatchCreateEvaluationSetItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) SetReq(val *BatchCreateEvaluationSetItemsRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceBatchCreateEvaluationSetItemsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceBatchCreateEvaluationSetItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchCreateEvaluationSetItemsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceBatchCreateEvaluationSetItemsArgs(%+v)", *p)

}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) DeepEqual(ano *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsArgs) Field1DeepEqual(src *BatchCreateEvaluationSetItemsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceBatchCreateEvaluationSetItemsResult struct {
	Success *BatchCreateEvaluationSetItemsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchCreateEvaluationSetItemsResponse"`
}

func NewEvaluationSetServiceBatchCreateEvaluationSetItemsResult() *EvaluationSetServiceBatchCreateEvaluationSetItemsResult {
	return &EvaluationSetServiceBatchCreateEvaluationSetItemsResult{}
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) InitDefault() {
}

var EvaluationSetServiceBatchCreateEvaluationSetItemsResult_Success_DEFAULT *BatchCreateEvaluationSetItemsResponse

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) GetSuccess() (v *BatchCreateEvaluationSetItemsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceBatchCreateEvaluationSetItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchCreateEvaluationSetItemsResponse)
}

var fieldIDToName_EvaluationSetServiceBatchCreateEvaluationSetItemsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceBatchCreateEvaluationSetItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchCreateEvaluationSetItemsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceBatchCreateEvaluationSetItemsResult(%+v)", *p)

}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) DeepEqual(ano *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceBatchCreateEvaluationSetItemsResult) Field0DeepEqual(src *BatchCreateEvaluationSetItemsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceUpdateEvaluationSetItemArgs struct {
	Req *UpdateEvaluationSetItemRequest `thrift:"req,1" frugal:"1,default,UpdateEvaluationSetItemRequest"`
}

func NewEvaluationSetServiceUpdateEvaluationSetItemArgs() *EvaluationSetServiceUpdateEvaluationSetItemArgs {
	return &EvaluationSetServiceUpdateEvaluationSetItemArgs{}
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemArgs) InitDefault() {
}

var EvaluationSetServiceUpdateEvaluationSetItemArgs_Req_DEFAULT *UpdateEvaluationSetItemRequest

func (p *EvaluationSetServiceUpdateEvaluationSetItemArgs) GetReq() (v *UpdateEvaluationSetItemRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceUpdateEvaluationSetItemArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceUpdateEvaluationSetItemArgs) SetReq(val *UpdateEvaluationSetItemRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceUpdateEvaluationSetItemArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceUpdateEvaluationSetItemArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluationSetItemRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetItem_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceUpdateEvaluationSetItemArgs(%+v)", *p)

}

func (p *EvaluationSetServiceUpdateEvaluationSetItemArgs) DeepEqual(ano *EvaluationSetServiceUpdateEvaluationSetItemArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemArgs) Field1DeepEqual(src *UpdateEvaluationSetItemRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceUpdateEvaluationSetItemResult struct {
	Success *UpdateEvaluationSetItemResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateEvaluationSetItemResponse"`
}

func NewEvaluationSetServiceUpdateEvaluationSetItemResult() *EvaluationSetServiceUpdateEvaluationSetItemResult {
	return &EvaluationSetServiceUpdateEvaluationSetItemResult{}
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemResult) InitDefault() {
}

var EvaluationSetServiceUpdateEvaluationSetItemResult_Success_DEFAULT *UpdateEvaluationSetItemResponse

func (p *EvaluationSetServiceUpdateEvaluationSetItemResult) GetSuccess() (v *UpdateEvaluationSetItemResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceUpdateEvaluationSetItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceUpdateEvaluationSetItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateEvaluationSetItemResponse)
}

var fieldIDToName_EvaluationSetServiceUpdateEvaluationSetItemResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceUpdateEvaluationSetItemResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluationSetItemResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetItem_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceUpdateEvaluationSetItemResult(%+v)", *p)

}

func (p *EvaluationSetServiceUpdateEvaluationSetItemResult) DeepEqual(ano *EvaluationSetServiceUpdateEvaluationSetItemResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceUpdateEvaluationSetItemResult) Field0DeepEqual(src *UpdateEvaluationSetItemResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs struct {
	Req *BatchDeleteEvaluationSetItemsRequest `thrift:"req,1" frugal:"1,default,BatchDeleteEvaluationSetItemsRequest"`
}

func NewEvaluationSetServiceBatchDeleteEvaluationSetItemsArgs() *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs {
	return &EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs{}
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) InitDefault() {
}

var EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs_Req_DEFAULT *BatchDeleteEvaluationSetItemsRequest

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) GetReq() (v *BatchDeleteEvaluationSetItemsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) SetReq(val *BatchDeleteEvaluationSetItemsRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteEvaluationSetItemsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs(%+v)", *p)

}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) DeepEqual(ano *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs) Field1DeepEqual(src *BatchDeleteEvaluationSetItemsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceBatchDeleteEvaluationSetItemsResult struct {
	Success *BatchDeleteEvaluationSetItemsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchDeleteEvaluationSetItemsResponse"`
}

func NewEvaluationSetServiceBatchDeleteEvaluationSetItemsResult() *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult {
	return &EvaluationSetServiceBatchDeleteEvaluationSetItemsResult{}
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) InitDefault() {
}

var EvaluationSetServiceBatchDeleteEvaluationSetItemsResult_Success_DEFAULT *BatchDeleteEvaluationSetItemsResponse

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) GetSuccess() (v *BatchDeleteEvaluationSetItemsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceBatchDeleteEvaluationSetItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchDeleteEvaluationSetItemsResponse)
}

var fieldIDToName_EvaluationSetServiceBatchDeleteEvaluationSetItemsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceBatchDeleteEvaluationSetItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteEvaluationSetItemsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceBatchDeleteEvaluationSetItemsResult(%+v)", *p)

}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) DeepEqual(ano *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceBatchDeleteEvaluationSetItemsResult) Field0DeepEqual(src *BatchDeleteEvaluationSetItemsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceListEvaluationSetItemsArgs struct {
	Req *ListEvaluationSetItemsRequest `thrift:"req,1" frugal:"1,default,ListEvaluationSetItemsRequest"`
}

func NewEvaluationSetServiceListEvaluationSetItemsArgs() *EvaluationSetServiceListEvaluationSetItemsArgs {
	return &EvaluationSetServiceListEvaluationSetItemsArgs{}
}

func (p *EvaluationSetServiceListEvaluationSetItemsArgs) InitDefault() {
}

var EvaluationSetServiceListEvaluationSetItemsArgs_Req_DEFAULT *ListEvaluationSetItemsRequest

func (p *EvaluationSetServiceListEvaluationSetItemsArgs) GetReq() (v *ListEvaluationSetItemsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceListEvaluationSetItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceListEvaluationSetItemsArgs) SetReq(val *ListEvaluationSetItemsRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceListEvaluationSetItemsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceListEvaluationSetItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceListEvaluationSetItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceListEvaluationSetItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetItemsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceListEvaluationSetItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceListEvaluationSetItemsArgs(%+v)", *p)

}

func (p *EvaluationSetServiceListEvaluationSetItemsArgs) DeepEqual(ano *EvaluationSetServiceListEvaluationSetItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceListEvaluationSetItemsArgs) Field1DeepEqual(src *ListEvaluationSetItemsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceListEvaluationSetItemsResult struct {
	Success *ListEvaluationSetItemsResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluationSetItemsResponse"`
}

func NewEvaluationSetServiceListEvaluationSetItemsResult() *EvaluationSetServiceListEvaluationSetItemsResult {
	return &EvaluationSetServiceListEvaluationSetItemsResult{}
}

func (p *EvaluationSetServiceListEvaluationSetItemsResult) InitDefault() {
}

var EvaluationSetServiceListEvaluationSetItemsResult_Success_DEFAULT *ListEvaluationSetItemsResponse

func (p *EvaluationSetServiceListEvaluationSetItemsResult) GetSuccess() (v *ListEvaluationSetItemsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceListEvaluationSetItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceListEvaluationSetItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluationSetItemsResponse)
}

var fieldIDToName_EvaluationSetServiceListEvaluationSetItemsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceListEvaluationSetItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceListEvaluationSetItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceListEvaluationSetItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetItemsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceListEvaluationSetItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceListEvaluationSetItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceListEvaluationSetItemsResult(%+v)", *p)

}

func (p *EvaluationSetServiceListEvaluationSetItemsResult) DeepEqual(ano *EvaluationSetServiceListEvaluationSetItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceListEvaluationSetItemsResult) Field0DeepEqual(src *ListEvaluationSetItemsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceBatchGetEvaluationSetItemsArgs struct {
	Req *BatchGetEvaluationSetItemsRequest `thrift:"req,1" frugal:"1,default,BatchGetEvaluationSetItemsRequest"`
}

func NewEvaluationSetServiceBatchGetEvaluationSetItemsArgs() *EvaluationSetServiceBatchGetEvaluationSetItemsArgs {
	return &EvaluationSetServiceBatchGetEvaluationSetItemsArgs{}
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) InitDefault() {
}

var EvaluationSetServiceBatchGetEvaluationSetItemsArgs_Req_DEFAULT *BatchGetEvaluationSetItemsRequest

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) GetReq() (v *BatchGetEvaluationSetItemsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceBatchGetEvaluationSetItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) SetReq(val *BatchGetEvaluationSetItemsRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceBatchGetEvaluationSetItemsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceBatchGetEvaluationSetItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvaluationSetItemsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluationSetItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceBatchGetEvaluationSetItemsArgs(%+v)", *p)

}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) DeepEqual(ano *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsArgs) Field1DeepEqual(src *BatchGetEvaluationSetItemsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceBatchGetEvaluationSetItemsResult struct {
	Success *BatchGetEvaluationSetItemsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetEvaluationSetItemsResponse"`
}

func NewEvaluationSetServiceBatchGetEvaluationSetItemsResult() *EvaluationSetServiceBatchGetEvaluationSetItemsResult {
	return &EvaluationSetServiceBatchGetEvaluationSetItemsResult{}
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsResult) InitDefault() {
}

var EvaluationSetServiceBatchGetEvaluationSetItemsResult_Success_DEFAULT *BatchGetEvaluationSetItemsResponse

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsResult) GetSuccess() (v *BatchGetEvaluationSetItemsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceBatchGetEvaluationSetItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceBatchGetEvaluationSetItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetEvaluationSetItemsResponse)
}

var fieldIDToName_EvaluationSetServiceBatchGetEvaluationSetItemsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceBatchGetEvaluationSetItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvaluationSetItemsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluationSetItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceBatchGetEvaluationSetItemsResult(%+v)", *p)

}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsResult) DeepEqual(ano *EvaluationSetServiceBatchGetEvaluationSetItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceBatchGetEvaluationSetItemsResult) Field0DeepEqual(src *BatchGetEvaluationSetItemsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceClearEvaluationSetDraftItemArgs struct {
	Req *ClearEvaluationSetDraftItemRequest `thrift:"req,1" frugal:"1,default,ClearEvaluationSetDraftItemRequest"`
}

func NewEvaluationSetServiceClearEvaluationSetDraftItemArgs() *EvaluationSetServiceClearEvaluationSetDraftItemArgs {
	return &EvaluationSetServiceClearEvaluationSetDraftItemArgs{}
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemArgs) InitDefault() {
}

var EvaluationSetServiceClearEvaluationSetDraftItemArgs_Req_DEFAULT *ClearEvaluationSetDraftItemRequest

func (p *EvaluationSetServiceClearEvaluationSetDraftItemArgs) GetReq() (v *ClearEvaluationSetDraftItemRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationSetServiceClearEvaluationSetDraftItemArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationSetServiceClearEvaluationSetDraftItemArgs) SetReq(val *ClearEvaluationSetDraftItemRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationSetServiceClearEvaluationSetDraftItemArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceClearEvaluationSetDraftItemArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewClearEvaluationSetDraftItemRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearEvaluationSetDraftItem_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceClearEvaluationSetDraftItemArgs(%+v)", *p)

}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemArgs) DeepEqual(ano *EvaluationSetServiceClearEvaluationSetDraftItemArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemArgs) Field1DeepEqual(src *ClearEvaluationSetDraftItemRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetServiceClearEvaluationSetDraftItemResult struct {
	Success *ClearEvaluationSetDraftItemResponse `thrift:"success,0,optional" frugal:"0,optional,ClearEvaluationSetDraftItemResponse"`
}

func NewEvaluationSetServiceClearEvaluationSetDraftItemResult() *EvaluationSetServiceClearEvaluationSetDraftItemResult {
	return &EvaluationSetServiceClearEvaluationSetDraftItemResult{}
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemResult) InitDefault() {
}

var EvaluationSetServiceClearEvaluationSetDraftItemResult_Success_DEFAULT *ClearEvaluationSetDraftItemResponse

func (p *EvaluationSetServiceClearEvaluationSetDraftItemResult) GetSuccess() (v *ClearEvaluationSetDraftItemResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationSetServiceClearEvaluationSetDraftItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationSetServiceClearEvaluationSetDraftItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*ClearEvaluationSetDraftItemResponse)
}

var fieldIDToName_EvaluationSetServiceClearEvaluationSetDraftItemResult = map[int16]string{
	0: "success",
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetServiceClearEvaluationSetDraftItemResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewClearEvaluationSetDraftItemResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearEvaluationSetDraftItem_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetServiceClearEvaluationSetDraftItemResult(%+v)", *p)

}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemResult) DeepEqual(ano *EvaluationSetServiceClearEvaluationSetDraftItemResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationSetServiceClearEvaluationSetDraftItemResult) Field0DeepEqual(src *ClearEvaluationSetDraftItemResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
