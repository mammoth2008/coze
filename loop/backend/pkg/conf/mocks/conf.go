// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/pkg/conf (interfaces: IConfigLoader)
//
// Generated by this command:
//
//	mockgen -destination=mocks/conf.go -package=mocks . IConfigLoader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	conf "github.com/coze-dev/coze-loop/backend/pkg/conf"
	gomock "go.uber.org/mock/gomock"
)

// MockIConfigLoader is a mock of IConfigLoader interface.
type MockIConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigLoaderMockRecorder
	isgomock struct{}
}

// MockIConfigLoaderMockRecorder is the mock recorder for MockIConfigLoader.
type MockIConfigLoaderMockRecorder struct {
	mock *MockIConfigLoader
}

// NewMockIConfigLoader creates a new mock instance.
func NewMockIConfigLoader(ctrl *gomock.Controller) *MockIConfigLoader {
	mock := &MockIConfigLoader{ctrl: ctrl}
	mock.recorder = &MockIConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfigLoader) EXPECT() *MockIConfigLoaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIConfigLoader) Get(ctx context.Context, key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIConfigLoaderMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIConfigLoader)(nil).Get), ctx, key)
}

// Unmarshal mocks base method.
func (m *MockIConfigLoader) Unmarshal(ctx context.Context, value any, opts ...conf.DecodeOptionFn) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unmarshal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockIConfigLoaderMockRecorder) Unmarshal(ctx, value any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockIConfigLoader)(nil).Unmarshal), varargs...)
}

// UnmarshalKey mocks base method.
func (m *MockIConfigLoader) UnmarshalKey(ctx context.Context, key string, value any, opts ...conf.DecodeOptionFn) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnmarshalKey", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalKey indicates an expected call of UnmarshalKey.
func (mr *MockIConfigLoaderMockRecorder) UnmarshalKey(ctx, key, value any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalKey", reflect.TypeOf((*MockIConfigLoader)(nil).UnmarshalKey), varargs...)
}
