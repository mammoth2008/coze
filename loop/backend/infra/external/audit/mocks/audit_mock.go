// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/external/audit (interfaces: IAuditService)
//
// Generated by this command:
//
//	mockgen -destination mocks/audit_mock.go -package mocks . IAuditService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	audit "github.com/coze-dev/coze-loop/backend/infra/external/audit"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuditService is a mock of IAuditService interface.
type MockIAuditService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuditServiceMockRecorder
	isgomock struct{}
}

// MockIAuditServiceMockRecorder is the mock recorder for MockIAuditService.
type MockIAuditServiceMockRecorder struct {
	mock *MockIAuditService
}

// NewMockIAuditService creates a new mock instance.
func NewMockIAuditService(ctrl *gomock.Controller) *MockIAuditService {
	mock := &MockIAuditService{ctrl: ctrl}
	mock.recorder = &MockIAuditServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuditService) EXPECT() *MockIAuditServiceMockRecorder {
	return m.recorder
}

// Audit mocks base method.
func (m *MockIAuditService) Audit(ctx context.Context, param audit.AuditParam) (audit.AuditRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Audit", ctx, param)
	ret0, _ := ret[0].(audit.AuditRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Audit indicates an expected call of Audit.
func (mr *MockIAuditServiceMockRecorder) Audit(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Audit", reflect.TypeOf((*MockIAuditService)(nil).Audit), ctx, param)
}
