// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/metrics (interfaces: Metric)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/metrics.go --package mocks . Metric
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	metrics "github.com/coze-dev/coze-loop/backend/infra/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockMetric is a mock of Metric interface.
type MockMetric struct {
	ctrl     *gomock.Controller
	recorder *MockMetricMockRecorder
	isgomock struct{}
}

// MockMetricMockRecorder is the mock recorder for MockMetric.
type MockMetricMockRecorder struct {
	mock *MockMetric
}

// NewMockMetric creates a new mock instance.
func NewMockMetric(ctrl *gomock.Controller) *MockMetric {
	mock := &MockMetric{ctrl: ctrl}
	mock.recorder = &MockMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetric) EXPECT() *MockMetricMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockMetric) Emit(tags []metrics.T, values ...*metrics.Value) {
	m.ctrl.T.Helper()
	varargs := []any{tags}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Emit", varargs...)
}

// Emit indicates an expected call of Emit.
func (mr *MockMetricMockRecorder) Emit(tags any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{tags}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockMetric)(nil).Emit), varargs...)
}
