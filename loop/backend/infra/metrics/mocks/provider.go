// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/metrics (interfaces: Meter)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/provider.go --package mocks . Meter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	metrics "github.com/coze-dev/coze-loop/backend/infra/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockMeter is a mock of Meter interface.
type MockMeter struct {
	ctrl     *gomock.Controller
	recorder *MockMeterMockRecorder
	isgomock struct{}
}

// MockMeterMockRecorder is the mock recorder for MockMeter.
type MockMeterMockRecorder struct {
	mock *MockMeter
}

// NewMockMeter creates a new mock instance.
func NewMockMeter(ctrl *gomock.Controller) *MockMeter {
	mock := &MockMeter{ctrl: ctrl}
	mock.recorder = &MockMeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeter) EXPECT() *MockMeterMockRecorder {
	return m.recorder
}

// NewMetric mocks base method.
func (m *MockMeter) NewMetric(name string, types []metrics.MetricType, tagNames []string) (metrics.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMetric", name, types, tagNames)
	ret0, _ := ret[0].(metrics.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMetric indicates an expected call of NewMetric.
func (mr *MockMeterMockRecorder) NewMetric(name, types, tagNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMetric", reflect.TypeOf((*MockMeter)(nil).NewMetric), name, types, tagNames)
}
