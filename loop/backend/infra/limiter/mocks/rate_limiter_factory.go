// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/limiter (interfaces: IRateLimiterFactory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/rate_limiter_factory.go -package=mocks . IRateLimiterFactory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	limiter "github.com/coze-dev/coze-loop/backend/infra/limiter"
	gomock "go.uber.org/mock/gomock"
)

// MockIRateLimiterFactory is a mock of IRateLimiterFactory interface.
type MockIRateLimiterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIRateLimiterFactoryMockRecorder
}

// MockIRateLimiterFactoryMockRecorder is the mock recorder for MockIRateLimiterFactory.
type MockIRateLimiterFactoryMockRecorder struct {
	mock *MockIRateLimiterFactory
}

// NewMockIRateLimiterFactory creates a new mock instance.
func NewMockIRateLimiterFactory(ctrl *gomock.Controller) *MockIRateLimiterFactory {
	mock := &MockIRateLimiterFactory{ctrl: ctrl}
	mock.recorder = &MockIRateLimiterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRateLimiterFactory) EXPECT() *MockIRateLimiterFactoryMockRecorder {
	return m.recorder
}

// NewRateLimiter mocks base method.
func (m *MockIRateLimiterFactory) NewRateLimiter(arg0 ...limiter.FactoryOptionFn) limiter.IRateLimiter {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewRateLimiter", varargs...)
	ret0, _ := ret[0].(limiter.IRateLimiter)
	return ret0
}

// NewRateLimiter indicates an expected call of NewRateLimiter.
func (mr *MockIRateLimiterFactoryMockRecorder) NewRateLimiter(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRateLimiter", reflect.TypeOf((*MockIRateLimiterFactory)(nil).NewRateLimiter), arg0...)
}
