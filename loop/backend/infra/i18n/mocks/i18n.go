// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/i18n (interfaces: ITranslater)
//
// Generated by this command:
//
//	mockgen -destination=mocks/i18n.go -package=mocks . ITranslater
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockITranslater is a mock of ITranslater interface.
type MockITranslater struct {
	ctrl     *gomock.Controller
	recorder *MockITranslaterMockRecorder
	isgomock struct{}
}

// MockITranslaterMockRecorder is the mock recorder for MockITranslater.
type MockITranslaterMockRecorder struct {
	mock *MockITranslater
}

// NewMockITranslater creates a new mock instance.
func NewMockITranslater(ctrl *gomock.Controller) *MockITranslater {
	mock := &MockITranslater{ctrl: ctrl}
	mock.recorder = &MockITranslaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITranslater) EXPECT() *MockITranslaterMockRecorder {
	return m.recorder
}

// MustTranslate mocks base method.
func (m *MockITranslater) MustTranslate(ctx context.Context, key, lang string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustTranslate", ctx, key, lang)
	ret0, _ := ret[0].(string)
	return ret0
}

// MustTranslate indicates an expected call of MustTranslate.
func (mr *MockITranslaterMockRecorder) MustTranslate(ctx, key, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustTranslate", reflect.TypeOf((*MockITranslater)(nil).MustTranslate), ctx, key, lang)
}

// Translate mocks base method.
func (m *MockITranslater) Translate(ctx context.Context, key, lang string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", ctx, key, lang)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *MockITranslaterMockRecorder) Translate(ctx, key, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockITranslater)(nil).Translate), ctx, key, lang)
}
