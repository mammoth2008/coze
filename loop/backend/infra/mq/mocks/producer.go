// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/mq (interfaces: IProducer)
//
// Generated by this command:
//
//	mockgen -destination=mocks/producer.go -package=mocks . IProducer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mq "github.com/coze-dev/coze-loop/backend/infra/mq"
	gomock "go.uber.org/mock/gomock"
)

// MockIProducer is a mock of IProducer interface.
type MockIProducer struct {
	ctrl     *gomock.Controller
	recorder *MockIProducerMockRecorder
	isgomock struct{}
}

// MockIProducerMockRecorder is the mock recorder for MockIProducer.
type MockIProducerMockRecorder struct {
	mock *MockIProducer
}

// NewMockIProducer creates a new mock instance.
func NewMockIProducer(ctrl *gomock.Controller) *MockIProducer {
	mock := &MockIProducer{ctrl: ctrl}
	mock.recorder = &MockIProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProducer) EXPECT() *MockIProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIProducer)(nil).Close))
}

// Send mocks base method.
func (m *MockIProducer) Send(ctx context.Context, message *mq.Message) (mq.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, message)
	ret0, _ := ret[0].(mq.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockIProducerMockRecorder) Send(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIProducer)(nil).Send), ctx, message)
}

// SendAsync mocks base method.
func (m *MockIProducer) SendAsync(ctx context.Context, callback mq.AsyncSendCallback, message *mq.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAsync", ctx, callback, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAsync indicates an expected call of SendAsync.
func (mr *MockIProducerMockRecorder) SendAsync(ctx, callback, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAsync", reflect.TypeOf((*MockIProducer)(nil).SendAsync), ctx, callback, message)
}

// SendBatch mocks base method.
func (m *MockIProducer) SendBatch(ctx context.Context, messages []*mq.Message) (mq.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, messages)
	ret0, _ := ret[0].(mq.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockIProducerMockRecorder) SendBatch(ctx, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockIProducer)(nil).SendBatch), ctx, messages)
}

// Start mocks base method.
func (m *MockIProducer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIProducerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIProducer)(nil).Start))
}
