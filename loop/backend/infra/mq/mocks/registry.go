// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/mq (interfaces: ConsumerRegistry,IConsumerWorker)
//
// Generated by this command:
//
//	mockgen -destination=mocks/registry.go -package=mocks . ConsumerRegistry,IConsumerWorker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mq "github.com/coze-dev/coze-loop/backend/infra/mq"
	gomock "go.uber.org/mock/gomock"
)

// MockConsumerRegistry is a mock of ConsumerRegistry interface.
type MockConsumerRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerRegistryMockRecorder
	isgomock struct{}
}

// MockConsumerRegistryMockRecorder is the mock recorder for MockConsumerRegistry.
type MockConsumerRegistryMockRecorder struct {
	mock *MockConsumerRegistry
}

// NewMockConsumerRegistry creates a new mock instance.
func NewMockConsumerRegistry(ctrl *gomock.Controller) *MockConsumerRegistry {
	mock := &MockConsumerRegistry{ctrl: ctrl}
	mock.recorder = &MockConsumerRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerRegistry) EXPECT() *MockConsumerRegistryMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockConsumerRegistry) Register(worker []mq.IConsumerWorker) mq.ConsumerRegistry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", worker)
	ret0, _ := ret[0].(mq.ConsumerRegistry)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockConsumerRegistryMockRecorder) Register(worker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockConsumerRegistry)(nil).Register), worker)
}

// StartAll mocks base method.
func (m *MockConsumerRegistry) StartAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartAll indicates an expected call of StartAll.
func (mr *MockConsumerRegistryMockRecorder) StartAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAll", reflect.TypeOf((*MockConsumerRegistry)(nil).StartAll), ctx)
}

// MockIConsumerWorker is a mock of IConsumerWorker interface.
type MockIConsumerWorker struct {
	ctrl     *gomock.Controller
	recorder *MockIConsumerWorkerMockRecorder
	isgomock struct{}
}

// MockIConsumerWorkerMockRecorder is the mock recorder for MockIConsumerWorker.
type MockIConsumerWorkerMockRecorder struct {
	mock *MockIConsumerWorker
}

// NewMockIConsumerWorker creates a new mock instance.
func NewMockIConsumerWorker(ctrl *gomock.Controller) *MockIConsumerWorker {
	mock := &MockIConsumerWorker{ctrl: ctrl}
	mock.recorder = &MockIConsumerWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConsumerWorker) EXPECT() *MockIConsumerWorkerMockRecorder {
	return m.recorder
}

// ConsumerCfg mocks base method.
func (m *MockIConsumerWorker) ConsumerCfg(ctx context.Context) (*mq.ConsumerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumerCfg", ctx)
	ret0, _ := ret[0].(*mq.ConsumerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumerCfg indicates an expected call of ConsumerCfg.
func (mr *MockIConsumerWorkerMockRecorder) ConsumerCfg(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumerCfg", reflect.TypeOf((*MockIConsumerWorker)(nil).ConsumerCfg), ctx)
}

// HandleMessage mocks base method.
func (m *MockIConsumerWorker) HandleMessage(arg0 context.Context, arg1 *mq.MessageExt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockIConsumerWorkerMockRecorder) HandleMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockIConsumerWorker)(nil).HandleMessage), arg0, arg1)
}
