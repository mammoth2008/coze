// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/mq (interfaces: IConsumer)
//
// Generated by this command:
//
//	mockgen -destination=mocks/consumer.go -package=mocks . IConsumer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	mq "github.com/coze-dev/coze-loop/backend/infra/mq"
	gomock "go.uber.org/mock/gomock"
)

// MockIConsumer is a mock of IConsumer interface.
type MockIConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockIConsumerMockRecorder
	isgomock struct{}
}

// MockIConsumerMockRecorder is the mock recorder for MockIConsumer.
type MockIConsumerMockRecorder struct {
	mock *MockIConsumer
}

// NewMockIConsumer creates a new mock instance.
func NewMockIConsumer(ctrl *gomock.Controller) *MockIConsumer {
	mock := &MockIConsumer{ctrl: ctrl}
	mock.recorder = &MockIConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConsumer) EXPECT() *MockIConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIConsumer)(nil).Close))
}

// RegisterHandler mocks base method.
func (m *MockIConsumer) RegisterHandler(arg0 mq.IConsumerHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHandler", arg0)
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockIConsumerMockRecorder) RegisterHandler(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockIConsumer)(nil).RegisterHandler), arg0)
}

// Start mocks base method.
func (m *MockIConsumer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIConsumerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIConsumer)(nil).Start))
}
