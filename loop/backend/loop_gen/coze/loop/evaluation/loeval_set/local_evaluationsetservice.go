// Code generated by cozeloop. DO NOT EDIT.
package loeval_set // import github.com/coze-dev/coze-loop/backend/loeval_set

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/eval_set"
)

type LocalEvaluationSetService struct {
	impl eval_set.EvaluationSetService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalEvaluationSetService(impl eval_set.EvaluationSetService, mds ...endpoint.Middleware) *LocalEvaluationSetService {
	return &LocalEvaluationSetService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

// CreateEvaluationSet
// 基本信息管理
func (l *LocalEvaluationSetService) CreateEvaluationSet(ctx context.Context, req *eval_set.CreateEvaluationSetRequest, callOptions ...callopt.Option) (*eval_set.CreateEvaluationSetResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceCreateEvaluationSetArgs)
		result := out.(*eval_set.EvaluationSetServiceCreateEvaluationSetResult)
		resp, err := l.impl.CreateEvaluationSet(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceCreateEvaluationSetArgs{Req: req}
	result := &eval_set.EvaluationSetServiceCreateEvaluationSetResult{}
	ctx = l.injectRPCInfo(ctx, "CreateEvaluationSet")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) UpdateEvaluationSet(ctx context.Context, req *eval_set.UpdateEvaluationSetRequest, callOptions ...callopt.Option) (*eval_set.UpdateEvaluationSetResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceUpdateEvaluationSetArgs)
		result := out.(*eval_set.EvaluationSetServiceUpdateEvaluationSetResult)
		resp, err := l.impl.UpdateEvaluationSet(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceUpdateEvaluationSetArgs{Req: req}
	result := &eval_set.EvaluationSetServiceUpdateEvaluationSetResult{}
	ctx = l.injectRPCInfo(ctx, "UpdateEvaluationSet")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) DeleteEvaluationSet(ctx context.Context, req *eval_set.DeleteEvaluationSetRequest, callOptions ...callopt.Option) (*eval_set.DeleteEvaluationSetResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceDeleteEvaluationSetArgs)
		result := out.(*eval_set.EvaluationSetServiceDeleteEvaluationSetResult)
		resp, err := l.impl.DeleteEvaluationSet(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceDeleteEvaluationSetArgs{Req: req}
	result := &eval_set.EvaluationSetServiceDeleteEvaluationSetResult{}
	ctx = l.injectRPCInfo(ctx, "DeleteEvaluationSet")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) GetEvaluationSet(ctx context.Context, req *eval_set.GetEvaluationSetRequest, callOptions ...callopt.Option) (*eval_set.GetEvaluationSetResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceGetEvaluationSetArgs)
		result := out.(*eval_set.EvaluationSetServiceGetEvaluationSetResult)
		resp, err := l.impl.GetEvaluationSet(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceGetEvaluationSetArgs{Req: req}
	result := &eval_set.EvaluationSetServiceGetEvaluationSetResult{}
	ctx = l.injectRPCInfo(ctx, "GetEvaluationSet")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) ListEvaluationSets(ctx context.Context, req *eval_set.ListEvaluationSetsRequest, callOptions ...callopt.Option) (*eval_set.ListEvaluationSetsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceListEvaluationSetsArgs)
		result := out.(*eval_set.EvaluationSetServiceListEvaluationSetsResult)
		resp, err := l.impl.ListEvaluationSets(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceListEvaluationSetsArgs{Req: req}
	result := &eval_set.EvaluationSetServiceListEvaluationSetsResult{}
	ctx = l.injectRPCInfo(ctx, "ListEvaluationSets")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// CreateEvaluationSetVersion
// 版本管理
func (l *LocalEvaluationSetService) CreateEvaluationSetVersion(ctx context.Context, req *eval_set.CreateEvaluationSetVersionRequest, callOptions ...callopt.Option) (*eval_set.CreateEvaluationSetVersionResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceCreateEvaluationSetVersionArgs)
		result := out.(*eval_set.EvaluationSetServiceCreateEvaluationSetVersionResult)
		resp, err := l.impl.CreateEvaluationSetVersion(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceCreateEvaluationSetVersionArgs{Req: req}
	result := &eval_set.EvaluationSetServiceCreateEvaluationSetVersionResult{}
	ctx = l.injectRPCInfo(ctx, "CreateEvaluationSetVersion")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) GetEvaluationSetVersion(ctx context.Context, req *eval_set.GetEvaluationSetVersionRequest, callOptions ...callopt.Option) (*eval_set.GetEvaluationSetVersionResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceGetEvaluationSetVersionArgs)
		result := out.(*eval_set.EvaluationSetServiceGetEvaluationSetVersionResult)
		resp, err := l.impl.GetEvaluationSetVersion(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceGetEvaluationSetVersionArgs{Req: req}
	result := &eval_set.EvaluationSetServiceGetEvaluationSetVersionResult{}
	ctx = l.injectRPCInfo(ctx, "GetEvaluationSetVersion")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) ListEvaluationSetVersions(ctx context.Context, req *eval_set.ListEvaluationSetVersionsRequest, callOptions ...callopt.Option) (*eval_set.ListEvaluationSetVersionsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceListEvaluationSetVersionsArgs)
		result := out.(*eval_set.EvaluationSetServiceListEvaluationSetVersionsResult)
		resp, err := l.impl.ListEvaluationSetVersions(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceListEvaluationSetVersionsArgs{Req: req}
	result := &eval_set.EvaluationSetServiceListEvaluationSetVersionsResult{}
	ctx = l.injectRPCInfo(ctx, "ListEvaluationSetVersions")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) BatchGetEvaluationSetVersions(ctx context.Context, req *eval_set.BatchGetEvaluationSetVersionsRequest, callOptions ...callopt.Option) (*eval_set.BatchGetEvaluationSetVersionsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceBatchGetEvaluationSetVersionsArgs)
		result := out.(*eval_set.EvaluationSetServiceBatchGetEvaluationSetVersionsResult)
		resp, err := l.impl.BatchGetEvaluationSetVersions(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceBatchGetEvaluationSetVersionsArgs{Req: req}
	result := &eval_set.EvaluationSetServiceBatchGetEvaluationSetVersionsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetEvaluationSetVersions")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// UpdateEvaluationSetSchema
// 字段管理
func (l *LocalEvaluationSetService) UpdateEvaluationSetSchema(ctx context.Context, req *eval_set.UpdateEvaluationSetSchemaRequest, callOptions ...callopt.Option) (*eval_set.UpdateEvaluationSetSchemaResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceUpdateEvaluationSetSchemaArgs)
		result := out.(*eval_set.EvaluationSetServiceUpdateEvaluationSetSchemaResult)
		resp, err := l.impl.UpdateEvaluationSetSchema(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceUpdateEvaluationSetSchemaArgs{Req: req}
	result := &eval_set.EvaluationSetServiceUpdateEvaluationSetSchemaResult{}
	ctx = l.injectRPCInfo(ctx, "UpdateEvaluationSetSchema")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchCreateEvaluationSetItems
// 数据管理
func (l *LocalEvaluationSetService) BatchCreateEvaluationSetItems(ctx context.Context, req *eval_set.BatchCreateEvaluationSetItemsRequest, callOptions ...callopt.Option) (*eval_set.BatchCreateEvaluationSetItemsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceBatchCreateEvaluationSetItemsArgs)
		result := out.(*eval_set.EvaluationSetServiceBatchCreateEvaluationSetItemsResult)
		resp, err := l.impl.BatchCreateEvaluationSetItems(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceBatchCreateEvaluationSetItemsArgs{Req: req}
	result := &eval_set.EvaluationSetServiceBatchCreateEvaluationSetItemsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchCreateEvaluationSetItems")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) UpdateEvaluationSetItem(ctx context.Context, req *eval_set.UpdateEvaluationSetItemRequest, callOptions ...callopt.Option) (*eval_set.UpdateEvaluationSetItemResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceUpdateEvaluationSetItemArgs)
		result := out.(*eval_set.EvaluationSetServiceUpdateEvaluationSetItemResult)
		resp, err := l.impl.UpdateEvaluationSetItem(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceUpdateEvaluationSetItemArgs{Req: req}
	result := &eval_set.EvaluationSetServiceUpdateEvaluationSetItemResult{}
	ctx = l.injectRPCInfo(ctx, "UpdateEvaluationSetItem")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) BatchDeleteEvaluationSetItems(ctx context.Context, req *eval_set.BatchDeleteEvaluationSetItemsRequest, callOptions ...callopt.Option) (*eval_set.BatchDeleteEvaluationSetItemsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs)
		result := out.(*eval_set.EvaluationSetServiceBatchDeleteEvaluationSetItemsResult)
		resp, err := l.impl.BatchDeleteEvaluationSetItems(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceBatchDeleteEvaluationSetItemsArgs{Req: req}
	result := &eval_set.EvaluationSetServiceBatchDeleteEvaluationSetItemsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchDeleteEvaluationSetItems")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) ListEvaluationSetItems(ctx context.Context, req *eval_set.ListEvaluationSetItemsRequest, callOptions ...callopt.Option) (*eval_set.ListEvaluationSetItemsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceListEvaluationSetItemsArgs)
		result := out.(*eval_set.EvaluationSetServiceListEvaluationSetItemsResult)
		resp, err := l.impl.ListEvaluationSetItems(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceListEvaluationSetItemsArgs{Req: req}
	result := &eval_set.EvaluationSetServiceListEvaluationSetItemsResult{}
	ctx = l.injectRPCInfo(ctx, "ListEvaluationSetItems")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) BatchGetEvaluationSetItems(ctx context.Context, req *eval_set.BatchGetEvaluationSetItemsRequest, callOptions ...callopt.Option) (*eval_set.BatchGetEvaluationSetItemsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceBatchGetEvaluationSetItemsArgs)
		result := out.(*eval_set.EvaluationSetServiceBatchGetEvaluationSetItemsResult)
		resp, err := l.impl.BatchGetEvaluationSetItems(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceBatchGetEvaluationSetItemsArgs{Req: req}
	result := &eval_set.EvaluationSetServiceBatchGetEvaluationSetItemsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetEvaluationSetItems")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) ClearEvaluationSetDraftItem(ctx context.Context, req *eval_set.ClearEvaluationSetDraftItemRequest, callOptions ...callopt.Option) (*eval_set.ClearEvaluationSetDraftItemResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_set.EvaluationSetServiceClearEvaluationSetDraftItemArgs)
		result := out.(*eval_set.EvaluationSetServiceClearEvaluationSetDraftItemResult)
		resp, err := l.impl.ClearEvaluationSetDraftItem(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_set.EvaluationSetServiceClearEvaluationSetDraftItemArgs{Req: req}
	result := &eval_set.EvaluationSetServiceClearEvaluationSetDraftItemResult{}
	ctx = l.injectRPCInfo(ctx, "ClearEvaluationSetDraftItem")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSetService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("EvaluationSetService", method, nil, nil),
		rpcinfo.NewEndpointInfo("EvaluationSetService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
