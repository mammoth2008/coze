// Code generated by cozeloop. DO NOT EDIT.
package loevaluator // import github.com/coze-dev/coze-loop/backend/loevaluator

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/evaluator"
)

type LocalEvaluatorService struct {
	impl evaluator.EvaluatorService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalEvaluatorService(impl evaluator.EvaluatorService, mds ...endpoint.Middleware) *LocalEvaluatorService {
	return &LocalEvaluatorService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

// ListEvaluators
// 评估器
func (l *LocalEvaluatorService) ListEvaluators(ctx context.Context, request *evaluator.ListEvaluatorsRequest, callOptions ...callopt.Option) (*evaluator.ListEvaluatorsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceListEvaluatorsArgs)
		result := out.(*evaluator.EvaluatorServiceListEvaluatorsResult)
		resp, err := l.impl.ListEvaluators(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceListEvaluatorsArgs{Request: request}
	result := &evaluator.EvaluatorServiceListEvaluatorsResult{}
	ctx = l.injectRPCInfo(ctx, "ListEvaluators")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) BatchGetEvaluators(ctx context.Context, request *evaluator.BatchGetEvaluatorsRequest, callOptions ...callopt.Option) (*evaluator.BatchGetEvaluatorsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceBatchGetEvaluatorsArgs)
		result := out.(*evaluator.EvaluatorServiceBatchGetEvaluatorsResult)
		resp, err := l.impl.BatchGetEvaluators(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceBatchGetEvaluatorsArgs{Request: request}
	result := &evaluator.EvaluatorServiceBatchGetEvaluatorsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetEvaluators")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) GetEvaluator(ctx context.Context, request *evaluator.GetEvaluatorRequest, callOptions ...callopt.Option) (*evaluator.GetEvaluatorResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceGetEvaluatorArgs)
		result := out.(*evaluator.EvaluatorServiceGetEvaluatorResult)
		resp, err := l.impl.GetEvaluator(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceGetEvaluatorArgs{Request: request}
	result := &evaluator.EvaluatorServiceGetEvaluatorResult{}
	ctx = l.injectRPCInfo(ctx, "GetEvaluator")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) CreateEvaluator(ctx context.Context, request *evaluator.CreateEvaluatorRequest, callOptions ...callopt.Option) (*evaluator.CreateEvaluatorResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceCreateEvaluatorArgs)
		result := out.(*evaluator.EvaluatorServiceCreateEvaluatorResult)
		resp, err := l.impl.CreateEvaluator(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceCreateEvaluatorArgs{Request: request}
	result := &evaluator.EvaluatorServiceCreateEvaluatorResult{}
	ctx = l.injectRPCInfo(ctx, "CreateEvaluator")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) UpdateEvaluator(ctx context.Context, request *evaluator.UpdateEvaluatorRequest, callOptions ...callopt.Option) (*evaluator.UpdateEvaluatorResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceUpdateEvaluatorArgs)
		result := out.(*evaluator.EvaluatorServiceUpdateEvaluatorResult)
		resp, err := l.impl.UpdateEvaluator(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceUpdateEvaluatorArgs{Request: request}
	result := &evaluator.EvaluatorServiceUpdateEvaluatorResult{}
	ctx = l.injectRPCInfo(ctx, "UpdateEvaluator")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) UpdateEvaluatorDraft(ctx context.Context, request *evaluator.UpdateEvaluatorDraftRequest, callOptions ...callopt.Option) (*evaluator.UpdateEvaluatorDraftResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceUpdateEvaluatorDraftArgs)
		result := out.(*evaluator.EvaluatorServiceUpdateEvaluatorDraftResult)
		resp, err := l.impl.UpdateEvaluatorDraft(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceUpdateEvaluatorDraftArgs{Request: request}
	result := &evaluator.EvaluatorServiceUpdateEvaluatorDraftResult{}
	ctx = l.injectRPCInfo(ctx, "UpdateEvaluatorDraft")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) DeleteEvaluator(ctx context.Context, request *evaluator.DeleteEvaluatorRequest, callOptions ...callopt.Option) (*evaluator.DeleteEvaluatorResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceDeleteEvaluatorArgs)
		result := out.(*evaluator.EvaluatorServiceDeleteEvaluatorResult)
		resp, err := l.impl.DeleteEvaluator(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceDeleteEvaluatorArgs{Request: request}
	result := &evaluator.EvaluatorServiceDeleteEvaluatorResult{}
	ctx = l.injectRPCInfo(ctx, "DeleteEvaluator")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) CheckEvaluatorName(ctx context.Context, request *evaluator.CheckEvaluatorNameRequest, callOptions ...callopt.Option) (*evaluator.CheckEvaluatorNameResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceCheckEvaluatorNameArgs)
		result := out.(*evaluator.EvaluatorServiceCheckEvaluatorNameResult)
		resp, err := l.impl.CheckEvaluatorName(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceCheckEvaluatorNameArgs{Request: request}
	result := &evaluator.EvaluatorServiceCheckEvaluatorNameResult{}
	ctx = l.injectRPCInfo(ctx, "CheckEvaluatorName")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ListEvaluatorVersions
// 评估器版本
func (l *LocalEvaluatorService) ListEvaluatorVersions(ctx context.Context, request *evaluator.ListEvaluatorVersionsRequest, callOptions ...callopt.Option) (*evaluator.ListEvaluatorVersionsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceListEvaluatorVersionsArgs)
		result := out.(*evaluator.EvaluatorServiceListEvaluatorVersionsResult)
		resp, err := l.impl.ListEvaluatorVersions(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceListEvaluatorVersionsArgs{Request: request}
	result := &evaluator.EvaluatorServiceListEvaluatorVersionsResult{}
	ctx = l.injectRPCInfo(ctx, "ListEvaluatorVersions")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) GetEvaluatorVersion(ctx context.Context, request *evaluator.GetEvaluatorVersionRequest, callOptions ...callopt.Option) (*evaluator.GetEvaluatorVersionResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceGetEvaluatorVersionArgs)
		result := out.(*evaluator.EvaluatorServiceGetEvaluatorVersionResult)
		resp, err := l.impl.GetEvaluatorVersion(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceGetEvaluatorVersionArgs{Request: request}
	result := &evaluator.EvaluatorServiceGetEvaluatorVersionResult{}
	ctx = l.injectRPCInfo(ctx, "GetEvaluatorVersion")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) BatchGetEvaluatorVersions(ctx context.Context, request *evaluator.BatchGetEvaluatorVersionsRequest, callOptions ...callopt.Option) (*evaluator.BatchGetEvaluatorVersionsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceBatchGetEvaluatorVersionsArgs)
		result := out.(*evaluator.EvaluatorServiceBatchGetEvaluatorVersionsResult)
		resp, err := l.impl.BatchGetEvaluatorVersions(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceBatchGetEvaluatorVersionsArgs{Request: request}
	result := &evaluator.EvaluatorServiceBatchGetEvaluatorVersionsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetEvaluatorVersions")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) SubmitEvaluatorVersion(ctx context.Context, request *evaluator.SubmitEvaluatorVersionRequest, callOptions ...callopt.Option) (*evaluator.SubmitEvaluatorVersionResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceSubmitEvaluatorVersionArgs)
		result := out.(*evaluator.EvaluatorServiceSubmitEvaluatorVersionResult)
		resp, err := l.impl.SubmitEvaluatorVersion(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceSubmitEvaluatorVersionArgs{Request: request}
	result := &evaluator.EvaluatorServiceSubmitEvaluatorVersionResult{}
	ctx = l.injectRPCInfo(ctx, "SubmitEvaluatorVersion")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ListTemplates
// 评估器预置模版
func (l *LocalEvaluatorService) ListTemplates(ctx context.Context, request *evaluator.ListTemplatesRequest, callOptions ...callopt.Option) (*evaluator.ListTemplatesResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceListTemplatesArgs)
		result := out.(*evaluator.EvaluatorServiceListTemplatesResult)
		resp, err := l.impl.ListTemplates(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceListTemplatesArgs{Request: request}
	result := &evaluator.EvaluatorServiceListTemplatesResult{}
	ctx = l.injectRPCInfo(ctx, "ListTemplates")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) GetTemplateInfo(ctx context.Context, request *evaluator.GetTemplateInfoRequest, callOptions ...callopt.Option) (*evaluator.GetTemplateInfoResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceGetTemplateInfoArgs)
		result := out.(*evaluator.EvaluatorServiceGetTemplateInfoResult)
		resp, err := l.impl.GetTemplateInfo(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceGetTemplateInfoArgs{Request: request}
	result := &evaluator.EvaluatorServiceGetTemplateInfoResult{}
	ctx = l.injectRPCInfo(ctx, "GetTemplateInfo")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) GetDefaultPromptEvaluatorTools(ctx context.Context, req *evaluator.GetDefaultPromptEvaluatorToolsRequest, callOptions ...callopt.Option) (*evaluator.GetDefaultPromptEvaluatorToolsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs)
		result := out.(*evaluator.EvaluatorServiceGetDefaultPromptEvaluatorToolsResult)
		resp, err := l.impl.GetDefaultPromptEvaluatorTools(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs{Req: req}
	result := &evaluator.EvaluatorServiceGetDefaultPromptEvaluatorToolsResult{}
	ctx = l.injectRPCInfo(ctx, "GetDefaultPromptEvaluatorTools")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// RunEvaluator
// 评估器执行
func (l *LocalEvaluatorService) RunEvaluator(ctx context.Context, req *evaluator.RunEvaluatorRequest, callOptions ...callopt.Option) (*evaluator.RunEvaluatorResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceRunEvaluatorArgs)
		result := out.(*evaluator.EvaluatorServiceRunEvaluatorResult)
		resp, err := l.impl.RunEvaluator(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceRunEvaluatorArgs{Req: req}
	result := &evaluator.EvaluatorServiceRunEvaluatorResult{}
	ctx = l.injectRPCInfo(ctx, "RunEvaluator")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) DebugEvaluator(ctx context.Context, req *evaluator.DebugEvaluatorRequest, callOptions ...callopt.Option) (*evaluator.DebugEvaluatorResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceDebugEvaluatorArgs)
		result := out.(*evaluator.EvaluatorServiceDebugEvaluatorResult)
		resp, err := l.impl.DebugEvaluator(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceDebugEvaluatorArgs{Req: req}
	result := &evaluator.EvaluatorServiceDebugEvaluatorResult{}
	ctx = l.injectRPCInfo(ctx, "DebugEvaluator")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// UpdateEvaluatorRecord
// 评估器执行结果
func (l *LocalEvaluatorService) UpdateEvaluatorRecord(ctx context.Context, req *evaluator.UpdateEvaluatorRecordRequest, callOptions ...callopt.Option) (*evaluator.UpdateEvaluatorRecordResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceUpdateEvaluatorRecordArgs)
		result := out.(*evaluator.EvaluatorServiceUpdateEvaluatorRecordResult)
		resp, err := l.impl.UpdateEvaluatorRecord(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceUpdateEvaluatorRecordArgs{Req: req}
	result := &evaluator.EvaluatorServiceUpdateEvaluatorRecordResult{}
	ctx = l.injectRPCInfo(ctx, "UpdateEvaluatorRecord")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) GetEvaluatorRecord(ctx context.Context, req *evaluator.GetEvaluatorRecordRequest, callOptions ...callopt.Option) (*evaluator.GetEvaluatorRecordResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceGetEvaluatorRecordArgs)
		result := out.(*evaluator.EvaluatorServiceGetEvaluatorRecordResult)
		resp, err := l.impl.GetEvaluatorRecord(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceGetEvaluatorRecordArgs{Req: req}
	result := &evaluator.EvaluatorServiceGetEvaluatorRecordResult{}
	ctx = l.injectRPCInfo(ctx, "GetEvaluatorRecord")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) BatchGetEvaluatorRecords(ctx context.Context, req *evaluator.BatchGetEvaluatorRecordsRequest, callOptions ...callopt.Option) (*evaluator.BatchGetEvaluatorRecordsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*evaluator.EvaluatorServiceBatchGetEvaluatorRecordsArgs)
		result := out.(*evaluator.EvaluatorServiceBatchGetEvaluatorRecordsResult)
		resp, err := l.impl.BatchGetEvaluatorRecords(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &evaluator.EvaluatorServiceBatchGetEvaluatorRecordsArgs{Req: req}
	result := &evaluator.EvaluatorServiceBatchGetEvaluatorRecordsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetEvaluatorRecords")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluatorService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("EvaluatorService", method, nil, nil),
		rpcinfo.NewEndpointInfo("EvaluatorService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
