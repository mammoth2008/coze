// Code generated by cozeloop. DO NOT EDIT.
package lomanage // import github.com/coze-dev/coze-loop/backend/lomanage

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/manage"
)

type LocalLLMManageService struct {
	impl manage.LLMManageService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalLLMManageService(impl manage.LLMManageService, mds ...endpoint.Middleware) *LocalLLMManageService {
	return &LocalLLMManageService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

func (l *LocalLLMManageService) ListModels(ctx context.Context, req *manage.ListModelsRequest, callOptions ...callopt.Option) (*manage.ListModelsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.LLMManageServiceListModelsArgs)
		result := out.(*manage.LLMManageServiceListModelsResult)
		resp, err := l.impl.ListModels(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.LLMManageServiceListModelsArgs{Req: req}
	result := &manage.LLMManageServiceListModelsResult{}
	ctx = l.injectRPCInfo(ctx, "ListModels")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalLLMManageService) GetModel(ctx context.Context, req *manage.GetModelRequest, callOptions ...callopt.Option) (*manage.GetModelResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.LLMManageServiceGetModelArgs)
		result := out.(*manage.LLMManageServiceGetModelResult)
		resp, err := l.impl.GetModel(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.LLMManageServiceGetModelArgs{Req: req}
	result := &manage.LLMManageServiceGetModelResult{}
	ctx = l.injectRPCInfo(ctx, "GetModel")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalLLMManageService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("LLMManageService", method, nil, nil),
		rpcinfo.NewEndpointInfo("LLMManageService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
