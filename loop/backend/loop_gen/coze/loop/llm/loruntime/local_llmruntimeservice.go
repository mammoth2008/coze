// Code generated by cozeloop. DO NOT EDIT.
package loruntime // import github.com/coze-dev/coze-loop/backend/loruntime

import (
	"context"
	"fmt"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/client/callopt/streamcall"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/runtime"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/runtime/llmruntimeservice"
	"github.com/coze-dev/coze-loop/backend/loop_gen/infra/kitex/localstream"
)

type LocalLLMRuntimeService struct {
	impl runtime.LLMRuntimeService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalLLMRuntimeService(impl runtime.LLMRuntimeService, mds ...endpoint.Middleware) *LocalLLMRuntimeService {
	return &LocalLLMRuntimeService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

// Chat
// 非流式接口
func (l *LocalLLMRuntimeService) Chat(ctx context.Context, req *runtime.ChatRequest, callOptions ...callopt.Option) (*runtime.ChatResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*runtime.LLMRuntimeServiceChatArgs)
		result := out.(*runtime.LLMRuntimeServiceChatResult)
		resp, err := l.impl.Chat(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &runtime.LLMRuntimeServiceChatArgs{Req: req}
	result := &runtime.LLMRuntimeServiceChatResult{}
	ctx = l.injectRPCInfo(ctx, "Chat")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ChatStream
// 流式接口
func (l *LocalLLMRuntimeService) ChatStream(ctx context.Context, req *runtime.ChatRequest, callOptions ...streamcall.Option) (stream llmruntimeservice.LLMRuntimeService_ChatStreamClient, err error) {
	ctx = l.injectRPCInfo(ctx, "ChatStream")
	errCh := make(chan error)
	msgCh := make(chan *runtime.ChatResponse)
	ls := localstream.NewInMemStream(ctx, msgCh, errCh)

	go func() {
		defer func() {
			if r := recover(); r != nil {
				errCh <- fmt.Errorf("panic recovered: %v", r)
			}
		}()
		defer func() { _ = ls.CloseSend(ctx) }()

		if err := l.impl.ChatStream(ctx, req, ls); err != nil {
			errCh <- err
		}
	}()

	return ls, nil
}

func (l *LocalLLMRuntimeService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("LLMRuntimeService", method, nil, nil),
		rpcinfo.NewEndpointInfo("LLMRuntimeService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
