// Code generated by cozeloop. DO NOT EDIT.
package lodebug // import github.com/coze-dev/coze-loop/backend/lodebug

import (
	"context"
	"fmt"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/client/callopt/streamcall"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/debug"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/debug/promptdebugservice"
	"github.com/coze-dev/coze-loop/backend/loop_gen/infra/kitex/localstream"
)

type LocalPromptDebugService struct {
	impl debug.PromptDebugService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalPromptDebugService(impl debug.PromptDebugService, mds ...endpoint.Middleware) *LocalPromptDebugService {
	return &LocalPromptDebugService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

func (l *LocalPromptDebugService) DebugStreaming(ctx context.Context, req *debug.DebugStreamingRequest, callOptions ...streamcall.Option) (stream promptdebugservice.PromptDebugService_DebugStreamingClient, err error) {
	ctx = l.injectRPCInfo(ctx, "DebugStreaming")
	errCh := make(chan error)
	msgCh := make(chan *debug.DebugStreamingResponse)
	ls := localstream.NewInMemStream(ctx, msgCh, errCh)

	go func() {
		defer func() {
			if r := recover(); r != nil {
				errCh <- fmt.Errorf("panic recovered: %v", r)
			}
		}()
		defer func() { _ = ls.CloseSend(ctx) }()

		if err := l.impl.DebugStreaming(ctx, req, ls); err != nil {
			errCh <- err
		}
	}()

	return ls, nil
}

func (l *LocalPromptDebugService) SaveDebugContext(ctx context.Context, req *debug.SaveDebugContextRequest, callOptions ...callopt.Option) (*debug.SaveDebugContextResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*debug.PromptDebugServiceSaveDebugContextArgs)
		result := out.(*debug.PromptDebugServiceSaveDebugContextResult)
		resp, err := l.impl.SaveDebugContext(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &debug.PromptDebugServiceSaveDebugContextArgs{Req: req}
	result := &debug.PromptDebugServiceSaveDebugContextResult{}
	ctx = l.injectRPCInfo(ctx, "SaveDebugContext")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalPromptDebugService) GetDebugContext(ctx context.Context, req *debug.GetDebugContextRequest, callOptions ...callopt.Option) (*debug.GetDebugContextResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*debug.PromptDebugServiceGetDebugContextArgs)
		result := out.(*debug.PromptDebugServiceGetDebugContextResult)
		resp, err := l.impl.GetDebugContext(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &debug.PromptDebugServiceGetDebugContextArgs{Req: req}
	result := &debug.PromptDebugServiceGetDebugContextResult{}
	ctx = l.injectRPCInfo(ctx, "GetDebugContext")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalPromptDebugService) ListDebugHistory(ctx context.Context, req *debug.ListDebugHistoryRequest, callOptions ...callopt.Option) (*debug.ListDebugHistoryResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*debug.PromptDebugServiceListDebugHistoryArgs)
		result := out.(*debug.PromptDebugServiceListDebugHistoryResult)
		resp, err := l.impl.ListDebugHistory(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &debug.PromptDebugServiceListDebugHistoryArgs{Req: req}
	result := &debug.PromptDebugServiceListDebugHistoryResult{}
	ctx = l.injectRPCInfo(ctx, "ListDebugHistory")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalPromptDebugService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("PromptDebugService", method, nil, nil),
		rpcinfo.NewEndpointInfo("PromptDebugService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
