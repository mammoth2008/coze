// Code generated by cozeloop. DO NOT EDIT.
package loexecute // import github.com/coze-dev/coze-loop/backend/loexecute

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/execute"
)

type LocalPromptExecuteService struct {
	impl execute.PromptExecuteService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalPromptExecuteService(impl execute.PromptExecuteService, mds ...endpoint.Middleware) *LocalPromptExecuteService {
	return &LocalPromptExecuteService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

func (l *LocalPromptExecuteService) ExecuteInternal(ctx context.Context, req *execute.ExecuteInternalRequest, callOptions ...callopt.Option) (*execute.ExecuteInternalResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*execute.PromptExecuteServiceExecuteInternalArgs)
		result := out.(*execute.PromptExecuteServiceExecuteInternalResult)
		resp, err := l.impl.ExecuteInternal(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &execute.PromptExecuteServiceExecuteInternalArgs{Req: req}
	result := &execute.PromptExecuteServiceExecuteInternalResult{}
	ctx = l.injectRPCInfo(ctx, "ExecuteInternal")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalPromptExecuteService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("PromptExecuteService", method, nil, nil),
		rpcinfo.NewEndpointInfo("PromptExecuteService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
