// Code generated by cozeloop. DO NOT EDIT.
package lomanage // import github.com/coze-dev/coze-loop/backend/lomanage

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/manage"
)

type LocalPromptManageService struct {
	impl manage.PromptManageService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalPromptManageService(impl manage.PromptManageService, mds ...endpoint.Middleware) *LocalPromptManageService {
	return &LocalPromptManageService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

// CreatePrompt
// --------------- Prompt管理 --------------- //
// 增
func (l *LocalPromptManageService) CreatePrompt(ctx context.Context, request *manage.CreatePromptRequest, callOptions ...callopt.Option) (*manage.CreatePromptResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.PromptManageServiceCreatePromptArgs)
		result := out.(*manage.PromptManageServiceCreatePromptResult)
		resp, err := l.impl.CreatePrompt(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.PromptManageServiceCreatePromptArgs{Request: request}
	result := &manage.PromptManageServiceCreatePromptResult{}
	ctx = l.injectRPCInfo(ctx, "CreatePrompt")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalPromptManageService) ClonePrompt(ctx context.Context, request *manage.ClonePromptRequest, callOptions ...callopt.Option) (*manage.ClonePromptResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.PromptManageServiceClonePromptArgs)
		result := out.(*manage.PromptManageServiceClonePromptResult)
		resp, err := l.impl.ClonePrompt(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.PromptManageServiceClonePromptArgs{Request: request}
	result := &manage.PromptManageServiceClonePromptResult{}
	ctx = l.injectRPCInfo(ctx, "ClonePrompt")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// DeletePrompt
// 删
func (l *LocalPromptManageService) DeletePrompt(ctx context.Context, request *manage.DeletePromptRequest, callOptions ...callopt.Option) (*manage.DeletePromptResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.PromptManageServiceDeletePromptArgs)
		result := out.(*manage.PromptManageServiceDeletePromptResult)
		resp, err := l.impl.DeletePrompt(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.PromptManageServiceDeletePromptArgs{Request: request}
	result := &manage.PromptManageServiceDeletePromptResult{}
	ctx = l.injectRPCInfo(ctx, "DeletePrompt")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// GetPrompt
// 查
func (l *LocalPromptManageService) GetPrompt(ctx context.Context, request *manage.GetPromptRequest, callOptions ...callopt.Option) (*manage.GetPromptResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.PromptManageServiceGetPromptArgs)
		result := out.(*manage.PromptManageServiceGetPromptResult)
		resp, err := l.impl.GetPrompt(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.PromptManageServiceGetPromptArgs{Request: request}
	result := &manage.PromptManageServiceGetPromptResult{}
	ctx = l.injectRPCInfo(ctx, "GetPrompt")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalPromptManageService) BatchGetPrompt(ctx context.Context, request *manage.BatchGetPromptRequest, callOptions ...callopt.Option) (*manage.BatchGetPromptResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.PromptManageServiceBatchGetPromptArgs)
		result := out.(*manage.PromptManageServiceBatchGetPromptResult)
		resp, err := l.impl.BatchGetPrompt(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.PromptManageServiceBatchGetPromptArgs{Request: request}
	result := &manage.PromptManageServiceBatchGetPromptResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetPrompt")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalPromptManageService) ListPrompt(ctx context.Context, request *manage.ListPromptRequest, callOptions ...callopt.Option) (*manage.ListPromptResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.PromptManageServiceListPromptArgs)
		result := out.(*manage.PromptManageServiceListPromptResult)
		resp, err := l.impl.ListPrompt(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.PromptManageServiceListPromptArgs{Request: request}
	result := &manage.PromptManageServiceListPromptResult{}
	ctx = l.injectRPCInfo(ctx, "ListPrompt")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// UpdatePrompt
// 改
func (l *LocalPromptManageService) UpdatePrompt(ctx context.Context, request *manage.UpdatePromptRequest, callOptions ...callopt.Option) (*manage.UpdatePromptResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.PromptManageServiceUpdatePromptArgs)
		result := out.(*manage.PromptManageServiceUpdatePromptResult)
		resp, err := l.impl.UpdatePrompt(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.PromptManageServiceUpdatePromptArgs{Request: request}
	result := &manage.PromptManageServiceUpdatePromptResult{}
	ctx = l.injectRPCInfo(ctx, "UpdatePrompt")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalPromptManageService) SaveDraft(ctx context.Context, request *manage.SaveDraftRequest, callOptions ...callopt.Option) (*manage.SaveDraftResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.PromptManageServiceSaveDraftArgs)
		result := out.(*manage.PromptManageServiceSaveDraftResult)
		resp, err := l.impl.SaveDraft(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.PromptManageServiceSaveDraftArgs{Request: request}
	result := &manage.PromptManageServiceSaveDraftResult{}
	ctx = l.injectRPCInfo(ctx, "SaveDraft")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ListCommit
// --------------- Prompt版本管理 --------------- //
func (l *LocalPromptManageService) ListCommit(ctx context.Context, request *manage.ListCommitRequest, callOptions ...callopt.Option) (*manage.ListCommitResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.PromptManageServiceListCommitArgs)
		result := out.(*manage.PromptManageServiceListCommitResult)
		resp, err := l.impl.ListCommit(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.PromptManageServiceListCommitArgs{Request: request}
	result := &manage.PromptManageServiceListCommitResult{}
	ctx = l.injectRPCInfo(ctx, "ListCommit")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalPromptManageService) CommitDraft(ctx context.Context, request *manage.CommitDraftRequest, callOptions ...callopt.Option) (*manage.CommitDraftResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.PromptManageServiceCommitDraftArgs)
		result := out.(*manage.PromptManageServiceCommitDraftResult)
		resp, err := l.impl.CommitDraft(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.PromptManageServiceCommitDraftArgs{Request: request}
	result := &manage.PromptManageServiceCommitDraftResult{}
	ctx = l.injectRPCInfo(ctx, "CommitDraft")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalPromptManageService) RevertDraftFromCommit(ctx context.Context, request *manage.RevertDraftFromCommitRequest, callOptions ...callopt.Option) (*manage.RevertDraftFromCommitResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*manage.PromptManageServiceRevertDraftFromCommitArgs)
		result := out.(*manage.PromptManageServiceRevertDraftFromCommitResult)
		resp, err := l.impl.RevertDraftFromCommit(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &manage.PromptManageServiceRevertDraftFromCommitArgs{Request: request}
	result := &manage.PromptManageServiceRevertDraftFromCommitResult{}
	ctx = l.injectRPCInfo(ctx, "RevertDraftFromCommit")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalPromptManageService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("PromptManageService", method, nil, nil),
		rpcinfo.NewEndpointInfo("PromptManageService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
