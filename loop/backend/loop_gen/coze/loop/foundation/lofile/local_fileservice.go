// Code generated by cozeloop. DO NOT EDIT.
package lofile // import github.com/coze-dev/coze-loop/backend/lofile

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file"
)

type LocalFileService struct {
	impl file.FileService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalFileService(impl file.FileService, mds ...endpoint.Middleware) *LocalFileService {
	return &LocalFileService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

func (l *LocalFileService) UploadLoopFileInner(ctx context.Context, req *file.UploadLoopFileInnerRequest, callOptions ...callopt.Option) (*file.UploadLoopFileInnerResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*file.FileServiceUploadLoopFileInnerArgs)
		result := out.(*file.FileServiceUploadLoopFileInnerResult)
		resp, err := l.impl.UploadLoopFileInner(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &file.FileServiceUploadLoopFileInnerArgs{Req: req}
	result := &file.FileServiceUploadLoopFileInnerResult{}
	ctx = l.injectRPCInfo(ctx, "UploadLoopFileInner")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalFileService) SignUploadFile(ctx context.Context, req *file.SignUploadFileRequest, callOptions ...callopt.Option) (*file.SignUploadFileResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*file.FileServiceSignUploadFileArgs)
		result := out.(*file.FileServiceSignUploadFileResult)
		resp, err := l.impl.SignUploadFile(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &file.FileServiceSignUploadFileArgs{Req: req}
	result := &file.FileServiceSignUploadFileResult{}
	ctx = l.injectRPCInfo(ctx, "SignUploadFile")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalFileService) SignDownloadFile(ctx context.Context, req *file.SignDownloadFileRequest, callOptions ...callopt.Option) (*file.SignDownloadFileResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*file.FileServiceSignDownloadFileArgs)
		result := out.(*file.FileServiceSignDownloadFileResult)
		resp, err := l.impl.SignDownloadFile(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &file.FileServiceSignDownloadFileArgs{Req: req}
	result := &file.FileServiceSignDownloadFileResult{}
	ctx = l.injectRPCInfo(ctx, "SignDownloadFile")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalFileService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("FileService", method, nil, nil),
		rpcinfo.NewEndpointInfo("FileService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
