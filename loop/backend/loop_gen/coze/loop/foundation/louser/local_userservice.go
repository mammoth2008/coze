// Code generated by cozeloop. DO NOT EDIT.
package louser // import github.com/coze-dev/coze-loop/backend/louser

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user"
)

type LocalUserService struct {
	impl user.UserService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalUserService(impl user.UserService, mds ...endpoint.Middleware) *LocalUserService {
	return &LocalUserService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

// Register
// 用户注册相关接口
func (l *LocalUserService) Register(ctx context.Context, request *user.UserRegisterRequest, callOptions ...callopt.Option) (*user.UserRegisterResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*user.UserServiceRegisterArgs)
		result := out.(*user.UserServiceRegisterResult)
		resp, err := l.impl.Register(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &user.UserServiceRegisterArgs{Request: request}
	result := &user.UserServiceRegisterResult{}
	ctx = l.injectRPCInfo(ctx, "Register")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalUserService) ResetPassword(ctx context.Context, request *user.ResetPasswordRequest, callOptions ...callopt.Option) (*user.ResetPasswordResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*user.UserServiceResetPasswordArgs)
		result := out.(*user.UserServiceResetPasswordResult)
		resp, err := l.impl.ResetPassword(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &user.UserServiceResetPasswordArgs{Request: request}
	result := &user.UserServiceResetPasswordResult{}
	ctx = l.injectRPCInfo(ctx, "ResetPassword")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// LoginByPassword
// 用户登陆相关接口
func (l *LocalUserService) LoginByPassword(ctx context.Context, request *user.LoginByPasswordRequest, callOptions ...callopt.Option) (*user.LoginByPasswordResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*user.UserServiceLoginByPasswordArgs)
		result := out.(*user.UserServiceLoginByPasswordResult)
		resp, err := l.impl.LoginByPassword(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &user.UserServiceLoginByPasswordArgs{Request: request}
	result := &user.UserServiceLoginByPasswordResult{}
	ctx = l.injectRPCInfo(ctx, "LoginByPassword")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalUserService) Logout(ctx context.Context, request *user.LogoutRequest, callOptions ...callopt.Option) (*user.LogoutResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*user.UserServiceLogoutArgs)
		result := out.(*user.UserServiceLogoutResult)
		resp, err := l.impl.Logout(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &user.UserServiceLogoutArgs{Request: request}
	result := &user.UserServiceLogoutResult{}
	ctx = l.injectRPCInfo(ctx, "Logout")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ModifyUserProfile
// 修改用户资料相关接口
func (l *LocalUserService) ModifyUserProfile(ctx context.Context, request *user.ModifyUserProfileRequest, callOptions ...callopt.Option) (*user.ModifyUserProfileResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*user.UserServiceModifyUserProfileArgs)
		result := out.(*user.UserServiceModifyUserProfileResult)
		resp, err := l.impl.ModifyUserProfile(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &user.UserServiceModifyUserProfileArgs{Request: request}
	result := &user.UserServiceModifyUserProfileResult{}
	ctx = l.injectRPCInfo(ctx, "ModifyUserProfile")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// GetUserInfoByToken
// 基于登陆态获取用户信息相关接口
func (l *LocalUserService) GetUserInfoByToken(ctx context.Context, request *user.GetUserInfoByTokenRequest, callOptions ...callopt.Option) (*user.GetUserInfoByTokenResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*user.UserServiceGetUserInfoByTokenArgs)
		result := out.(*user.UserServiceGetUserInfoByTokenResult)
		resp, err := l.impl.GetUserInfoByToken(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &user.UserServiceGetUserInfoByTokenArgs{Request: request}
	result := &user.UserServiceGetUserInfoByTokenResult{}
	ctx = l.injectRPCInfo(ctx, "GetUserInfoByToken")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// GetUserInfo
// 获取用户信息
func (l *LocalUserService) GetUserInfo(ctx context.Context, request *user.GetUserInfoRequest, callOptions ...callopt.Option) (*user.GetUserInfoResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*user.UserServiceGetUserInfoArgs)
		result := out.(*user.UserServiceGetUserInfoResult)
		resp, err := l.impl.GetUserInfo(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &user.UserServiceGetUserInfoArgs{Request: request}
	result := &user.UserServiceGetUserInfoResult{}
	ctx = l.injectRPCInfo(ctx, "GetUserInfo")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// MGetUserInfo
// 批量获取用户信息
func (l *LocalUserService) MGetUserInfo(ctx context.Context, request *user.MGetUserInfoRequest, callOptions ...callopt.Option) (*user.MGetUserInfoResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*user.UserServiceMGetUserInfoArgs)
		result := out.(*user.UserServiceMGetUserInfoResult)
		resp, err := l.impl.MGetUserInfo(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &user.UserServiceMGetUserInfoArgs{Request: request}
	result := &user.UserServiceMGetUserInfoResult{}
	ctx = l.injectRPCInfo(ctx, "MGetUserInfo")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalUserService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("UserService", method, nil, nil),
		rpcinfo.NewEndpointInfo("UserService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
