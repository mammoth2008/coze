// Code generated by cozeloop. DO NOT EDIT.
package lospace // import github.com/coze-dev/coze-loop/backend/lospace

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/space"
)

type LocalSpaceService struct {
	impl space.SpaceService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalSpaceService(impl space.SpaceService, mds ...endpoint.Middleware) *LocalSpaceService {
	return &LocalSpaceService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

// GetSpace
// 查询空间信息
func (l *LocalSpaceService) GetSpace(ctx context.Context, request *space.GetSpaceRequest, callOptions ...callopt.Option) (*space.GetSpaceResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*space.SpaceServiceGetSpaceArgs)
		result := out.(*space.SpaceServiceGetSpaceResult)
		resp, err := l.impl.GetSpace(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &space.SpaceServiceGetSpaceArgs{Request: request}
	result := &space.SpaceServiceGetSpaceResult{}
	ctx = l.injectRPCInfo(ctx, "GetSpace")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ListUserSpaces
// 空间列表
func (l *LocalSpaceService) ListUserSpaces(ctx context.Context, request *space.ListUserSpaceRequest, callOptions ...callopt.Option) (*space.ListUserSpaceResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*space.SpaceServiceListUserSpacesArgs)
		result := out.(*space.SpaceServiceListUserSpacesResult)
		resp, err := l.impl.ListUserSpaces(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &space.SpaceServiceListUserSpacesArgs{Request: request}
	result := &space.SpaceServiceListUserSpacesResult{}
	ctx = l.injectRPCInfo(ctx, "ListUserSpaces")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalSpaceService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("SpaceService", method, nil, nil),
		rpcinfo.NewEndpointInfo("SpaceService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
